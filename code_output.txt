=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/.annotaterb.yml ===
---
:position: before
:position_in_additional_file_patterns: before
:position_in_class: before
:position_in_factory: before
:position_in_fixture: before
:position_in_routes: before
:position_in_serializer: before
:position_in_test: before
:classified_sort: true
:exclude_controllers: true
:exclude_factories: false
:exclude_fixtures: false
:exclude_helpers: true
:exclude_scaffolds: true
:exclude_serializers: false
:exclude_sti_subclasses: false
:exclude_tests: false
:force: false
:format_markdown: false
:format_rdoc: false
:format_yard: false
:frozen: false
:ignore_model_sub_dir: false
:ignore_unknown_models: false
:include_version: false
:show_check_constraints: false
:show_complete_foreign_keys: false
:show_foreign_keys: true
:show_indexes: true
:show_indexes_include: false
:simple_indexes: false
:sort: false
:timestamp: false
:trace: false
:with_comment: true
:with_column_comments: true
:with_table_comments: true
:position_of_column_comment: :with_name
:active_admin: false
:command:
:debug: false
:hide_default_column_types: ''
:hide_limit_column_types: ''
:timestamp_columns:
- created_at
- updated_at
:ignore_columns:
:ignore_routes:
:models: true
:routes: false
:skip_on_db_migrate: false
:target_action: :do_annotations
:wrapper:
:wrapper_close:
:wrapper_open:
:classes_default_to_s: []
:additional_file_patterns: []
:model_dir:
- app/models
:require: []
:root_dir:
- ''


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/.github/workflows/deploy.yml ===
name: Deploy
on:
  push:
    branches:
      - main
jobs:
  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only --debug --verbose
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/.github/workflows/tests.yml ===
name: Tests
on:
  push:
    branches:
      - '*'
      - '*/*'
      - '**'
    pull_request_target:
      branches:
        - master
jobs:
  linters:
    name: Linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn

      - name: Install packages
        run: |
          yarn install --pure-lockfile

      - name: Run rubocop
        run: |
          bundle exec rubocop --parallel

      - name: Run security checks
        run: |
          bundle exec bundler-audit --update
          bundle exec brakeman -q -w2

      - name: Run reek
        run: |
          bundle exec reek app config lib

      - name: Run reek
        run: |
          bundle exec rails_best_practices .

  tests:
    name: Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12.7
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: churp_test
          POSTGRES_PASSWORD: postgres
        ports: ["5432:5432"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Ruby and install gems
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn

      - name: Install packages
        run: |
          yarn install --pure-lockfile

      - name: Setup test database
        env:
          RAILS_ENV: test
          PGHOST: db
          PGUSER: postgres
        run: |
          bin/rails db:setup

      - name: Run tests
        run: bin/rspec

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/.rubocop.ext.yml ===
# frozen_string_literal: true

require:
  - rubocop-rails
  - rubocop-rake
  - rubocop-rspec
  - rubocop-thread_safety


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/.standard.yml ===
plugins:
  - standard-rails

extend_config:
  - .rubocop.ext.yml

Rails:
  Enabled: true

ignore:
  - '**/*':
    - Layout/SpaceInsideHashLiteralBraces
    - RSpec/FilePath
  - 'spec/requests/**/*':
    - RSpec/EmptyExampleGroup
    - RSpec/VariableName
  - 'spec/tasks/**/*':
    - RSpec/DescribeClass


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/assets/builds/application.js ===
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/adapters.js
  var adapters_default;
  var init_adapters = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/adapters.js"() {
      adapters_default = {
        logger: self.console,
        WebSocket: self.WebSocket
      };
    }
  });

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/logger.js
  var logger_default;
  var init_logger = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/logger.js"() {
      init_adapters();
      logger_default = {
        log(...messages) {
          if (this.enabled) {
            messages.push(Date.now());
            adapters_default.logger.log("[ActionCable]", ...messages);
          }
        }
      };
    }
  });

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/connection_monitor.js
  var now, secondsSince, ConnectionMonitor, connection_monitor_default;
  var init_connection_monitor = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/connection_monitor.js"() {
      init_logger();
      now = () => (/* @__PURE__ */ new Date()).getTime();
      secondsSince = (time) => (now() - time) / 1e3;
      ConnectionMonitor = class {
        constructor(connection) {
          this.visibilityDidChange = this.visibilityDidChange.bind(this);
          this.connection = connection;
          this.reconnectAttempts = 0;
        }
        start() {
          if (!this.isRunning()) {
            this.startedAt = now();
            delete this.stoppedAt;
            this.startPolling();
            addEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);
          }
        }
        stop() {
          if (this.isRunning()) {
            this.stoppedAt = now();
            this.stopPolling();
            removeEventListener("visibilitychange", this.visibilityDidChange);
            logger_default.log("ConnectionMonitor stopped");
          }
        }
        isRunning() {
          return this.startedAt && !this.stoppedAt;
        }
        recordPing() {
          this.pingedAt = now();
        }
        recordConnect() {
          this.reconnectAttempts = 0;
          this.recordPing();
          delete this.disconnectedAt;
          logger_default.log("ConnectionMonitor recorded connect");
        }
        recordDisconnect() {
          this.disconnectedAt = now();
          logger_default.log("ConnectionMonitor recorded disconnect");
        }
        // Private
        startPolling() {
          this.stopPolling();
          this.poll();
        }
        stopPolling() {
          clearTimeout(this.pollTimeout);
        }
        poll() {
          this.pollTimeout = setTimeout(
            () => {
              this.reconnectIfStale();
              this.poll();
            },
            this.getPollInterval()
          );
        }
        getPollInterval() {
          const { staleThreshold, reconnectionBackoffRate } = this.constructor;
          const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));
          const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;
          const jitter = jitterMax * Math.random();
          return staleThreshold * 1e3 * backoff * (1 + jitter);
        }
        reconnectIfStale() {
          if (this.connectionIsStale()) {
            logger_default.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);
            this.reconnectAttempts++;
            if (this.disconnectedRecently()) {
              logger_default.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince(this.disconnectedAt)} s`);
            } else {
              logger_default.log("ConnectionMonitor reopening");
              this.connection.reopen();
            }
          }
        }
        get refreshedAt() {
          return this.pingedAt ? this.pingedAt : this.startedAt;
        }
        connectionIsStale() {
          return secondsSince(this.refreshedAt) > this.constructor.staleThreshold;
        }
        disconnectedRecently() {
          return this.disconnectedAt && secondsSince(this.disconnectedAt) < this.constructor.staleThreshold;
        }
        visibilityDidChange() {
          if (document.visibilityState === "visible") {
            setTimeout(
              () => {
                if (this.connectionIsStale() || !this.connection.isOpen()) {
                  logger_default.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);
                  this.connection.reopen();
                }
              },
              200
            );
          }
        }
      };
      ConnectionMonitor.staleThreshold = 6;
      ConnectionMonitor.reconnectionBackoffRate = 0.15;
      connection_monitor_default = ConnectionMonitor;
    }
  });

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/internal.js
  var internal_default;
  var init_internal = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/internal.js"() {
      internal_default = {
        "message_types": {
          "welcome": "welcome",
          "disconnect": "disconnect",
          "ping": "ping",
          "confirmation": "confirm_subscription",
          "rejection": "reject_subscription"
        },
        "disconnect_reasons": {
          "unauthorized": "unauthorized",
          "invalid_request": "invalid_request",
          "server_restart": "server_restart"
        },
        "default_mount_path": "/cable",
        "protocols": [
          "actioncable-v1-json",
          "actioncable-unsupported"
        ]
      };
    }
  });

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/connection.js
  var message_types, protocols, supportedProtocols, indexOf, Connection, connection_default;
  var init_connection = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/connection.js"() {
      init_adapters();
      init_connection_monitor();
      init_internal();
      init_logger();
      ({ message_types, protocols } = internal_default);
      supportedProtocols = protocols.slice(0, protocols.length - 1);
      indexOf = [].indexOf;
      Connection = class {
        constructor(consumer2) {
          this.open = this.open.bind(this);
          this.consumer = consumer2;
          this.subscriptions = this.consumer.subscriptions;
          this.monitor = new connection_monitor_default(this);
          this.disconnected = true;
        }
        send(data) {
          if (this.isOpen()) {
            this.webSocket.send(JSON.stringify(data));
            return true;
          } else {
            return false;
          }
        }
        open() {
          if (this.isActive()) {
            logger_default.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);
            return false;
          } else {
            logger_default.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${protocols}`);
            if (this.webSocket) {
              this.uninstallEventHandlers();
            }
            this.webSocket = new adapters_default.WebSocket(this.consumer.url, protocols);
            this.installEventHandlers();
            this.monitor.start();
            return true;
          }
        }
        close({ allowReconnect } = { allowReconnect: true }) {
          if (!allowReconnect) {
            this.monitor.stop();
          }
          if (this.isOpen()) {
            return this.webSocket.close();
          }
        }
        reopen() {
          logger_default.log(`Reopening WebSocket, current state is ${this.getState()}`);
          if (this.isActive()) {
            try {
              return this.close();
            } catch (error2) {
              logger_default.log("Failed to reopen WebSocket", error2);
            } finally {
              logger_default.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);
              setTimeout(this.open, this.constructor.reopenDelay);
            }
          } else {
            return this.open();
          }
        }
        getProtocol() {
          if (this.webSocket) {
            return this.webSocket.protocol;
          }
        }
        isOpen() {
          return this.isState("open");
        }
        isActive() {
          return this.isState("open", "connecting");
        }
        // Private
        isProtocolSupported() {
          return indexOf.call(supportedProtocols, this.getProtocol()) >= 0;
        }
        isState(...states) {
          return indexOf.call(states, this.getState()) >= 0;
        }
        getState() {
          if (this.webSocket) {
            for (let state in adapters_default.WebSocket) {
              if (adapters_default.WebSocket[state] === this.webSocket.readyState) {
                return state.toLowerCase();
              }
            }
          }
          return null;
        }
        installEventHandlers() {
          for (let eventName in this.events) {
            const handler = this.events[eventName].bind(this);
            this.webSocket[`on${eventName}`] = handler;
          }
        }
        uninstallEventHandlers() {
          for (let eventName in this.events) {
            this.webSocket[`on${eventName}`] = function() {
            };
          }
        }
      };
      Connection.reopenDelay = 500;
      Connection.prototype.events = {
        message(event) {
          if (!this.isProtocolSupported()) {
            return;
          }
          const { identifier, message, reason, reconnect, type } = JSON.parse(event.data);
          switch (type) {
            case message_types.welcome:
              this.monitor.recordConnect();
              return this.subscriptions.reload();
            case message_types.disconnect:
              logger_default.log(`Disconnecting. Reason: ${reason}`);
              return this.close({ allowReconnect: reconnect });
            case message_types.ping:
              return this.monitor.recordPing();
            case message_types.confirmation:
              this.subscriptions.confirmSubscription(identifier);
              return this.subscriptions.notify(identifier, "connected");
            case message_types.rejection:
              return this.subscriptions.reject(identifier);
            default:
              return this.subscriptions.notify(identifier, "received", message);
          }
        },
        open() {
          logger_default.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);
          this.disconnected = false;
          if (!this.isProtocolSupported()) {
            logger_default.log("Protocol is unsupported. Stopping monitor and disconnecting.");
            return this.close({ allowReconnect: false });
          }
        },
        close(event) {
          logger_default.log("WebSocket onclose event");
          if (this.disconnected) {
            return;
          }
          this.disconnected = true;
          this.monitor.recordDisconnect();
          return this.subscriptions.notifyAll("disconnected", { willAttemptReconnect: this.monitor.isRunning() });
        },
        error() {
          logger_default.log("WebSocket onerror event");
        }
      };
      connection_default = Connection;
    }
  });

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/subscription.js
  var extend, Subscription;
  var init_subscription = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/subscription.js"() {
      extend = function(object, properties) {
        if (properties != null) {
          for (let key in properties) {
            const value = properties[key];
            object[key] = value;
          }
        }
        return object;
      };
      Subscription = class {
        constructor(consumer2, params = {}, mixin) {
          this.consumer = consumer2;
          this.identifier = JSON.stringify(params);
          extend(this, mixin);
        }
        // Perform a channel action with the optional data passed as an attribute
        perform(action, data = {}) {
          data.action = action;
          return this.send(data);
        }
        send(data) {
          return this.consumer.send({ command: "message", identifier: this.identifier, data: JSON.stringify(data) });
        }
        unsubscribe() {
          return this.consumer.subscriptions.remove(this);
        }
      };
    }
  });

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/subscription_guarantor.js
  var SubscriptionGuarantor, subscription_guarantor_default;
  var init_subscription_guarantor = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/subscription_guarantor.js"() {
      init_logger();
      SubscriptionGuarantor = class {
        constructor(subscriptions) {
          this.subscriptions = subscriptions;
          this.pendingSubscriptions = [];
        }
        guarantee(subscription) {
          if (this.pendingSubscriptions.indexOf(subscription) == -1) {
            logger_default.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);
            this.pendingSubscriptions.push(subscription);
          } else {
            logger_default.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);
          }
          this.startGuaranteeing();
        }
        forget(subscription) {
          logger_default.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);
          this.pendingSubscriptions = this.pendingSubscriptions.filter((s2) => s2 !== subscription);
        }
        startGuaranteeing() {
          this.stopGuaranteeing();
          this.retrySubscribing();
        }
        stopGuaranteeing() {
          clearTimeout(this.retryTimeout);
        }
        retrySubscribing() {
          this.retryTimeout = setTimeout(
            () => {
              if (this.subscriptions && typeof this.subscriptions.subscribe === "function") {
                this.pendingSubscriptions.map((subscription) => {
                  logger_default.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);
                  this.subscriptions.subscribe(subscription);
                });
              }
            },
            500
          );
        }
      };
      subscription_guarantor_default = SubscriptionGuarantor;
    }
  });

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/subscriptions.js
  var Subscriptions;
  var init_subscriptions = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/subscriptions.js"() {
      init_subscription();
      init_subscription_guarantor();
      init_logger();
      Subscriptions = class {
        constructor(consumer2) {
          this.consumer = consumer2;
          this.guarantor = new subscription_guarantor_default(this);
          this.subscriptions = [];
        }
        create(channelName, mixin) {
          const channel = channelName;
          const params = typeof channel === "object" ? channel : { channel };
          const subscription = new Subscription(this.consumer, params, mixin);
          return this.add(subscription);
        }
        // Private
        add(subscription) {
          this.subscriptions.push(subscription);
          this.consumer.ensureActiveConnection();
          this.notify(subscription, "initialized");
          this.subscribe(subscription);
          return subscription;
        }
        remove(subscription) {
          this.forget(subscription);
          if (!this.findAll(subscription.identifier).length) {
            this.sendCommand(subscription, "unsubscribe");
          }
          return subscription;
        }
        reject(identifier) {
          return this.findAll(identifier).map((subscription) => {
            this.forget(subscription);
            this.notify(subscription, "rejected");
            return subscription;
          });
        }
        forget(subscription) {
          this.guarantor.forget(subscription);
          this.subscriptions = this.subscriptions.filter((s2) => s2 !== subscription);
          return subscription;
        }
        findAll(identifier) {
          return this.subscriptions.filter((s2) => s2.identifier === identifier);
        }
        reload() {
          return this.subscriptions.map((subscription) => this.subscribe(subscription));
        }
        notifyAll(callbackName, ...args) {
          return this.subscriptions.map((subscription) => this.notify(subscription, callbackName, ...args));
        }
        notify(subscription, callbackName, ...args) {
          let subscriptions;
          if (typeof subscription === "string") {
            subscriptions = this.findAll(subscription);
          } else {
            subscriptions = [subscription];
          }
          return subscriptions.map((subscription2) => typeof subscription2[callbackName] === "function" ? subscription2[callbackName](...args) : void 0);
        }
        subscribe(subscription) {
          if (this.sendCommand(subscription, "subscribe")) {
            this.guarantor.guarantee(subscription);
          }
        }
        confirmSubscription(identifier) {
          logger_default.log(`Subscription confirmed ${identifier}`);
          this.findAll(identifier).map((subscription) => this.guarantor.forget(subscription));
        }
        sendCommand(subscription, command) {
          const { identifier } = subscription;
          return this.consumer.send({ command, identifier });
        }
      };
    }
  });

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/consumer.js
  function createWebSocketURL(url) {
    if (typeof url === "function") {
      url = url();
    }
    if (url && !/^wss?:/i.test(url)) {
      const a2 = document.createElement("a");
      a2.href = url;
      a2.href = a2.href;
      a2.protocol = a2.protocol.replace("http", "ws");
      return a2.href;
    } else {
      return url;
    }
  }
  var Consumer;
  var init_consumer = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/consumer.js"() {
      init_connection();
      init_subscriptions();
      Consumer = class {
        constructor(url) {
          this._url = url;
          this.subscriptions = new Subscriptions(this);
          this.connection = new connection_default(this);
        }
        get url() {
          return createWebSocketURL(this._url);
        }
        send(data) {
          return this.connection.send(data);
        }
        connect() {
          return this.connection.open();
        }
        disconnect() {
          return this.connection.close({ allowReconnect: false });
        }
        ensureActiveConnection() {
          if (!this.connection.isActive()) {
            return this.connection.open();
          }
        }
      };
    }
  });

  // node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/index.js
  var src_exports = {};
  __export(src_exports, {
    Connection: () => connection_default,
    ConnectionMonitor: () => connection_monitor_default,
    Consumer: () => Consumer,
    INTERNAL: () => internal_default,
    Subscription: () => Subscription,
    SubscriptionGuarantor: () => subscription_guarantor_default,
    Subscriptions: () => Subscriptions,
    adapters: () => adapters_default,
    createConsumer: () => createConsumer,
    createWebSocketURL: () => createWebSocketURL,
    getConfig: () => getConfig,
    logger: () => logger_default
  });
  function createConsumer(url = getConfig("url") || internal_default.default_mount_path) {
    return new Consumer(url);
  }
  function getConfig(name) {
    const element = document.head.querySelector(`meta[name='action-cable-${name}']`);
    if (element) {
      return element.getAttribute("content");
    }
  }
  var init_src = __esm({
    "node_modules/@hotwired/turbo-rails/node_modules/@rails/actioncable/src/index.js"() {
      init_connection();
      init_connection_monitor();
      init_consumer();
      init_internal();
      init_subscription();
      init_subscriptions();
      init_subscription_guarantor();
      init_adapters();
      init_logger();
    }
  });

  // node_modules/tributejs/dist/tribute.min.js
  var require_tribute_min = __commonJS({
    "node_modules/tributejs/dist/tribute.min.js"(exports, module) {
      !function(e2, t2) {
        "object" == typeof exports && "undefined" != typeof module ? module.exports = t2() : "function" == typeof define && define.amd ? define(t2) : (e2 = e2 || self).Tribute = t2();
      }(exports, function() {
        "use strict";
        function e2(e3, t3) {
          if (!(e3 instanceof t3))
            throw new TypeError("Cannot call a class as a function");
        }
        function t2(e3, t3) {
          for (var n3 = 0; n3 < t3.length; n3++) {
            var i3 = t3[n3];
            i3.enumerable = i3.enumerable || false, i3.configurable = true, "value" in i3 && (i3.writable = true), Object.defineProperty(e3, i3.key, i3);
          }
        }
        function n2(e3, n3, i3) {
          return n3 && t2(e3.prototype, n3), i3 && t2(e3, i3), e3;
        }
        function i2(e3, t3) {
          return function(e4) {
            if (Array.isArray(e4))
              return e4;
          }(e3) || function(e4, t4) {
            if (!(Symbol.iterator in Object(e4) || "[object Arguments]" === Object.prototype.toString.call(e4)))
              return;
            var n3 = [], i3 = true, r4 = false, o3 = void 0;
            try {
              for (var u3, l3 = e4[Symbol.iterator](); !(i3 = (u3 = l3.next()).done) && (n3.push(u3.value), !t4 || n3.length !== t4); i3 = true)
                ;
            } catch (e5) {
              r4 = true, o3 = e5;
            } finally {
              try {
                i3 || null == l3.return || l3.return();
              } finally {
                if (r4)
                  throw o3;
              }
            }
            return n3;
          }(e3, t3) || function() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }();
        }
        if (Array.prototype.find || (Array.prototype.find = function(e3) {
          if (null === this)
            throw new TypeError("Array.prototype.find called on null or undefined");
          if ("function" != typeof e3)
            throw new TypeError("predicate must be a function");
          for (var t3, n3 = Object(this), i3 = n3.length >>> 0, r4 = arguments[1], o3 = 0; o3 < i3; o3++)
            if (t3 = n3[o3], e3.call(r4, t3, o3, n3))
              return t3;
        }), window && "function" != typeof window.CustomEvent) {
          var r3 = function(e3, t3) {
            t3 = t3 || { bubbles: false, cancelable: false, detail: void 0 };
            var n3 = document.createEvent("CustomEvent");
            return n3.initCustomEvent(e3, t3.bubbles, t3.cancelable, t3.detail), n3;
          };
          void 0 !== window.Event && (r3.prototype = window.Event.prototype), window.CustomEvent = r3;
        }
        var o2 = function() {
          function t3(n3) {
            e2(this, t3), this.tribute = n3, this.tribute.events = this;
          }
          return n2(t3, [{ key: "bind", value: function(e3) {
            e3.boundKeydown = this.keydown.bind(e3, this), e3.boundKeyup = this.keyup.bind(e3, this), e3.boundInput = this.input.bind(e3, this), e3.addEventListener("keydown", e3.boundKeydown, false), e3.addEventListener("keyup", e3.boundKeyup, false), e3.addEventListener("input", e3.boundInput, false);
          } }, { key: "unbind", value: function(e3) {
            e3.removeEventListener("keydown", e3.boundKeydown, false), e3.removeEventListener("keyup", e3.boundKeyup, false), e3.removeEventListener("input", e3.boundInput, false), delete e3.boundKeydown, delete e3.boundKeyup, delete e3.boundInput;
          } }, { key: "keydown", value: function(e3, n3) {
            e3.shouldDeactivate(n3) && (e3.tribute.isActive = false, e3.tribute.hideMenu());
            var i3 = this;
            e3.commandEvent = false, t3.keys().forEach(function(t4) {
              t4.key === n3.keyCode && (e3.commandEvent = true, e3.callbacks()[t4.value.toLowerCase()](n3, i3));
            });
          } }, { key: "input", value: function(e3, t4) {
            e3.inputEvent = true, e3.keyup.call(this, e3, t4);
          } }, { key: "click", value: function(e3, t4) {
            var n3 = e3.tribute;
            if (n3.menu && n3.menu.contains(t4.target)) {
              var i3 = t4.target;
              for (t4.preventDefault(), t4.stopPropagation(); "li" !== i3.nodeName.toLowerCase(); )
                if (!(i3 = i3.parentNode) || i3 === n3.menu)
                  throw new Error("cannot find the <li> container for the click");
              n3.selectItemAtIndex(i3.getAttribute("data-index"), t4), n3.hideMenu();
            } else
              n3.current.element && !n3.current.externalTrigger && (n3.current.externalTrigger = false, setTimeout(function() {
                return n3.hideMenu();
              }));
          } }, { key: "keyup", value: function(e3, t4) {
            if (e3.inputEvent && (e3.inputEvent = false), e3.updateSelection(this), 27 !== t4.keyCode) {
              if (!e3.tribute.allowSpaces && e3.tribute.hasTrailingSpace)
                return e3.tribute.hasTrailingSpace = false, e3.commandEvent = true, void e3.callbacks().space(t4, this);
              if (!e3.tribute.isActive)
                if (e3.tribute.autocompleteMode)
                  e3.callbacks().triggerChar(t4, this, "");
                else {
                  var n3 = e3.getKeyCode(e3, this, t4);
                  if (isNaN(n3) || !n3)
                    return;
                  var i3 = e3.tribute.triggers().find(function(e4) {
                    return e4.charCodeAt(0) === n3;
                  });
                  void 0 !== i3 && e3.callbacks().triggerChar(t4, this, i3);
                }
              e3.tribute.current.mentionText.length < e3.tribute.current.collection.menuShowMinLength || ((e3.tribute.current.trigger || e3.tribute.autocompleteMode) && false === e3.commandEvent || e3.tribute.isActive && 8 === t4.keyCode) && e3.tribute.showMenuFor(this, true);
            }
          } }, { key: "shouldDeactivate", value: function(e3) {
            if (!this.tribute.isActive)
              return false;
            if (0 === this.tribute.current.mentionText.length) {
              var n3 = false;
              return t3.keys().forEach(function(t4) {
                e3.keyCode === t4.key && (n3 = true);
              }), !n3;
            }
            return false;
          } }, { key: "getKeyCode", value: function(e3, t4, n3) {
            var i3 = e3.tribute, r4 = i3.range.getTriggerInfo(false, i3.hasTrailingSpace, true, i3.allowSpaces, i3.autocompleteMode);
            return !!r4 && r4.mentionTriggerChar.charCodeAt(0);
          } }, { key: "updateSelection", value: function(e3) {
            this.tribute.current.element = e3;
            var t4 = this.tribute.range.getTriggerInfo(false, this.tribute.hasTrailingSpace, true, this.tribute.allowSpaces, this.tribute.autocompleteMode);
            t4 && (this.tribute.current.selectedPath = t4.mentionSelectedPath, this.tribute.current.mentionText = t4.mentionText, this.tribute.current.selectedOffset = t4.mentionSelectedOffset);
          } }, { key: "callbacks", value: function() {
            var e3 = this;
            return { triggerChar: function(t4, n3, i3) {
              var r4 = e3.tribute;
              r4.current.trigger = i3;
              var o3 = r4.collection.find(function(e4) {
                return e4.trigger === i3;
              });
              r4.current.collection = o3, r4.current.mentionText.length >= r4.current.collection.menuShowMinLength && r4.inputEvent && r4.showMenuFor(n3, true);
            }, enter: function(t4, n3) {
              e3.tribute.isActive && e3.tribute.current.filteredItems && (t4.preventDefault(), t4.stopPropagation(), setTimeout(function() {
                e3.tribute.selectItemAtIndex(e3.tribute.menuSelected, t4), e3.tribute.hideMenu();
              }, 0));
            }, escape: function(t4, n3) {
              e3.tribute.isActive && (t4.preventDefault(), t4.stopPropagation(), e3.tribute.isActive = false, e3.tribute.hideMenu());
            }, tab: function(t4, n3) {
              e3.callbacks().enter(t4, n3);
            }, space: function(t4, n3) {
              e3.tribute.isActive && (e3.tribute.spaceSelectsMatch ? e3.callbacks().enter(t4, n3) : e3.tribute.allowSpaces || (t4.stopPropagation(), setTimeout(function() {
                e3.tribute.hideMenu(), e3.tribute.isActive = false;
              }, 0)));
            }, up: function(t4, n3) {
              if (e3.tribute.isActive && e3.tribute.current.filteredItems) {
                t4.preventDefault(), t4.stopPropagation();
                var i3 = e3.tribute.current.filteredItems.length, r4 = e3.tribute.menuSelected;
                i3 > r4 && r4 > 0 ? (e3.tribute.menuSelected--, e3.setActiveLi()) : 0 === r4 && (e3.tribute.menuSelected = i3 - 1, e3.setActiveLi(), e3.tribute.menu.scrollTop = e3.tribute.menu.scrollHeight);
              }
            }, down: function(t4, n3) {
              if (e3.tribute.isActive && e3.tribute.current.filteredItems) {
                t4.preventDefault(), t4.stopPropagation();
                var i3 = e3.tribute.current.filteredItems.length - 1, r4 = e3.tribute.menuSelected;
                i3 > r4 ? (e3.tribute.menuSelected++, e3.setActiveLi()) : i3 === r4 && (e3.tribute.menuSelected = 0, e3.setActiveLi(), e3.tribute.menu.scrollTop = 0);
              }
            }, delete: function(t4, n3) {
              e3.tribute.isActive && e3.tribute.current.mentionText.length < 1 ? e3.tribute.hideMenu() : e3.tribute.isActive && e3.tribute.showMenuFor(n3);
            } };
          } }, { key: "setActiveLi", value: function(e3) {
            var t4 = this.tribute.menu.querySelectorAll("li"), n3 = t4.length >>> 0;
            e3 && (this.tribute.menuSelected = parseInt(e3));
            for (var i3 = 0; i3 < n3; i3++) {
              var r4 = t4[i3];
              if (i3 === this.tribute.menuSelected) {
                r4.classList.add(this.tribute.current.collection.selectClass);
                var o3 = r4.getBoundingClientRect(), u3 = this.tribute.menu.getBoundingClientRect();
                if (o3.bottom > u3.bottom) {
                  var l3 = o3.bottom - u3.bottom;
                  this.tribute.menu.scrollTop += l3;
                } else if (o3.top < u3.top) {
                  var s3 = u3.top - o3.top;
                  this.tribute.menu.scrollTop -= s3;
                }
              } else
                r4.classList.remove(this.tribute.current.collection.selectClass);
            }
          } }, { key: "getFullHeight", value: function(e3, t4) {
            var n3 = e3.getBoundingClientRect().height;
            if (t4) {
              var i3 = e3.currentStyle || window.getComputedStyle(e3);
              return n3 + parseFloat(i3.marginTop) + parseFloat(i3.marginBottom);
            }
            return n3;
          } }], [{ key: "keys", value: function() {
            return [{ key: 9, value: "TAB" }, { key: 8, value: "DELETE" }, { key: 13, value: "ENTER" }, { key: 27, value: "ESCAPE" }, { key: 32, value: "SPACE" }, { key: 38, value: "UP" }, { key: 40, value: "DOWN" }];
          } }]), t3;
        }(), u2 = function() {
          function t3(n3) {
            e2(this, t3), this.tribute = n3, this.tribute.menuEvents = this, this.menu = this.tribute.menu;
          }
          return n2(t3, [{ key: "bind", value: function(e3) {
            var t4 = this;
            this.menuClickEvent = this.tribute.events.click.bind(null, this), this.menuContainerScrollEvent = this.debounce(function() {
              t4.tribute.isActive && t4.tribute.showMenuFor(t4.tribute.current.element, false);
            }, 300, false), this.windowResizeEvent = this.debounce(function() {
              t4.tribute.isActive && t4.tribute.range.positionMenuAtCaret(true);
            }, 300, false), this.tribute.range.getDocument().addEventListener("MSPointerDown", this.menuClickEvent, false), this.tribute.range.getDocument().addEventListener("mousedown", this.menuClickEvent, false), window.addEventListener("resize", this.windowResizeEvent), this.menuContainer ? this.menuContainer.addEventListener("scroll", this.menuContainerScrollEvent, false) : window.addEventListener("scroll", this.menuContainerScrollEvent);
          } }, { key: "unbind", value: function(e3) {
            this.tribute.range.getDocument().removeEventListener("mousedown", this.menuClickEvent, false), this.tribute.range.getDocument().removeEventListener("MSPointerDown", this.menuClickEvent, false), window.removeEventListener("resize", this.windowResizeEvent), this.menuContainer ? this.menuContainer.removeEventListener("scroll", this.menuContainerScrollEvent, false) : window.removeEventListener("scroll", this.menuContainerScrollEvent);
          } }, { key: "debounce", value: function(e3, t4, n3) {
            var i3, r4 = arguments, o3 = this;
            return function() {
              var u3 = o3, l3 = r4, s3 = n3 && !i3;
              clearTimeout(i3), i3 = setTimeout(function() {
                i3 = null, n3 || e3.apply(u3, l3);
              }, t4), s3 && e3.apply(u3, l3);
            };
          } }]), t3;
        }(), l2 = function() {
          function t3(n3) {
            e2(this, t3), this.tribute = n3, this.tribute.range = this;
          }
          return n2(t3, [{ key: "getDocument", value: function() {
            var e3;
            return this.tribute.current.collection && (e3 = this.tribute.current.collection.iframe), e3 ? e3.contentWindow.document : document;
          } }, { key: "positionMenuAtCaret", value: function(e3) {
            var t4, n3 = this, i3 = this.tribute.current, r4 = this.getTriggerInfo(false, this.tribute.hasTrailingSpace, true, this.tribute.allowSpaces, this.tribute.autocompleteMode);
            if (void 0 !== r4) {
              if (!this.tribute.positionMenu)
                return void (this.tribute.menu.style.cssText = "display: block;");
              t4 = this.isContentEditable(i3.element) ? this.getContentEditableCaretPosition(r4.mentionPosition) : this.getTextAreaOrInputUnderlinePosition(this.tribute.current.element, r4.mentionPosition), this.tribute.menu.style.cssText = "top: ".concat(t4.top, "px;\n                                     left: ").concat(t4.left, "px;\n                                     right: ").concat(t4.right, "px;\n                                     bottom: ").concat(t4.bottom, "px;\n                                     position: absolute;\n                                     display: block;"), "auto" === t4.left && (this.tribute.menu.style.left = "auto"), "auto" === t4.top && (this.tribute.menu.style.top = "auto"), e3 && this.scrollIntoView(), window.setTimeout(function() {
                var i4 = { width: n3.tribute.menu.offsetWidth, height: n3.tribute.menu.offsetHeight }, r5 = n3.isMenuOffScreen(t4, i4), o3 = window.innerWidth > i4.width && (r5.left || r5.right), u3 = window.innerHeight > i4.height && (r5.top || r5.bottom);
                (o3 || u3) && (n3.tribute.menu.style.cssText = "display: none", n3.positionMenuAtCaret(e3));
              }, 0);
            } else
              this.tribute.menu.style.cssText = "display: none";
          } }, { key: "selectElement", value: function(e3, t4, n3) {
            var i3, r4 = e3;
            if (t4)
              for (var o3 = 0; o3 < t4.length; o3++) {
                if (void 0 === (r4 = r4.childNodes[t4[o3]]))
                  return;
                for (; r4.length < n3; )
                  n3 -= r4.length, r4 = r4.nextSibling;
                0 !== r4.childNodes.length || r4.length || (r4 = r4.previousSibling);
              }
            var u3 = this.getWindowSelection();
            (i3 = this.getDocument().createRange()).setStart(r4, n3), i3.setEnd(r4, n3), i3.collapse(true);
            try {
              u3.removeAllRanges();
            } catch (e4) {
            }
            u3.addRange(i3), e3.focus();
          } }, { key: "replaceTriggerText", value: function(e3, t4, n3, i3, r4) {
            var o3 = this.getTriggerInfo(true, n3, t4, this.tribute.allowSpaces, this.tribute.autocompleteMode);
            if (void 0 !== o3) {
              var u3 = this.tribute.current, l3 = new CustomEvent("tribute-replaced", { detail: { item: r4, instance: u3, context: o3, event: i3 } });
              if (this.isContentEditable(u3.element)) {
                e3 += "string" == typeof this.tribute.replaceTextSuffix ? this.tribute.replaceTextSuffix : "\xA0";
                var s3 = o3.mentionPosition + o3.mentionText.length;
                this.tribute.autocompleteMode || (s3 += o3.mentionTriggerChar.length), this.pasteHtml(e3, o3.mentionPosition, s3);
              } else {
                var a2 = this.tribute.current.element, c2 = "string" == typeof this.tribute.replaceTextSuffix ? this.tribute.replaceTextSuffix : " ";
                e3 += c2;
                var h2 = o3.mentionPosition, d2 = o3.mentionPosition + o3.mentionText.length + c2.length;
                this.tribute.autocompleteMode || (d2 += o3.mentionTriggerChar.length - 1), a2.value = a2.value.substring(0, h2) + e3 + a2.value.substring(d2, a2.value.length), a2.selectionStart = h2 + e3.length, a2.selectionEnd = h2 + e3.length;
              }
              u3.element.dispatchEvent(new CustomEvent("input", { bubbles: true })), u3.element.dispatchEvent(l3);
            }
          } }, { key: "pasteHtml", value: function(e3, t4, n3) {
            var i3, r4;
            r4 = this.getWindowSelection(), (i3 = this.getDocument().createRange()).setStart(r4.anchorNode, t4), i3.setEnd(r4.anchorNode, n3), i3.deleteContents();
            var o3 = this.getDocument().createElement("div");
            o3.innerHTML = e3;
            for (var u3, l3, s3 = this.getDocument().createDocumentFragment(); u3 = o3.firstChild; )
              l3 = s3.appendChild(u3);
            i3.insertNode(s3), l3 && ((i3 = i3.cloneRange()).setStartAfter(l3), i3.collapse(true), r4.removeAllRanges(), r4.addRange(i3));
          } }, { key: "getWindowSelection", value: function() {
            return this.tribute.collection.iframe ? this.tribute.collection.iframe.contentWindow.getSelection() : window.getSelection();
          } }, { key: "getNodePositionInParent", value: function(e3) {
            if (null === e3.parentNode)
              return 0;
            for (var t4 = 0; t4 < e3.parentNode.childNodes.length; t4++) {
              if (e3.parentNode.childNodes[t4] === e3)
                return t4;
            }
          } }, { key: "getContentEditableSelectedPath", value: function(e3) {
            var t4 = this.getWindowSelection(), n3 = t4.anchorNode, i3 = [];
            if (null != n3) {
              for (var r4, o3 = n3.contentEditable; null !== n3 && "true" !== o3; )
                r4 = this.getNodePositionInParent(n3), i3.push(r4), null !== (n3 = n3.parentNode) && (o3 = n3.contentEditable);
              return i3.reverse(), { selected: n3, path: i3, offset: t4.getRangeAt(0).startOffset };
            }
          } }, { key: "getTextPrecedingCurrentSelection", value: function() {
            var e3 = this.tribute.current, t4 = "";
            if (this.isContentEditable(e3.element)) {
              var n3 = this.getWindowSelection().anchorNode;
              if (null != n3) {
                var i3 = n3.textContent, r4 = this.getWindowSelection().getRangeAt(0).startOffset;
                i3 && r4 >= 0 && (t4 = i3.substring(0, r4));
              }
            } else {
              var o3 = this.tribute.current.element;
              if (o3) {
                var u3 = o3.selectionStart;
                o3.value && u3 >= 0 && (t4 = o3.value.substring(0, u3));
              }
            }
            return t4;
          } }, { key: "getLastWordInText", value: function(e3) {
            var t4 = (e3 = e3.replace(/\u00A0/g, " ")).split(/\s+/);
            return t4[t4.length - 1].trim();
          } }, { key: "getTriggerInfo", value: function(e3, t4, n3, i3, r4) {
            var o3, u3, l3, s3 = this, a2 = this.tribute.current;
            if (this.isContentEditable(a2.element)) {
              var c2 = this.getContentEditableSelectedPath(a2);
              c2 && (o3 = c2.selected, u3 = c2.path, l3 = c2.offset);
            } else
              o3 = this.tribute.current.element;
            var h2 = this.getTextPrecedingCurrentSelection(), d2 = this.getLastWordInText(h2);
            if (r4)
              return { mentionPosition: h2.length - d2.length, mentionText: d2, mentionSelectedElement: o3, mentionSelectedPath: u3, mentionSelectedOffset: l3 };
            if (null != h2) {
              var f2, m2 = -1;
              if (this.tribute.collection.forEach(function(e4) {
                var t5 = e4.trigger, i4 = e4.requireLeadingSpace ? s3.lastIndexWithLeadingSpace(h2, t5) : h2.lastIndexOf(t5);
                i4 > m2 && (m2 = i4, f2 = t5, n3 = e4.requireLeadingSpace);
              }), m2 >= 0 && (0 === m2 || !n3 || /[\xA0\s]/g.test(h2.substring(m2 - 1, m2)))) {
                var p2 = h2.substring(m2 + f2.length, h2.length);
                f2 = h2.substring(m2, m2 + f2.length);
                var v2 = p2.substring(0, 1), g2 = p2.length > 0 && (" " === v2 || "\xA0" === v2);
                t4 && (p2 = p2.trim());
                var b2 = i3 ? /[^\S ]/g : /[\xA0\s]/g;
                if (this.tribute.hasTrailingSpace = b2.test(p2), !g2 && (e3 || !b2.test(p2)))
                  return { mentionPosition: m2, mentionText: p2, mentionSelectedElement: o3, mentionSelectedPath: u3, mentionSelectedOffset: l3, mentionTriggerChar: f2 };
              }
            }
          } }, { key: "lastIndexWithLeadingSpace", value: function(e3, t4) {
            for (var n3 = e3.split("").reverse().join(""), i3 = -1, r4 = 0, o3 = e3.length; r4 < o3; r4++) {
              for (var u3 = r4 === e3.length - 1, l3 = /\s/.test(n3[r4 + 1]), s3 = true, a2 = t4.length - 1; a2 >= 0; a2--)
                if (t4[a2] !== n3[r4 - a2]) {
                  s3 = false;
                  break;
                }
              if (s3 && (u3 || l3)) {
                i3 = e3.length - 1 - r4;
                break;
              }
            }
            return i3;
          } }, { key: "isContentEditable", value: function(e3) {
            return "INPUT" !== e3.nodeName && "TEXTAREA" !== e3.nodeName;
          } }, { key: "isMenuOffScreen", value: function(e3, t4) {
            var n3 = window.innerWidth, i3 = window.innerHeight, r4 = document.documentElement, o3 = (window.pageXOffset || r4.scrollLeft) - (r4.clientLeft || 0), u3 = (window.pageYOffset || r4.scrollTop) - (r4.clientTop || 0), l3 = "number" == typeof e3.top ? e3.top : u3 + i3 - e3.bottom - t4.height, s3 = "number" == typeof e3.right ? e3.right : e3.left + t4.width, a2 = "number" == typeof e3.bottom ? e3.bottom : e3.top + t4.height, c2 = "number" == typeof e3.left ? e3.left : o3 + n3 - e3.right - t4.width;
            return { top: l3 < Math.floor(u3), right: s3 > Math.ceil(o3 + n3), bottom: a2 > Math.ceil(u3 + i3), left: c2 < Math.floor(o3) };
          } }, { key: "getMenuDimensions", value: function() {
            var e3 = { width: null, height: null };
            return this.tribute.menu.style.cssText = "top: 0px;\n                                 left: 0px;\n                                 position: fixed;\n                                 display: block;\n                                 visibility; hidden;", e3.width = this.tribute.menu.offsetWidth, e3.height = this.tribute.menu.offsetHeight, this.tribute.menu.style.cssText = "display: none;", e3;
          } }, { key: "getTextAreaOrInputUnderlinePosition", value: function(e3, t4, n3) {
            var i3 = null !== window.mozInnerScreenX, r4 = this.getDocument().createElement("div");
            r4.id = "input-textarea-caret-position-mirror-div", this.getDocument().body.appendChild(r4);
            var o3 = r4.style, u3 = window.getComputedStyle ? getComputedStyle(e3) : e3.currentStyle;
            o3.whiteSpace = "pre-wrap", "INPUT" !== e3.nodeName && (o3.wordWrap = "break-word"), o3.position = "absolute", o3.visibility = "hidden", ["direction", "boxSizing", "width", "height", "overflowX", "overflowY", "borderTopWidth", "borderRightWidth", "borderBottomWidth", "borderLeftWidth", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "fontStyle", "fontVariant", "fontWeight", "fontStretch", "fontSize", "fontSizeAdjust", "lineHeight", "fontFamily", "textAlign", "textTransform", "textIndent", "textDecoration", "letterSpacing", "wordSpacing"].forEach(function(e4) {
              o3[e4] = u3[e4];
            }), i3 ? (o3.width = "".concat(parseInt(u3.width) - 2, "px"), e3.scrollHeight > parseInt(u3.height) && (o3.overflowY = "scroll")) : o3.overflow = "hidden", r4.textContent = e3.value.substring(0, t4), "INPUT" === e3.nodeName && (r4.textContent = r4.textContent.replace(/\s/g, "\xA0"));
            var l3 = this.getDocument().createElement("span");
            l3.textContent = e3.value.substring(t4) || ".", r4.appendChild(l3);
            var s3 = e3.getBoundingClientRect(), a2 = document.documentElement, c2 = (window.pageXOffset || a2.scrollLeft) - (a2.clientLeft || 0), h2 = (window.pageYOffset || a2.scrollTop) - (a2.clientTop || 0), d2 = 0, f2 = 0;
            this.menuContainerIsBody && (d2 = s3.top, f2 = s3.left);
            var m2 = { top: d2 + h2 + l3.offsetTop + parseInt(u3.borderTopWidth) + parseInt(u3.fontSize) - e3.scrollTop, left: f2 + c2 + l3.offsetLeft + parseInt(u3.borderLeftWidth) }, p2 = window.innerWidth, v2 = window.innerHeight, g2 = this.getMenuDimensions(), b2 = this.isMenuOffScreen(m2, g2);
            b2.right && (m2.right = p2 - m2.left, m2.left = "auto");
            var y2 = this.tribute.menuContainer ? this.tribute.menuContainer.offsetHeight : this.getDocument().body.offsetHeight;
            if (b2.bottom) {
              var w2 = y2 - (v2 - (this.tribute.menuContainer ? this.tribute.menuContainer.getBoundingClientRect() : this.getDocument().body.getBoundingClientRect()).top);
              m2.bottom = w2 + (v2 - s3.top - l3.offsetTop), m2.top = "auto";
            }
            return (b2 = this.isMenuOffScreen(m2, g2)).left && (m2.left = p2 > g2.width ? c2 + p2 - g2.width : c2, delete m2.right), b2.top && (m2.top = v2 > g2.height ? h2 + v2 - g2.height : h2, delete m2.bottom), this.getDocument().body.removeChild(r4), m2;
          } }, { key: "getContentEditableCaretPosition", value: function(e3) {
            var t4, n3 = this.getWindowSelection();
            (t4 = this.getDocument().createRange()).setStart(n3.anchorNode, e3), t4.setEnd(n3.anchorNode, e3), t4.collapse(false);
            var i3 = t4.getBoundingClientRect(), r4 = document.documentElement, o3 = (window.pageXOffset || r4.scrollLeft) - (r4.clientLeft || 0), u3 = (window.pageYOffset || r4.scrollTop) - (r4.clientTop || 0), l3 = { left: i3.left + o3, top: i3.top + i3.height + u3 }, s3 = window.innerWidth, a2 = window.innerHeight, c2 = this.getMenuDimensions(), h2 = this.isMenuOffScreen(l3, c2);
            h2.right && (l3.left = "auto", l3.right = s3 - i3.left - o3);
            var d2 = this.tribute.menuContainer ? this.tribute.menuContainer.offsetHeight : this.getDocument().body.offsetHeight;
            if (h2.bottom) {
              var f2 = d2 - (a2 - (this.tribute.menuContainer ? this.tribute.menuContainer.getBoundingClientRect() : this.getDocument().body.getBoundingClientRect()).top);
              l3.top = "auto", l3.bottom = f2 + (a2 - i3.top);
            }
            return (h2 = this.isMenuOffScreen(l3, c2)).left && (l3.left = s3 > c2.width ? o3 + s3 - c2.width : o3, delete l3.right), h2.top && (l3.top = a2 > c2.height ? u3 + a2 - c2.height : u3, delete l3.bottom), this.menuContainerIsBody || (l3.left = l3.left ? l3.left - this.tribute.menuContainer.offsetLeft : l3.left, l3.top = l3.top ? l3.top - this.tribute.menuContainer.offsetTop : l3.top), l3;
          } }, { key: "scrollIntoView", value: function(e3) {
            var t4, n3 = this.menu;
            if (void 0 !== n3) {
              for (; void 0 === t4 || 0 === t4.height; )
                if (0 === (t4 = n3.getBoundingClientRect()).height && (void 0 === (n3 = n3.childNodes[0]) || !n3.getBoundingClientRect))
                  return;
              var i3 = t4.top, r4 = i3 + t4.height;
              if (i3 < 0)
                window.scrollTo(0, window.pageYOffset + t4.top - 20);
              else if (r4 > window.innerHeight) {
                var o3 = window.pageYOffset + t4.top - 20;
                o3 - window.pageYOffset > 100 && (o3 = window.pageYOffset + 100);
                var u3 = window.pageYOffset - (window.innerHeight - r4);
                u3 > o3 && (u3 = o3), window.scrollTo(0, u3);
              }
            }
          } }, { key: "menuContainerIsBody", get: function() {
            return this.tribute.menuContainer === document.body || !this.tribute.menuContainer;
          } }]), t3;
        }(), s2 = function() {
          function t3(n3) {
            e2(this, t3), this.tribute = n3, this.tribute.search = this;
          }
          return n2(t3, [{ key: "simpleFilter", value: function(e3, t4) {
            var n3 = this;
            return t4.filter(function(t5) {
              return n3.test(e3, t5);
            });
          } }, { key: "test", value: function(e3, t4) {
            return null !== this.match(e3, t4);
          } }, { key: "match", value: function(e3, t4, n3) {
            n3 = n3 || {};
            t4.length;
            var i3 = n3.pre || "", r4 = n3.post || "", o3 = n3.caseSensitive && t4 || t4.toLowerCase();
            if (n3.skip)
              return { rendered: t4, score: 0 };
            e3 = n3.caseSensitive && e3 || e3.toLowerCase();
            var u3 = this.traverse(o3, e3, 0, 0, []);
            return u3 ? { rendered: this.render(t4, u3.cache, i3, r4), score: u3.score } : null;
          } }, { key: "traverse", value: function(e3, t4, n3, i3, r4) {
            if (t4.length === i3)
              return { score: this.calculateScore(r4), cache: r4.slice() };
            if (!(e3.length === n3 || t4.length - i3 > e3.length - n3)) {
              for (var o3, u3, l3 = t4[i3], s3 = e3.indexOf(l3, n3); s3 > -1; ) {
                if (r4.push(s3), u3 = this.traverse(e3, t4, s3 + 1, i3 + 1, r4), r4.pop(), !u3)
                  return o3;
                (!o3 || o3.score < u3.score) && (o3 = u3), s3 = e3.indexOf(l3, s3 + 1);
              }
              return o3;
            }
          } }, { key: "calculateScore", value: function(e3) {
            var t4 = 0, n3 = 1;
            return e3.forEach(function(i3, r4) {
              r4 > 0 && (e3[r4 - 1] + 1 === i3 ? n3 += n3 + 1 : n3 = 1), t4 += n3;
            }), t4;
          } }, { key: "render", value: function(e3, t4, n3, i3) {
            var r4 = e3.substring(0, t4[0]);
            return t4.forEach(function(o3, u3) {
              r4 += n3 + e3[o3] + i3 + e3.substring(o3 + 1, t4[u3 + 1] ? t4[u3 + 1] : e3.length);
            }), r4;
          } }, { key: "filter", value: function(e3, t4, n3) {
            var i3 = this;
            return n3 = n3 || {}, t4.reduce(function(t5, r4, o3, u3) {
              var l3 = r4;
              n3.extract && ((l3 = n3.extract(r4)) || (l3 = ""));
              var s3 = i3.match(e3, l3, n3);
              return null != s3 && (t5[t5.length] = { string: s3.rendered, score: s3.score, index: o3, original: r4 }), t5;
            }, []).sort(function(e4, t5) {
              var n4 = t5.score - e4.score;
              return n4 || e4.index - t5.index;
            });
          } }]), t3;
        }();
        return function() {
          function t3(n3) {
            var i3, r4 = this, a2 = n3.values, c2 = void 0 === a2 ? null : a2, h2 = n3.iframe, d2 = void 0 === h2 ? null : h2, f2 = n3.selectClass, m2 = void 0 === f2 ? "highlight" : f2, p2 = n3.containerClass, v2 = void 0 === p2 ? "tribute-container" : p2, g2 = n3.itemClass, b2 = void 0 === g2 ? "" : g2, y2 = n3.trigger, w2 = void 0 === y2 ? "@" : y2, T2 = n3.autocompleteMode, C2 = void 0 !== T2 && T2, S2 = n3.selectTemplate, E2 = void 0 === S2 ? null : S2, k2 = n3.menuItemTemplate, x2 = void 0 === k2 ? null : k2, M2 = n3.lookup, A2 = void 0 === M2 ? "key" : M2, L2 = n3.fillAttr, I2 = void 0 === L2 ? "value" : L2, N2 = n3.collection, O2 = void 0 === N2 ? null : N2, D2 = n3.menuContainer, P2 = void 0 === D2 ? null : D2, R2 = n3.noMatchTemplate, W2 = void 0 === R2 ? null : R2, H2 = n3.requireLeadingSpace, B2 = void 0 === H2 || H2, F2 = n3.allowSpaces, _2 = void 0 !== F2 && F2, j2 = n3.replaceTextSuffix, Y2 = void 0 === j2 ? null : j2, z2 = n3.positionMenu, K2 = void 0 === z2 || z2, q2 = n3.spaceSelectsMatch, U2 = void 0 !== q2 && q2, X2 = n3.searchOpts, Q2 = void 0 === X2 ? {} : X2, V2 = n3.menuItemLimit, G2 = void 0 === V2 ? null : V2, J2 = n3.menuShowMinLength, Z2 = void 0 === J2 ? 0 : J2;
            if (e2(this, t3), this.autocompleteMode = C2, this.menuSelected = 0, this.current = {}, this.inputEvent = false, this.isActive = false, this.menuContainer = P2, this.allowSpaces = _2, this.replaceTextSuffix = Y2, this.positionMenu = K2, this.hasTrailingSpace = false, this.spaceSelectsMatch = U2, this.autocompleteMode && (w2 = "", _2 = false), c2)
              this.collection = [{ trigger: w2, iframe: d2, selectClass: m2, containerClass: v2, itemClass: b2, selectTemplate: (E2 || t3.defaultSelectTemplate).bind(this), menuItemTemplate: (x2 || t3.defaultMenuItemTemplate).bind(this), noMatchTemplate: (i3 = W2, "string" == typeof i3 ? "" === i3.trim() ? null : i3 : "function" == typeof i3 ? i3.bind(r4) : W2 || function() {
                return "<li>No Match Found!</li>";
              }.bind(r4)), lookup: A2, fillAttr: I2, values: c2, requireLeadingSpace: B2, searchOpts: Q2, menuItemLimit: G2, menuShowMinLength: Z2 }];
            else {
              if (!O2)
                throw new Error("[Tribute] No collection specified.");
              this.autocompleteMode && console.warn("Tribute in autocomplete mode does not work for collections"), this.collection = O2.map(function(e3) {
                return { trigger: e3.trigger || w2, iframe: e3.iframe || d2, selectClass: e3.selectClass || m2, containerClass: e3.containerClass || v2, itemClass: e3.itemClass || b2, selectTemplate: (e3.selectTemplate || t3.defaultSelectTemplate).bind(r4), menuItemTemplate: (e3.menuItemTemplate || t3.defaultMenuItemTemplate).bind(r4), noMatchTemplate: function(e4) {
                  return "string" == typeof e4 ? "" === e4.trim() ? null : e4 : "function" == typeof e4 ? e4.bind(r4) : W2 || function() {
                    return "<li>No Match Found!</li>";
                  }.bind(r4);
                }(W2), lookup: e3.lookup || A2, fillAttr: e3.fillAttr || I2, values: e3.values, requireLeadingSpace: e3.requireLeadingSpace, searchOpts: e3.searchOpts || Q2, menuItemLimit: e3.menuItemLimit || G2, menuShowMinLength: e3.menuShowMinLength || Z2 };
              });
            }
            new l2(this), new o2(this), new u2(this), new s2(this);
          }
          return n2(t3, [{ key: "triggers", value: function() {
            return this.collection.map(function(e3) {
              return e3.trigger;
            });
          } }, { key: "attach", value: function(e3) {
            if (!e3)
              throw new Error("[Tribute] Must pass in a DOM node or NodeList.");
            if ("undefined" != typeof jQuery && e3 instanceof jQuery && (e3 = e3.get()), e3.constructor === NodeList || e3.constructor === HTMLCollection || e3.constructor === Array)
              for (var t4 = e3.length, n3 = 0; n3 < t4; ++n3)
                this._attach(e3[n3]);
            else
              this._attach(e3);
          } }, { key: "_attach", value: function(e3) {
            e3.hasAttribute("data-tribute") && console.warn("Tribute was already bound to " + e3.nodeName), this.ensureEditable(e3), this.events.bind(e3), e3.setAttribute("data-tribute", true);
          } }, { key: "ensureEditable", value: function(e3) {
            if (-1 === t3.inputTypes().indexOf(e3.nodeName)) {
              if (!e3.contentEditable)
                throw new Error("[Tribute] Cannot bind to " + e3.nodeName);
              e3.contentEditable = true;
            }
          } }, { key: "createMenu", value: function(e3) {
            var t4 = this.range.getDocument().createElement("div"), n3 = this.range.getDocument().createElement("ul");
            return t4.className = e3, t4.appendChild(n3), this.menuContainer ? this.menuContainer.appendChild(t4) : this.range.getDocument().body.appendChild(t4);
          } }, { key: "showMenuFor", value: function(e3, t4) {
            var n3 = this;
            if (!this.isActive || this.current.element !== e3 || this.current.mentionText !== this.currentMentionTextSnapshot) {
              this.currentMentionTextSnapshot = this.current.mentionText, this.menu || (this.menu = this.createMenu(this.current.collection.containerClass), e3.tributeMenu = this.menu, this.menuEvents.bind(this.menu)), this.isActive = true, this.menuSelected = 0, this.current.mentionText || (this.current.mentionText = "");
              var r4 = function(e4) {
                if (n3.isActive) {
                  var r5 = n3.search.filter(n3.current.mentionText, e4, { pre: n3.current.collection.searchOpts.pre || "<span>", post: n3.current.collection.searchOpts.post || "</span>", skip: n3.current.collection.searchOpts.skip, extract: function(e5) {
                    if ("string" == typeof n3.current.collection.lookup)
                      return e5[n3.current.collection.lookup];
                    if ("function" == typeof n3.current.collection.lookup)
                      return n3.current.collection.lookup(e5, n3.current.mentionText);
                    throw new Error("Invalid lookup attribute, lookup must be string or function.");
                  } });
                  n3.current.collection.menuItemLimit && (r5 = r5.slice(0, n3.current.collection.menuItemLimit)), n3.current.filteredItems = r5;
                  var o3 = n3.menu.querySelector("ul");
                  if (n3.range.positionMenuAtCaret(t4), !r5.length) {
                    var u3 = new CustomEvent("tribute-no-match", { detail: n3.menu });
                    return n3.current.element.dispatchEvent(u3), void ("function" == typeof n3.current.collection.noMatchTemplate && !n3.current.collection.noMatchTemplate() || !n3.current.collection.noMatchTemplate ? n3.hideMenu() : "function" == typeof n3.current.collection.noMatchTemplate ? o3.innerHTML = n3.current.collection.noMatchTemplate() : o3.innerHTML = n3.current.collection.noMatchTemplate);
                  }
                  o3.innerHTML = "";
                  var l3 = n3.range.getDocument().createDocumentFragment();
                  r5.forEach(function(e5, t5) {
                    var r6 = n3.range.getDocument().createElement("li");
                    r6.setAttribute("data-index", t5), r6.className = n3.current.collection.itemClass, r6.addEventListener("mousemove", function(e6) {
                      var t6 = i2(n3._findLiTarget(e6.target), 2), r7 = (t6[0], t6[1]);
                      0 !== e6.movementY && n3.events.setActiveLi(r7);
                    }), n3.menuSelected === t5 && r6.classList.add(n3.current.collection.selectClass), r6.innerHTML = n3.current.collection.menuItemTemplate(e5), l3.appendChild(r6);
                  }), o3.appendChild(l3);
                }
              };
              "function" == typeof this.current.collection.values ? this.current.collection.values(this.current.mentionText, r4) : r4(this.current.collection.values);
            }
          } }, { key: "_findLiTarget", value: function(e3) {
            if (!e3)
              return [];
            var t4 = e3.getAttribute("data-index");
            return t4 ? [e3, t4] : this._findLiTarget(e3.parentNode);
          } }, { key: "showMenuForCollection", value: function(e3, t4) {
            e3 !== document.activeElement && this.placeCaretAtEnd(e3), this.current.collection = this.collection[t4 || 0], this.current.externalTrigger = true, this.current.element = e3, e3.isContentEditable ? this.insertTextAtCursor(this.current.collection.trigger) : this.insertAtCaret(e3, this.current.collection.trigger), this.showMenuFor(e3);
          } }, { key: "placeCaretAtEnd", value: function(e3) {
            if (e3.focus(), void 0 !== window.getSelection && void 0 !== document.createRange) {
              var t4 = document.createRange();
              t4.selectNodeContents(e3), t4.collapse(false);
              var n3 = window.getSelection();
              n3.removeAllRanges(), n3.addRange(t4);
            } else if (void 0 !== document.body.createTextRange) {
              var i3 = document.body.createTextRange();
              i3.moveToElementText(e3), i3.collapse(false), i3.select();
            }
          } }, { key: "insertTextAtCursor", value: function(e3) {
            var t4, n3;
            (n3 = (t4 = window.getSelection()).getRangeAt(0)).deleteContents();
            var i3 = document.createTextNode(e3);
            n3.insertNode(i3), n3.selectNodeContents(i3), n3.collapse(false), t4.removeAllRanges(), t4.addRange(n3);
          } }, { key: "insertAtCaret", value: function(e3, t4) {
            var n3 = e3.scrollTop, i3 = e3.selectionStart, r4 = e3.value.substring(0, i3), o3 = e3.value.substring(e3.selectionEnd, e3.value.length);
            e3.value = r4 + t4 + o3, i3 += t4.length, e3.selectionStart = i3, e3.selectionEnd = i3, e3.focus(), e3.scrollTop = n3;
          } }, { key: "hideMenu", value: function() {
            this.menu && (this.menu.style.cssText = "display: none;", this.isActive = false, this.menuSelected = 0, this.current = {});
          } }, { key: "selectItemAtIndex", value: function(e3, t4) {
            if ("number" == typeof (e3 = parseInt(e3)) && !isNaN(e3)) {
              var n3 = this.current.filteredItems[e3], i3 = this.current.collection.selectTemplate(n3);
              null !== i3 && this.replaceText(i3, t4, n3);
            }
          } }, { key: "replaceText", value: function(e3, t4, n3) {
            this.range.replaceTriggerText(e3, true, true, t4, n3);
          } }, { key: "_append", value: function(e3, t4, n3) {
            if ("function" == typeof e3.values)
              throw new Error("Unable to append to values, as it is a function.");
            e3.values = n3 ? t4 : e3.values.concat(t4);
          } }, { key: "append", value: function(e3, t4, n3) {
            var i3 = parseInt(e3);
            if ("number" != typeof i3)
              throw new Error("please provide an index for the collection to update.");
            var r4 = this.collection[i3];
            this._append(r4, t4, n3);
          } }, { key: "appendCurrent", value: function(e3, t4) {
            if (!this.isActive)
              throw new Error("No active state. Please use append instead and pass an index.");
            this._append(this.current.collection, e3, t4);
          } }, { key: "detach", value: function(e3) {
            if (!e3)
              throw new Error("[Tribute] Must pass in a DOM node or NodeList.");
            if ("undefined" != typeof jQuery && e3 instanceof jQuery && (e3 = e3.get()), e3.constructor === NodeList || e3.constructor === HTMLCollection || e3.constructor === Array)
              for (var t4 = e3.length, n3 = 0; n3 < t4; ++n3)
                this._detach(e3[n3]);
            else
              this._detach(e3);
          } }, { key: "_detach", value: function(e3) {
            var t4 = this;
            this.events.unbind(e3), e3.tributeMenu && this.menuEvents.unbind(e3.tributeMenu), setTimeout(function() {
              e3.removeAttribute("data-tribute"), t4.isActive = false, e3.tributeMenu && e3.tributeMenu.remove();
            });
          } }, { key: "isActive", get: function() {
            return this._isActive;
          }, set: function(e3) {
            if (this._isActive != e3 && (this._isActive = e3, this.current.element)) {
              var t4 = new CustomEvent("tribute-active-".concat(e3));
              this.current.element.dispatchEvent(t4);
            }
          } }], [{ key: "defaultSelectTemplate", value: function(e3) {
            return void 0 === e3 ? "".concat(this.current.collection.trigger).concat(this.current.mentionText) : this.range.isContentEditable(this.current.element) ? '<span class="tribute-mention">' + (this.current.collection.trigger + e3.original[this.current.collection.fillAttr]) + "</span>" : this.current.collection.trigger + e3.original[this.current.collection.fillAttr];
          } }, { key: "defaultMenuItemTemplate", value: function(e3) {
            return e3.string;
          } }, { key: "inputTypes", value: function() {
            return ["TEXTAREA", "INPUT"];
          } }]), t3;
        }();
      });
    }
  });

  // node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js
  (function() {
    if (window.Reflect === void 0 || window.customElements === void 0 || window.customElements.polyfillWrapFlushCallback) {
      return;
    }
    const BuiltInHTMLElement = HTMLElement;
    const wrapperForTheName = {
      HTMLElement: function HTMLElement2() {
        return Reflect.construct(BuiltInHTMLElement, [], this.constructor);
      }
    };
    window.HTMLElement = wrapperForTheName["HTMLElement"];
    HTMLElement.prototype = BuiltInHTMLElement.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
  })();
  (function(prototype) {
    if (typeof prototype.requestSubmit == "function")
      return;
    prototype.requestSubmit = function(submitter) {
      if (submitter) {
        validateSubmitter(submitter, this);
        submitter.click();
      } else {
        submitter = document.createElement("input");
        submitter.type = "submit";
        submitter.hidden = true;
        this.appendChild(submitter);
        submitter.click();
        this.removeChild(submitter);
      }
    };
    function validateSubmitter(submitter, form) {
      submitter instanceof HTMLElement || raise(TypeError, "parameter 1 is not of type 'HTMLElement'");
      submitter.type == "submit" || raise(TypeError, "The specified element is not a submit button");
      submitter.form == form || raise(DOMException, "The specified element is not owned by this form element", "NotFoundError");
    }
    function raise(errorConstructor, message, name) {
      throw new errorConstructor("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + message + ".", name);
    }
  })(HTMLFormElement.prototype);
  var submittersByForm = /* @__PURE__ */ new WeakMap();
  function findSubmitterFromClickTarget(target) {
    const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
    const candidate = element ? element.closest("input, button") : null;
    return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == "submit" ? candidate : null;
  }
  function clickCaptured(event) {
    const submitter = findSubmitterFromClickTarget(event.target);
    if (submitter && submitter.form) {
      submittersByForm.set(submitter.form, submitter);
    }
  }
  (function() {
    if ("submitter" in Event.prototype)
      return;
    let prototype = window.Event.prototype;
    if ("SubmitEvent" in window && /Apple Computer/.test(navigator.vendor)) {
      prototype = window.SubmitEvent.prototype;
    } else if ("SubmitEvent" in window) {
      return;
    }
    addEventListener("click", clickCaptured, true);
    Object.defineProperty(prototype, "submitter", {
      get() {
        if (this.type == "submit" && this.target instanceof HTMLFormElement) {
          return submittersByForm.get(this.target);
        }
      }
    });
  })();
  var FrameLoadingStyle;
  (function(FrameLoadingStyle2) {
    FrameLoadingStyle2["eager"] = "eager";
    FrameLoadingStyle2["lazy"] = "lazy";
  })(FrameLoadingStyle || (FrameLoadingStyle = {}));
  var FrameElement = class _FrameElement extends HTMLElement {
    static get observedAttributes() {
      return ["disabled", "complete", "loading", "src"];
    }
    constructor() {
      super();
      this.loaded = Promise.resolve();
      this.delegate = new _FrameElement.delegateConstructor(this);
    }
    connectedCallback() {
      this.delegate.connect();
    }
    disconnectedCallback() {
      this.delegate.disconnect();
    }
    reload() {
      return this.delegate.sourceURLReloaded();
    }
    attributeChangedCallback(name) {
      if (name == "loading") {
        this.delegate.loadingStyleChanged();
      } else if (name == "complete") {
        this.delegate.completeChanged();
      } else if (name == "src") {
        this.delegate.sourceURLChanged();
      } else {
        this.delegate.disabledChanged();
      }
    }
    get src() {
      return this.getAttribute("src");
    }
    set src(value) {
      if (value) {
        this.setAttribute("src", value);
      } else {
        this.removeAttribute("src");
      }
    }
    get loading() {
      return frameLoadingStyleFromString(this.getAttribute("loading") || "");
    }
    set loading(value) {
      if (value) {
        this.setAttribute("loading", value);
      } else {
        this.removeAttribute("loading");
      }
    }
    get disabled() {
      return this.hasAttribute("disabled");
    }
    set disabled(value) {
      if (value) {
        this.setAttribute("disabled", "");
      } else {
        this.removeAttribute("disabled");
      }
    }
    get autoscroll() {
      return this.hasAttribute("autoscroll");
    }
    set autoscroll(value) {
      if (value) {
        this.setAttribute("autoscroll", "");
      } else {
        this.removeAttribute("autoscroll");
      }
    }
    get complete() {
      return !this.delegate.isLoading;
    }
    get isActive() {
      return this.ownerDocument === document && !this.isPreview;
    }
    get isPreview() {
      var _a, _b;
      return (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement) === null || _b === void 0 ? void 0 : _b.hasAttribute("data-turbo-preview");
    }
  };
  function frameLoadingStyleFromString(style) {
    switch (style.toLowerCase()) {
      case "lazy":
        return FrameLoadingStyle.lazy;
      default:
        return FrameLoadingStyle.eager;
    }
  }
  function expandURL(locatable) {
    return new URL(locatable.toString(), document.baseURI);
  }
  function getAnchor(url) {
    let anchorMatch;
    if (url.hash) {
      return url.hash.slice(1);
    } else if (anchorMatch = url.href.match(/#(.*)$/)) {
      return anchorMatch[1];
    }
  }
  function getAction(form, submitter) {
    const action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formaction")) || form.getAttribute("action") || form.action;
    return expandURL(action);
  }
  function getExtension(url) {
    return (getLastPathComponent(url).match(/\.[^.]*$/) || [])[0] || "";
  }
  function isHTML(url) {
    return !!getExtension(url).match(/^(?:|\.(?:htm|html|xhtml|php))$/);
  }
  function isPrefixedBy(baseURL, url) {
    const prefix = getPrefix(url);
    return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);
  }
  function locationIsVisitable(location2, rootLocation) {
    return isPrefixedBy(location2, rootLocation) && isHTML(location2);
  }
  function getRequestURL(url) {
    const anchor = getAnchor(url);
    return anchor != null ? url.href.slice(0, -(anchor.length + 1)) : url.href;
  }
  function toCacheKey(url) {
    return getRequestURL(url);
  }
  function urlsAreEqual(left, right) {
    return expandURL(left).href == expandURL(right).href;
  }
  function getPathComponents(url) {
    return url.pathname.split("/").slice(1);
  }
  function getLastPathComponent(url) {
    return getPathComponents(url).slice(-1)[0];
  }
  function getPrefix(url) {
    return addTrailingSlash(url.origin + url.pathname);
  }
  function addTrailingSlash(value) {
    return value.endsWith("/") ? value : value + "/";
  }
  var FetchResponse = class {
    constructor(response) {
      this.response = response;
    }
    get succeeded() {
      return this.response.ok;
    }
    get failed() {
      return !this.succeeded;
    }
    get clientError() {
      return this.statusCode >= 400 && this.statusCode <= 499;
    }
    get serverError() {
      return this.statusCode >= 500 && this.statusCode <= 599;
    }
    get redirected() {
      return this.response.redirected;
    }
    get location() {
      return expandURL(this.response.url);
    }
    get isHTML() {
      return this.contentType && this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/);
    }
    get statusCode() {
      return this.response.status;
    }
    get contentType() {
      return this.header("Content-Type");
    }
    get responseText() {
      return this.response.clone().text();
    }
    get responseHTML() {
      if (this.isHTML) {
        return this.response.clone().text();
      } else {
        return Promise.resolve(void 0);
      }
    }
    header(name) {
      return this.response.headers.get(name);
    }
  };
  function activateScriptElement(element) {
    if (element.getAttribute("data-turbo-eval") == "false") {
      return element;
    } else {
      const createdScriptElement = document.createElement("script");
      const cspNonce = getMetaContent("csp-nonce");
      if (cspNonce) {
        createdScriptElement.nonce = cspNonce;
      }
      createdScriptElement.textContent = element.textContent;
      createdScriptElement.async = false;
      copyElementAttributes(createdScriptElement, element);
      return createdScriptElement;
    }
  }
  function copyElementAttributes(destinationElement, sourceElement) {
    for (const { name, value } of sourceElement.attributes) {
      destinationElement.setAttribute(name, value);
    }
  }
  function createDocumentFragment(html) {
    const template = document.createElement("template");
    template.innerHTML = html;
    return template.content;
  }
  function dispatch(eventName, { target, cancelable, detail } = {}) {
    const event = new CustomEvent(eventName, {
      cancelable,
      bubbles: true,
      composed: true,
      detail
    });
    if (target && target.isConnected) {
      target.dispatchEvent(event);
    } else {
      document.documentElement.dispatchEvent(event);
    }
    return event;
  }
  function nextAnimationFrame() {
    return new Promise((resolve) => requestAnimationFrame(() => resolve()));
  }
  function nextEventLoopTick() {
    return new Promise((resolve) => setTimeout(() => resolve(), 0));
  }
  function nextMicrotask() {
    return Promise.resolve();
  }
  function parseHTMLDocument(html = "") {
    return new DOMParser().parseFromString(html, "text/html");
  }
  function unindent(strings, ...values) {
    const lines = interpolate(strings, values).replace(/^\n/, "").split("\n");
    const match = lines[0].match(/^\s+/);
    const indent = match ? match[0].length : 0;
    return lines.map((line) => line.slice(indent)).join("\n");
  }
  function interpolate(strings, values) {
    return strings.reduce((result, string, i2) => {
      const value = values[i2] == void 0 ? "" : values[i2];
      return result + string + value;
    }, "");
  }
  function uuid() {
    return Array.from({ length: 36 }).map((_2, i2) => {
      if (i2 == 8 || i2 == 13 || i2 == 18 || i2 == 23) {
        return "-";
      } else if (i2 == 14) {
        return "4";
      } else if (i2 == 19) {
        return (Math.floor(Math.random() * 4) + 8).toString(16);
      } else {
        return Math.floor(Math.random() * 15).toString(16);
      }
    }).join("");
  }
  function getAttribute(attributeName, ...elements) {
    for (const value of elements.map((element) => element === null || element === void 0 ? void 0 : element.getAttribute(attributeName))) {
      if (typeof value == "string")
        return value;
    }
    return null;
  }
  function hasAttribute(attributeName, ...elements) {
    return elements.some((element) => element && element.hasAttribute(attributeName));
  }
  function markAsBusy(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.setAttribute("busy", "");
      }
      element.setAttribute("aria-busy", "true");
    }
  }
  function clearBusyState(...elements) {
    for (const element of elements) {
      if (element.localName == "turbo-frame") {
        element.removeAttribute("busy");
      }
      element.removeAttribute("aria-busy");
    }
  }
  function waitForLoad(element, timeoutInMilliseconds = 2e3) {
    return new Promise((resolve) => {
      const onComplete = () => {
        element.removeEventListener("error", onComplete);
        element.removeEventListener("load", onComplete);
        resolve();
      };
      element.addEventListener("load", onComplete, { once: true });
      element.addEventListener("error", onComplete, { once: true });
      setTimeout(resolve, timeoutInMilliseconds);
    });
  }
  function getHistoryMethodForAction(action) {
    switch (action) {
      case "replace":
        return history.replaceState;
      case "advance":
      case "restore":
        return history.pushState;
    }
  }
  function isAction(action) {
    return action == "advance" || action == "replace" || action == "restore";
  }
  function getVisitAction(...elements) {
    const action = getAttribute("data-turbo-action", ...elements);
    return isAction(action) ? action : null;
  }
  function getMetaElement(name) {
    return document.querySelector(`meta[name="${name}"]`);
  }
  function getMetaContent(name) {
    const element = getMetaElement(name);
    return element && element.content;
  }
  function setMetaContent(name, content) {
    let element = getMetaElement(name);
    if (!element) {
      element = document.createElement("meta");
      element.setAttribute("name", name);
      document.head.appendChild(element);
    }
    element.setAttribute("content", content);
    return element;
  }
  function findClosestRecursively(element, selector) {
    var _a;
    if (element instanceof Element) {
      return element.closest(selector) || findClosestRecursively(element.assignedSlot || ((_a = element.getRootNode()) === null || _a === void 0 ? void 0 : _a.host), selector);
    }
  }
  var FetchMethod;
  (function(FetchMethod2) {
    FetchMethod2[FetchMethod2["get"] = 0] = "get";
    FetchMethod2[FetchMethod2["post"] = 1] = "post";
    FetchMethod2[FetchMethod2["put"] = 2] = "put";
    FetchMethod2[FetchMethod2["patch"] = 3] = "patch";
    FetchMethod2[FetchMethod2["delete"] = 4] = "delete";
  })(FetchMethod || (FetchMethod = {}));
  function fetchMethodFromString(method) {
    switch (method.toLowerCase()) {
      case "get":
        return FetchMethod.get;
      case "post":
        return FetchMethod.post;
      case "put":
        return FetchMethod.put;
      case "patch":
        return FetchMethod.patch;
      case "delete":
        return FetchMethod.delete;
    }
  }
  var FetchRequest = class {
    constructor(delegate, method, location2, body = new URLSearchParams(), target = null) {
      this.abortController = new AbortController();
      this.resolveRequestPromise = (_value) => {
      };
      this.delegate = delegate;
      this.method = method;
      this.headers = this.defaultHeaders;
      this.body = body;
      this.url = location2;
      this.target = target;
    }
    get location() {
      return this.url;
    }
    get params() {
      return this.url.searchParams;
    }
    get entries() {
      return this.body ? Array.from(this.body.entries()) : [];
    }
    cancel() {
      this.abortController.abort();
    }
    async perform() {
      const { fetchOptions } = this;
      this.delegate.prepareRequest(this);
      await this.allowRequestToBeIntercepted(fetchOptions);
      try {
        this.delegate.requestStarted(this);
        const response = await fetch(this.url.href, fetchOptions);
        return await this.receive(response);
      } catch (error2) {
        if (error2.name !== "AbortError") {
          if (this.willDelegateErrorHandling(error2)) {
            this.delegate.requestErrored(this, error2);
          }
          throw error2;
        }
      } finally {
        this.delegate.requestFinished(this);
      }
    }
    async receive(response) {
      const fetchResponse = new FetchResponse(response);
      const event = dispatch("turbo:before-fetch-response", {
        cancelable: true,
        detail: { fetchResponse },
        target: this.target
      });
      if (event.defaultPrevented) {
        this.delegate.requestPreventedHandlingResponse(this, fetchResponse);
      } else if (fetchResponse.succeeded) {
        this.delegate.requestSucceededWithResponse(this, fetchResponse);
      } else {
        this.delegate.requestFailedWithResponse(this, fetchResponse);
      }
      return fetchResponse;
    }
    get fetchOptions() {
      var _a;
      return {
        method: FetchMethod[this.method].toUpperCase(),
        credentials: "same-origin",
        headers: this.headers,
        redirect: "follow",
        body: this.isSafe ? null : this.body,
        signal: this.abortSignal,
        referrer: (_a = this.delegate.referrer) === null || _a === void 0 ? void 0 : _a.href
      };
    }
    get defaultHeaders() {
      return {
        Accept: "text/html, application/xhtml+xml"
      };
    }
    get isSafe() {
      return this.method === FetchMethod.get;
    }
    get abortSignal() {
      return this.abortController.signal;
    }
    acceptResponseType(mimeType) {
      this.headers["Accept"] = [mimeType, this.headers["Accept"]].join(", ");
    }
    async allowRequestToBeIntercepted(fetchOptions) {
      const requestInterception = new Promise((resolve) => this.resolveRequestPromise = resolve);
      const event = dispatch("turbo:before-fetch-request", {
        cancelable: true,
        detail: {
          fetchOptions,
          url: this.url,
          resume: this.resolveRequestPromise
        },
        target: this.target
      });
      if (event.defaultPrevented)
        await requestInterception;
    }
    willDelegateErrorHandling(error2) {
      const event = dispatch("turbo:fetch-request-error", {
        target: this.target,
        cancelable: true,
        detail: { request: this, error: error2 }
      });
      return !event.defaultPrevented;
    }
  };
  var AppearanceObserver = class {
    constructor(delegate, element) {
      this.started = false;
      this.intersect = (entries) => {
        const lastEntry = entries.slice(-1)[0];
        if (lastEntry === null || lastEntry === void 0 ? void 0 : lastEntry.isIntersecting) {
          this.delegate.elementAppearedInViewport(this.element);
        }
      };
      this.delegate = delegate;
      this.element = element;
      this.intersectionObserver = new IntersectionObserver(this.intersect);
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.intersectionObserver.observe(this.element);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.intersectionObserver.unobserve(this.element);
      }
    }
  };
  var StreamMessage = class {
    static wrap(message) {
      if (typeof message == "string") {
        return new this(createDocumentFragment(message));
      } else {
        return message;
      }
    }
    constructor(fragment) {
      this.fragment = importStreamElements(fragment);
    }
  };
  StreamMessage.contentType = "text/vnd.turbo-stream.html";
  function importStreamElements(fragment) {
    for (const element of fragment.querySelectorAll("turbo-stream")) {
      const streamElement = document.importNode(element, true);
      for (const inertScriptElement of streamElement.templateElement.content.querySelectorAll("script")) {
        inertScriptElement.replaceWith(activateScriptElement(inertScriptElement));
      }
      element.replaceWith(streamElement);
    }
    return fragment;
  }
  var FormSubmissionState;
  (function(FormSubmissionState2) {
    FormSubmissionState2[FormSubmissionState2["initialized"] = 0] = "initialized";
    FormSubmissionState2[FormSubmissionState2["requesting"] = 1] = "requesting";
    FormSubmissionState2[FormSubmissionState2["waiting"] = 2] = "waiting";
    FormSubmissionState2[FormSubmissionState2["receiving"] = 3] = "receiving";
    FormSubmissionState2[FormSubmissionState2["stopping"] = 4] = "stopping";
    FormSubmissionState2[FormSubmissionState2["stopped"] = 5] = "stopped";
  })(FormSubmissionState || (FormSubmissionState = {}));
  var FormEnctype;
  (function(FormEnctype2) {
    FormEnctype2["urlEncoded"] = "application/x-www-form-urlencoded";
    FormEnctype2["multipart"] = "multipart/form-data";
    FormEnctype2["plain"] = "text/plain";
  })(FormEnctype || (FormEnctype = {}));
  function formEnctypeFromString(encoding) {
    switch (encoding.toLowerCase()) {
      case FormEnctype.multipart:
        return FormEnctype.multipart;
      case FormEnctype.plain:
        return FormEnctype.plain;
      default:
        return FormEnctype.urlEncoded;
    }
  }
  var FormSubmission = class _FormSubmission {
    static confirmMethod(message, _element, _submitter) {
      return Promise.resolve(confirm(message));
    }
    constructor(delegate, formElement, submitter, mustRedirect = false) {
      this.state = FormSubmissionState.initialized;
      this.delegate = delegate;
      this.formElement = formElement;
      this.submitter = submitter;
      this.formData = buildFormData(formElement, submitter);
      this.location = expandURL(this.action);
      if (this.method == FetchMethod.get) {
        mergeFormDataEntries(this.location, [...this.body.entries()]);
      }
      this.fetchRequest = new FetchRequest(this, this.method, this.location, this.body, this.formElement);
      this.mustRedirect = mustRedirect;
    }
    get method() {
      var _a;
      const method = ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formmethod")) || this.formElement.getAttribute("method") || "";
      return fetchMethodFromString(method.toLowerCase()) || FetchMethod.get;
    }
    get action() {
      var _a;
      const formElementAction = typeof this.formElement.action === "string" ? this.formElement.action : null;
      if ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.hasAttribute("formaction")) {
        return this.submitter.getAttribute("formaction") || "";
      } else {
        return this.formElement.getAttribute("action") || formElementAction || "";
      }
    }
    get body() {
      if (this.enctype == FormEnctype.urlEncoded || this.method == FetchMethod.get) {
        return new URLSearchParams(this.stringFormData);
      } else {
        return this.formData;
      }
    }
    get enctype() {
      var _a;
      return formEnctypeFromString(((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formenctype")) || this.formElement.enctype);
    }
    get isSafe() {
      return this.fetchRequest.isSafe;
    }
    get stringFormData() {
      return [...this.formData].reduce((entries, [name, value]) => {
        return entries.concat(typeof value == "string" ? [[name, value]] : []);
      }, []);
    }
    async start() {
      const { initialized, requesting } = FormSubmissionState;
      const confirmationMessage = getAttribute("data-turbo-confirm", this.submitter, this.formElement);
      if (typeof confirmationMessage === "string") {
        const answer = await _FormSubmission.confirmMethod(confirmationMessage, this.formElement, this.submitter);
        if (!answer) {
          return;
        }
      }
      if (this.state == initialized) {
        this.state = requesting;
        return this.fetchRequest.perform();
      }
    }
    stop() {
      const { stopping, stopped } = FormSubmissionState;
      if (this.state != stopping && this.state != stopped) {
        this.state = stopping;
        this.fetchRequest.cancel();
        return true;
      }
    }
    prepareRequest(request) {
      if (!request.isSafe) {
        const token = getCookieValue(getMetaContent("csrf-param")) || getMetaContent("csrf-token");
        if (token) {
          request.headers["X-CSRF-Token"] = token;
        }
      }
      if (this.requestAcceptsTurboStreamResponse(request)) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      var _a;
      this.state = FormSubmissionState.waiting;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "");
      this.setSubmitsWith();
      dispatch("turbo:submit-start", {
        target: this.formElement,
        detail: { formSubmission: this }
      });
      this.delegate.formSubmissionStarted(this);
    }
    requestPreventedHandlingResponse(request, response) {
      this.result = { success: response.succeeded, fetchResponse: response };
    }
    requestSucceededWithResponse(request, response) {
      if (response.clientError || response.serverError) {
        this.delegate.formSubmissionFailedWithResponse(this, response);
      } else if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {
        const error2 = new Error("Form responses must redirect to another location");
        this.delegate.formSubmissionErrored(this, error2);
      } else {
        this.state = FormSubmissionState.receiving;
        this.result = { success: true, fetchResponse: response };
        this.delegate.formSubmissionSucceededWithResponse(this, response);
      }
    }
    requestFailedWithResponse(request, response) {
      this.result = { success: false, fetchResponse: response };
      this.delegate.formSubmissionFailedWithResponse(this, response);
    }
    requestErrored(request, error2) {
      this.result = { success: false, error: error2 };
      this.delegate.formSubmissionErrored(this, error2);
    }
    requestFinished(_request) {
      var _a;
      this.state = FormSubmissionState.stopped;
      (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.removeAttribute("disabled");
      this.resetSubmitterText();
      dispatch("turbo:submit-end", {
        target: this.formElement,
        detail: Object.assign({ formSubmission: this }, this.result)
      });
      this.delegate.formSubmissionFinished(this);
    }
    setSubmitsWith() {
      if (!this.submitter || !this.submitsWith)
        return;
      if (this.submitter.matches("button")) {
        this.originalSubmitText = this.submitter.innerHTML;
        this.submitter.innerHTML = this.submitsWith;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        this.originalSubmitText = input.value;
        input.value = this.submitsWith;
      }
    }
    resetSubmitterText() {
      if (!this.submitter || !this.originalSubmitText)
        return;
      if (this.submitter.matches("button")) {
        this.submitter.innerHTML = this.originalSubmitText;
      } else if (this.submitter.matches("input")) {
        const input = this.submitter;
        input.value = this.originalSubmitText;
      }
    }
    requestMustRedirect(request) {
      return !request.isSafe && this.mustRedirect;
    }
    requestAcceptsTurboStreamResponse(request) {
      return !request.isSafe || hasAttribute("data-turbo-stream", this.submitter, this.formElement);
    }
    get submitsWith() {
      var _a;
      return (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("data-turbo-submits-with");
    }
  };
  function buildFormData(formElement, submitter) {
    const formData = new FormData(formElement);
    const name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("name");
    const value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("value");
    if (name) {
      formData.append(name, value || "");
    }
    return formData;
  }
  function getCookieValue(cookieName) {
    if (cookieName != null) {
      const cookies = document.cookie ? document.cookie.split("; ") : [];
      const cookie = cookies.find((cookie2) => cookie2.startsWith(cookieName));
      if (cookie) {
        const value = cookie.split("=").slice(1).join("=");
        return value ? decodeURIComponent(value) : void 0;
      }
    }
  }
  function responseSucceededWithoutRedirect(response) {
    return response.statusCode == 200 && !response.redirected;
  }
  function mergeFormDataEntries(url, entries) {
    const searchParams = new URLSearchParams();
    for (const [name, value] of entries) {
      if (value instanceof File)
        continue;
      searchParams.append(name, value);
    }
    url.search = searchParams.toString();
    return url;
  }
  var Snapshot = class {
    constructor(element) {
      this.element = element;
    }
    get activeElement() {
      return this.element.ownerDocument.activeElement;
    }
    get children() {
      return [...this.element.children];
    }
    hasAnchor(anchor) {
      return this.getElementForAnchor(anchor) != null;
    }
    getElementForAnchor(anchor) {
      return anchor ? this.element.querySelector(`[id='${anchor}'], a[name='${anchor}']`) : null;
    }
    get isConnected() {
      return this.element.isConnected;
    }
    get firstAutofocusableElement() {
      const inertDisabledOrHidden = "[inert], :disabled, [hidden], details:not([open]), dialog:not([open])";
      for (const element of this.element.querySelectorAll("[autofocus]")) {
        if (element.closest(inertDisabledOrHidden) == null)
          return element;
        else
          continue;
      }
      return null;
    }
    get permanentElements() {
      return queryPermanentElementsAll(this.element);
    }
    getPermanentElementById(id) {
      return getPermanentElementById(this.element, id);
    }
    getPermanentElementMapForSnapshot(snapshot) {
      const permanentElementMap = {};
      for (const currentPermanentElement of this.permanentElements) {
        const { id } = currentPermanentElement;
        const newPermanentElement = snapshot.getPermanentElementById(id);
        if (newPermanentElement) {
          permanentElementMap[id] = [currentPermanentElement, newPermanentElement];
        }
      }
      return permanentElementMap;
    }
  };
  function getPermanentElementById(node, id) {
    return node.querySelector(`#${id}[data-turbo-permanent]`);
  }
  function queryPermanentElementsAll(node) {
    return node.querySelectorAll("[id][data-turbo-permanent]");
  }
  var FormSubmitObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.submitCaptured = () => {
        this.eventTarget.removeEventListener("submit", this.submitBubbled, false);
        this.eventTarget.addEventListener("submit", this.submitBubbled, false);
      };
      this.submitBubbled = (event) => {
        if (!event.defaultPrevented) {
          const form = event.target instanceof HTMLFormElement ? event.target : void 0;
          const submitter = event.submitter || void 0;
          if (form && submissionDoesNotDismissDialog(form, submitter) && submissionDoesNotTargetIFrame(form, submitter) && this.delegate.willSubmitForm(form, submitter)) {
            event.preventDefault();
            event.stopImmediatePropagation();
            this.delegate.formSubmitted(form, submitter);
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("submit", this.submitCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("submit", this.submitCaptured, true);
        this.started = false;
      }
    }
  };
  function submissionDoesNotDismissDialog(form, submitter) {
    const method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.getAttribute("method");
    return method != "dialog";
  }
  function submissionDoesNotTargetIFrame(form, submitter) {
    if ((submitter === null || submitter === void 0 ? void 0 : submitter.hasAttribute("formtarget")) || form.hasAttribute("target")) {
      const target = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formtarget")) || form.target;
      for (const element of document.getElementsByName(target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var View = class {
    constructor(delegate, element) {
      this.resolveRenderPromise = (_value) => {
      };
      this.resolveInterceptionPromise = (_value) => {
      };
      this.delegate = delegate;
      this.element = element;
    }
    scrollToAnchor(anchor) {
      const element = this.snapshot.getElementForAnchor(anchor);
      if (element) {
        this.scrollToElement(element);
        this.focusElement(element);
      } else {
        this.scrollToPosition({ x: 0, y: 0 });
      }
    }
    scrollToAnchorFromLocation(location2) {
      this.scrollToAnchor(getAnchor(location2));
    }
    scrollToElement(element) {
      element.scrollIntoView();
    }
    focusElement(element) {
      if (element instanceof HTMLElement) {
        if (element.hasAttribute("tabindex")) {
          element.focus();
        } else {
          element.setAttribute("tabindex", "-1");
          element.focus();
          element.removeAttribute("tabindex");
        }
      }
    }
    scrollToPosition({ x: x2, y: y2 }) {
      this.scrollRoot.scrollTo(x2, y2);
    }
    scrollToTop() {
      this.scrollToPosition({ x: 0, y: 0 });
    }
    get scrollRoot() {
      return window;
    }
    async render(renderer) {
      const { isPreview, shouldRender, newSnapshot: snapshot } = renderer;
      if (shouldRender) {
        try {
          this.renderPromise = new Promise((resolve) => this.resolveRenderPromise = resolve);
          this.renderer = renderer;
          await this.prepareToRenderSnapshot(renderer);
          const renderInterception = new Promise((resolve) => this.resolveInterceptionPromise = resolve);
          const options = { resume: this.resolveInterceptionPromise, render: this.renderer.renderElement };
          const immediateRender = this.delegate.allowsImmediateRender(snapshot, options);
          if (!immediateRender)
            await renderInterception;
          await this.renderSnapshot(renderer);
          this.delegate.viewRenderedSnapshot(snapshot, isPreview);
          this.delegate.preloadOnLoadLinksForView(this.element);
          this.finishRenderingSnapshot(renderer);
        } finally {
          delete this.renderer;
          this.resolveRenderPromise(void 0);
          delete this.renderPromise;
        }
      } else {
        this.invalidate(renderer.reloadReason);
      }
    }
    invalidate(reason) {
      this.delegate.viewInvalidated(reason);
    }
    async prepareToRenderSnapshot(renderer) {
      this.markAsPreview(renderer.isPreview);
      await renderer.prepareToRender();
    }
    markAsPreview(isPreview) {
      if (isPreview) {
        this.element.setAttribute("data-turbo-preview", "");
      } else {
        this.element.removeAttribute("data-turbo-preview");
      }
    }
    async renderSnapshot(renderer) {
      await renderer.render();
    }
    finishRenderingSnapshot(renderer) {
      renderer.finishRendering();
    }
  };
  var FrameView = class extends View {
    missing() {
      this.element.innerHTML = `<strong class="turbo-frame-error">Content missing</strong>`;
    }
    get snapshot() {
      return new Snapshot(this.element);
    }
  };
  var LinkInterceptor = class {
    constructor(delegate, element) {
      this.clickBubbled = (event) => {
        if (this.respondsToEventTarget(event.target)) {
          this.clickEvent = event;
        } else {
          delete this.clickEvent;
        }
      };
      this.linkClicked = (event) => {
        if (this.clickEvent && this.respondsToEventTarget(event.target) && event.target instanceof Element) {
          if (this.delegate.shouldInterceptLinkClick(event.target, event.detail.url, event.detail.originalEvent)) {
            this.clickEvent.preventDefault();
            event.preventDefault();
            this.delegate.linkClickIntercepted(event.target, event.detail.url, event.detail.originalEvent);
          }
        }
        delete this.clickEvent;
      };
      this.willVisit = (_event) => {
        delete this.clickEvent;
      };
      this.delegate = delegate;
      this.element = element;
    }
    start() {
      this.element.addEventListener("click", this.clickBubbled);
      document.addEventListener("turbo:click", this.linkClicked);
      document.addEventListener("turbo:before-visit", this.willVisit);
    }
    stop() {
      this.element.removeEventListener("click", this.clickBubbled);
      document.removeEventListener("turbo:click", this.linkClicked);
      document.removeEventListener("turbo:before-visit", this.willVisit);
    }
    respondsToEventTarget(target) {
      const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
      return element && element.closest("turbo-frame, html") == this.element;
    }
  };
  var LinkClickObserver = class {
    constructor(delegate, eventTarget) {
      this.started = false;
      this.clickCaptured = () => {
        this.eventTarget.removeEventListener("click", this.clickBubbled, false);
        this.eventTarget.addEventListener("click", this.clickBubbled, false);
      };
      this.clickBubbled = (event) => {
        if (event instanceof MouseEvent && this.clickEventIsSignificant(event)) {
          const target = event.composedPath && event.composedPath()[0] || event.target;
          const link = this.findLinkFromClickTarget(target);
          if (link && doesNotTargetIFrame(link)) {
            const location2 = this.getLocationForLink(link);
            if (this.delegate.willFollowLinkToLocation(link, location2, event)) {
              event.preventDefault();
              this.delegate.followedLinkToLocation(link, location2);
            }
          }
        }
      };
      this.delegate = delegate;
      this.eventTarget = eventTarget;
    }
    start() {
      if (!this.started) {
        this.eventTarget.addEventListener("click", this.clickCaptured, true);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.eventTarget.removeEventListener("click", this.clickCaptured, true);
        this.started = false;
      }
    }
    clickEventIsSignificant(event) {
      return !(event.target && event.target.isContentEditable || event.defaultPrevented || event.which > 1 || event.altKey || event.ctrlKey || event.metaKey || event.shiftKey);
    }
    findLinkFromClickTarget(target) {
      return findClosestRecursively(target, "a[href]:not([target^=_]):not([download])");
    }
    getLocationForLink(link) {
      return expandURL(link.getAttribute("href") || "");
    }
  };
  function doesNotTargetIFrame(anchor) {
    if (anchor.hasAttribute("target")) {
      for (const element of document.getElementsByName(anchor.target)) {
        if (element instanceof HTMLIFrameElement)
          return false;
      }
      return true;
    } else {
      return true;
    }
  }
  var FormLinkClickObserver = class {
    constructor(delegate, element) {
      this.delegate = delegate;
      this.linkInterceptor = new LinkClickObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
    }
    stop() {
      this.linkInterceptor.stop();
    }
    willFollowLinkToLocation(link, location2, originalEvent) {
      return this.delegate.willSubmitFormLinkToLocation(link, location2, originalEvent) && link.hasAttribute("data-turbo-method");
    }
    followedLinkToLocation(link, location2) {
      const form = document.createElement("form");
      const type = "hidden";
      for (const [name, value] of location2.searchParams) {
        form.append(Object.assign(document.createElement("input"), { type, name, value }));
      }
      const action = Object.assign(location2, { search: "" });
      form.setAttribute("data-turbo", "true");
      form.setAttribute("action", action.href);
      form.setAttribute("hidden", "");
      const method = link.getAttribute("data-turbo-method");
      if (method)
        form.setAttribute("method", method);
      const turboFrame = link.getAttribute("data-turbo-frame");
      if (turboFrame)
        form.setAttribute("data-turbo-frame", turboFrame);
      const turboAction = getVisitAction(link);
      if (turboAction)
        form.setAttribute("data-turbo-action", turboAction);
      const turboConfirm = link.getAttribute("data-turbo-confirm");
      if (turboConfirm)
        form.setAttribute("data-turbo-confirm", turboConfirm);
      const turboStream = link.hasAttribute("data-turbo-stream");
      if (turboStream)
        form.setAttribute("data-turbo-stream", "");
      this.delegate.submittedFormLinkToLocation(link, location2, form);
      document.body.appendChild(form);
      form.addEventListener("turbo:submit-end", () => form.remove(), { once: true });
      requestAnimationFrame(() => form.requestSubmit());
    }
  };
  var Bardo = class {
    static async preservingPermanentElements(delegate, permanentElementMap, callback) {
      const bardo = new this(delegate, permanentElementMap);
      bardo.enter();
      await callback();
      bardo.leave();
    }
    constructor(delegate, permanentElementMap) {
      this.delegate = delegate;
      this.permanentElementMap = permanentElementMap;
    }
    enter() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement, newPermanentElement] = this.permanentElementMap[id];
        this.delegate.enteringBardo(currentPermanentElement, newPermanentElement);
        this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);
      }
    }
    leave() {
      for (const id in this.permanentElementMap) {
        const [currentPermanentElement] = this.permanentElementMap[id];
        this.replaceCurrentPermanentElementWithClone(currentPermanentElement);
        this.replacePlaceholderWithPermanentElement(currentPermanentElement);
        this.delegate.leavingBardo(currentPermanentElement);
      }
    }
    replaceNewPermanentElementWithPlaceholder(permanentElement) {
      const placeholder = createPlaceholderForPermanentElement(permanentElement);
      permanentElement.replaceWith(placeholder);
    }
    replaceCurrentPermanentElementWithClone(permanentElement) {
      const clone = permanentElement.cloneNode(true);
      permanentElement.replaceWith(clone);
    }
    replacePlaceholderWithPermanentElement(permanentElement) {
      const placeholder = this.getPlaceholderById(permanentElement.id);
      placeholder === null || placeholder === void 0 ? void 0 : placeholder.replaceWith(permanentElement);
    }
    getPlaceholderById(id) {
      return this.placeholders.find((element) => element.content == id);
    }
    get placeholders() {
      return [...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")];
    }
  };
  function createPlaceholderForPermanentElement(permanentElement) {
    const element = document.createElement("meta");
    element.setAttribute("name", "turbo-permanent-placeholder");
    element.setAttribute("content", permanentElement.id);
    return element;
  }
  var Renderer = class {
    constructor(currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      this.activeElement = null;
      this.currentSnapshot = currentSnapshot;
      this.newSnapshot = newSnapshot;
      this.isPreview = isPreview;
      this.willRender = willRender;
      this.renderElement = renderElement;
      this.promise = new Promise((resolve, reject) => this.resolvingFunctions = { resolve, reject });
    }
    get shouldRender() {
      return true;
    }
    get reloadReason() {
      return;
    }
    prepareToRender() {
      return;
    }
    finishRendering() {
      if (this.resolvingFunctions) {
        this.resolvingFunctions.resolve();
        delete this.resolvingFunctions;
      }
    }
    async preservingPermanentElements(callback) {
      await Bardo.preservingPermanentElements(this, this.permanentElementMap, callback);
    }
    focusFirstAutofocusableElement() {
      const element = this.connectedSnapshot.firstAutofocusableElement;
      if (elementIsFocusable(element)) {
        element.focus();
      }
    }
    enteringBardo(currentPermanentElement) {
      if (this.activeElement)
        return;
      if (currentPermanentElement.contains(this.currentSnapshot.activeElement)) {
        this.activeElement = this.currentSnapshot.activeElement;
      }
    }
    leavingBardo(currentPermanentElement) {
      if (currentPermanentElement.contains(this.activeElement) && this.activeElement instanceof HTMLElement) {
        this.activeElement.focus();
        this.activeElement = null;
      }
    }
    get connectedSnapshot() {
      return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;
    }
    get currentElement() {
      return this.currentSnapshot.element;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    get permanentElementMap() {
      return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);
    }
  };
  function elementIsFocusable(element) {
    return element && typeof element.focus == "function";
  }
  var FrameRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      var _a;
      const destinationRange = document.createRange();
      destinationRange.selectNodeContents(currentElement);
      destinationRange.deleteContents();
      const frameElement = newElement;
      const sourceRange = (_a = frameElement.ownerDocument) === null || _a === void 0 ? void 0 : _a.createRange();
      if (sourceRange) {
        sourceRange.selectNodeContents(frameElement);
        currentElement.appendChild(sourceRange.extractContents());
      }
    }
    constructor(delegate, currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
      super(currentSnapshot, newSnapshot, renderElement, isPreview, willRender);
      this.delegate = delegate;
    }
    get shouldRender() {
      return true;
    }
    async render() {
      await nextAnimationFrame();
      this.preservingPermanentElements(() => {
        this.loadFrameElement();
      });
      this.scrollFrameIntoView();
      await nextAnimationFrame();
      this.focusFirstAutofocusableElement();
      await nextAnimationFrame();
      this.activateScriptElements();
    }
    loadFrameElement() {
      this.delegate.willRenderFrame(this.currentElement, this.newElement);
      this.renderElement(this.currentElement, this.newElement);
    }
    scrollFrameIntoView() {
      if (this.currentElement.autoscroll || this.newElement.autoscroll) {
        const element = this.currentElement.firstElementChild;
        const block = readScrollLogicalPosition(this.currentElement.getAttribute("data-autoscroll-block"), "end");
        const behavior = readScrollBehavior(this.currentElement.getAttribute("data-autoscroll-behavior"), "auto");
        if (element) {
          element.scrollIntoView({ block, behavior });
          return true;
        }
      }
      return false;
    }
    activateScriptElements() {
      for (const inertScriptElement of this.newScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    get newScriptElements() {
      return this.currentElement.querySelectorAll("script");
    }
  };
  function readScrollLogicalPosition(value, defaultValue) {
    if (value == "end" || value == "start" || value == "center" || value == "nearest") {
      return value;
    } else {
      return defaultValue;
    }
  }
  function readScrollBehavior(value, defaultValue) {
    if (value == "auto" || value == "smooth") {
      return value;
    } else {
      return defaultValue;
    }
  }
  var ProgressBar = class _ProgressBar {
    static get defaultCSS() {
      return unindent`
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${_ProgressBar.animationDuration}ms ease-out,
          opacity ${_ProgressBar.animationDuration / 2}ms ${_ProgressBar.animationDuration / 2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `;
    }
    constructor() {
      this.hiding = false;
      this.value = 0;
      this.visible = false;
      this.trickle = () => {
        this.setValue(this.value + Math.random() / 100);
      };
      this.stylesheetElement = this.createStylesheetElement();
      this.progressElement = this.createProgressElement();
      this.installStylesheetElement();
      this.setValue(0);
    }
    show() {
      if (!this.visible) {
        this.visible = true;
        this.installProgressElement();
        this.startTrickling();
      }
    }
    hide() {
      if (this.visible && !this.hiding) {
        this.hiding = true;
        this.fadeProgressElement(() => {
          this.uninstallProgressElement();
          this.stopTrickling();
          this.visible = false;
          this.hiding = false;
        });
      }
    }
    setValue(value) {
      this.value = value;
      this.refresh();
    }
    installStylesheetElement() {
      document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
    }
    installProgressElement() {
      this.progressElement.style.width = "0";
      this.progressElement.style.opacity = "1";
      document.documentElement.insertBefore(this.progressElement, document.body);
      this.refresh();
    }
    fadeProgressElement(callback) {
      this.progressElement.style.opacity = "0";
      setTimeout(callback, _ProgressBar.animationDuration * 1.5);
    }
    uninstallProgressElement() {
      if (this.progressElement.parentNode) {
        document.documentElement.removeChild(this.progressElement);
      }
    }
    startTrickling() {
      if (!this.trickleInterval) {
        this.trickleInterval = window.setInterval(this.trickle, _ProgressBar.animationDuration);
      }
    }
    stopTrickling() {
      window.clearInterval(this.trickleInterval);
      delete this.trickleInterval;
    }
    refresh() {
      requestAnimationFrame(() => {
        this.progressElement.style.width = `${10 + this.value * 90}%`;
      });
    }
    createStylesheetElement() {
      const element = document.createElement("style");
      element.type = "text/css";
      element.textContent = _ProgressBar.defaultCSS;
      if (this.cspNonce) {
        element.nonce = this.cspNonce;
      }
      return element;
    }
    createProgressElement() {
      const element = document.createElement("div");
      element.className = "turbo-progress-bar";
      return element;
    }
    get cspNonce() {
      return getMetaContent("csp-nonce");
    }
  };
  ProgressBar.animationDuration = 300;
  var HeadSnapshot = class extends Snapshot {
    constructor() {
      super(...arguments);
      this.detailsByOuterHTML = this.children.filter((element) => !elementIsNoscript(element)).map((element) => elementWithoutNonce(element)).reduce((result, element) => {
        const { outerHTML } = element;
        const details = outerHTML in result ? result[outerHTML] : {
          type: elementType(element),
          tracked: elementIsTracked(element),
          elements: []
        };
        return Object.assign(Object.assign({}, result), { [outerHTML]: Object.assign(Object.assign({}, details), { elements: [...details.elements, element] }) });
      }, {});
    }
    get trackedElementSignature() {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => this.detailsByOuterHTML[outerHTML].tracked).join("");
    }
    getScriptElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("script", snapshot);
    }
    getStylesheetElementsNotInSnapshot(snapshot) {
      return this.getElementsMatchingTypeNotInSnapshot("stylesheet", snapshot);
    }
    getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {
      return Object.keys(this.detailsByOuterHTML).filter((outerHTML) => !(outerHTML in snapshot.detailsByOuterHTML)).map((outerHTML) => this.detailsByOuterHTML[outerHTML]).filter(({ type }) => type == matchedType).map(({ elements: [element] }) => element);
    }
    get provisionalElements() {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { type, tracked, elements } = this.detailsByOuterHTML[outerHTML];
        if (type == null && !tracked) {
          return [...result, ...elements];
        } else if (elements.length > 1) {
          return [...result, ...elements.slice(1)];
        } else {
          return result;
        }
      }, []);
    }
    getMetaValue(name) {
      const element = this.findMetaElementByName(name);
      return element ? element.getAttribute("content") : null;
    }
    findMetaElementByName(name) {
      return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
        const { elements: [element] } = this.detailsByOuterHTML[outerHTML];
        return elementIsMetaElementWithName(element, name) ? element : result;
      }, void 0);
    }
  };
  function elementType(element) {
    if (elementIsScript(element)) {
      return "script";
    } else if (elementIsStylesheet(element)) {
      return "stylesheet";
    }
  }
  function elementIsTracked(element) {
    return element.getAttribute("data-turbo-track") == "reload";
  }
  function elementIsScript(element) {
    const tagName = element.localName;
    return tagName == "script";
  }
  function elementIsNoscript(element) {
    const tagName = element.localName;
    return tagName == "noscript";
  }
  function elementIsStylesheet(element) {
    const tagName = element.localName;
    return tagName == "style" || tagName == "link" && element.getAttribute("rel") == "stylesheet";
  }
  function elementIsMetaElementWithName(element, name) {
    const tagName = element.localName;
    return tagName == "meta" && element.getAttribute("name") == name;
  }
  function elementWithoutNonce(element) {
    if (element.hasAttribute("nonce")) {
      element.setAttribute("nonce", "");
    }
    return element;
  }
  var PageSnapshot = class _PageSnapshot extends Snapshot {
    static fromHTMLString(html = "") {
      return this.fromDocument(parseHTMLDocument(html));
    }
    static fromElement(element) {
      return this.fromDocument(element.ownerDocument);
    }
    static fromDocument({ head, body }) {
      return new this(body, new HeadSnapshot(head));
    }
    constructor(element, headSnapshot) {
      super(element);
      this.headSnapshot = headSnapshot;
    }
    clone() {
      const clonedElement = this.element.cloneNode(true);
      const selectElements = this.element.querySelectorAll("select");
      const clonedSelectElements = clonedElement.querySelectorAll("select");
      for (const [index, source] of selectElements.entries()) {
        const clone = clonedSelectElements[index];
        for (const option of clone.selectedOptions)
          option.selected = false;
        for (const option of source.selectedOptions)
          clone.options[option.index].selected = true;
      }
      for (const clonedPasswordInput of clonedElement.querySelectorAll('input[type="password"]')) {
        clonedPasswordInput.value = "";
      }
      return new _PageSnapshot(clonedElement, this.headSnapshot);
    }
    get headElement() {
      return this.headSnapshot.element;
    }
    get rootLocation() {
      var _a;
      const root = (_a = this.getSetting("root")) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    get cacheControlValue() {
      return this.getSetting("cache-control");
    }
    get isPreviewable() {
      return this.cacheControlValue != "no-preview";
    }
    get isCacheable() {
      return this.cacheControlValue != "no-cache";
    }
    get isVisitable() {
      return this.getSetting("visit-control") != "reload";
    }
    getSetting(name) {
      return this.headSnapshot.getMetaValue(`turbo-${name}`);
    }
  };
  var TimingMetric;
  (function(TimingMetric2) {
    TimingMetric2["visitStart"] = "visitStart";
    TimingMetric2["requestStart"] = "requestStart";
    TimingMetric2["requestEnd"] = "requestEnd";
    TimingMetric2["visitEnd"] = "visitEnd";
  })(TimingMetric || (TimingMetric = {}));
  var VisitState;
  (function(VisitState2) {
    VisitState2["initialized"] = "initialized";
    VisitState2["started"] = "started";
    VisitState2["canceled"] = "canceled";
    VisitState2["failed"] = "failed";
    VisitState2["completed"] = "completed";
  })(VisitState || (VisitState = {}));
  var defaultOptions = {
    action: "advance",
    historyChanged: false,
    visitCachedSnapshot: () => {
    },
    willRender: true,
    updateHistory: true,
    shouldCacheSnapshot: true,
    acceptsStreamResponse: false
  };
  var SystemStatusCode;
  (function(SystemStatusCode2) {
    SystemStatusCode2[SystemStatusCode2["networkFailure"] = 0] = "networkFailure";
    SystemStatusCode2[SystemStatusCode2["timeoutFailure"] = -1] = "timeoutFailure";
    SystemStatusCode2[SystemStatusCode2["contentTypeMismatch"] = -2] = "contentTypeMismatch";
  })(SystemStatusCode || (SystemStatusCode = {}));
  var Visit = class {
    constructor(delegate, location2, restorationIdentifier, options = {}) {
      this.identifier = uuid();
      this.timingMetrics = {};
      this.followedRedirect = false;
      this.historyChanged = false;
      this.scrolled = false;
      this.shouldCacheSnapshot = true;
      this.acceptsStreamResponse = false;
      this.snapshotCached = false;
      this.state = VisitState.initialized;
      this.delegate = delegate;
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier || uuid();
      const { action, historyChanged, referrer, snapshot, snapshotHTML, response, visitCachedSnapshot, willRender, updateHistory, shouldCacheSnapshot, acceptsStreamResponse } = Object.assign(Object.assign({}, defaultOptions), options);
      this.action = action;
      this.historyChanged = historyChanged;
      this.referrer = referrer;
      this.snapshot = snapshot;
      this.snapshotHTML = snapshotHTML;
      this.response = response;
      this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);
      this.visitCachedSnapshot = visitCachedSnapshot;
      this.willRender = willRender;
      this.updateHistory = updateHistory;
      this.scrolled = !willRender;
      this.shouldCacheSnapshot = shouldCacheSnapshot;
      this.acceptsStreamResponse = acceptsStreamResponse;
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    get restorationData() {
      return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);
    }
    get silent() {
      return this.isSamePage;
    }
    start() {
      if (this.state == VisitState.initialized) {
        this.recordTimingMetric(TimingMetric.visitStart);
        this.state = VisitState.started;
        this.adapter.visitStarted(this);
        this.delegate.visitStarted(this);
      }
    }
    cancel() {
      if (this.state == VisitState.started) {
        if (this.request) {
          this.request.cancel();
        }
        this.cancelRender();
        this.state = VisitState.canceled;
      }
    }
    complete() {
      if (this.state == VisitState.started) {
        this.recordTimingMetric(TimingMetric.visitEnd);
        this.state = VisitState.completed;
        this.followRedirect();
        if (!this.followedRedirect) {
          this.adapter.visitCompleted(this);
          this.delegate.visitCompleted(this);
        }
      }
    }
    fail() {
      if (this.state == VisitState.started) {
        this.state = VisitState.failed;
        this.adapter.visitFailed(this);
      }
    }
    changeHistory() {
      var _a;
      if (!this.historyChanged && this.updateHistory) {
        const actionForHistory = this.location.href === ((_a = this.referrer) === null || _a === void 0 ? void 0 : _a.href) ? "replace" : this.action;
        const method = getHistoryMethodForAction(actionForHistory);
        this.history.update(method, this.location, this.restorationIdentifier);
        this.historyChanged = true;
      }
    }
    issueRequest() {
      if (this.hasPreloadedResponse()) {
        this.simulateRequest();
      } else if (this.shouldIssueRequest() && !this.request) {
        this.request = new FetchRequest(this, FetchMethod.get, this.location);
        this.request.perform();
      }
    }
    simulateRequest() {
      if (this.response) {
        this.startRequest();
        this.recordResponse();
        this.finishRequest();
      }
    }
    startRequest() {
      this.recordTimingMetric(TimingMetric.requestStart);
      this.adapter.visitRequestStarted(this);
    }
    recordResponse(response = this.response) {
      this.response = response;
      if (response) {
        const { statusCode } = response;
        if (isSuccessful(statusCode)) {
          this.adapter.visitRequestCompleted(this);
        } else {
          this.adapter.visitRequestFailedWithStatusCode(this, statusCode);
        }
      }
    }
    finishRequest() {
      this.recordTimingMetric(TimingMetric.requestEnd);
      this.adapter.visitRequestFinished(this);
    }
    loadResponse() {
      if (this.response) {
        const { statusCode, responseHTML } = this.response;
        this.render(async () => {
          if (this.shouldCacheSnapshot)
            this.cacheSnapshot();
          if (this.view.renderPromise)
            await this.view.renderPromise;
          if (isSuccessful(statusCode) && responseHTML != null) {
            await this.view.renderPage(PageSnapshot.fromHTMLString(responseHTML), false, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            this.complete();
          } else {
            await this.view.renderError(PageSnapshot.fromHTMLString(responseHTML), this);
            this.adapter.visitRendered(this);
            this.fail();
          }
        });
      }
    }
    getCachedSnapshot() {
      const snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();
      if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {
        if (this.action == "restore" || snapshot.isPreviewable) {
          return snapshot;
        }
      }
    }
    getPreloadedSnapshot() {
      if (this.snapshotHTML) {
        return PageSnapshot.fromHTMLString(this.snapshotHTML);
      }
    }
    hasCachedSnapshot() {
      return this.getCachedSnapshot() != null;
    }
    loadCachedSnapshot() {
      const snapshot = this.getCachedSnapshot();
      if (snapshot) {
        const isPreview = this.shouldIssueRequest();
        this.render(async () => {
          this.cacheSnapshot();
          if (this.isSamePage) {
            this.adapter.visitRendered(this);
          } else {
            if (this.view.renderPromise)
              await this.view.renderPromise;
            await this.view.renderPage(snapshot, isPreview, this.willRender, this);
            this.performScroll();
            this.adapter.visitRendered(this);
            if (!isPreview) {
              this.complete();
            }
          }
        });
      }
    }
    followRedirect() {
      var _a;
      if (this.redirectedToLocation && !this.followedRedirect && ((_a = this.response) === null || _a === void 0 ? void 0 : _a.redirected)) {
        this.adapter.visitProposedToLocation(this.redirectedToLocation, {
          action: "replace",
          response: this.response,
          shouldCacheSnapshot: false,
          willRender: false
        });
        this.followedRedirect = true;
      }
    }
    goToSamePageAnchor() {
      if (this.isSamePage) {
        this.render(async () => {
          this.cacheSnapshot();
          this.performScroll();
          this.changeHistory();
          this.adapter.visitRendered(this);
        });
      }
    }
    prepareRequest(request) {
      if (this.acceptsStreamResponse) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted() {
      this.startRequest();
    }
    requestPreventedHandlingResponse(_request, _response) {
    }
    async requestSucceededWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.redirectedToLocation = response.redirected ? response.location : void 0;
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    async requestFailedWithResponse(request, response) {
      const responseHTML = await response.responseHTML;
      const { redirected, statusCode } = response;
      if (responseHTML == void 0) {
        this.recordResponse({
          statusCode: SystemStatusCode.contentTypeMismatch,
          redirected
        });
      } else {
        this.recordResponse({ statusCode, responseHTML, redirected });
      }
    }
    requestErrored(_request, _error) {
      this.recordResponse({
        statusCode: SystemStatusCode.networkFailure,
        redirected: false
      });
    }
    requestFinished() {
      this.finishRequest();
    }
    performScroll() {
      if (!this.scrolled && !this.view.forceReloaded) {
        if (this.action == "restore") {
          this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();
        } else {
          this.scrollToAnchor() || this.view.scrollToTop();
        }
        if (this.isSamePage) {
          this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);
        }
        this.scrolled = true;
      }
    }
    scrollToRestoredPosition() {
      const { scrollPosition } = this.restorationData;
      if (scrollPosition) {
        this.view.scrollToPosition(scrollPosition);
        return true;
      }
    }
    scrollToAnchor() {
      const anchor = getAnchor(this.location);
      if (anchor != null) {
        this.view.scrollToAnchor(anchor);
        return true;
      }
    }
    recordTimingMetric(metric) {
      this.timingMetrics[metric] = (/* @__PURE__ */ new Date()).getTime();
    }
    getTimingMetrics() {
      return Object.assign({}, this.timingMetrics);
    }
    getHistoryMethodForAction(action) {
      switch (action) {
        case "replace":
          return history.replaceState;
        case "advance":
        case "restore":
          return history.pushState;
      }
    }
    hasPreloadedResponse() {
      return typeof this.response == "object";
    }
    shouldIssueRequest() {
      if (this.isSamePage) {
        return false;
      } else if (this.action == "restore") {
        return !this.hasCachedSnapshot();
      } else {
        return this.willRender;
      }
    }
    cacheSnapshot() {
      if (!this.snapshotCached) {
        this.view.cacheSnapshot(this.snapshot).then((snapshot) => snapshot && this.visitCachedSnapshot(snapshot));
        this.snapshotCached = true;
      }
    }
    async render(callback) {
      this.cancelRender();
      await new Promise((resolve) => {
        this.frame = requestAnimationFrame(() => resolve());
      });
      await callback();
      delete this.frame;
    }
    cancelRender() {
      if (this.frame) {
        cancelAnimationFrame(this.frame);
        delete this.frame;
      }
    }
  };
  function isSuccessful(statusCode) {
    return statusCode >= 200 && statusCode < 300;
  }
  var BrowserAdapter = class {
    constructor(session2) {
      this.progressBar = new ProgressBar();
      this.showProgressBar = () => {
        this.progressBar.show();
      };
      this.session = session2;
    }
    visitProposedToLocation(location2, options) {
      this.navigator.startVisit(location2, (options === null || options === void 0 ? void 0 : options.restorationIdentifier) || uuid(), options);
    }
    visitStarted(visit2) {
      this.location = visit2.location;
      visit2.loadCachedSnapshot();
      visit2.issueRequest();
      visit2.goToSamePageAnchor();
    }
    visitRequestStarted(visit2) {
      this.progressBar.setValue(0);
      if (visit2.hasCachedSnapshot() || visit2.action != "restore") {
        this.showVisitProgressBarAfterDelay();
      } else {
        this.showProgressBar();
      }
    }
    visitRequestCompleted(visit2) {
      visit2.loadResponse();
    }
    visitRequestFailedWithStatusCode(visit2, statusCode) {
      switch (statusCode) {
        case SystemStatusCode.networkFailure:
        case SystemStatusCode.timeoutFailure:
        case SystemStatusCode.contentTypeMismatch:
          return this.reload({
            reason: "request_failed",
            context: {
              statusCode
            }
          });
        default:
          return visit2.loadResponse();
      }
    }
    visitRequestFinished(_visit) {
      this.progressBar.setValue(1);
      this.hideVisitProgressBar();
    }
    visitCompleted(_visit) {
    }
    pageInvalidated(reason) {
      this.reload(reason);
    }
    visitFailed(_visit) {
    }
    visitRendered(_visit) {
    }
    formSubmissionStarted(_formSubmission) {
      this.progressBar.setValue(0);
      this.showFormProgressBarAfterDelay();
    }
    formSubmissionFinished(_formSubmission) {
      this.progressBar.setValue(1);
      this.hideFormProgressBar();
    }
    showVisitProgressBarAfterDelay() {
      this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
    }
    hideVisitProgressBar() {
      this.progressBar.hide();
      if (this.visitProgressBarTimeout != null) {
        window.clearTimeout(this.visitProgressBarTimeout);
        delete this.visitProgressBarTimeout;
      }
    }
    showFormProgressBarAfterDelay() {
      if (this.formProgressBarTimeout == null) {
        this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
      }
    }
    hideFormProgressBar() {
      this.progressBar.hide();
      if (this.formProgressBarTimeout != null) {
        window.clearTimeout(this.formProgressBarTimeout);
        delete this.formProgressBarTimeout;
      }
    }
    reload(reason) {
      var _a;
      dispatch("turbo:reload", { detail: reason });
      window.location.href = ((_a = this.location) === null || _a === void 0 ? void 0 : _a.toString()) || window.location.href;
    }
    get navigator() {
      return this.session.navigator;
    }
  };
  var CacheObserver = class {
    constructor() {
      this.selector = "[data-turbo-temporary]";
      this.deprecatedSelector = "[data-turbo-cache=false]";
      this.started = false;
      this.removeTemporaryElements = (_event) => {
        for (const element of this.temporaryElements) {
          element.remove();
        }
      };
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-cache", this.removeTemporaryElements, false);
      }
    }
    get temporaryElements() {
      return [...document.querySelectorAll(this.selector), ...this.temporaryElementsWithDeprecation];
    }
    get temporaryElementsWithDeprecation() {
      const elements = document.querySelectorAll(this.deprecatedSelector);
      if (elements.length) {
        console.warn(`The ${this.deprecatedSelector} selector is deprecated and will be removed in a future version. Use ${this.selector} instead.`);
      }
      return [...elements];
    }
  };
  var FrameRedirector = class {
    constructor(session2, element) {
      this.session = session2;
      this.element = element;
      this.linkInterceptor = new LinkInterceptor(this, element);
      this.formSubmitObserver = new FormSubmitObserver(this, element);
    }
    start() {
      this.linkInterceptor.start();
      this.formSubmitObserver.start();
    }
    stop() {
      this.linkInterceptor.stop();
      this.formSubmitObserver.stop();
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldRedirect(element);
    }
    linkClickIntercepted(element, url, event) {
      const frame = this.findFrameElement(element);
      if (frame) {
        frame.delegate.linkClickIntercepted(element, url, event);
      }
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == null && this.shouldSubmit(element, submitter) && this.shouldRedirect(element, submitter);
    }
    formSubmitted(element, submitter) {
      const frame = this.findFrameElement(element, submitter);
      if (frame) {
        frame.delegate.formSubmitted(element, submitter);
      }
    }
    shouldSubmit(form, submitter) {
      var _a;
      const action = getAction(form, submitter);
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const rootLocation = expandURL((_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/");
      return this.shouldRedirect(form, submitter) && locationIsVisitable(action, rootLocation);
    }
    shouldRedirect(element, submitter) {
      const isNavigatable = element instanceof HTMLFormElement ? this.session.submissionIsNavigatable(element, submitter) : this.session.elementIsNavigatable(element);
      if (isNavigatable) {
        const frame = this.findFrameElement(element, submitter);
        return frame ? frame != element.closest("turbo-frame") : false;
      } else {
        return false;
      }
    }
    findFrameElement(element, submitter) {
      const id = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("data-turbo-frame")) || element.getAttribute("data-turbo-frame");
      if (id && id != "_top") {
        const frame = this.element.querySelector(`#${id}:not([disabled])`);
        if (frame instanceof FrameElement) {
          return frame;
        }
      }
    }
  };
  var History = class {
    constructor(delegate) {
      this.restorationIdentifier = uuid();
      this.restorationData = {};
      this.started = false;
      this.pageLoaded = false;
      this.onPopState = (event) => {
        if (this.shouldHandlePopState()) {
          const { turbo } = event.state || {};
          if (turbo) {
            this.location = new URL(window.location.href);
            const { restorationIdentifier } = turbo;
            this.restorationIdentifier = restorationIdentifier;
            this.delegate.historyPoppedToLocationWithRestorationIdentifier(this.location, restorationIdentifier);
          }
        }
      };
      this.onPageLoad = async (_event) => {
        await nextMicrotask();
        this.pageLoaded = true;
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("popstate", this.onPopState, false);
        addEventListener("load", this.onPageLoad, false);
        this.started = true;
        this.replace(new URL(window.location.href));
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("popstate", this.onPopState, false);
        removeEventListener("load", this.onPageLoad, false);
        this.started = false;
      }
    }
    push(location2, restorationIdentifier) {
      this.update(history.pushState, location2, restorationIdentifier);
    }
    replace(location2, restorationIdentifier) {
      this.update(history.replaceState, location2, restorationIdentifier);
    }
    update(method, location2, restorationIdentifier = uuid()) {
      const state = { turbo: { restorationIdentifier } };
      method.call(history, state, "", location2.href);
      this.location = location2;
      this.restorationIdentifier = restorationIdentifier;
    }
    getRestorationDataForIdentifier(restorationIdentifier) {
      return this.restorationData[restorationIdentifier] || {};
    }
    updateRestorationData(additionalData) {
      const { restorationIdentifier } = this;
      const restorationData = this.restorationData[restorationIdentifier];
      this.restorationData[restorationIdentifier] = Object.assign(Object.assign({}, restorationData), additionalData);
    }
    assumeControlOfScrollRestoration() {
      var _a;
      if (!this.previousScrollRestoration) {
        this.previousScrollRestoration = (_a = history.scrollRestoration) !== null && _a !== void 0 ? _a : "auto";
        history.scrollRestoration = "manual";
      }
    }
    relinquishControlOfScrollRestoration() {
      if (this.previousScrollRestoration) {
        history.scrollRestoration = this.previousScrollRestoration;
        delete this.previousScrollRestoration;
      }
    }
    shouldHandlePopState() {
      return this.pageIsLoaded();
    }
    pageIsLoaded() {
      return this.pageLoaded || document.readyState == "complete";
    }
  };
  var Navigator = class {
    constructor(delegate) {
      this.delegate = delegate;
    }
    proposeVisit(location2, options = {}) {
      if (this.delegate.allowsVisitingLocationWithAction(location2, options.action)) {
        if (locationIsVisitable(location2, this.view.snapshot.rootLocation)) {
          this.delegate.visitProposedToLocation(location2, options);
        } else {
          window.location.href = location2.toString();
        }
      }
    }
    startVisit(locatable, restorationIdentifier, options = {}) {
      this.stop();
      this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, Object.assign({ referrer: this.location }, options));
      this.currentVisit.start();
    }
    submitForm(form, submitter) {
      this.stop();
      this.formSubmission = new FormSubmission(this, form, submitter, true);
      this.formSubmission.start();
    }
    stop() {
      if (this.formSubmission) {
        this.formSubmission.stop();
        delete this.formSubmission;
      }
      if (this.currentVisit) {
        this.currentVisit.cancel();
        delete this.currentVisit;
      }
    }
    get adapter() {
      return this.delegate.adapter;
    }
    get view() {
      return this.delegate.view;
    }
    get history() {
      return this.delegate.history;
    }
    formSubmissionStarted(formSubmission) {
      if (typeof this.adapter.formSubmissionStarted === "function") {
        this.adapter.formSubmissionStarted(formSubmission);
      }
    }
    async formSubmissionSucceededWithResponse(formSubmission, fetchResponse) {
      if (formSubmission == this.formSubmission) {
        const responseHTML = await fetchResponse.responseHTML;
        if (responseHTML) {
          const shouldCacheSnapshot = formSubmission.isSafe;
          if (!shouldCacheSnapshot) {
            this.view.clearSnapshotCache();
          }
          const { statusCode, redirected } = fetchResponse;
          const action = this.getActionForFormSubmission(formSubmission);
          const visitOptions = {
            action,
            shouldCacheSnapshot,
            response: { statusCode, responseHTML, redirected }
          };
          this.proposeVisit(fetchResponse.location, visitOptions);
        }
      }
    }
    async formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      const responseHTML = await fetchResponse.responseHTML;
      if (responseHTML) {
        const snapshot = PageSnapshot.fromHTMLString(responseHTML);
        if (fetchResponse.serverError) {
          await this.view.renderError(snapshot, this.currentVisit);
        } else {
          await this.view.renderPage(snapshot, false, true, this.currentVisit);
        }
        this.view.scrollToTop();
        this.view.clearSnapshotCache();
      }
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished(formSubmission) {
      if (typeof this.adapter.formSubmissionFinished === "function") {
        this.adapter.formSubmissionFinished(formSubmission);
      }
    }
    visitStarted(visit2) {
      this.delegate.visitStarted(visit2);
    }
    visitCompleted(visit2) {
      this.delegate.visitCompleted(visit2);
    }
    locationWithActionIsSamePage(location2, action) {
      const anchor = getAnchor(location2);
      const currentAnchor = getAnchor(this.view.lastRenderedLocation);
      const isRestorationToTop = action === "restore" && typeof anchor === "undefined";
      return action !== "replace" && getRequestURL(location2) === getRequestURL(this.view.lastRenderedLocation) && (isRestorationToTop || anchor != null && anchor !== currentAnchor);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    getActionForFormSubmission({ submitter, formElement }) {
      return getVisitAction(submitter, formElement) || "advance";
    }
  };
  var PageStage;
  (function(PageStage2) {
    PageStage2[PageStage2["initial"] = 0] = "initial";
    PageStage2[PageStage2["loading"] = 1] = "loading";
    PageStage2[PageStage2["interactive"] = 2] = "interactive";
    PageStage2[PageStage2["complete"] = 3] = "complete";
  })(PageStage || (PageStage = {}));
  var PageObserver = class {
    constructor(delegate) {
      this.stage = PageStage.initial;
      this.started = false;
      this.interpretReadyState = () => {
        const { readyState } = this;
        if (readyState == "interactive") {
          this.pageIsInteractive();
        } else if (readyState == "complete") {
          this.pageIsComplete();
        }
      };
      this.pageWillUnload = () => {
        this.delegate.pageWillUnload();
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        if (this.stage == PageStage.initial) {
          this.stage = PageStage.loading;
        }
        document.addEventListener("readystatechange", this.interpretReadyState, false);
        addEventListener("pagehide", this.pageWillUnload, false);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        document.removeEventListener("readystatechange", this.interpretReadyState, false);
        removeEventListener("pagehide", this.pageWillUnload, false);
        this.started = false;
      }
    }
    pageIsInteractive() {
      if (this.stage == PageStage.loading) {
        this.stage = PageStage.interactive;
        this.delegate.pageBecameInteractive();
      }
    }
    pageIsComplete() {
      this.pageIsInteractive();
      if (this.stage == PageStage.interactive) {
        this.stage = PageStage.complete;
        this.delegate.pageLoaded();
      }
    }
    get readyState() {
      return document.readyState;
    }
  };
  var ScrollObserver = class {
    constructor(delegate) {
      this.started = false;
      this.onScroll = () => {
        this.updatePosition({ x: window.pageXOffset, y: window.pageYOffset });
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        addEventListener("scroll", this.onScroll, false);
        this.onScroll();
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        removeEventListener("scroll", this.onScroll, false);
        this.started = false;
      }
    }
    updatePosition(position) {
      this.delegate.scrollPositionChanged(position);
    }
  };
  var StreamMessageRenderer = class {
    render({ fragment }) {
      Bardo.preservingPermanentElements(this, getPermanentElementMapForFragment(fragment), () => document.documentElement.appendChild(fragment));
    }
    enteringBardo(currentPermanentElement, newPermanentElement) {
      newPermanentElement.replaceWith(currentPermanentElement.cloneNode(true));
    }
    leavingBardo() {
    }
  };
  function getPermanentElementMapForFragment(fragment) {
    const permanentElementsInDocument = queryPermanentElementsAll(document.documentElement);
    const permanentElementMap = {};
    for (const permanentElementInDocument of permanentElementsInDocument) {
      const { id } = permanentElementInDocument;
      for (const streamElement of fragment.querySelectorAll("turbo-stream")) {
        const elementInStream = getPermanentElementById(streamElement.templateElement.content, id);
        if (elementInStream) {
          permanentElementMap[id] = [permanentElementInDocument, elementInStream];
        }
      }
    }
    return permanentElementMap;
  }
  var StreamObserver = class {
    constructor(delegate) {
      this.sources = /* @__PURE__ */ new Set();
      this.started = false;
      this.inspectFetchResponse = (event) => {
        const response = fetchResponseFromEvent(event);
        if (response && fetchResponseIsStream(response)) {
          event.preventDefault();
          this.receiveMessageResponse(response);
        }
      };
      this.receiveMessageEvent = (event) => {
        if (this.started && typeof event.data == "string") {
          this.receiveMessageHTML(event.data);
        }
      };
      this.delegate = delegate;
    }
    start() {
      if (!this.started) {
        this.started = true;
        addEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        removeEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
      }
    }
    connectStreamSource(source) {
      if (!this.streamSourceIsConnected(source)) {
        this.sources.add(source);
        source.addEventListener("message", this.receiveMessageEvent, false);
      }
    }
    disconnectStreamSource(source) {
      if (this.streamSourceIsConnected(source)) {
        this.sources.delete(source);
        source.removeEventListener("message", this.receiveMessageEvent, false);
      }
    }
    streamSourceIsConnected(source) {
      return this.sources.has(source);
    }
    async receiveMessageResponse(response) {
      const html = await response.responseHTML;
      if (html) {
        this.receiveMessageHTML(html);
      }
    }
    receiveMessageHTML(html) {
      this.delegate.receivedMessageFromStream(StreamMessage.wrap(html));
    }
  };
  function fetchResponseFromEvent(event) {
    var _a;
    const fetchResponse = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse;
    if (fetchResponse instanceof FetchResponse) {
      return fetchResponse;
    }
  }
  function fetchResponseIsStream(response) {
    var _a;
    const contentType = (_a = response.contentType) !== null && _a !== void 0 ? _a : "";
    return contentType.startsWith(StreamMessage.contentType);
  }
  var ErrorRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      const { documentElement, body } = document;
      documentElement.replaceChild(newElement, body);
    }
    async render() {
      this.replaceHeadAndBody();
      this.activateScriptElements();
    }
    replaceHeadAndBody() {
      const { documentElement, head } = document;
      documentElement.replaceChild(this.newHead, head);
      this.renderElement(this.currentElement, this.newElement);
    }
    activateScriptElements() {
      for (const replaceableElement of this.scriptElements) {
        const parentNode = replaceableElement.parentNode;
        if (parentNode) {
          const element = activateScriptElement(replaceableElement);
          parentNode.replaceChild(element, replaceableElement);
        }
      }
    }
    get newHead() {
      return this.newSnapshot.headSnapshot.element;
    }
    get scriptElements() {
      return document.documentElement.querySelectorAll("script");
    }
  };
  var PageRenderer = class extends Renderer {
    static renderElement(currentElement, newElement) {
      if (document.body && newElement instanceof HTMLBodyElement) {
        document.body.replaceWith(newElement);
      } else {
        document.documentElement.appendChild(newElement);
      }
    }
    get shouldRender() {
      return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;
    }
    get reloadReason() {
      if (!this.newSnapshot.isVisitable) {
        return {
          reason: "turbo_visit_control_is_reload"
        };
      }
      if (!this.trackedElementsAreIdentical) {
        return {
          reason: "tracked_element_mismatch"
        };
      }
    }
    async prepareToRender() {
      await this.mergeHead();
    }
    async render() {
      if (this.willRender) {
        await this.replaceBody();
      }
    }
    finishRendering() {
      super.finishRendering();
      if (!this.isPreview) {
        this.focusFirstAutofocusableElement();
      }
    }
    get currentHeadSnapshot() {
      return this.currentSnapshot.headSnapshot;
    }
    get newHeadSnapshot() {
      return this.newSnapshot.headSnapshot;
    }
    get newElement() {
      return this.newSnapshot.element;
    }
    async mergeHead() {
      const mergedHeadElements = this.mergeProvisionalElements();
      const newStylesheetElements = this.copyNewHeadStylesheetElements();
      this.copyNewHeadScriptElements();
      await mergedHeadElements;
      await newStylesheetElements;
    }
    async replaceBody() {
      await this.preservingPermanentElements(async () => {
        this.activateNewBody();
        await this.assignNewBody();
      });
    }
    get trackedElementsAreIdentical() {
      return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;
    }
    async copyNewHeadStylesheetElements() {
      const loadingElements = [];
      for (const element of this.newHeadStylesheetElements) {
        loadingElements.push(waitForLoad(element));
        document.head.appendChild(element);
      }
      await Promise.all(loadingElements);
    }
    copyNewHeadScriptElements() {
      for (const element of this.newHeadScriptElements) {
        document.head.appendChild(activateScriptElement(element));
      }
    }
    async mergeProvisionalElements() {
      const newHeadElements = [...this.newHeadProvisionalElements];
      for (const element of this.currentHeadProvisionalElements) {
        if (!this.isCurrentElementInElementList(element, newHeadElements)) {
          document.head.removeChild(element);
        }
      }
      for (const element of newHeadElements) {
        document.head.appendChild(element);
      }
    }
    isCurrentElementInElementList(element, elementList) {
      for (const [index, newElement] of elementList.entries()) {
        if (element.tagName == "TITLE") {
          if (newElement.tagName != "TITLE") {
            continue;
          }
          if (element.innerHTML == newElement.innerHTML) {
            elementList.splice(index, 1);
            return true;
          }
        }
        if (newElement.isEqualNode(element)) {
          elementList.splice(index, 1);
          return true;
        }
      }
      return false;
    }
    removeCurrentHeadProvisionalElements() {
      for (const element of this.currentHeadProvisionalElements) {
        document.head.removeChild(element);
      }
    }
    copyNewHeadProvisionalElements() {
      for (const element of this.newHeadProvisionalElements) {
        document.head.appendChild(element);
      }
    }
    activateNewBody() {
      document.adoptNode(this.newElement);
      this.activateNewBodyScriptElements();
    }
    activateNewBodyScriptElements() {
      for (const inertScriptElement of this.newBodyScriptElements) {
        const activatedScriptElement = activateScriptElement(inertScriptElement);
        inertScriptElement.replaceWith(activatedScriptElement);
      }
    }
    async assignNewBody() {
      await this.renderElement(this.currentElement, this.newElement);
    }
    get newHeadStylesheetElements() {
      return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get newHeadScriptElements() {
      return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get currentHeadProvisionalElements() {
      return this.currentHeadSnapshot.provisionalElements;
    }
    get newHeadProvisionalElements() {
      return this.newHeadSnapshot.provisionalElements;
    }
    get newBodyScriptElements() {
      return this.newElement.querySelectorAll("script");
    }
  };
  var SnapshotCache = class {
    constructor(size) {
      this.keys = [];
      this.snapshots = {};
      this.size = size;
    }
    has(location2) {
      return toCacheKey(location2) in this.snapshots;
    }
    get(location2) {
      if (this.has(location2)) {
        const snapshot = this.read(location2);
        this.touch(location2);
        return snapshot;
      }
    }
    put(location2, snapshot) {
      this.write(location2, snapshot);
      this.touch(location2);
      return snapshot;
    }
    clear() {
      this.snapshots = {};
    }
    read(location2) {
      return this.snapshots[toCacheKey(location2)];
    }
    write(location2, snapshot) {
      this.snapshots[toCacheKey(location2)] = snapshot;
    }
    touch(location2) {
      const key = toCacheKey(location2);
      const index = this.keys.indexOf(key);
      if (index > -1)
        this.keys.splice(index, 1);
      this.keys.unshift(key);
      this.trim();
    }
    trim() {
      for (const key of this.keys.splice(this.size)) {
        delete this.snapshots[key];
      }
    }
  };
  var PageView = class extends View {
    constructor() {
      super(...arguments);
      this.snapshotCache = new SnapshotCache(10);
      this.lastRenderedLocation = new URL(location.href);
      this.forceReloaded = false;
    }
    renderPage(snapshot, isPreview = false, willRender = true, visit2) {
      const renderer = new PageRenderer(this.snapshot, snapshot, PageRenderer.renderElement, isPreview, willRender);
      if (!renderer.shouldRender) {
        this.forceReloaded = true;
      } else {
        visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      }
      return this.render(renderer);
    }
    renderError(snapshot, visit2) {
      visit2 === null || visit2 === void 0 ? void 0 : visit2.changeHistory();
      const renderer = new ErrorRenderer(this.snapshot, snapshot, ErrorRenderer.renderElement, false);
      return this.render(renderer);
    }
    clearSnapshotCache() {
      this.snapshotCache.clear();
    }
    async cacheSnapshot(snapshot = this.snapshot) {
      if (snapshot.isCacheable) {
        this.delegate.viewWillCacheSnapshot();
        const { lastRenderedLocation: location2 } = this;
        await nextEventLoopTick();
        const cachedSnapshot = snapshot.clone();
        this.snapshotCache.put(location2, cachedSnapshot);
        return cachedSnapshot;
      }
    }
    getCachedSnapshotForLocation(location2) {
      return this.snapshotCache.get(location2);
    }
    get snapshot() {
      return PageSnapshot.fromElement(this.element);
    }
  };
  var Preloader = class {
    constructor(delegate) {
      this.selector = "a[data-turbo-preload]";
      this.delegate = delegate;
    }
    get snapshotCache() {
      return this.delegate.navigator.view.snapshotCache;
    }
    start() {
      if (document.readyState === "loading") {
        return document.addEventListener("DOMContentLoaded", () => {
          this.preloadOnLoadLinksForView(document.body);
        });
      } else {
        this.preloadOnLoadLinksForView(document.body);
      }
    }
    preloadOnLoadLinksForView(element) {
      for (const link of element.querySelectorAll(this.selector)) {
        this.preloadURL(link);
      }
    }
    async preloadURL(link) {
      const location2 = new URL(link.href);
      if (this.snapshotCache.has(location2)) {
        return;
      }
      try {
        const response = await fetch(location2.toString(), { headers: { "VND.PREFETCH": "true", Accept: "text/html" } });
        const responseText = await response.text();
        const snapshot = PageSnapshot.fromHTMLString(responseText);
        this.snapshotCache.put(location2, snapshot);
      } catch (_2) {
      }
    }
  };
  var Session = class {
    constructor() {
      this.navigator = new Navigator(this);
      this.history = new History(this);
      this.preloader = new Preloader(this);
      this.view = new PageView(this, document.documentElement);
      this.adapter = new BrowserAdapter(this);
      this.pageObserver = new PageObserver(this);
      this.cacheObserver = new CacheObserver();
      this.linkClickObserver = new LinkClickObserver(this, window);
      this.formSubmitObserver = new FormSubmitObserver(this, document);
      this.scrollObserver = new ScrollObserver(this);
      this.streamObserver = new StreamObserver(this);
      this.formLinkClickObserver = new FormLinkClickObserver(this, document.documentElement);
      this.frameRedirector = new FrameRedirector(this, document.documentElement);
      this.streamMessageRenderer = new StreamMessageRenderer();
      this.drive = true;
      this.enabled = true;
      this.progressBarDelay = 500;
      this.started = false;
      this.formMode = "on";
    }
    start() {
      if (!this.started) {
        this.pageObserver.start();
        this.cacheObserver.start();
        this.formLinkClickObserver.start();
        this.linkClickObserver.start();
        this.formSubmitObserver.start();
        this.scrollObserver.start();
        this.streamObserver.start();
        this.frameRedirector.start();
        this.history.start();
        this.preloader.start();
        this.started = true;
        this.enabled = true;
      }
    }
    disable() {
      this.enabled = false;
    }
    stop() {
      if (this.started) {
        this.pageObserver.stop();
        this.cacheObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkClickObserver.stop();
        this.formSubmitObserver.stop();
        this.scrollObserver.stop();
        this.streamObserver.stop();
        this.frameRedirector.stop();
        this.history.stop();
        this.started = false;
      }
    }
    registerAdapter(adapter) {
      this.adapter = adapter;
    }
    visit(location2, options = {}) {
      const frameElement = options.frame ? document.getElementById(options.frame) : null;
      if (frameElement instanceof FrameElement) {
        frameElement.src = location2.toString();
        frameElement.loaded;
      } else {
        this.navigator.proposeVisit(expandURL(location2), options);
      }
    }
    connectStreamSource(source) {
      this.streamObserver.connectStreamSource(source);
    }
    disconnectStreamSource(source) {
      this.streamObserver.disconnectStreamSource(source);
    }
    renderStreamMessage(message) {
      this.streamMessageRenderer.render(StreamMessage.wrap(message));
    }
    clearCache() {
      this.view.clearSnapshotCache();
    }
    setProgressBarDelay(delay) {
      this.progressBarDelay = delay;
    }
    setFormMode(mode) {
      this.formMode = mode;
    }
    get location() {
      return this.history.location;
    }
    get restorationIdentifier() {
      return this.history.restorationIdentifier;
    }
    historyPoppedToLocationWithRestorationIdentifier(location2, restorationIdentifier) {
      if (this.enabled) {
        this.navigator.startVisit(location2, restorationIdentifier, {
          action: "restore",
          historyChanged: true
        });
      } else {
        this.adapter.pageInvalidated({
          reason: "turbo_disabled"
        });
      }
    }
    scrollPositionChanged(position) {
      this.history.updateRestorationData({ scrollPosition: position });
    }
    willSubmitFormLinkToLocation(link, location2) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation);
    }
    submittedFormLinkToLocation() {
    }
    willFollowLinkToLocation(link, location2, event) {
      return this.elementIsNavigatable(link) && locationIsVisitable(location2, this.snapshot.rootLocation) && this.applicationAllowsFollowingLinkToLocation(link, location2, event);
    }
    followedLinkToLocation(link, location2) {
      const action = this.getActionForLink(link);
      const acceptsStreamResponse = link.hasAttribute("data-turbo-stream");
      this.visit(location2.href, { action, acceptsStreamResponse });
    }
    allowsVisitingLocationWithAction(location2, action) {
      return this.locationWithActionIsSamePage(location2, action) || this.applicationAllowsVisitingLocation(location2);
    }
    visitProposedToLocation(location2, options) {
      extendURLWithDeprecatedProperties(location2);
      this.adapter.visitProposedToLocation(location2, options);
    }
    visitStarted(visit2) {
      if (!visit2.acceptsStreamResponse) {
        markAsBusy(document.documentElement);
      }
      extendURLWithDeprecatedProperties(visit2.location);
      if (!visit2.silent) {
        this.notifyApplicationAfterVisitingLocation(visit2.location, visit2.action);
      }
    }
    visitCompleted(visit2) {
      clearBusyState(document.documentElement);
      this.notifyApplicationAfterPageLoad(visit2.getTimingMetrics());
    }
    locationWithActionIsSamePage(location2, action) {
      return this.navigator.locationWithActionIsSamePage(location2, action);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
      this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);
    }
    willSubmitForm(form, submitter) {
      const action = getAction(form, submitter);
      return this.submissionIsNavigatable(form, submitter) && locationIsVisitable(expandURL(action), this.snapshot.rootLocation);
    }
    formSubmitted(form, submitter) {
      this.navigator.submitForm(form, submitter);
    }
    pageBecameInteractive() {
      this.view.lastRenderedLocation = this.location;
      this.notifyApplicationAfterPageLoad();
    }
    pageLoaded() {
      this.history.assumeControlOfScrollRestoration();
    }
    pageWillUnload() {
      this.history.relinquishControlOfScrollRestoration();
    }
    receivedMessageFromStream(message) {
      this.renderStreamMessage(message);
    }
    viewWillCacheSnapshot() {
      var _a;
      if (!((_a = this.navigator.currentVisit) === null || _a === void 0 ? void 0 : _a.silent)) {
        this.notifyApplicationBeforeCachingSnapshot();
      }
    }
    allowsImmediateRender({ element }, options) {
      const event = this.notifyApplicationBeforeRender(element, options);
      const { defaultPrevented, detail: { render } } = event;
      if (this.view.renderer && render) {
        this.view.renderer.renderElement = render;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
      this.view.lastRenderedLocation = this.history.location;
      this.notifyApplicationAfterRender();
    }
    preloadOnLoadLinksForView(element) {
      this.preloader.preloadOnLoadLinksForView(element);
    }
    viewInvalidated(reason) {
      this.adapter.pageInvalidated(reason);
    }
    frameLoaded(frame) {
      this.notifyApplicationAfterFrameLoad(frame);
    }
    frameRendered(fetchResponse, frame) {
      this.notifyApplicationAfterFrameRender(fetchResponse, frame);
    }
    applicationAllowsFollowingLinkToLocation(link, location2, ev) {
      const event = this.notifyApplicationAfterClickingLinkToLocation(link, location2, ev);
      return !event.defaultPrevented;
    }
    applicationAllowsVisitingLocation(location2) {
      const event = this.notifyApplicationBeforeVisitingLocation(location2);
      return !event.defaultPrevented;
    }
    notifyApplicationAfterClickingLinkToLocation(link, location2, event) {
      return dispatch("turbo:click", {
        target: link,
        detail: { url: location2.href, originalEvent: event },
        cancelable: true
      });
    }
    notifyApplicationBeforeVisitingLocation(location2) {
      return dispatch("turbo:before-visit", {
        detail: { url: location2.href },
        cancelable: true
      });
    }
    notifyApplicationAfterVisitingLocation(location2, action) {
      return dispatch("turbo:visit", { detail: { url: location2.href, action } });
    }
    notifyApplicationBeforeCachingSnapshot() {
      return dispatch("turbo:before-cache");
    }
    notifyApplicationBeforeRender(newBody, options) {
      return dispatch("turbo:before-render", {
        detail: Object.assign({ newBody }, options),
        cancelable: true
      });
    }
    notifyApplicationAfterRender() {
      return dispatch("turbo:render");
    }
    notifyApplicationAfterPageLoad(timing = {}) {
      return dispatch("turbo:load", {
        detail: { url: this.location.href, timing }
      });
    }
    notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {
      dispatchEvent(new HashChangeEvent("hashchange", {
        oldURL: oldURL.toString(),
        newURL: newURL.toString()
      }));
    }
    notifyApplicationAfterFrameLoad(frame) {
      return dispatch("turbo:frame-load", { target: frame });
    }
    notifyApplicationAfterFrameRender(fetchResponse, frame) {
      return dispatch("turbo:frame-render", {
        detail: { fetchResponse },
        target: frame,
        cancelable: true
      });
    }
    submissionIsNavigatable(form, submitter) {
      if (this.formMode == "off") {
        return false;
      } else {
        const submitterIsNavigatable = submitter ? this.elementIsNavigatable(submitter) : true;
        if (this.formMode == "optin") {
          return submitterIsNavigatable && form.closest('[data-turbo="true"]') != null;
        } else {
          return submitterIsNavigatable && this.elementIsNavigatable(form);
        }
      }
    }
    elementIsNavigatable(element) {
      const container = findClosestRecursively(element, "[data-turbo]");
      const withinFrame = findClosestRecursively(element, "turbo-frame");
      if (this.drive || withinFrame) {
        if (container) {
          return container.getAttribute("data-turbo") != "false";
        } else {
          return true;
        }
      } else {
        if (container) {
          return container.getAttribute("data-turbo") == "true";
        } else {
          return false;
        }
      }
    }
    getActionForLink(link) {
      return getVisitAction(link) || "advance";
    }
    get snapshot() {
      return this.view.snapshot;
    }
  };
  function extendURLWithDeprecatedProperties(url) {
    Object.defineProperties(url, deprecatedLocationPropertyDescriptors);
  }
  var deprecatedLocationPropertyDescriptors = {
    absoluteURL: {
      get() {
        return this.toString();
      }
    }
  };
  var Cache = class {
    constructor(session2) {
      this.session = session2;
    }
    clear() {
      this.session.clearCache();
    }
    resetCacheControl() {
      this.setCacheControl("");
    }
    exemptPageFromCache() {
      this.setCacheControl("no-cache");
    }
    exemptPageFromPreview() {
      this.setCacheControl("no-preview");
    }
    setCacheControl(value) {
      setMetaContent("turbo-cache-control", value);
    }
  };
  var StreamActions = {
    after() {
      this.targetElements.forEach((e2) => {
        var _a;
        return (_a = e2.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e2.nextSibling);
      });
    },
    append() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e2) => e2.append(this.templateContent));
    },
    before() {
      this.targetElements.forEach((e2) => {
        var _a;
        return (_a = e2.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e2);
      });
    },
    prepend() {
      this.removeDuplicateTargetChildren();
      this.targetElements.forEach((e2) => e2.prepend(this.templateContent));
    },
    remove() {
      this.targetElements.forEach((e2) => e2.remove());
    },
    replace() {
      this.targetElements.forEach((e2) => e2.replaceWith(this.templateContent));
    },
    update() {
      this.targetElements.forEach((targetElement) => {
        targetElement.innerHTML = "";
        targetElement.append(this.templateContent);
      });
    }
  };
  var session = new Session();
  var cache = new Cache(session);
  var { navigator: navigator$1 } = session;
  function start() {
    session.start();
  }
  function registerAdapter(adapter) {
    session.registerAdapter(adapter);
  }
  function visit(location2, options) {
    session.visit(location2, options);
  }
  function connectStreamSource(source) {
    session.connectStreamSource(source);
  }
  function disconnectStreamSource(source) {
    session.disconnectStreamSource(source);
  }
  function renderStreamMessage(message) {
    session.renderStreamMessage(message);
  }
  function clearCache() {
    console.warn("Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`");
    session.clearCache();
  }
  function setProgressBarDelay(delay) {
    session.setProgressBarDelay(delay);
  }
  function setConfirmMethod(confirmMethod) {
    FormSubmission.confirmMethod = confirmMethod;
  }
  function setFormMode(mode) {
    session.setFormMode(mode);
  }
  var Turbo = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    navigator: navigator$1,
    session,
    cache,
    PageRenderer,
    PageSnapshot,
    FrameRenderer,
    start,
    registerAdapter,
    visit,
    connectStreamSource,
    disconnectStreamSource,
    renderStreamMessage,
    clearCache,
    setProgressBarDelay,
    setConfirmMethod,
    setFormMode,
    StreamActions
  });
  var TurboFrameMissingError = class extends Error {
  };
  var FrameController = class {
    constructor(element) {
      this.fetchResponseLoaded = (_fetchResponse) => {
      };
      this.currentFetchRequest = null;
      this.resolveVisitPromise = () => {
      };
      this.connected = false;
      this.hasBeenLoaded = false;
      this.ignoredAttributes = /* @__PURE__ */ new Set();
      this.action = null;
      this.visitCachedSnapshot = ({ element: element2 }) => {
        const frame = element2.querySelector("#" + this.element.id);
        if (frame && this.previousFrameElement) {
          frame.replaceChildren(...this.previousFrameElement.children);
        }
        delete this.previousFrameElement;
      };
      this.element = element;
      this.view = new FrameView(this, this.element);
      this.appearanceObserver = new AppearanceObserver(this, this.element);
      this.formLinkClickObserver = new FormLinkClickObserver(this, this.element);
      this.linkInterceptor = new LinkInterceptor(this, this.element);
      this.restorationIdentifier = uuid();
      this.formSubmitObserver = new FormSubmitObserver(this, this.element);
    }
    connect() {
      if (!this.connected) {
        this.connected = true;
        if (this.loadingStyle == FrameLoadingStyle.lazy) {
          this.appearanceObserver.start();
        } else {
          this.loadSourceURL();
        }
        this.formLinkClickObserver.start();
        this.linkInterceptor.start();
        this.formSubmitObserver.start();
      }
    }
    disconnect() {
      if (this.connected) {
        this.connected = false;
        this.appearanceObserver.stop();
        this.formLinkClickObserver.stop();
        this.linkInterceptor.stop();
        this.formSubmitObserver.stop();
      }
    }
    disabledChanged() {
      if (this.loadingStyle == FrameLoadingStyle.eager) {
        this.loadSourceURL();
      }
    }
    sourceURLChanged() {
      if (this.isIgnoringChangesTo("src"))
        return;
      if (this.element.isConnected) {
        this.complete = false;
      }
      if (this.loadingStyle == FrameLoadingStyle.eager || this.hasBeenLoaded) {
        this.loadSourceURL();
      }
    }
    sourceURLReloaded() {
      const { src } = this.element;
      this.ignoringChangesToAttribute("complete", () => {
        this.element.removeAttribute("complete");
      });
      this.element.src = null;
      this.element.src = src;
      return this.element.loaded;
    }
    completeChanged() {
      if (this.isIgnoringChangesTo("complete"))
        return;
      this.loadSourceURL();
    }
    loadingStyleChanged() {
      if (this.loadingStyle == FrameLoadingStyle.lazy) {
        this.appearanceObserver.start();
      } else {
        this.appearanceObserver.stop();
        this.loadSourceURL();
      }
    }
    async loadSourceURL() {
      if (this.enabled && this.isActive && !this.complete && this.sourceURL) {
        this.element.loaded = this.visit(expandURL(this.sourceURL));
        this.appearanceObserver.stop();
        await this.element.loaded;
        this.hasBeenLoaded = true;
      }
    }
    async loadResponse(fetchResponse) {
      if (fetchResponse.redirected || fetchResponse.succeeded && fetchResponse.isHTML) {
        this.sourceURL = fetchResponse.response.url;
      }
      try {
        const html = await fetchResponse.responseHTML;
        if (html) {
          const document2 = parseHTMLDocument(html);
          const pageSnapshot = PageSnapshot.fromDocument(document2);
          if (pageSnapshot.isVisitable) {
            await this.loadFrameResponse(fetchResponse, document2);
          } else {
            await this.handleUnvisitableFrameResponse(fetchResponse);
          }
        }
      } finally {
        this.fetchResponseLoaded = () => {
        };
      }
    }
    elementAppearedInViewport(element) {
      this.proposeVisitIfNavigatedWithAction(element, element);
      this.loadSourceURL();
    }
    willSubmitFormLinkToLocation(link) {
      return this.shouldInterceptNavigation(link);
    }
    submittedFormLinkToLocation(link, _location, form) {
      const frame = this.findFrameElement(link);
      if (frame)
        form.setAttribute("data-turbo-frame", frame.id);
    }
    shouldInterceptLinkClick(element, _location, _event) {
      return this.shouldInterceptNavigation(element);
    }
    linkClickIntercepted(element, location2) {
      this.navigateFrame(element, location2);
    }
    willSubmitForm(element, submitter) {
      return element.closest("turbo-frame") == this.element && this.shouldInterceptNavigation(element, submitter);
    }
    formSubmitted(element, submitter) {
      if (this.formSubmission) {
        this.formSubmission.stop();
      }
      this.formSubmission = new FormSubmission(this, element, submitter);
      const { fetchRequest } = this.formSubmission;
      this.prepareRequest(fetchRequest);
      this.formSubmission.start();
    }
    prepareRequest(request) {
      var _a;
      request.headers["Turbo-Frame"] = this.id;
      if ((_a = this.currentNavigationElement) === null || _a === void 0 ? void 0 : _a.hasAttribute("data-turbo-stream")) {
        request.acceptResponseType(StreamMessage.contentType);
      }
    }
    requestStarted(_request) {
      markAsBusy(this.element);
    }
    requestPreventedHandlingResponse(_request, _response) {
      this.resolveVisitPromise();
    }
    async requestSucceededWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    async requestFailedWithResponse(request, response) {
      await this.loadResponse(response);
      this.resolveVisitPromise();
    }
    requestErrored(request, error2) {
      console.error(error2);
      this.resolveVisitPromise();
    }
    requestFinished(_request) {
      clearBusyState(this.element);
    }
    formSubmissionStarted({ formElement }) {
      markAsBusy(formElement, this.findFrameElement(formElement));
    }
    formSubmissionSucceededWithResponse(formSubmission, response) {
      const frame = this.findFrameElement(formSubmission.formElement, formSubmission.submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, formSubmission.formElement, formSubmission.submitter);
      frame.delegate.loadResponse(response);
      if (!formSubmission.isSafe) {
        session.clearCache();
      }
    }
    formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
      this.element.delegate.loadResponse(fetchResponse);
      session.clearCache();
    }
    formSubmissionErrored(formSubmission, error2) {
      console.error(error2);
    }
    formSubmissionFinished({ formElement }) {
      clearBusyState(formElement, this.findFrameElement(formElement));
    }
    allowsImmediateRender({ element: newFrame }, options) {
      const event = dispatch("turbo:before-frame-render", {
        target: this.element,
        detail: Object.assign({ newFrame }, options),
        cancelable: true
      });
      const { defaultPrevented, detail: { render } } = event;
      if (this.view.renderer && render) {
        this.view.renderer.renderElement = render;
      }
      return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
    }
    preloadOnLoadLinksForView(element) {
      session.preloadOnLoadLinksForView(element);
    }
    viewInvalidated() {
    }
    willRenderFrame(currentElement, _newElement) {
      this.previousFrameElement = currentElement.cloneNode(true);
    }
    async loadFrameResponse(fetchResponse, document2) {
      const newFrameElement = await this.extractForeignFrameElement(document2.body);
      if (newFrameElement) {
        const snapshot = new Snapshot(newFrameElement);
        const renderer = new FrameRenderer(this, this.view.snapshot, snapshot, FrameRenderer.renderElement, false, false);
        if (this.view.renderPromise)
          await this.view.renderPromise;
        this.changeHistory();
        await this.view.render(renderer);
        this.complete = true;
        session.frameRendered(fetchResponse, this.element);
        session.frameLoaded(this.element);
        this.fetchResponseLoaded(fetchResponse);
      } else if (this.willHandleFrameMissingFromResponse(fetchResponse)) {
        this.handleFrameMissingFromResponse(fetchResponse);
      }
    }
    async visit(url) {
      var _a;
      const request = new FetchRequest(this, FetchMethod.get, url, new URLSearchParams(), this.element);
      (_a = this.currentFetchRequest) === null || _a === void 0 ? void 0 : _a.cancel();
      this.currentFetchRequest = request;
      return new Promise((resolve) => {
        this.resolveVisitPromise = () => {
          this.resolveVisitPromise = () => {
          };
          this.currentFetchRequest = null;
          resolve();
        };
        request.perform();
      });
    }
    navigateFrame(element, url, submitter) {
      const frame = this.findFrameElement(element, submitter);
      frame.delegate.proposeVisitIfNavigatedWithAction(frame, element, submitter);
      this.withCurrentNavigationElement(element, () => {
        frame.src = url;
      });
    }
    proposeVisitIfNavigatedWithAction(frame, element, submitter) {
      this.action = getVisitAction(submitter, element, frame);
      if (this.action) {
        const pageSnapshot = PageSnapshot.fromElement(frame).clone();
        const { visitCachedSnapshot } = frame.delegate;
        frame.delegate.fetchResponseLoaded = (fetchResponse) => {
          if (frame.src) {
            const { statusCode, redirected } = fetchResponse;
            const responseHTML = frame.ownerDocument.documentElement.outerHTML;
            const response = { statusCode, redirected, responseHTML };
            const options = {
              response,
              visitCachedSnapshot,
              willRender: false,
              updateHistory: false,
              restorationIdentifier: this.restorationIdentifier,
              snapshot: pageSnapshot
            };
            if (this.action)
              options.action = this.action;
            session.visit(frame.src, options);
          }
        };
      }
    }
    changeHistory() {
      if (this.action) {
        const method = getHistoryMethodForAction(this.action);
        session.history.update(method, expandURL(this.element.src || ""), this.restorationIdentifier);
      }
    }
    async handleUnvisitableFrameResponse(fetchResponse) {
      console.warn(`The response (${fetchResponse.statusCode}) from <turbo-frame id="${this.element.id}"> is performing a full page visit due to turbo-visit-control.`);
      await this.visitResponse(fetchResponse.response);
    }
    willHandleFrameMissingFromResponse(fetchResponse) {
      this.element.setAttribute("complete", "");
      const response = fetchResponse.response;
      const visit2 = async (url, options = {}) => {
        if (url instanceof Response) {
          this.visitResponse(url);
        } else {
          session.visit(url, options);
        }
      };
      const event = dispatch("turbo:frame-missing", {
        target: this.element,
        detail: { response, visit: visit2 },
        cancelable: true
      });
      return !event.defaultPrevented;
    }
    handleFrameMissingFromResponse(fetchResponse) {
      this.view.missing();
      this.throwFrameMissingError(fetchResponse);
    }
    throwFrameMissingError(fetchResponse) {
      const message = `The response (${fetchResponse.statusCode}) did not contain the expected <turbo-frame id="${this.element.id}"> and will be ignored. To perform a full page visit instead, set turbo-visit-control to reload.`;
      throw new TurboFrameMissingError(message);
    }
    async visitResponse(response) {
      const wrapped = new FetchResponse(response);
      const responseHTML = await wrapped.responseHTML;
      const { location: location2, redirected, statusCode } = wrapped;
      return session.visit(location2, { response: { redirected, statusCode, responseHTML } });
    }
    findFrameElement(element, submitter) {
      var _a;
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      return (_a = getFrameElementById(id)) !== null && _a !== void 0 ? _a : this.element;
    }
    async extractForeignFrameElement(container) {
      let element;
      const id = CSS.escape(this.id);
      try {
        element = activateElement(container.querySelector(`turbo-frame#${id}`), this.sourceURL);
        if (element) {
          return element;
        }
        element = activateElement(container.querySelector(`turbo-frame[src][recurse~=${id}]`), this.sourceURL);
        if (element) {
          await element.loaded;
          return await this.extractForeignFrameElement(element);
        }
      } catch (error2) {
        console.error(error2);
        return new FrameElement();
      }
      return null;
    }
    formActionIsVisitable(form, submitter) {
      const action = getAction(form, submitter);
      return locationIsVisitable(expandURL(action), this.rootLocation);
    }
    shouldInterceptNavigation(element, submitter) {
      const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
      if (element instanceof HTMLFormElement && !this.formActionIsVisitable(element, submitter)) {
        return false;
      }
      if (!this.enabled || id == "_top") {
        return false;
      }
      if (id) {
        const frameElement = getFrameElementById(id);
        if (frameElement) {
          return !frameElement.disabled;
        }
      }
      if (!session.elementIsNavigatable(element)) {
        return false;
      }
      if (submitter && !session.elementIsNavigatable(submitter)) {
        return false;
      }
      return true;
    }
    get id() {
      return this.element.id;
    }
    get enabled() {
      return !this.element.disabled;
    }
    get sourceURL() {
      if (this.element.src) {
        return this.element.src;
      }
    }
    set sourceURL(sourceURL) {
      this.ignoringChangesToAttribute("src", () => {
        this.element.src = sourceURL !== null && sourceURL !== void 0 ? sourceURL : null;
      });
    }
    get loadingStyle() {
      return this.element.loading;
    }
    get isLoading() {
      return this.formSubmission !== void 0 || this.resolveVisitPromise() !== void 0;
    }
    get complete() {
      return this.element.hasAttribute("complete");
    }
    set complete(value) {
      this.ignoringChangesToAttribute("complete", () => {
        if (value) {
          this.element.setAttribute("complete", "");
        } else {
          this.element.removeAttribute("complete");
        }
      });
    }
    get isActive() {
      return this.element.isActive && this.connected;
    }
    get rootLocation() {
      var _a;
      const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
      const root = (_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/";
      return expandURL(root);
    }
    isIgnoringChangesTo(attributeName) {
      return this.ignoredAttributes.has(attributeName);
    }
    ignoringChangesToAttribute(attributeName, callback) {
      this.ignoredAttributes.add(attributeName);
      callback();
      this.ignoredAttributes.delete(attributeName);
    }
    withCurrentNavigationElement(element, callback) {
      this.currentNavigationElement = element;
      callback();
      delete this.currentNavigationElement;
    }
  };
  function getFrameElementById(id) {
    if (id != null) {
      const element = document.getElementById(id);
      if (element instanceof FrameElement) {
        return element;
      }
    }
  }
  function activateElement(element, currentURL) {
    if (element) {
      const src = element.getAttribute("src");
      if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {
        throw new Error(`Matching <turbo-frame id="${element.id}"> element has a source URL which references itself`);
      }
      if (element.ownerDocument !== document) {
        element = document.importNode(element, true);
      }
      if (element instanceof FrameElement) {
        element.connectedCallback();
        element.disconnectedCallback();
        return element;
      }
    }
  }
  var StreamElement = class _StreamElement extends HTMLElement {
    static async renderElement(newElement) {
      await newElement.performAction();
    }
    async connectedCallback() {
      try {
        await this.render();
      } catch (error2) {
        console.error(error2);
      } finally {
        this.disconnect();
      }
    }
    async render() {
      var _a;
      return (_a = this.renderPromise) !== null && _a !== void 0 ? _a : this.renderPromise = (async () => {
        const event = this.beforeRenderEvent;
        if (this.dispatchEvent(event)) {
          await nextAnimationFrame();
          await event.detail.render(this);
        }
      })();
    }
    disconnect() {
      try {
        this.remove();
      } catch (_a) {
      }
    }
    removeDuplicateTargetChildren() {
      this.duplicateChildren.forEach((c2) => c2.remove());
    }
    get duplicateChildren() {
      var _a;
      const existingChildren = this.targetElements.flatMap((e2) => [...e2.children]).filter((c2) => !!c2.id);
      const newChildrenIds = [...((_a = this.templateContent) === null || _a === void 0 ? void 0 : _a.children) || []].filter((c2) => !!c2.id).map((c2) => c2.id);
      return existingChildren.filter((c2) => newChildrenIds.includes(c2.id));
    }
    get performAction() {
      if (this.action) {
        const actionFunction = StreamActions[this.action];
        if (actionFunction) {
          return actionFunction;
        }
        this.raise("unknown action");
      }
      this.raise("action attribute is missing");
    }
    get targetElements() {
      if (this.target) {
        return this.targetElementsById;
      } else if (this.targets) {
        return this.targetElementsByQuery;
      } else {
        this.raise("target or targets attribute is missing");
      }
    }
    get templateContent() {
      return this.templateElement.content.cloneNode(true);
    }
    get templateElement() {
      if (this.firstElementChild === null) {
        const template = this.ownerDocument.createElement("template");
        this.appendChild(template);
        return template;
      } else if (this.firstElementChild instanceof HTMLTemplateElement) {
        return this.firstElementChild;
      }
      this.raise("first child element must be a <template> element");
    }
    get action() {
      return this.getAttribute("action");
    }
    get target() {
      return this.getAttribute("target");
    }
    get targets() {
      return this.getAttribute("targets");
    }
    raise(message) {
      throw new Error(`${this.description}: ${message}`);
    }
    get description() {
      var _a, _b;
      return (_b = ((_a = this.outerHTML.match(/<[^>]+>/)) !== null && _a !== void 0 ? _a : [])[0]) !== null && _b !== void 0 ? _b : "<turbo-stream>";
    }
    get beforeRenderEvent() {
      return new CustomEvent("turbo:before-stream-render", {
        bubbles: true,
        cancelable: true,
        detail: { newStream: this, render: _StreamElement.renderElement }
      });
    }
    get targetElementsById() {
      var _a;
      const element = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.getElementById(this.target);
      if (element !== null) {
        return [element];
      } else {
        return [];
      }
    }
    get targetElementsByQuery() {
      var _a;
      const elements = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.targets);
      if (elements.length !== 0) {
        return Array.prototype.slice.call(elements);
      } else {
        return [];
      }
    }
  };
  var StreamSourceElement = class extends HTMLElement {
    constructor() {
      super(...arguments);
      this.streamSource = null;
    }
    connectedCallback() {
      this.streamSource = this.src.match(/^ws{1,2}:/) ? new WebSocket(this.src) : new EventSource(this.src);
      connectStreamSource(this.streamSource);
    }
    disconnectedCallback() {
      if (this.streamSource) {
        disconnectStreamSource(this.streamSource);
      }
    }
    get src() {
      return this.getAttribute("src") || "";
    }
  };
  FrameElement.delegateConstructor = FrameController;
  if (customElements.get("turbo-frame") === void 0) {
    customElements.define("turbo-frame", FrameElement);
  }
  if (customElements.get("turbo-stream") === void 0) {
    customElements.define("turbo-stream", StreamElement);
  }
  if (customElements.get("turbo-stream-source") === void 0) {
    customElements.define("turbo-stream-source", StreamSourceElement);
  }
  (() => {
    let element = document.currentScript;
    if (!element)
      return;
    if (element.hasAttribute("data-turbo-suppress-warning"))
      return;
    element = element.parentElement;
    while (element) {
      if (element == document.body) {
        return console.warn(unindent`
        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!

        Load your application’s JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.

        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements

        ——
        Suppress this warning by adding a "data-turbo-suppress-warning" attribute to: %s
      `, element.outerHTML);
      }
      element = element.parentElement;
    }
  })();
  window.Turbo = Turbo;
  start();

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable.js
  var consumer;
  async function getConsumer() {
    return consumer || setConsumer(createConsumer2().then(setConsumer));
  }
  function setConsumer(newConsumer) {
    return consumer = newConsumer;
  }
  async function createConsumer2() {
    const { createConsumer: createConsumer4 } = await Promise.resolve().then(() => (init_src(), src_exports));
    return createConsumer4();
  }
  async function subscribeTo(channel, mixin) {
    const { subscriptions } = await getConsumer();
    return subscriptions.create(channel, mixin);
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/snakeize.js
  function walk(obj) {
    if (!obj || typeof obj !== "object")
      return obj;
    if (obj instanceof Date || obj instanceof RegExp)
      return obj;
    if (Array.isArray(obj))
      return obj.map(walk);
    return Object.keys(obj).reduce(function(acc, key) {
      var camel = key[0].toLowerCase() + key.slice(1).replace(/([A-Z]+)/g, function(m2, x2) {
        return "_" + x2.toLowerCase();
      });
      acc[camel] = walk(obj[key]);
      return acc;
    }, {});
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/cable_stream_source_element.js
  var TurboCableStreamSourceElement = class extends HTMLElement {
    async connectedCallback() {
      connectStreamSource(this);
      this.subscription = await subscribeTo(this.channel, {
        received: this.dispatchMessageEvent.bind(this),
        connected: this.subscriptionConnected.bind(this),
        disconnected: this.subscriptionDisconnected.bind(this)
      });
    }
    disconnectedCallback() {
      disconnectStreamSource(this);
      if (this.subscription)
        this.subscription.unsubscribe();
    }
    dispatchMessageEvent(data) {
      const event = new MessageEvent("message", { data });
      return this.dispatchEvent(event);
    }
    subscriptionConnected() {
      this.setAttribute("connected", "");
    }
    subscriptionDisconnected() {
      this.removeAttribute("connected");
    }
    get channel() {
      const channel = this.getAttribute("channel");
      const signed_stream_name = this.getAttribute("signed-stream-name");
      return { channel, signed_stream_name, ...walk({ ...this.dataset }) };
    }
  };
  if (customElements.get("turbo-cable-stream-source") === void 0) {
    customElements.define("turbo-cable-stream-source", TurboCableStreamSourceElement);
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/fetch_requests.js
  function encodeMethodIntoRequestBody(event) {
    if (event.target instanceof HTMLFormElement) {
      const { target: form, detail: { fetchOptions } } = event;
      form.addEventListener("turbo:submit-start", ({ detail: { formSubmission: { submitter } } }) => {
        const body = isBodyInit(fetchOptions.body) ? fetchOptions.body : new URLSearchParams();
        const method = determineFetchMethod(submitter, body, form);
        if (!/get/i.test(method)) {
          if (/post/i.test(method)) {
            body.delete("_method");
          } else {
            body.set("_method", method);
          }
          fetchOptions.method = "post";
        }
      }, { once: true });
    }
  }
  function determineFetchMethod(submitter, body, form) {
    const formMethod = determineFormMethod(submitter);
    const overrideMethod = body.get("_method");
    const method = form.getAttribute("method") || "get";
    if (typeof formMethod == "string") {
      return formMethod;
    } else if (typeof overrideMethod == "string") {
      return overrideMethod;
    } else {
      return method;
    }
  }
  function determineFormMethod(submitter) {
    if (submitter instanceof HTMLButtonElement || submitter instanceof HTMLInputElement) {
      if (submitter.hasAttribute("formmethod")) {
        return submitter.formMethod;
      } else {
        return null;
      }
    } else {
      return null;
    }
  }
  function isBodyInit(body) {
    return body instanceof FormData || body instanceof URLSearchParams;
  }

  // node_modules/@hotwired/turbo-rails/app/javascript/turbo/index.js
  addEventListener("turbo:before-fetch-request", encodeMethodIntoRequestBody);

  // node_modules/@hotwired/stimulus/dist/stimulus.js
  var EventListener = class {
    constructor(eventTarget, eventName, eventOptions) {
      this.eventTarget = eventTarget;
      this.eventName = eventName;
      this.eventOptions = eventOptions;
      this.unorderedBindings = /* @__PURE__ */ new Set();
    }
    connect() {
      this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);
    }
    disconnect() {
      this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);
    }
    bindingConnected(binding) {
      this.unorderedBindings.add(binding);
    }
    bindingDisconnected(binding) {
      this.unorderedBindings.delete(binding);
    }
    handleEvent(event) {
      const extendedEvent = extendEvent(event);
      for (const binding of this.bindings) {
        if (extendedEvent.immediatePropagationStopped) {
          break;
        } else {
          binding.handleEvent(extendedEvent);
        }
      }
    }
    hasBindings() {
      return this.unorderedBindings.size > 0;
    }
    get bindings() {
      return Array.from(this.unorderedBindings).sort((left, right) => {
        const leftIndex = left.index, rightIndex = right.index;
        return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;
      });
    }
  };
  function extendEvent(event) {
    if ("immediatePropagationStopped" in event) {
      return event;
    } else {
      const { stopImmediatePropagation } = event;
      return Object.assign(event, {
        immediatePropagationStopped: false,
        stopImmediatePropagation() {
          this.immediatePropagationStopped = true;
          stopImmediatePropagation.call(this);
        }
      });
    }
  }
  var Dispatcher = class {
    constructor(application2) {
      this.application = application2;
      this.eventListenerMaps = /* @__PURE__ */ new Map();
      this.started = false;
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.eventListeners.forEach((eventListener) => eventListener.connect());
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.eventListeners.forEach((eventListener) => eventListener.disconnect());
      }
    }
    get eventListeners() {
      return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);
    }
    bindingConnected(binding) {
      this.fetchEventListenerForBinding(binding).bindingConnected(binding);
    }
    bindingDisconnected(binding, clearEventListeners = false) {
      this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);
      if (clearEventListeners)
        this.clearEventListenersForBinding(binding);
    }
    handleError(error2, message, detail = {}) {
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    clearEventListenersForBinding(binding) {
      const eventListener = this.fetchEventListenerForBinding(binding);
      if (!eventListener.hasBindings()) {
        eventListener.disconnect();
        this.removeMappedEventListenerFor(binding);
      }
    }
    removeMappedEventListenerFor(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      eventListenerMap.delete(cacheKey);
      if (eventListenerMap.size == 0)
        this.eventListenerMaps.delete(eventTarget);
    }
    fetchEventListenerForBinding(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      return this.fetchEventListener(eventTarget, eventName, eventOptions);
    }
    fetchEventListener(eventTarget, eventName, eventOptions) {
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      let eventListener = eventListenerMap.get(cacheKey);
      if (!eventListener) {
        eventListener = this.createEventListener(eventTarget, eventName, eventOptions);
        eventListenerMap.set(cacheKey, eventListener);
      }
      return eventListener;
    }
    createEventListener(eventTarget, eventName, eventOptions) {
      const eventListener = new EventListener(eventTarget, eventName, eventOptions);
      if (this.started) {
        eventListener.connect();
      }
      return eventListener;
    }
    fetchEventListenerMapForEventTarget(eventTarget) {
      let eventListenerMap = this.eventListenerMaps.get(eventTarget);
      if (!eventListenerMap) {
        eventListenerMap = /* @__PURE__ */ new Map();
        this.eventListenerMaps.set(eventTarget, eventListenerMap);
      }
      return eventListenerMap;
    }
    cacheKey(eventName, eventOptions) {
      const parts = [eventName];
      Object.keys(eventOptions).sort().forEach((key) => {
        parts.push(`${eventOptions[key] ? "" : "!"}${key}`);
      });
      return parts.join(":");
    }
  };
  var defaultActionDescriptorFilters = {
    stop({ event, value }) {
      if (value)
        event.stopPropagation();
      return true;
    },
    prevent({ event, value }) {
      if (value)
        event.preventDefault();
      return true;
    },
    self({ event, value, element }) {
      if (value) {
        return element === event.target;
      } else {
        return true;
      }
    }
  };
  var descriptorPattern = /^(?:(?:([^.]+?)\+)?(.+?)(?:\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;
  function parseActionDescriptorString(descriptorString) {
    const source = descriptorString.trim();
    const matches = source.match(descriptorPattern) || [];
    let eventName = matches[2];
    let keyFilter = matches[3];
    if (keyFilter && !["keydown", "keyup", "keypress"].includes(eventName)) {
      eventName += `.${keyFilter}`;
      keyFilter = "";
    }
    return {
      eventTarget: parseEventTarget(matches[4]),
      eventName,
      eventOptions: matches[7] ? parseEventOptions(matches[7]) : {},
      identifier: matches[5],
      methodName: matches[6],
      keyFilter: matches[1] || keyFilter
    };
  }
  function parseEventTarget(eventTargetName) {
    if (eventTargetName == "window") {
      return window;
    } else if (eventTargetName == "document") {
      return document;
    }
  }
  function parseEventOptions(eventOptions) {
    return eventOptions.split(":").reduce((options, token) => Object.assign(options, { [token.replace(/^!/, "")]: !/^!/.test(token) }), {});
  }
  function stringifyEventTarget(eventTarget) {
    if (eventTarget == window) {
      return "window";
    } else if (eventTarget == document) {
      return "document";
    }
  }
  function camelize(value) {
    return value.replace(/(?:[_-])([a-z0-9])/g, (_2, char) => char.toUpperCase());
  }
  function namespaceCamelize(value) {
    return camelize(value.replace(/--/g, "-").replace(/__/g, "_"));
  }
  function capitalize(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
  function dasherize(value) {
    return value.replace(/([A-Z])/g, (_2, char) => `-${char.toLowerCase()}`);
  }
  function tokenize(value) {
    return value.match(/[^\s]+/g) || [];
  }
  function isSomething(object) {
    return object !== null && object !== void 0;
  }
  function hasProperty(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }
  var allModifiers = ["meta", "ctrl", "alt", "shift"];
  var Action = class {
    constructor(element, index, descriptor, schema) {
      this.element = element;
      this.index = index;
      this.eventTarget = descriptor.eventTarget || element;
      this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error("missing event name");
      this.eventOptions = descriptor.eventOptions || {};
      this.identifier = descriptor.identifier || error("missing identifier");
      this.methodName = descriptor.methodName || error("missing method name");
      this.keyFilter = descriptor.keyFilter || "";
      this.schema = schema;
    }
    static forToken(token, schema) {
      return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);
    }
    toString() {
      const eventFilter = this.keyFilter ? `.${this.keyFilter}` : "";
      const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : "";
      return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;
    }
    shouldIgnoreKeyboardEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = this.keyFilter.split("+");
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      const standardFilter = filters.filter((key) => !allModifiers.includes(key))[0];
      if (!standardFilter) {
        return false;
      }
      if (!hasProperty(this.keyMappings, standardFilter)) {
        error(`contains unknown key filter: ${this.keyFilter}`);
      }
      return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();
    }
    shouldIgnoreMouseEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = [this.keyFilter];
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      return false;
    }
    get params() {
      const params = {};
      const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, "i");
      for (const { name, value } of Array.from(this.element.attributes)) {
        const match = name.match(pattern);
        const key = match && match[1];
        if (key) {
          params[camelize(key)] = typecast(value);
        }
      }
      return params;
    }
    get eventTargetName() {
      return stringifyEventTarget(this.eventTarget);
    }
    get keyMappings() {
      return this.schema.keyMappings;
    }
    keyFilterDissatisfied(event, filters) {
      const [meta, ctrl, alt, shift] = allModifiers.map((modifier) => filters.includes(modifier));
      return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;
    }
  };
  var defaultEventNames = {
    a: () => "click",
    button: () => "click",
    form: () => "submit",
    details: () => "toggle",
    input: (e2) => e2.getAttribute("type") == "submit" ? "click" : "input",
    select: () => "change",
    textarea: () => "input"
  };
  function getDefaultEventNameForElement(element) {
    const tagName = element.tagName.toLowerCase();
    if (tagName in defaultEventNames) {
      return defaultEventNames[tagName](element);
    }
  }
  function error(message) {
    throw new Error(message);
  }
  function typecast(value) {
    try {
      return JSON.parse(value);
    } catch (o_O) {
      return value;
    }
  }
  var Binding = class {
    constructor(context, action) {
      this.context = context;
      this.action = action;
    }
    get index() {
      return this.action.index;
    }
    get eventTarget() {
      return this.action.eventTarget;
    }
    get eventOptions() {
      return this.action.eventOptions;
    }
    get identifier() {
      return this.context.identifier;
    }
    handleEvent(event) {
      const actionEvent = this.prepareActionEvent(event);
      if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {
        this.invokeWithEvent(actionEvent);
      }
    }
    get eventName() {
      return this.action.eventName;
    }
    get method() {
      const method = this.controller[this.methodName];
      if (typeof method == "function") {
        return method;
      }
      throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`);
    }
    applyEventModifiers(event) {
      const { element } = this.action;
      const { actionDescriptorFilters } = this.context.application;
      const { controller } = this.context;
      let passes = true;
      for (const [name, value] of Object.entries(this.eventOptions)) {
        if (name in actionDescriptorFilters) {
          const filter = actionDescriptorFilters[name];
          passes = passes && filter({ name, value, event, element, controller });
        } else {
          continue;
        }
      }
      return passes;
    }
    prepareActionEvent(event) {
      return Object.assign(event, { params: this.action.params });
    }
    invokeWithEvent(event) {
      const { target, currentTarget } = event;
      try {
        this.method.call(this.controller, event);
        this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });
      } catch (error2) {
        const { identifier, controller, element, index } = this;
        const detail = { identifier, controller, element, index, event };
        this.context.handleError(error2, `invoking action "${this.action}"`, detail);
      }
    }
    willBeInvokedByEvent(event) {
      const eventTarget = event.target;
      if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {
        return false;
      }
      if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {
        return false;
      }
      if (this.element === eventTarget) {
        return true;
      } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {
        return this.scope.containsElement(eventTarget);
      } else {
        return this.scope.containsElement(this.action.element);
      }
    }
    get controller() {
      return this.context.controller;
    }
    get methodName() {
      return this.action.methodName;
    }
    get element() {
      return this.scope.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  var ElementObserver = class {
    constructor(element, delegate) {
      this.mutationObserverInit = { attributes: true, childList: true, subtree: true };
      this.element = element;
      this.started = false;
      this.delegate = delegate;
      this.elements = /* @__PURE__ */ new Set();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.refresh();
      }
    }
    pause(callback) {
      if (this.started) {
        this.mutationObserver.disconnect();
        this.started = false;
      }
      callback();
      if (!this.started) {
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        const matches = new Set(this.matchElementsInTree());
        for (const element of Array.from(this.elements)) {
          if (!matches.has(element)) {
            this.removeElement(element);
          }
        }
        for (const element of Array.from(matches)) {
          this.addElement(element);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
      } else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
      }
    }
    processAttributeChange(element, attributeName) {
      if (this.elements.has(element)) {
        if (this.delegate.elementAttributeChanged && this.matchElement(element)) {
          this.delegate.elementAttributeChanged(element, attributeName);
        } else {
          this.removeElement(element);
        }
      } else if (this.matchElement(element)) {
        this.addElement(element);
      }
    }
    processRemovedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element) {
          this.processTree(element, this.removeElement);
        }
      }
    }
    processAddedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element && this.elementIsActive(element)) {
          this.processTree(element, this.addElement);
        }
      }
    }
    matchElement(element) {
      return this.delegate.matchElement(element);
    }
    matchElementsInTree(tree = this.element) {
      return this.delegate.matchElementsInTree(tree);
    }
    processTree(tree, processor) {
      for (const element of this.matchElementsInTree(tree)) {
        processor.call(this, element);
      }
    }
    elementFromNode(node) {
      if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
      }
    }
    elementIsActive(element) {
      if (element.isConnected != this.element.isConnected) {
        return false;
      } else {
        return this.element.contains(element);
      }
    }
    addElement(element) {
      if (!this.elements.has(element)) {
        if (this.elementIsActive(element)) {
          this.elements.add(element);
          if (this.delegate.elementMatched) {
            this.delegate.elementMatched(element);
          }
        }
      }
    }
    removeElement(element) {
      if (this.elements.has(element)) {
        this.elements.delete(element);
        if (this.delegate.elementUnmatched) {
          this.delegate.elementUnmatched(element);
        }
      }
    }
  };
  var AttributeObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeName = attributeName;
      this.delegate = delegate;
      this.elementObserver = new ElementObserver(element, this);
    }
    get element() {
      return this.elementObserver.element;
    }
    get selector() {
      return `[${this.attributeName}]`;
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get started() {
      return this.elementObserver.started;
    }
    matchElement(element) {
      return element.hasAttribute(this.attributeName);
    }
    matchElementsInTree(tree) {
      const match = this.matchElement(tree) ? [tree] : [];
      const matches = Array.from(tree.querySelectorAll(this.selector));
      return match.concat(matches);
    }
    elementMatched(element) {
      if (this.delegate.elementMatchedAttribute) {
        this.delegate.elementMatchedAttribute(element, this.attributeName);
      }
    }
    elementUnmatched(element) {
      if (this.delegate.elementUnmatchedAttribute) {
        this.delegate.elementUnmatchedAttribute(element, this.attributeName);
      }
    }
    elementAttributeChanged(element, attributeName) {
      if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {
        this.delegate.elementAttributeValueChanged(element, attributeName);
      }
    }
  };
  function add(map, key, value) {
    fetch2(map, key).add(value);
  }
  function del(map, key, value) {
    fetch2(map, key).delete(value);
    prune(map, key);
  }
  function fetch2(map, key) {
    let values = map.get(key);
    if (!values) {
      values = /* @__PURE__ */ new Set();
      map.set(key, values);
    }
    return values;
  }
  function prune(map, key) {
    const values = map.get(key);
    if (values != null && values.size == 0) {
      map.delete(key);
    }
  }
  var Multimap = class {
    constructor() {
      this.valuesByKey = /* @__PURE__ */ new Map();
    }
    get keys() {
      return Array.from(this.valuesByKey.keys());
    }
    get values() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((values, set) => values.concat(Array.from(set)), []);
    }
    get size() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((size, set) => size + set.size, 0);
    }
    add(key, value) {
      add(this.valuesByKey, key, value);
    }
    delete(key, value) {
      del(this.valuesByKey, key, value);
    }
    has(key, value) {
      const values = this.valuesByKey.get(key);
      return values != null && values.has(value);
    }
    hasKey(key) {
      return this.valuesByKey.has(key);
    }
    hasValue(value) {
      const sets = Array.from(this.valuesByKey.values());
      return sets.some((set) => set.has(value));
    }
    getValuesForKey(key) {
      const values = this.valuesByKey.get(key);
      return values ? Array.from(values) : [];
    }
    getKeysForValue(value) {
      return Array.from(this.valuesByKey).filter(([_key, values]) => values.has(value)).map(([key, _values]) => key);
    }
  };
  var SelectorObserver = class {
    constructor(element, selector, delegate, details) {
      this._selector = selector;
      this.details = details;
      this.elementObserver = new ElementObserver(element, this);
      this.delegate = delegate;
      this.matchesByElement = new Multimap();
    }
    get started() {
      return this.elementObserver.started;
    }
    get selector() {
      return this._selector;
    }
    set selector(selector) {
      this._selector = selector;
      this.refresh();
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get element() {
      return this.elementObserver.element;
    }
    matchElement(element) {
      const { selector } = this;
      if (selector) {
        const matches = element.matches(selector);
        if (this.delegate.selectorMatchElement) {
          return matches && this.delegate.selectorMatchElement(element, this.details);
        }
        return matches;
      } else {
        return false;
      }
    }
    matchElementsInTree(tree) {
      const { selector } = this;
      if (selector) {
        const match = this.matchElement(tree) ? [tree] : [];
        const matches = Array.from(tree.querySelectorAll(selector)).filter((match2) => this.matchElement(match2));
        return match.concat(matches);
      } else {
        return [];
      }
    }
    elementMatched(element) {
      const { selector } = this;
      if (selector) {
        this.selectorMatched(element, selector);
      }
    }
    elementUnmatched(element) {
      const selectors = this.matchesByElement.getKeysForValue(element);
      for (const selector of selectors) {
        this.selectorUnmatched(element, selector);
      }
    }
    elementAttributeChanged(element, _attributeName) {
      const { selector } = this;
      if (selector) {
        const matches = this.matchElement(element);
        const matchedBefore = this.matchesByElement.has(selector, element);
        if (matches && !matchedBefore) {
          this.selectorMatched(element, selector);
        } else if (!matches && matchedBefore) {
          this.selectorUnmatched(element, selector);
        }
      }
    }
    selectorMatched(element, selector) {
      this.delegate.selectorMatched(element, selector, this.details);
      this.matchesByElement.add(selector, element);
    }
    selectorUnmatched(element, selector) {
      this.delegate.selectorUnmatched(element, selector, this.details);
      this.matchesByElement.delete(selector, element);
    }
  };
  var StringMapObserver = class {
    constructor(element, delegate) {
      this.element = element;
      this.delegate = delegate;
      this.started = false;
      this.stringMap = /* @__PURE__ */ new Map();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });
        this.refresh();
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        for (const attributeName of this.knownAttributeNames) {
          this.refreshAttribute(attributeName, null);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      const attributeName = mutation.attributeName;
      if (attributeName) {
        this.refreshAttribute(attributeName, mutation.oldValue);
      }
    }
    refreshAttribute(attributeName, oldValue) {
      const key = this.delegate.getStringMapKeyForAttribute(attributeName);
      if (key != null) {
        if (!this.stringMap.has(attributeName)) {
          this.stringMapKeyAdded(key, attributeName);
        }
        const value = this.element.getAttribute(attributeName);
        if (this.stringMap.get(attributeName) != value) {
          this.stringMapValueChanged(value, key, oldValue);
        }
        if (value == null) {
          const oldValue2 = this.stringMap.get(attributeName);
          this.stringMap.delete(attributeName);
          if (oldValue2)
            this.stringMapKeyRemoved(key, attributeName, oldValue2);
        } else {
          this.stringMap.set(attributeName, value);
        }
      }
    }
    stringMapKeyAdded(key, attributeName) {
      if (this.delegate.stringMapKeyAdded) {
        this.delegate.stringMapKeyAdded(key, attributeName);
      }
    }
    stringMapValueChanged(value, key, oldValue) {
      if (this.delegate.stringMapValueChanged) {
        this.delegate.stringMapValueChanged(value, key, oldValue);
      }
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      if (this.delegate.stringMapKeyRemoved) {
        this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);
      }
    }
    get knownAttributeNames() {
      return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));
    }
    get currentAttributeNames() {
      return Array.from(this.element.attributes).map((attribute) => attribute.name);
    }
    get recordedAttributeNames() {
      return Array.from(this.stringMap.keys());
    }
  };
  var TokenListObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeObserver = new AttributeObserver(element, attributeName, this);
      this.delegate = delegate;
      this.tokensByElement = new Multimap();
    }
    get started() {
      return this.attributeObserver.started;
    }
    start() {
      this.attributeObserver.start();
    }
    pause(callback) {
      this.attributeObserver.pause(callback);
    }
    stop() {
      this.attributeObserver.stop();
    }
    refresh() {
      this.attributeObserver.refresh();
    }
    get element() {
      return this.attributeObserver.element;
    }
    get attributeName() {
      return this.attributeObserver.attributeName;
    }
    elementMatchedAttribute(element) {
      this.tokensMatched(this.readTokensForElement(element));
    }
    elementAttributeValueChanged(element) {
      const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);
      this.tokensUnmatched(unmatchedTokens);
      this.tokensMatched(matchedTokens);
    }
    elementUnmatchedAttribute(element) {
      this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));
    }
    tokensMatched(tokens) {
      tokens.forEach((token) => this.tokenMatched(token));
    }
    tokensUnmatched(tokens) {
      tokens.forEach((token) => this.tokenUnmatched(token));
    }
    tokenMatched(token) {
      this.delegate.tokenMatched(token);
      this.tokensByElement.add(token.element, token);
    }
    tokenUnmatched(token) {
      this.delegate.tokenUnmatched(token);
      this.tokensByElement.delete(token.element, token);
    }
    refreshTokensForElement(element) {
      const previousTokens = this.tokensByElement.getValuesForKey(element);
      const currentTokens = this.readTokensForElement(element);
      const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));
      if (firstDifferingIndex == -1) {
        return [[], []];
      } else {
        return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];
      }
    }
    readTokensForElement(element) {
      const attributeName = this.attributeName;
      const tokenString = element.getAttribute(attributeName) || "";
      return parseTokenString(tokenString, element, attributeName);
    }
  };
  function parseTokenString(tokenString, element, attributeName) {
    return tokenString.trim().split(/\s+/).filter((content) => content.length).map((content, index) => ({ element, attributeName, content, index }));
  }
  function zip(left, right) {
    const length = Math.max(left.length, right.length);
    return Array.from({ length }, (_2, index) => [left[index], right[index]]);
  }
  function tokensAreEqual(left, right) {
    return left && right && left.index == right.index && left.content == right.content;
  }
  var ValueListObserver = class {
    constructor(element, attributeName, delegate) {
      this.tokenListObserver = new TokenListObserver(element, attributeName, this);
      this.delegate = delegate;
      this.parseResultsByToken = /* @__PURE__ */ new WeakMap();
      this.valuesByTokenByElement = /* @__PURE__ */ new WeakMap();
    }
    get started() {
      return this.tokenListObserver.started;
    }
    start() {
      this.tokenListObserver.start();
    }
    stop() {
      this.tokenListObserver.stop();
    }
    refresh() {
      this.tokenListObserver.refresh();
    }
    get element() {
      return this.tokenListObserver.element;
    }
    get attributeName() {
      return this.tokenListObserver.attributeName;
    }
    tokenMatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).set(token, value);
        this.delegate.elementMatchedValue(element, value);
      }
    }
    tokenUnmatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).delete(token);
        this.delegate.elementUnmatchedValue(element, value);
      }
    }
    fetchParseResultForToken(token) {
      let parseResult = this.parseResultsByToken.get(token);
      if (!parseResult) {
        parseResult = this.parseToken(token);
        this.parseResultsByToken.set(token, parseResult);
      }
      return parseResult;
    }
    fetchValuesByTokenForElement(element) {
      let valuesByToken = this.valuesByTokenByElement.get(element);
      if (!valuesByToken) {
        valuesByToken = /* @__PURE__ */ new Map();
        this.valuesByTokenByElement.set(element, valuesByToken);
      }
      return valuesByToken;
    }
    parseToken(token) {
      try {
        const value = this.delegate.parseValueForToken(token);
        return { value };
      } catch (error2) {
        return { error: error2 };
      }
    }
  };
  var BindingObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.bindingsByAction = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.valueListObserver) {
        this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);
        this.valueListObserver.start();
      }
    }
    stop() {
      if (this.valueListObserver) {
        this.valueListObserver.stop();
        delete this.valueListObserver;
        this.disconnectAllActions();
      }
    }
    get element() {
      return this.context.element;
    }
    get identifier() {
      return this.context.identifier;
    }
    get actionAttribute() {
      return this.schema.actionAttribute;
    }
    get schema() {
      return this.context.schema;
    }
    get bindings() {
      return Array.from(this.bindingsByAction.values());
    }
    connectAction(action) {
      const binding = new Binding(this.context, action);
      this.bindingsByAction.set(action, binding);
      this.delegate.bindingConnected(binding);
    }
    disconnectAction(action) {
      const binding = this.bindingsByAction.get(action);
      if (binding) {
        this.bindingsByAction.delete(action);
        this.delegate.bindingDisconnected(binding);
      }
    }
    disconnectAllActions() {
      this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true));
      this.bindingsByAction.clear();
    }
    parseValueForToken(token) {
      const action = Action.forToken(token, this.schema);
      if (action.identifier == this.identifier) {
        return action;
      }
    }
    elementMatchedValue(element, action) {
      this.connectAction(action);
    }
    elementUnmatchedValue(element, action) {
      this.disconnectAction(action);
    }
  };
  var ValueObserver = class {
    constructor(context, receiver) {
      this.context = context;
      this.receiver = receiver;
      this.stringMapObserver = new StringMapObserver(this.element, this);
      this.valueDescriptorMap = this.controller.valueDescriptorMap;
    }
    start() {
      this.stringMapObserver.start();
      this.invokeChangedCallbacksForDefaultValues();
    }
    stop() {
      this.stringMapObserver.stop();
    }
    get element() {
      return this.context.element;
    }
    get controller() {
      return this.context.controller;
    }
    getStringMapKeyForAttribute(attributeName) {
      if (attributeName in this.valueDescriptorMap) {
        return this.valueDescriptorMap[attributeName].name;
      }
    }
    stringMapKeyAdded(key, attributeName) {
      const descriptor = this.valueDescriptorMap[attributeName];
      if (!this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));
      }
    }
    stringMapValueChanged(value, name, oldValue) {
      const descriptor = this.valueDescriptorNameMap[name];
      if (value === null)
        return;
      if (oldValue === null) {
        oldValue = descriptor.writer(descriptor.defaultValue);
      }
      this.invokeChangedCallback(name, value, oldValue);
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      const descriptor = this.valueDescriptorNameMap[key];
      if (this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);
      } else {
        this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);
      }
    }
    invokeChangedCallbacksForDefaultValues() {
      for (const { key, name, defaultValue, writer } of this.valueDescriptors) {
        if (defaultValue != void 0 && !this.controller.data.has(key)) {
          this.invokeChangedCallback(name, writer(defaultValue), void 0);
        }
      }
    }
    invokeChangedCallback(name, rawValue, rawOldValue) {
      const changedMethodName = `${name}Changed`;
      const changedMethod = this.receiver[changedMethodName];
      if (typeof changedMethod == "function") {
        const descriptor = this.valueDescriptorNameMap[name];
        try {
          const value = descriptor.reader(rawValue);
          let oldValue = rawOldValue;
          if (rawOldValue) {
            oldValue = descriptor.reader(rawOldValue);
          }
          changedMethod.call(this.receiver, value, oldValue);
        } catch (error2) {
          if (error2 instanceof TypeError) {
            error2.message = `Stimulus Value "${this.context.identifier}.${descriptor.name}" - ${error2.message}`;
          }
          throw error2;
        }
      }
    }
    get valueDescriptors() {
      const { valueDescriptorMap } = this;
      return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key]);
    }
    get valueDescriptorNameMap() {
      const descriptors = {};
      Object.keys(this.valueDescriptorMap).forEach((key) => {
        const descriptor = this.valueDescriptorMap[key];
        descriptors[descriptor.name] = descriptor;
      });
      return descriptors;
    }
    hasValue(attributeName) {
      const descriptor = this.valueDescriptorNameMap[attributeName];
      const hasMethodName = `has${capitalize(descriptor.name)}`;
      return this.receiver[hasMethodName];
    }
  };
  var TargetObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.targetsByName = new Multimap();
    }
    start() {
      if (!this.tokenListObserver) {
        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);
        this.tokenListObserver.start();
      }
    }
    stop() {
      if (this.tokenListObserver) {
        this.disconnectAllTargets();
        this.tokenListObserver.stop();
        delete this.tokenListObserver;
      }
    }
    tokenMatched({ element, content: name }) {
      if (this.scope.containsElement(element)) {
        this.connectTarget(element, name);
      }
    }
    tokenUnmatched({ element, content: name }) {
      this.disconnectTarget(element, name);
    }
    connectTarget(element, name) {
      var _a;
      if (!this.targetsByName.has(name, element)) {
        this.targetsByName.add(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));
      }
    }
    disconnectTarget(element, name) {
      var _a;
      if (this.targetsByName.has(name, element)) {
        this.targetsByName.delete(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));
      }
    }
    disconnectAllTargets() {
      for (const name of this.targetsByName.keys) {
        for (const element of this.targetsByName.getValuesForKey(name)) {
          this.disconnectTarget(element, name);
        }
      }
    }
    get attributeName() {
      return `data-${this.context.identifier}-target`;
    }
    get element() {
      return this.context.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  function readInheritableStaticArrayValues(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return Array.from(ancestors.reduce((values, constructor2) => {
      getOwnStaticArrayValues(constructor2, propertyName).forEach((name) => values.add(name));
      return values;
    }, /* @__PURE__ */ new Set()));
  }
  function readInheritableStaticObjectPairs(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return ancestors.reduce((pairs, constructor2) => {
      pairs.push(...getOwnStaticObjectPairs(constructor2, propertyName));
      return pairs;
    }, []);
  }
  function getAncestorsForConstructor(constructor) {
    const ancestors = [];
    while (constructor) {
      ancestors.push(constructor);
      constructor = Object.getPrototypeOf(constructor);
    }
    return ancestors.reverse();
  }
  function getOwnStaticArrayValues(constructor, propertyName) {
    const definition = constructor[propertyName];
    return Array.isArray(definition) ? definition : [];
  }
  function getOwnStaticObjectPairs(constructor, propertyName) {
    const definition = constructor[propertyName];
    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];
  }
  var OutletObserver = class {
    constructor(context, delegate) {
      this.started = false;
      this.context = context;
      this.delegate = delegate;
      this.outletsByName = new Multimap();
      this.outletElementsByName = new Multimap();
      this.selectorObserverMap = /* @__PURE__ */ new Map();
      this.attributeObserverMap = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.started) {
        this.outletDefinitions.forEach((outletName) => {
          this.setupSelectorObserverForOutlet(outletName);
          this.setupAttributeObserverForOutlet(outletName);
        });
        this.started = true;
        this.dependentContexts.forEach((context) => context.refresh());
      }
    }
    refresh() {
      this.selectorObserverMap.forEach((observer) => observer.refresh());
      this.attributeObserverMap.forEach((observer) => observer.refresh());
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.disconnectAllOutlets();
        this.stopSelectorObservers();
        this.stopAttributeObservers();
      }
    }
    stopSelectorObservers() {
      if (this.selectorObserverMap.size > 0) {
        this.selectorObserverMap.forEach((observer) => observer.stop());
        this.selectorObserverMap.clear();
      }
    }
    stopAttributeObservers() {
      if (this.attributeObserverMap.size > 0) {
        this.attributeObserverMap.forEach((observer) => observer.stop());
        this.attributeObserverMap.clear();
      }
    }
    selectorMatched(element, _selector, { outletName }) {
      const outlet = this.getOutlet(element, outletName);
      if (outlet) {
        this.connectOutlet(outlet, element, outletName);
      }
    }
    selectorUnmatched(element, _selector, { outletName }) {
      const outlet = this.getOutletFromMap(element, outletName);
      if (outlet) {
        this.disconnectOutlet(outlet, element, outletName);
      }
    }
    selectorMatchElement(element, { outletName }) {
      const selector = this.selector(outletName);
      const hasOutlet = this.hasOutlet(element, outletName);
      const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`);
      if (selector) {
        return hasOutlet && hasOutletController && element.matches(selector);
      } else {
        return false;
      }
    }
    elementMatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementAttributeValueChanged(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementUnmatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    connectOutlet(outlet, element, outletName) {
      var _a;
      if (!this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.add(outletName, outlet);
        this.outletElementsByName.add(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));
      }
    }
    disconnectOutlet(outlet, element, outletName) {
      var _a;
      if (this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.delete(outletName, outlet);
        this.outletElementsByName.delete(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));
      }
    }
    disconnectAllOutlets() {
      for (const outletName of this.outletElementsByName.keys) {
        for (const element of this.outletElementsByName.getValuesForKey(outletName)) {
          for (const outlet of this.outletsByName.getValuesForKey(outletName)) {
            this.disconnectOutlet(outlet, element, outletName);
          }
        }
      }
    }
    updateSelectorObserverForOutlet(outletName) {
      const observer = this.selectorObserverMap.get(outletName);
      if (observer) {
        observer.selector = this.selector(outletName);
      }
    }
    setupSelectorObserverForOutlet(outletName) {
      const selector = this.selector(outletName);
      const selectorObserver = new SelectorObserver(document.body, selector, this, { outletName });
      this.selectorObserverMap.set(outletName, selectorObserver);
      selectorObserver.start();
    }
    setupAttributeObserverForOutlet(outletName) {
      const attributeName = this.attributeNameForOutletName(outletName);
      const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);
      this.attributeObserverMap.set(outletName, attributeObserver);
      attributeObserver.start();
    }
    selector(outletName) {
      return this.scope.outlets.getSelectorForOutletName(outletName);
    }
    attributeNameForOutletName(outletName) {
      return this.scope.schema.outletAttributeForScope(this.identifier, outletName);
    }
    getOutletNameFromOutletAttributeName(attributeName) {
      return this.outletDefinitions.find((outletName) => this.attributeNameForOutletName(outletName) === attributeName);
    }
    get outletDependencies() {
      const dependencies = new Multimap();
      this.router.modules.forEach((module) => {
        const constructor = module.definition.controllerConstructor;
        const outlets = readInheritableStaticArrayValues(constructor, "outlets");
        outlets.forEach((outlet) => dependencies.add(outlet, module.identifier));
      });
      return dependencies;
    }
    get outletDefinitions() {
      return this.outletDependencies.getKeysForValue(this.identifier);
    }
    get dependentControllerIdentifiers() {
      return this.outletDependencies.getValuesForKey(this.identifier);
    }
    get dependentContexts() {
      const identifiers = this.dependentControllerIdentifiers;
      return this.router.contexts.filter((context) => identifiers.includes(context.identifier));
    }
    hasOutlet(element, outletName) {
      return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);
    }
    getOutlet(element, outletName) {
      return this.application.getControllerForElementAndIdentifier(element, outletName);
    }
    getOutletFromMap(element, outletName) {
      return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element);
    }
    get scope() {
      return this.context.scope;
    }
    get schema() {
      return this.context.schema;
    }
    get identifier() {
      return this.context.identifier;
    }
    get application() {
      return this.context.application;
    }
    get router() {
      return this.application.router;
    }
  };
  var Context = class {
    constructor(module, scope) {
      this.logDebugActivity = (functionName, detail = {}) => {
        const { identifier, controller, element } = this;
        detail = Object.assign({ identifier, controller, element }, detail);
        this.application.logDebugActivity(this.identifier, functionName, detail);
      };
      this.module = module;
      this.scope = scope;
      this.controller = new module.controllerConstructor(this);
      this.bindingObserver = new BindingObserver(this, this.dispatcher);
      this.valueObserver = new ValueObserver(this, this.controller);
      this.targetObserver = new TargetObserver(this, this);
      this.outletObserver = new OutletObserver(this, this);
      try {
        this.controller.initialize();
        this.logDebugActivity("initialize");
      } catch (error2) {
        this.handleError(error2, "initializing controller");
      }
    }
    connect() {
      this.bindingObserver.start();
      this.valueObserver.start();
      this.targetObserver.start();
      this.outletObserver.start();
      try {
        this.controller.connect();
        this.logDebugActivity("connect");
      } catch (error2) {
        this.handleError(error2, "connecting controller");
      }
    }
    refresh() {
      this.outletObserver.refresh();
    }
    disconnect() {
      try {
        this.controller.disconnect();
        this.logDebugActivity("disconnect");
      } catch (error2) {
        this.handleError(error2, "disconnecting controller");
      }
      this.outletObserver.stop();
      this.targetObserver.stop();
      this.valueObserver.stop();
      this.bindingObserver.stop();
    }
    get application() {
      return this.module.application;
    }
    get identifier() {
      return this.module.identifier;
    }
    get schema() {
      return this.application.schema;
    }
    get dispatcher() {
      return this.application.dispatcher;
    }
    get element() {
      return this.scope.element;
    }
    get parentElement() {
      return this.element.parentElement;
    }
    handleError(error2, message, detail = {}) {
      const { identifier, controller, element } = this;
      detail = Object.assign({ identifier, controller, element }, detail);
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    targetConnected(element, name) {
      this.invokeControllerMethod(`${name}TargetConnected`, element);
    }
    targetDisconnected(element, name) {
      this.invokeControllerMethod(`${name}TargetDisconnected`, element);
    }
    outletConnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);
    }
    outletDisconnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);
    }
    invokeControllerMethod(methodName, ...args) {
      const controller = this.controller;
      if (typeof controller[methodName] == "function") {
        controller[methodName](...args);
      }
    }
  };
  function bless(constructor) {
    return shadow(constructor, getBlessedProperties(constructor));
  }
  function shadow(constructor, properties) {
    const shadowConstructor = extend2(constructor);
    const shadowProperties = getShadowProperties(constructor.prototype, properties);
    Object.defineProperties(shadowConstructor.prototype, shadowProperties);
    return shadowConstructor;
  }
  function getBlessedProperties(constructor) {
    const blessings = readInheritableStaticArrayValues(constructor, "blessings");
    return blessings.reduce((blessedProperties, blessing) => {
      const properties = blessing(constructor);
      for (const key in properties) {
        const descriptor = blessedProperties[key] || {};
        blessedProperties[key] = Object.assign(descriptor, properties[key]);
      }
      return blessedProperties;
    }, {});
  }
  function getShadowProperties(prototype, properties) {
    return getOwnKeys(properties).reduce((shadowProperties, key) => {
      const descriptor = getShadowedDescriptor(prototype, properties, key);
      if (descriptor) {
        Object.assign(shadowProperties, { [key]: descriptor });
      }
      return shadowProperties;
    }, {});
  }
  function getShadowedDescriptor(prototype, properties, key) {
    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype, key);
    const shadowedByValue = shadowingDescriptor && "value" in shadowingDescriptor;
    if (!shadowedByValue) {
      const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;
      if (shadowingDescriptor) {
        descriptor.get = shadowingDescriptor.get || descriptor.get;
        descriptor.set = shadowingDescriptor.set || descriptor.set;
      }
      return descriptor;
    }
  }
  var getOwnKeys = (() => {
    if (typeof Object.getOwnPropertySymbols == "function") {
      return (object) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];
    } else {
      return Object.getOwnPropertyNames;
    }
  })();
  var extend2 = (() => {
    function extendWithReflect(constructor) {
      function extended() {
        return Reflect.construct(constructor, arguments, new.target);
      }
      extended.prototype = Object.create(constructor.prototype, {
        constructor: { value: extended }
      });
      Reflect.setPrototypeOf(extended, constructor);
      return extended;
    }
    function testReflectExtension() {
      const a2 = function() {
        this.a.call(this);
      };
      const b2 = extendWithReflect(a2);
      b2.prototype.a = function() {
      };
      return new b2();
    }
    try {
      testReflectExtension();
      return extendWithReflect;
    } catch (error2) {
      return (constructor) => class extended extends constructor {
      };
    }
  })();
  function blessDefinition(definition) {
    return {
      identifier: definition.identifier,
      controllerConstructor: bless(definition.controllerConstructor)
    };
  }
  var Module = class {
    constructor(application2, definition) {
      this.application = application2;
      this.definition = blessDefinition(definition);
      this.contextsByScope = /* @__PURE__ */ new WeakMap();
      this.connectedContexts = /* @__PURE__ */ new Set();
    }
    get identifier() {
      return this.definition.identifier;
    }
    get controllerConstructor() {
      return this.definition.controllerConstructor;
    }
    get contexts() {
      return Array.from(this.connectedContexts);
    }
    connectContextForScope(scope) {
      const context = this.fetchContextForScope(scope);
      this.connectedContexts.add(context);
      context.connect();
    }
    disconnectContextForScope(scope) {
      const context = this.contextsByScope.get(scope);
      if (context) {
        this.connectedContexts.delete(context);
        context.disconnect();
      }
    }
    fetchContextForScope(scope) {
      let context = this.contextsByScope.get(scope);
      if (!context) {
        context = new Context(this, scope);
        this.contextsByScope.set(scope, context);
      }
      return context;
    }
  };
  var ClassMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    has(name) {
      return this.data.has(this.getDataKey(name));
    }
    get(name) {
      return this.getAll(name)[0];
    }
    getAll(name) {
      const tokenString = this.data.get(this.getDataKey(name)) || "";
      return tokenize(tokenString);
    }
    getAttributeName(name) {
      return this.data.getAttributeNameForKey(this.getDataKey(name));
    }
    getDataKey(name) {
      return `${name}-class`;
    }
    get data() {
      return this.scope.data;
    }
  };
  var DataMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.getAttribute(name);
    }
    set(key, value) {
      const name = this.getAttributeNameForKey(key);
      this.element.setAttribute(name, value);
      return this.get(key);
    }
    has(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.hasAttribute(name);
    }
    delete(key) {
      if (this.has(key)) {
        const name = this.getAttributeNameForKey(key);
        this.element.removeAttribute(name);
        return true;
      } else {
        return false;
      }
    }
    getAttributeNameForKey(key) {
      return `data-${this.identifier}-${dasherize(key)}`;
    }
  };
  var Guide = class {
    constructor(logger2) {
      this.warnedKeysByObject = /* @__PURE__ */ new WeakMap();
      this.logger = logger2;
    }
    warn(object, key, message) {
      let warnedKeys = this.warnedKeysByObject.get(object);
      if (!warnedKeys) {
        warnedKeys = /* @__PURE__ */ new Set();
        this.warnedKeysByObject.set(object, warnedKeys);
      }
      if (!warnedKeys.has(key)) {
        warnedKeys.add(key);
        this.logger.warn(message, object);
      }
    }
  };
  function attributeValueContainsToken(attributeName, token) {
    return `[${attributeName}~="${token}"]`;
  }
  var TargetSet = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(targetName) {
      return this.find(targetName) != null;
    }
    find(...targetNames) {
      return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), void 0);
    }
    findAll(...targetNames) {
      return targetNames.reduce((targets, targetName) => [
        ...targets,
        ...this.findAllTargets(targetName),
        ...this.findAllLegacyTargets(targetName)
      ], []);
    }
    findTarget(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findElement(selector);
    }
    findAllTargets(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findAllElements(selector);
    }
    getSelectorForTargetName(targetName) {
      const attributeName = this.schema.targetAttributeForScope(this.identifier);
      return attributeValueContainsToken(attributeName, targetName);
    }
    findLegacyTarget(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.deprecate(this.scope.findElement(selector), targetName);
    }
    findAllLegacyTargets(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName));
    }
    getLegacySelectorForTargetName(targetName) {
      const targetDescriptor = `${this.identifier}.${targetName}`;
      return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);
    }
    deprecate(element, targetName) {
      if (element) {
        const { identifier } = this;
        const attributeName = this.schema.targetAttribute;
        const revisedAttributeName = this.schema.targetAttributeForScope(identifier);
        this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}="${identifier}.${targetName}" with ${revisedAttributeName}="${targetName}". The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);
      }
      return element;
    }
    get guide() {
      return this.scope.guide;
    }
  };
  var OutletSet = class {
    constructor(scope, controllerElement) {
      this.scope = scope;
      this.controllerElement = controllerElement;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(outletName) {
      return this.find(outletName) != null;
    }
    find(...outletNames) {
      return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), void 0);
    }
    findAll(...outletNames) {
      return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);
    }
    getSelectorForOutletName(outletName) {
      const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);
      return this.controllerElement.getAttribute(attributeName);
    }
    findOutlet(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      if (selector)
        return this.findElement(selector, outletName);
    }
    findAllOutlets(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      return selector ? this.findAllElements(selector, outletName) : [];
    }
    findElement(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName))[0];
    }
    findAllElements(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName));
    }
    matchesElement(element, selector, outletName) {
      const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || "";
      return element.matches(selector) && controllerAttribute.split(" ").includes(outletName);
    }
  };
  var Scope = class _Scope {
    constructor(schema, element, identifier, logger2) {
      this.targets = new TargetSet(this);
      this.classes = new ClassMap(this);
      this.data = new DataMap(this);
      this.containsElement = (element2) => {
        return element2.closest(this.controllerSelector) === this.element;
      };
      this.schema = schema;
      this.element = element;
      this.identifier = identifier;
      this.guide = new Guide(logger2);
      this.outlets = new OutletSet(this.documentScope, element);
    }
    findElement(selector) {
      return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);
    }
    findAllElements(selector) {
      return [
        ...this.element.matches(selector) ? [this.element] : [],
        ...this.queryElements(selector).filter(this.containsElement)
      ];
    }
    queryElements(selector) {
      return Array.from(this.element.querySelectorAll(selector));
    }
    get controllerSelector() {
      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);
    }
    get isDocumentScope() {
      return this.element === document.documentElement;
    }
    get documentScope() {
      return this.isDocumentScope ? this : new _Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);
    }
  };
  var ScopeObserver = class {
    constructor(element, schema, delegate) {
      this.element = element;
      this.schema = schema;
      this.delegate = delegate;
      this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);
      this.scopesByIdentifierByElement = /* @__PURE__ */ new WeakMap();
      this.scopeReferenceCounts = /* @__PURE__ */ new WeakMap();
    }
    start() {
      this.valueListObserver.start();
    }
    stop() {
      this.valueListObserver.stop();
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    parseValueForToken(token) {
      const { element, content: identifier } = token;
      return this.parseValueForElementAndIdentifier(element, identifier);
    }
    parseValueForElementAndIdentifier(element, identifier) {
      const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);
      let scope = scopesByIdentifier.get(identifier);
      if (!scope) {
        scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);
        scopesByIdentifier.set(identifier, scope);
      }
      return scope;
    }
    elementMatchedValue(element, value) {
      const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;
      this.scopeReferenceCounts.set(value, referenceCount);
      if (referenceCount == 1) {
        this.delegate.scopeConnected(value);
      }
    }
    elementUnmatchedValue(element, value) {
      const referenceCount = this.scopeReferenceCounts.get(value);
      if (referenceCount) {
        this.scopeReferenceCounts.set(value, referenceCount - 1);
        if (referenceCount == 1) {
          this.delegate.scopeDisconnected(value);
        }
      }
    }
    fetchScopesByIdentifierForElement(element) {
      let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);
      if (!scopesByIdentifier) {
        scopesByIdentifier = /* @__PURE__ */ new Map();
        this.scopesByIdentifierByElement.set(element, scopesByIdentifier);
      }
      return scopesByIdentifier;
    }
  };
  var Router = class {
    constructor(application2) {
      this.application = application2;
      this.scopeObserver = new ScopeObserver(this.element, this.schema, this);
      this.scopesByIdentifier = new Multimap();
      this.modulesByIdentifier = /* @__PURE__ */ new Map();
    }
    get element() {
      return this.application.element;
    }
    get schema() {
      return this.application.schema;
    }
    get logger() {
      return this.application.logger;
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    get modules() {
      return Array.from(this.modulesByIdentifier.values());
    }
    get contexts() {
      return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);
    }
    start() {
      this.scopeObserver.start();
    }
    stop() {
      this.scopeObserver.stop();
    }
    loadDefinition(definition) {
      this.unloadIdentifier(definition.identifier);
      const module = new Module(this.application, definition);
      this.connectModule(module);
      const afterLoad = definition.controllerConstructor.afterLoad;
      if (afterLoad) {
        afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);
      }
    }
    unloadIdentifier(identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        this.disconnectModule(module);
      }
    }
    getContextForElementAndIdentifier(element, identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        return module.contexts.find((context) => context.element == element);
      }
    }
    proposeToConnectScopeForElementAndIdentifier(element, identifier) {
      const scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);
      if (scope) {
        this.scopeObserver.elementMatchedValue(scope.element, scope);
      } else {
        console.error(`Couldn't find or create scope for identifier: "${identifier}" and element:`, element);
      }
    }
    handleError(error2, message, detail) {
      this.application.handleError(error2, message, detail);
    }
    createScopeForElementAndIdentifier(element, identifier) {
      return new Scope(this.schema, element, identifier, this.logger);
    }
    scopeConnected(scope) {
      this.scopesByIdentifier.add(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.connectContextForScope(scope);
      }
    }
    scopeDisconnected(scope) {
      this.scopesByIdentifier.delete(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.disconnectContextForScope(scope);
      }
    }
    connectModule(module) {
      this.modulesByIdentifier.set(module.identifier, module);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.connectContextForScope(scope));
    }
    disconnectModule(module) {
      this.modulesByIdentifier.delete(module.identifier);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.disconnectContextForScope(scope));
    }
  };
  var defaultSchema = {
    controllerAttribute: "data-controller",
    actionAttribute: "data-action",
    targetAttribute: "data-target",
    targetAttributeForScope: (identifier) => `data-${identifier}-target`,
    outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,
    keyMappings: Object.assign(Object.assign({ enter: "Enter", tab: "Tab", esc: "Escape", space: " ", up: "ArrowUp", down: "ArrowDown", left: "ArrowLeft", right: "ArrowRight", home: "Home", end: "End", page_up: "PageUp", page_down: "PageDown" }, objectFromEntries("abcdefghijklmnopqrstuvwxyz".split("").map((c2) => [c2, c2]))), objectFromEntries("0123456789".split("").map((n2) => [n2, n2])))
  };
  function objectFromEntries(array) {
    return array.reduce((memo, [k2, v2]) => Object.assign(Object.assign({}, memo), { [k2]: v2 }), {});
  }
  var Application = class {
    constructor(element = document.documentElement, schema = defaultSchema) {
      this.logger = console;
      this.debug = false;
      this.logDebugActivity = (identifier, functionName, detail = {}) => {
        if (this.debug) {
          this.logFormattedMessage(identifier, functionName, detail);
        }
      };
      this.element = element;
      this.schema = schema;
      this.dispatcher = new Dispatcher(this);
      this.router = new Router(this);
      this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);
    }
    static start(element, schema) {
      const application2 = new this(element, schema);
      application2.start();
      return application2;
    }
    async start() {
      await domReady();
      this.logDebugActivity("application", "starting");
      this.dispatcher.start();
      this.router.start();
      this.logDebugActivity("application", "start");
    }
    stop() {
      this.logDebugActivity("application", "stopping");
      this.dispatcher.stop();
      this.router.stop();
      this.logDebugActivity("application", "stop");
    }
    register(identifier, controllerConstructor) {
      this.load({ identifier, controllerConstructor });
    }
    registerActionOption(name, filter) {
      this.actionDescriptorFilters[name] = filter;
    }
    load(head, ...rest) {
      const definitions = Array.isArray(head) ? head : [head, ...rest];
      definitions.forEach((definition) => {
        if (definition.controllerConstructor.shouldLoad) {
          this.router.loadDefinition(definition);
        }
      });
    }
    unload(head, ...rest) {
      const identifiers = Array.isArray(head) ? head : [head, ...rest];
      identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier));
    }
    get controllers() {
      return this.router.contexts.map((context) => context.controller);
    }
    getControllerForElementAndIdentifier(element, identifier) {
      const context = this.router.getContextForElementAndIdentifier(element, identifier);
      return context ? context.controller : null;
    }
    handleError(error2, message, detail) {
      var _a;
      this.logger.error(`%s

%o

%o`, message, error2, detail);
      (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, "", 0, 0, error2);
    }
    logFormattedMessage(identifier, functionName, detail = {}) {
      detail = Object.assign({ application: this }, detail);
      this.logger.groupCollapsed(`${identifier} #${functionName}`);
      this.logger.log("details:", Object.assign({}, detail));
      this.logger.groupEnd();
    }
  };
  function domReady() {
    return new Promise((resolve) => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", () => resolve());
      } else {
        resolve();
      }
    });
  }
  function ClassPropertiesBlessing(constructor) {
    const classes = readInheritableStaticArrayValues(constructor, "classes");
    return classes.reduce((properties, classDefinition) => {
      return Object.assign(properties, propertiesForClassDefinition(classDefinition));
    }, {});
  }
  function propertiesForClassDefinition(key) {
    return {
      [`${key}Class`]: {
        get() {
          const { classes } = this;
          if (classes.has(key)) {
            return classes.get(key);
          } else {
            const attribute = classes.getAttributeName(key);
            throw new Error(`Missing attribute "${attribute}"`);
          }
        }
      },
      [`${key}Classes`]: {
        get() {
          return this.classes.getAll(key);
        }
      },
      [`has${capitalize(key)}Class`]: {
        get() {
          return this.classes.has(key);
        }
      }
    };
  }
  function OutletPropertiesBlessing(constructor) {
    const outlets = readInheritableStaticArrayValues(constructor, "outlets");
    return outlets.reduce((properties, outletDefinition) => {
      return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));
    }, {});
  }
  function getOutletController(controller, element, identifier) {
    return controller.application.getControllerForElementAndIdentifier(element, identifier);
  }
  function getControllerAndEnsureConnectedScope(controller, element, outletName) {
    let outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
    controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);
    outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
  }
  function propertiesForOutletDefinition(name) {
    const camelizedName = namespaceCamelize(name);
    return {
      [`${camelizedName}Outlet`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
            if (outletController)
              return outletController;
            throw new Error(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`);
          }
          throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
        }
      },
      [`${camelizedName}Outlets`]: {
        get() {
          const outlets = this.outlets.findAll(name);
          if (outlets.length > 0) {
            return outlets.map((outletElement) => {
              const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
              if (outletController)
                return outletController;
              console.warn(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`, outletElement);
            }).filter((controller) => controller);
          }
          return [];
        }
      },
      [`${camelizedName}OutletElement`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            return outletElement;
          } else {
            throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
          }
        }
      },
      [`${camelizedName}OutletElements`]: {
        get() {
          return this.outlets.findAll(name);
        }
      },
      [`has${capitalize(camelizedName)}Outlet`]: {
        get() {
          return this.outlets.has(name);
        }
      }
    };
  }
  function TargetPropertiesBlessing(constructor) {
    const targets = readInheritableStaticArrayValues(constructor, "targets");
    return targets.reduce((properties, targetDefinition) => {
      return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));
    }, {});
  }
  function propertiesForTargetDefinition(name) {
    return {
      [`${name}Target`]: {
        get() {
          const target = this.targets.find(name);
          if (target) {
            return target;
          } else {
            throw new Error(`Missing target element "${name}" for "${this.identifier}" controller`);
          }
        }
      },
      [`${name}Targets`]: {
        get() {
          return this.targets.findAll(name);
        }
      },
      [`has${capitalize(name)}Target`]: {
        get() {
          return this.targets.has(name);
        }
      }
    };
  }
  function ValuePropertiesBlessing(constructor) {
    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, "values");
    const propertyDescriptorMap = {
      valueDescriptorMap: {
        get() {
          return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {
            const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);
            const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);
            return Object.assign(result, { [attributeName]: valueDescriptor });
          }, {});
        }
      }
    };
    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {
      return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));
    }, propertyDescriptorMap);
  }
  function propertiesForValueDefinitionPair(valueDefinitionPair, controller) {
    const definition = parseValueDefinitionPair(valueDefinitionPair, controller);
    const { key, name, reader: read, writer: write } = definition;
    return {
      [name]: {
        get() {
          const value = this.data.get(key);
          if (value !== null) {
            return read(value);
          } else {
            return definition.defaultValue;
          }
        },
        set(value) {
          if (value === void 0) {
            this.data.delete(key);
          } else {
            this.data.set(key, write(value));
          }
        }
      },
      [`has${capitalize(name)}`]: {
        get() {
          return this.data.has(key) || definition.hasCustomDefaultValue;
        }
      }
    };
  }
  function parseValueDefinitionPair([token, typeDefinition], controller) {
    return valueDescriptorForTokenAndTypeDefinition({
      controller,
      token,
      typeDefinition
    });
  }
  function parseValueTypeConstant(constant) {
    switch (constant) {
      case Array:
        return "array";
      case Boolean:
        return "boolean";
      case Number:
        return "number";
      case Object:
        return "object";
      case String:
        return "string";
    }
  }
  function parseValueTypeDefault(defaultValue) {
    switch (typeof defaultValue) {
      case "boolean":
        return "boolean";
      case "number":
        return "number";
      case "string":
        return "string";
    }
    if (Array.isArray(defaultValue))
      return "array";
    if (Object.prototype.toString.call(defaultValue) === "[object Object]")
      return "object";
  }
  function parseValueTypeObject(payload) {
    const { controller, token, typeObject } = payload;
    const hasType = isSomething(typeObject.type);
    const hasDefault = isSomething(typeObject.default);
    const fullObject = hasType && hasDefault;
    const onlyType = hasType && !hasDefault;
    const onlyDefault = !hasType && hasDefault;
    const typeFromObject = parseValueTypeConstant(typeObject.type);
    const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default);
    if (onlyType)
      return typeFromObject;
    if (onlyDefault)
      return typeFromDefaultValue;
    if (typeFromObject !== typeFromDefaultValue) {
      const propertyPath = controller ? `${controller}.${token}` : token;
      throw new Error(`The specified default value for the Stimulus Value "${propertyPath}" must match the defined type "${typeFromObject}". The provided default value of "${typeObject.default}" is of type "${typeFromDefaultValue}".`);
    }
    if (fullObject)
      return typeFromObject;
  }
  function parseValueTypeDefinition(payload) {
    const { controller, token, typeDefinition } = payload;
    const typeObject = { controller, token, typeObject: typeDefinition };
    const typeFromObject = parseValueTypeObject(typeObject);
    const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);
    const typeFromConstant = parseValueTypeConstant(typeDefinition);
    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;
    if (type)
      return type;
    const propertyPath = controller ? `${controller}.${typeDefinition}` : token;
    throw new Error(`Unknown value type "${propertyPath}" for "${token}" value`);
  }
  function defaultValueForDefinition(typeDefinition) {
    const constant = parseValueTypeConstant(typeDefinition);
    if (constant)
      return defaultValuesByType[constant];
    const hasDefault = hasProperty(typeDefinition, "default");
    const hasType = hasProperty(typeDefinition, "type");
    const typeObject = typeDefinition;
    if (hasDefault)
      return typeObject.default;
    if (hasType) {
      const { type } = typeObject;
      const constantFromType = parseValueTypeConstant(type);
      if (constantFromType)
        return defaultValuesByType[constantFromType];
    }
    return typeDefinition;
  }
  function valueDescriptorForTokenAndTypeDefinition(payload) {
    const { token, typeDefinition } = payload;
    const key = `${dasherize(token)}-value`;
    const type = parseValueTypeDefinition(payload);
    return {
      type,
      key,
      name: camelize(key),
      get defaultValue() {
        return defaultValueForDefinition(typeDefinition);
      },
      get hasCustomDefaultValue() {
        return parseValueTypeDefault(typeDefinition) !== void 0;
      },
      reader: readers[type],
      writer: writers[type] || writers.default
    };
  }
  var defaultValuesByType = {
    get array() {
      return [];
    },
    boolean: false,
    number: 0,
    get object() {
      return {};
    },
    string: ""
  };
  var readers = {
    array(value) {
      const array = JSON.parse(value);
      if (!Array.isArray(array)) {
        throw new TypeError(`expected value of type "array" but instead got value "${value}" of type "${parseValueTypeDefault(array)}"`);
      }
      return array;
    },
    boolean(value) {
      return !(value == "0" || String(value).toLowerCase() == "false");
    },
    number(value) {
      return Number(value.replace(/_/g, ""));
    },
    object(value) {
      const object = JSON.parse(value);
      if (object === null || typeof object != "object" || Array.isArray(object)) {
        throw new TypeError(`expected value of type "object" but instead got value "${value}" of type "${parseValueTypeDefault(object)}"`);
      }
      return object;
    },
    string(value) {
      return value;
    }
  };
  var writers = {
    default: writeString,
    array: writeJSON,
    object: writeJSON
  };
  function writeJSON(value) {
    return JSON.stringify(value);
  }
  function writeString(value) {
    return `${value}`;
  }
  var Controller = class {
    constructor(context) {
      this.context = context;
    }
    static get shouldLoad() {
      return true;
    }
    static afterLoad(_identifier, _application) {
      return;
    }
    get application() {
      return this.context.application;
    }
    get scope() {
      return this.context.scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get targets() {
      return this.scope.targets;
    }
    get outlets() {
      return this.scope.outlets;
    }
    get classes() {
      return this.scope.classes;
    }
    get data() {
      return this.scope.data;
    }
    initialize() {
    }
    connect() {
    }
    disconnect() {
    }
    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true } = {}) {
      const type = prefix ? `${prefix}:${eventName}` : eventName;
      const event = new CustomEvent(type, { detail, bubbles, cancelable });
      target.dispatchEvent(event);
      return event;
    }
  };
  Controller.blessings = [
    ClassPropertiesBlessing,
    TargetPropertiesBlessing,
    ValuePropertiesBlessing,
    OutletPropertiesBlessing
  ];
  Controller.targets = [];
  Controller.outlets = [];
  Controller.values = {};

  // node_modules/stimulus-rails-nested-form/dist/stimulus-rails-nested-form.mjs
  var r = class extends Controller {
    add(t2) {
      t2.preventDefault();
      const e2 = this.templateTarget.innerHTML.replace(/NEW_RECORD/g, (/* @__PURE__ */ new Date()).getTime().toString());
      this.targetTarget.insertAdjacentHTML("beforebegin", e2);
    }
    remove(t2) {
      t2.preventDefault();
      const e2 = t2.target.closest(this.wrapperSelectorValue);
      if (e2.dataset.newRecord === "true")
        e2.remove();
      else {
        e2.style.display = "none";
        const a2 = e2.querySelector("input[name*='_destroy']");
        a2.value = "1";
      }
    }
  };
  r.targets = ["target", "template"];
  r.values = {
    wrapperSelector: {
      type: String,
      default: ".nested-form-wrapper"
    }
  };

  // app/javascript/controllers/application.js
  var application = Application.start();
  application.register("nested-form", r);
  application.debug = false;
  window.Stimulus = application;

  // app/javascript/controllers/broadcast_churps_controller.js
  var broadcast_churps_controller_default = class extends Controller {
    static targets = ["container", "notification", "notificationParent"];
    static classes = ["change"];
    connect() {
      this.newChurps = [];
      window.addEventListener("newChurp", (e2) => {
        this.newChurps.push(e2.detail);
        this.showNotification();
      });
    }
    disconnect() {
      window.removeEventListener("newChurp", this.showNotification);
    }
    showNotification() {
      this.toggle();
      this.notificationTarget.innerText = `Load ${this.newChurps.length} new Churps`;
    }
    loadNewChurps() {
      this.newChurps.forEach((churp) => {
        const parser = new DOMParser();
        const html = parser.parseFromString(churp, "text/html");
        const churpNode = html.body.firstChild;
        console.log({ "churpNode": churpNode });
        this.containerTarget.prepend(churpNode);
      });
      this.newChurps = [];
      this.toggle();
    }
    toggle() {
      this.notificationParentTargets.forEach((el) => {
        el.hidden = !el.hidden;
      });
    }
  };

  // node_modules/emoji-mart/dist/module.js
  function $parcel$interopDefault(a2) {
    return a2 && a2.__esModule ? a2.default : a2;
  }
  function $c770c458706daa72$export$2e2bcd8739ae039(obj, key, value) {
    if (key in obj)
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    else
      obj[key] = value;
    return obj;
  }
  var $fb96b826c0c5f37a$var$n;
  var $fb96b826c0c5f37a$export$41c562ebe57d11e2;
  var $fb96b826c0c5f37a$var$u;
  var $fb96b826c0c5f37a$export$a8257692ac88316c;
  var $fb96b826c0c5f37a$var$t;
  var $fb96b826c0c5f37a$var$r;
  var $fb96b826c0c5f37a$var$o;
  var $fb96b826c0c5f37a$var$f;
  var $fb96b826c0c5f37a$var$e = {};
  var $fb96b826c0c5f37a$var$c = [];
  var $fb96b826c0c5f37a$var$s = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
  function $fb96b826c0c5f37a$var$a(n1, l1) {
    for (var u1 in l1)
      n1[u1] = l1[u1];
    return n1;
  }
  function $fb96b826c0c5f37a$var$h(n2) {
    var l2 = n2.parentNode;
    l2 && l2.removeChild(n2);
  }
  function $fb96b826c0c5f37a$export$c8a8987d4410bf2d(l3, u2, i1) {
    var t1, r1, o1, f1 = {};
    for (o1 in u2)
      "key" == o1 ? t1 = u2[o1] : "ref" == o1 ? r1 = u2[o1] : f1[o1] = u2[o1];
    if (arguments.length > 2 && (f1.children = arguments.length > 3 ? $fb96b826c0c5f37a$var$n.call(arguments, 2) : i1), "function" == typeof l3 && null != l3.defaultProps)
      for (o1 in l3.defaultProps)
        void 0 === f1[o1] && (f1[o1] = l3.defaultProps[o1]);
    return $fb96b826c0c5f37a$var$y(l3, f1, t1, r1, null);
  }
  function $fb96b826c0c5f37a$var$y(n3, i2, t2, r22, o2) {
    var f2 = {
      type: n3,
      props: i2,
      key: t2,
      ref: r22,
      __k: null,
      __: null,
      __b: 0,
      __e: null,
      __d: void 0,
      __c: null,
      __h: null,
      constructor: void 0,
      __v: null == o2 ? ++$fb96b826c0c5f37a$var$u : o2
    };
    return null == o2 && null != $fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode && $fb96b826c0c5f37a$export$41c562ebe57d11e2.vnode(f2), f2;
  }
  function $fb96b826c0c5f37a$export$7d1e3a5e95ceca43() {
    return {
      current: null
    };
  }
  function $fb96b826c0c5f37a$export$ffb0004e005737fa(n4) {
    return n4.children;
  }
  function $fb96b826c0c5f37a$export$16fa2f45be04daa8(n5, l4) {
    this.props = n5, this.context = l4;
  }
  function $fb96b826c0c5f37a$var$k(n6, l5) {
    if (null == l5)
      return n6.__ ? $fb96b826c0c5f37a$var$k(n6.__, n6.__.__k.indexOf(n6) + 1) : null;
    for (var u3; l5 < n6.__k.length; l5++)
      if (null != (u3 = n6.__k[l5]) && null != u3.__e)
        return u3.__e;
    return "function" == typeof n6.type ? $fb96b826c0c5f37a$var$k(n6) : null;
  }
  function $fb96b826c0c5f37a$var$b(n7) {
    var l6, u4;
    if (null != (n7 = n7.__) && null != n7.__c) {
      for (n7.__e = n7.__c.base = null, l6 = 0; l6 < n7.__k.length; l6++)
        if (null != (u4 = n7.__k[l6]) && null != u4.__e) {
          n7.__e = n7.__c.base = u4.__e;
          break;
        }
      return $fb96b826c0c5f37a$var$b(n7);
    }
  }
  function $fb96b826c0c5f37a$var$m(n8) {
    (!n8.__d && (n8.__d = true) && $fb96b826c0c5f37a$var$t.push(n8) && !$fb96b826c0c5f37a$var$g.__r++ || $fb96b826c0c5f37a$var$o !== $fb96b826c0c5f37a$export$41c562ebe57d11e2.debounceRendering) && (($fb96b826c0c5f37a$var$o = $fb96b826c0c5f37a$export$41c562ebe57d11e2.debounceRendering) || $fb96b826c0c5f37a$var$r)($fb96b826c0c5f37a$var$g);
  }
  function $fb96b826c0c5f37a$var$g() {
    for (var n9; $fb96b826c0c5f37a$var$g.__r = $fb96b826c0c5f37a$var$t.length; )
      n9 = $fb96b826c0c5f37a$var$t.sort(function(n10, l7) {
        return n10.__v.__b - l7.__v.__b;
      }), $fb96b826c0c5f37a$var$t = [], n9.some(function(n11) {
        var l8, u5, i3, t3, r3, o3;
        n11.__d && (r3 = (t3 = (l8 = n11).__v).__e, (o3 = l8.__P) && (u5 = [], (i3 = $fb96b826c0c5f37a$var$a({}, t3)).__v = t3.__v + 1, $fb96b826c0c5f37a$var$j(o3, t3, i3, l8.__n, void 0 !== o3.ownerSVGElement, null != t3.__h ? [
          r3
        ] : null, u5, null == r3 ? $fb96b826c0c5f37a$var$k(t3) : r3, t3.__h), $fb96b826c0c5f37a$var$z(u5, t3), t3.__e != r3 && $fb96b826c0c5f37a$var$b(t3)));
      });
  }
  function $fb96b826c0c5f37a$var$w(n12, l9, u6, i4, t4, r4, o4, f3, s1, a1) {
    var h1, v1, p1, _1, b1, m1, g1, w1 = i4 && i4.__k || $fb96b826c0c5f37a$var$c, A1 = w1.length;
    for (u6.__k = [], h1 = 0; h1 < l9.length; h1++)
      if (null != (_1 = u6.__k[h1] = null == (_1 = l9[h1]) || "boolean" == typeof _1 ? null : "string" == typeof _1 || "number" == typeof _1 || "bigint" == typeof _1 ? $fb96b826c0c5f37a$var$y(null, _1, null, null, _1) : Array.isArray(_1) ? $fb96b826c0c5f37a$var$y($fb96b826c0c5f37a$export$ffb0004e005737fa, {
        children: _1
      }, null, null, null) : _1.__b > 0 ? $fb96b826c0c5f37a$var$y(_1.type, _1.props, _1.key, null, _1.__v) : _1)) {
        if (_1.__ = u6, _1.__b = u6.__b + 1, null === (p1 = w1[h1]) || p1 && _1.key == p1.key && _1.type === p1.type)
          w1[h1] = void 0;
        else
          for (v1 = 0; v1 < A1; v1++) {
            if ((p1 = w1[v1]) && _1.key == p1.key && _1.type === p1.type) {
              w1[v1] = void 0;
              break;
            }
            p1 = null;
          }
        $fb96b826c0c5f37a$var$j(n12, _1, p1 = p1 || $fb96b826c0c5f37a$var$e, t4, r4, o4, f3, s1, a1), b1 = _1.__e, (v1 = _1.ref) && p1.ref != v1 && (g1 || (g1 = []), p1.ref && g1.push(p1.ref, null, _1), g1.push(v1, _1.__c || b1, _1)), null != b1 ? (null == m1 && (m1 = b1), "function" == typeof _1.type && _1.__k === p1.__k ? _1.__d = s1 = $fb96b826c0c5f37a$var$x(_1, s1, n12) : s1 = $fb96b826c0c5f37a$var$P(n12, _1, p1, w1, b1, s1), "function" == typeof u6.type && (u6.__d = s1)) : s1 && p1.__e == s1 && s1.parentNode != n12 && (s1 = $fb96b826c0c5f37a$var$k(p1));
      }
    for (u6.__e = m1, h1 = A1; h1--; )
      null != w1[h1] && ("function" == typeof u6.type && null != w1[h1].__e && w1[h1].__e == u6.__d && (u6.__d = $fb96b826c0c5f37a$var$k(i4, h1 + 1)), $fb96b826c0c5f37a$var$N(w1[h1], w1[h1]));
    if (g1)
      for (h1 = 0; h1 < g1.length; h1++)
        $fb96b826c0c5f37a$var$M(g1[h1], g1[++h1], g1[++h1]);
  }
  function $fb96b826c0c5f37a$var$x(n13, l10, u7) {
    for (var i5, t5 = n13.__k, r5 = 0; t5 && r5 < t5.length; r5++)
      (i5 = t5[r5]) && (i5.__ = n13, l10 = "function" == typeof i5.type ? $fb96b826c0c5f37a$var$x(i5, l10, u7) : $fb96b826c0c5f37a$var$P(u7, i5, i5, t5, i5.__e, l10));
    return l10;
  }
  function $fb96b826c0c5f37a$export$47e4c5b300681277(n14, l11) {
    return l11 = l11 || [], null == n14 || "boolean" == typeof n14 || (Array.isArray(n14) ? n14.some(function(n15) {
      $fb96b826c0c5f37a$export$47e4c5b300681277(n15, l11);
    }) : l11.push(n14)), l11;
  }
  function $fb96b826c0c5f37a$var$P(n16, l12, u8, i6, t6, r6) {
    var o5, f4, e1;
    if (void 0 !== l12.__d)
      o5 = l12.__d, l12.__d = void 0;
    else if (null == u8 || t6 != r6 || null == t6.parentNode)
      n:
        if (null == r6 || r6.parentNode !== n16)
          n16.appendChild(t6), o5 = null;
        else {
          for (f4 = r6, e1 = 0; (f4 = f4.nextSibling) && e1 < i6.length; e1 += 2)
            if (f4 == t6)
              break n;
          n16.insertBefore(t6, r6), o5 = r6;
        }
    return void 0 !== o5 ? o5 : t6.nextSibling;
  }
  function $fb96b826c0c5f37a$var$C(n17, l13, u9, i7, t7) {
    var r7;
    for (r7 in u9)
      "children" === r7 || "key" === r7 || r7 in l13 || $fb96b826c0c5f37a$var$H(n17, r7, null, u9[r7], i7);
    for (r7 in l13)
      t7 && "function" != typeof l13[r7] || "children" === r7 || "key" === r7 || "value" === r7 || "checked" === r7 || u9[r7] === l13[r7] || $fb96b826c0c5f37a$var$H(n17, r7, l13[r7], u9[r7], i7);
  }
  function $fb96b826c0c5f37a$var$$(n18, l14, u10) {
    "-" === l14[0] ? n18.setProperty(l14, u10) : n18[l14] = null == u10 ? "" : "number" != typeof u10 || $fb96b826c0c5f37a$var$s.test(l14) ? u10 : u10 + "px";
  }
  function $fb96b826c0c5f37a$var$H(n19, l15, u11, i8, t8) {
    var r8;
    n:
      if ("style" === l15) {
        if ("string" == typeof u11)
          n19.style.cssText = u11;
        else {
          if ("string" == typeof i8 && (n19.style.cssText = i8 = ""), i8)
            for (l15 in i8)
              u11 && l15 in u11 || $fb96b826c0c5f37a$var$$(n19.style, l15, "");
          if (u11)
            for (l15 in u11)
              i8 && u11[l15] === i8[l15] || $fb96b826c0c5f37a$var$$(n19.style, l15, u11[l15]);
        }
      } else if ("o" === l15[0] && "n" === l15[1])
        r8 = l15 !== (l15 = l15.replace(/Capture$/, "")), l15 = l15.toLowerCase() in n19 ? l15.toLowerCase().slice(2) : l15.slice(2), n19.l || (n19.l = {}), n19.l[l15 + r8] = u11, u11 ? i8 || n19.addEventListener(l15, r8 ? $fb96b826c0c5f37a$var$T : $fb96b826c0c5f37a$var$I, r8) : n19.removeEventListener(l15, r8 ? $fb96b826c0c5f37a$var$T : $fb96b826c0c5f37a$var$I, r8);
      else if ("dangerouslySetInnerHTML" !== l15) {
        if (t8)
          l15 = l15.replace(/xlink[H:h]/, "h").replace(/sName$/, "s");
        else if ("href" !== l15 && "list" !== l15 && "form" !== l15 && "tabIndex" !== l15 && "download" !== l15 && l15 in n19)
          try {
            n19[l15] = null == u11 ? "" : u11;
            break n;
          } catch (n2) {
          }
        "function" == typeof u11 || (null != u11 && (false !== u11 || "a" === l15[0] && "r" === l15[1]) ? n19.setAttribute(l15, u11) : n19.removeAttribute(l15));
      }
  }
  function $fb96b826c0c5f37a$var$I(n20) {
    this.l[n20.type + false]($fb96b826c0c5f37a$export$41c562ebe57d11e2.event ? $fb96b826c0c5f37a$export$41c562ebe57d11e2.event(n20) : n20);
  }
  function $fb96b826c0c5f37a$var$T(n21) {
    this.l[n21.type + true]($fb96b826c0c5f37a$export$41c562ebe57d11e2.event ? $fb96b826c0c5f37a$export$41c562ebe57d11e2.event(n21) : n21);
  }
  function $fb96b826c0c5f37a$var$j(n22, u12, i9, t9, r9, o6, f5, e2, c1) {
    var s2, h2, v2, y1, p2, k1, b2, m2, g2, x1, A2, P1 = u12.type;
    if (void 0 !== u12.constructor)
      return null;
    null != i9.__h && (c1 = i9.__h, e2 = u12.__e = i9.__e, u12.__h = null, o6 = [
      e2
    ]), (s2 = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__b) && s2(u12);
    try {
      n:
        if ("function" == typeof P1) {
          if (m2 = u12.props, g2 = (s2 = P1.contextType) && t9[s2.__c], x1 = s2 ? g2 ? g2.props.value : s2.__ : t9, i9.__c ? b2 = (h2 = u12.__c = i9.__c).__ = h2.__E : ("prototype" in P1 && P1.prototype.render ? u12.__c = h2 = new P1(m2, x1) : (u12.__c = h2 = new $fb96b826c0c5f37a$export$16fa2f45be04daa8(m2, x1), h2.constructor = P1, h2.render = $fb96b826c0c5f37a$var$O), g2 && g2.sub(h2), h2.props = m2, h2.state || (h2.state = {}), h2.context = x1, h2.__n = t9, v2 = h2.__d = true, h2.__h = []), null == h2.__s && (h2.__s = h2.state), null != P1.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = $fb96b826c0c5f37a$var$a({}, h2.__s)), $fb96b826c0c5f37a$var$a(h2.__s, P1.getDerivedStateFromProps(m2, h2.__s))), y1 = h2.props, p2 = h2.state, v2)
            null == P1.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
          else {
            if (null == P1.getDerivedStateFromProps && m2 !== y1 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(m2, x1), !h2.__e && null != h2.shouldComponentUpdate && false === h2.shouldComponentUpdate(m2, h2.__s, x1) || u12.__v === i9.__v) {
              h2.props = m2, h2.state = h2.__s, u12.__v !== i9.__v && (h2.__d = false), h2.__v = u12, u12.__e = i9.__e, u12.__k = i9.__k, u12.__k.forEach(function(n23) {
                n23 && (n23.__ = u12);
              }), h2.__h.length && f5.push(h2);
              break n;
            }
            null != h2.componentWillUpdate && h2.componentWillUpdate(m2, h2.__s, x1), null != h2.componentDidUpdate && h2.__h.push(function() {
              h2.componentDidUpdate(y1, p2, k1);
            });
          }
          h2.context = x1, h2.props = m2, h2.state = h2.__s, (s2 = $fb96b826c0c5f37a$export$41c562ebe57d11e2.__r) && s2(u12), h2.__d = false, h2.__v = u12, h2.__P = n22, s2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s, null != h2.getChildContext && (t9 = $fb96b826c0c5f37a$var$a($fb96b826c0c5f37a$var$a({}, t9), h2.getChildContext())), v2 || null == h2.getSnapshotBeforeUpdate || (k1 = h2.getSnapshotBeforeUpdate(y1, p2)), A2 = null != s2 && s2.type === $fb96b826c0c5f37a$export$ffb0004e005737fa && null == s2.key ? s2.props.children : s2, $fb96b826c0c5f37a$var$w(n22, Array.isArray(A2) ? A2 : [
            A2
          ], u12, i9, t9, r9, o6, f5, e2, c1), h2.base = u12.__e, u12.__h = null, h2.__h.length && f5.push(h2), b2 && (h2.__E = h2.__ = null), h2.__e = false;
        } else
          null == o6 && u12.__v === i9.__v ? (u12.__k = i9.__k, u12.__e = i9.__e) : u12.__e = $fb96b826c0c5f37a$var$L(i9.__e, u12, i9, t9, r9, o6, f5, c1);
      (s2 = $fb96b826c0c5f37a$export$41c562ebe57d11e2.diffed) && s2(u12);
    } catch (n24) {
      u12.__v = null, (c1 || null != o6) && (u12.__e = e2, u12.__h = !!c1, o6[o6.indexOf(e2)] = null), $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n24, u12, i9);
    }
  }
  function $fb96b826c0c5f37a$var$z(n25, u13) {
    $fb96b826c0c5f37a$export$41c562ebe57d11e2.__c && $fb96b826c0c5f37a$export$41c562ebe57d11e2.__c(u13, n25), n25.some(function(u14) {
      try {
        n25 = u14.__h, u14.__h = [], n25.some(function(n26) {
          n26.call(u14);
        });
      } catch (n27) {
        $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n27, u14.__v);
      }
    });
  }
  function $fb96b826c0c5f37a$var$L(l16, u15, i10, t10, r10, o7, f6, c2) {
    var s3, a2, v3, y2 = i10.props, p3 = u15.props, d1 = u15.type, _2 = 0;
    if ("svg" === d1 && (r10 = true), null != o7) {
      for (; _2 < o7.length; _2++)
        if ((s3 = o7[_2]) && "setAttribute" in s3 == !!d1 && (d1 ? s3.localName === d1 : 3 === s3.nodeType)) {
          l16 = s3, o7[_2] = null;
          break;
        }
    }
    if (null == l16) {
      if (null === d1)
        return document.createTextNode(p3);
      l16 = r10 ? document.createElementNS("http://www.w3.org/2000/svg", d1) : document.createElement(d1, p3.is && p3), o7 = null, c2 = false;
    }
    if (null === d1)
      y2 === p3 || c2 && l16.data === p3 || (l16.data = p3);
    else {
      if (o7 = o7 && $fb96b826c0c5f37a$var$n.call(l16.childNodes), a2 = (y2 = i10.props || $fb96b826c0c5f37a$var$e).dangerouslySetInnerHTML, v3 = p3.dangerouslySetInnerHTML, !c2) {
        if (null != o7)
          for (y2 = {}, _2 = 0; _2 < l16.attributes.length; _2++)
            y2[l16.attributes[_2].name] = l16.attributes[_2].value;
        (v3 || a2) && (v3 && (a2 && v3.__html == a2.__html || v3.__html === l16.innerHTML) || (l16.innerHTML = v3 && v3.__html || ""));
      }
      if ($fb96b826c0c5f37a$var$C(l16, p3, y2, r10, c2), v3)
        u15.__k = [];
      else if (_2 = u15.props.children, $fb96b826c0c5f37a$var$w(l16, Array.isArray(_2) ? _2 : [
        _2
      ], u15, i10, t10, r10 && "foreignObject" !== d1, o7, f6, o7 ? o7[0] : i10.__k && $fb96b826c0c5f37a$var$k(i10, 0), c2), null != o7)
        for (_2 = o7.length; _2--; )
          null != o7[_2] && $fb96b826c0c5f37a$var$h(o7[_2]);
      c2 || ("value" in p3 && void 0 !== (_2 = p3.value) && (_2 !== y2.value || _2 !== l16.value || "progress" === d1 && !_2) && $fb96b826c0c5f37a$var$H(l16, "value", _2, y2.value, false), "checked" in p3 && void 0 !== (_2 = p3.checked) && _2 !== l16.checked && $fb96b826c0c5f37a$var$H(l16, "checked", _2, y2.checked, false));
    }
    return l16;
  }
  function $fb96b826c0c5f37a$var$M(n28, u16, i11) {
    try {
      "function" == typeof n28 ? n28(u16) : n28.current = u16;
    } catch (n29) {
      $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n29, i11);
    }
  }
  function $fb96b826c0c5f37a$var$N(n30, u17, i12) {
    var t11, r11;
    if ($fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount && $fb96b826c0c5f37a$export$41c562ebe57d11e2.unmount(n30), (t11 = n30.ref) && (t11.current && t11.current !== n30.__e || $fb96b826c0c5f37a$var$M(t11, null, u17)), null != (t11 = n30.__c)) {
      if (t11.componentWillUnmount)
        try {
          t11.componentWillUnmount();
        } catch (n31) {
          $fb96b826c0c5f37a$export$41c562ebe57d11e2.__e(n31, u17);
        }
      t11.base = t11.__P = null;
    }
    if (t11 = n30.__k)
      for (r11 = 0; r11 < t11.length; r11++)
        t11[r11] && $fb96b826c0c5f37a$var$N(t11[r11], u17, "function" != typeof n30.type);
    i12 || null == n30.__e || $fb96b826c0c5f37a$var$h(n30.__e), n30.__e = n30.__d = void 0;
  }
  function $fb96b826c0c5f37a$var$O(n32, l2, u18) {
    return this.constructor(n32, u18);
  }
  function $fb96b826c0c5f37a$export$b3890eb0ae9dca99(u19, i13, t12) {
    var r12, o8, f7;
    $fb96b826c0c5f37a$export$41c562ebe57d11e2.__ && $fb96b826c0c5f37a$export$41c562ebe57d11e2.__(u19, i13), o8 = (r12 = "function" == typeof t12) ? null : t12 && t12.__k || i13.__k, f7 = [], $fb96b826c0c5f37a$var$j(i13, u19 = (!r12 && t12 || i13).__k = $fb96b826c0c5f37a$export$c8a8987d4410bf2d($fb96b826c0c5f37a$export$ffb0004e005737fa, null, [
      u19
    ]), o8 || $fb96b826c0c5f37a$var$e, $fb96b826c0c5f37a$var$e, void 0 !== i13.ownerSVGElement, !r12 && t12 ? [
      t12
    ] : o8 ? null : i13.firstChild ? $fb96b826c0c5f37a$var$n.call(i13.childNodes) : null, f7, !r12 && t12 ? t12 : o8 ? o8.__e : i13.firstChild, r12), $fb96b826c0c5f37a$var$z(f7, u19);
  }
  $fb96b826c0c5f37a$var$n = $fb96b826c0c5f37a$var$c.slice, $fb96b826c0c5f37a$export$41c562ebe57d11e2 = {
    __e: function(n39, l22) {
      for (var u23, i16, t14; l22 = l22.__; )
        if ((u23 = l22.__c) && !u23.__)
          try {
            if ((i16 = u23.constructor) && null != i16.getDerivedStateFromError && (u23.setState(i16.getDerivedStateFromError(n39)), t14 = u23.__d), null != u23.componentDidCatch && (u23.componentDidCatch(n39), t14 = u23.__d), t14)
              return u23.__E = u23;
          } catch (l23) {
            n39 = l23;
          }
      throw n39;
    }
  }, $fb96b826c0c5f37a$var$u = 0, $fb96b826c0c5f37a$export$a8257692ac88316c = function(n40) {
    return null != n40 && void 0 === n40.constructor;
  }, $fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.setState = function(n41, l24) {
    var u24;
    u24 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = $fb96b826c0c5f37a$var$a({}, this.state), "function" == typeof n41 && (n41 = n41($fb96b826c0c5f37a$var$a({}, u24), this.props)), n41 && $fb96b826c0c5f37a$var$a(u24, n41), null != n41 && this.__v && (l24 && this.__h.push(l24), $fb96b826c0c5f37a$var$m(this));
  }, $fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.forceUpdate = function(n42) {
    this.__v && (this.__e = true, n42 && this.__h.push(n42), $fb96b826c0c5f37a$var$m(this));
  }, $fb96b826c0c5f37a$export$16fa2f45be04daa8.prototype.render = $fb96b826c0c5f37a$export$ffb0004e005737fa, $fb96b826c0c5f37a$var$t = [], $fb96b826c0c5f37a$var$r = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, $fb96b826c0c5f37a$var$g.__r = 0, $fb96b826c0c5f37a$var$f = 0;
  var $bd9dd35321b03dd4$var$o = 0;
  function $bd9dd35321b03dd4$export$34b9dba7ce09269b(_1, e1, n2, t2, f2) {
    var l2, s2, u2 = {};
    for (s2 in e1)
      "ref" == s2 ? l2 = e1[s2] : u2[s2] = e1[s2];
    var a2 = {
      type: _1,
      props: u2,
      key: n2,
      ref: l2,
      __k: null,
      __: null,
      __b: 0,
      __e: null,
      __d: void 0,
      __c: null,
      __h: null,
      constructor: void 0,
      __v: --$bd9dd35321b03dd4$var$o,
      __source: t2,
      __self: f2
    };
    if ("function" == typeof _1 && (l2 = _1.defaultProps))
      for (s2 in l2)
        void 0 === u2[s2] && (u2[s2] = l2[s2]);
    return (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).vnode && (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).vnode(a2), a2;
  }
  function $f72b75cf796873c7$var$set(key, value) {
    try {
      window.localStorage[`emoji-mart.${key}`] = JSON.stringify(value);
    } catch (error2) {
    }
  }
  function $f72b75cf796873c7$var$get(key) {
    try {
      const value = window.localStorage[`emoji-mart.${key}`];
      if (value)
        return JSON.parse(value);
    } catch (error2) {
    }
  }
  var $f72b75cf796873c7$export$2e2bcd8739ae039 = {
    set: $f72b75cf796873c7$var$set,
    get: $f72b75cf796873c7$var$get
  };
  var $c84d045dcc34faf5$var$CACHE = /* @__PURE__ */ new Map();
  var $c84d045dcc34faf5$var$VERSIONS = [
    {
      v: 14,
      emoji: "\u{1FAE0}"
    },
    {
      v: 13.1,
      emoji: "\u{1F636}\u200D\u{1F32B}\uFE0F"
    },
    {
      v: 13,
      emoji: "\u{1F978}"
    },
    {
      v: 12.1,
      emoji: "\u{1F9D1}\u200D\u{1F9B0}"
    },
    {
      v: 12,
      emoji: "\u{1F971}"
    },
    {
      v: 11,
      emoji: "\u{1F970}"
    },
    {
      v: 5,
      emoji: "\u{1F929}"
    },
    {
      v: 4,
      emoji: "\u{1F471}\u200D\u2640\uFE0F"
    },
    {
      v: 3,
      emoji: "\u{1F923}"
    },
    {
      v: 2,
      emoji: "\u{1F44B}\u{1F3FB}"
    },
    {
      v: 1,
      emoji: "\u{1F643}"
    }
  ];
  function $c84d045dcc34faf5$var$latestVersion() {
    for (const { v: v2, emoji } of $c84d045dcc34faf5$var$VERSIONS) {
      if ($c84d045dcc34faf5$var$isSupported(emoji))
        return v2;
    }
  }
  function $c84d045dcc34faf5$var$noCountryFlags() {
    if ($c84d045dcc34faf5$var$isSupported("\u{1F1E8}\u{1F1E6}"))
      return false;
    return true;
  }
  function $c84d045dcc34faf5$var$isSupported(emoji) {
    if ($c84d045dcc34faf5$var$CACHE.has(emoji))
      return $c84d045dcc34faf5$var$CACHE.get(emoji);
    const supported = $c84d045dcc34faf5$var$isEmojiSupported(emoji);
    $c84d045dcc34faf5$var$CACHE.set(emoji, supported);
    return supported;
  }
  var $c84d045dcc34faf5$var$isEmojiSupported = (() => {
    let ctx = null;
    try {
      if (!navigator.userAgent.includes("jsdom"))
        ctx = document.createElement("canvas").getContext("2d", {
          willReadFrequently: true
        });
    } catch {
    }
    if (!ctx)
      return () => false;
    const CANVAS_HEIGHT = 25;
    const CANVAS_WIDTH = 20;
    const textSize = Math.floor(CANVAS_HEIGHT / 2);
    ctx.font = textSize + "px Arial, Sans-Serif";
    ctx.textBaseline = "top";
    ctx.canvas.width = CANVAS_WIDTH * 2;
    ctx.canvas.height = CANVAS_HEIGHT;
    return (unicode) => {
      ctx.clearRect(0, 0, CANVAS_WIDTH * 2, CANVAS_HEIGHT);
      ctx.fillStyle = "#FF0000";
      ctx.fillText(unicode, 0, 22);
      ctx.fillStyle = "#0000FF";
      ctx.fillText(unicode, CANVAS_WIDTH, 22);
      const a2 = ctx.getImageData(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT).data;
      const count = a2.length;
      let i2 = 0;
      for (; i2 < count && !a2[i2 + 3]; i2 += 4)
        ;
      if (i2 >= count)
        return false;
      const x2 = CANVAS_WIDTH + i2 / 4 % CANVAS_WIDTH;
      const y2 = Math.floor(i2 / 4 / CANVAS_WIDTH);
      const b2 = ctx.getImageData(x2, y2, 1, 1).data;
      if (a2[i2] !== b2[0] || a2[i2 + 2] !== b2[2])
        return false;
      if (ctx.measureText(unicode).width >= CANVAS_WIDTH)
        return false;
      return true;
    };
  })();
  var $c84d045dcc34faf5$export$2e2bcd8739ae039 = {
    latestVersion: $c84d045dcc34faf5$var$latestVersion,
    noCountryFlags: $c84d045dcc34faf5$var$noCountryFlags
  };
  var $b22cfd0a55410b4f$var$DEFAULTS = [
    "+1",
    "grinning",
    "kissing_heart",
    "heart_eyes",
    "laughing",
    "stuck_out_tongue_winking_eye",
    "sweat_smile",
    "joy",
    "scream",
    "disappointed",
    "unamused",
    "weary",
    "sob",
    "sunglasses",
    "heart"
  ];
  var $b22cfd0a55410b4f$var$Index = null;
  function $b22cfd0a55410b4f$var$add(emoji) {
    $b22cfd0a55410b4f$var$Index || ($b22cfd0a55410b4f$var$Index = (0, $f72b75cf796873c7$export$2e2bcd8739ae039).get("frequently") || {});
    const emojiId = emoji.id || emoji;
    if (!emojiId)
      return;
    $b22cfd0a55410b4f$var$Index[emojiId] || ($b22cfd0a55410b4f$var$Index[emojiId] = 0);
    $b22cfd0a55410b4f$var$Index[emojiId] += 1;
    (0, $f72b75cf796873c7$export$2e2bcd8739ae039).set("last", emojiId);
    (0, $f72b75cf796873c7$export$2e2bcd8739ae039).set("frequently", $b22cfd0a55410b4f$var$Index);
  }
  function $b22cfd0a55410b4f$var$get({ maxFrequentRows, perLine }) {
    if (!maxFrequentRows)
      return [];
    $b22cfd0a55410b4f$var$Index || ($b22cfd0a55410b4f$var$Index = (0, $f72b75cf796873c7$export$2e2bcd8739ae039).get("frequently"));
    let emojiIds = [];
    if (!$b22cfd0a55410b4f$var$Index) {
      $b22cfd0a55410b4f$var$Index = {};
      for (let i2 in $b22cfd0a55410b4f$var$DEFAULTS.slice(0, perLine)) {
        const emojiId = $b22cfd0a55410b4f$var$DEFAULTS[i2];
        $b22cfd0a55410b4f$var$Index[emojiId] = perLine - i2;
        emojiIds.push(emojiId);
      }
      return emojiIds;
    }
    const max = maxFrequentRows * perLine;
    const last = (0, $f72b75cf796873c7$export$2e2bcd8739ae039).get("last");
    for (let emojiId in $b22cfd0a55410b4f$var$Index)
      emojiIds.push(emojiId);
    emojiIds.sort((a2, b2) => {
      const aScore = $b22cfd0a55410b4f$var$Index[b2];
      const bScore = $b22cfd0a55410b4f$var$Index[a2];
      if (aScore == bScore)
        return a2.localeCompare(b2);
      return aScore - bScore;
    });
    if (emojiIds.length > max) {
      const removedIds = emojiIds.slice(max);
      emojiIds = emojiIds.slice(0, max);
      for (let removedId of removedIds) {
        if (removedId == last)
          continue;
        delete $b22cfd0a55410b4f$var$Index[removedId];
      }
      if (last && emojiIds.indexOf(last) == -1) {
        delete $b22cfd0a55410b4f$var$Index[emojiIds[emojiIds.length - 1]];
        emojiIds.splice(-1, 1, last);
      }
      (0, $f72b75cf796873c7$export$2e2bcd8739ae039).set("frequently", $b22cfd0a55410b4f$var$Index);
    }
    return emojiIds;
  }
  var $b22cfd0a55410b4f$export$2e2bcd8739ae039 = {
    add: $b22cfd0a55410b4f$var$add,
    get: $b22cfd0a55410b4f$var$get,
    DEFAULTS: $b22cfd0a55410b4f$var$DEFAULTS
  };
  var $8d50d93417ef682a$exports = {};
  $8d50d93417ef682a$exports = JSON.parse('{"search":"Search","search_no_results_1":"Oh no!","search_no_results_2":"That emoji couldn\u2019t be found","pick":"Pick an emoji\u2026","add_custom":"Add custom emoji","categories":{"activity":"Activity","custom":"Custom","flags":"Flags","foods":"Food & Drink","frequent":"Frequently used","nature":"Animals & Nature","objects":"Objects","people":"Smileys & People","places":"Travel & Places","search":"Search Results","symbols":"Symbols"},"skins":{"1":"Default","2":"Light","3":"Medium-Light","4":"Medium","5":"Medium-Dark","6":"Dark","choose":"Choose default skin tone"}}');
  var $b247ea80b67298d5$export$2e2bcd8739ae039 = {
    autoFocus: {
      value: false
    },
    dynamicWidth: {
      value: false
    },
    emojiButtonColors: {
      value: null
    },
    emojiButtonRadius: {
      value: "100%"
    },
    emojiButtonSize: {
      value: 36
    },
    emojiSize: {
      value: 24
    },
    emojiVersion: {
      value: 14,
      choices: [
        1,
        2,
        3,
        4,
        5,
        11,
        12,
        12.1,
        13,
        13.1,
        14
      ]
    },
    exceptEmojis: {
      value: []
    },
    icons: {
      value: "auto",
      choices: [
        "auto",
        "outline",
        "solid"
      ]
    },
    locale: {
      value: "en",
      choices: [
        "en",
        "ar",
        "be",
        "cs",
        "de",
        "es",
        "fa",
        "fi",
        "fr",
        "hi",
        "it",
        "ja",
        "kr",
        "nl",
        "pl",
        "pt",
        "ru",
        "sa",
        "tr",
        "uk",
        "vi",
        "zh"
      ]
    },
    maxFrequentRows: {
      value: 4
    },
    navPosition: {
      value: "top",
      choices: [
        "top",
        "bottom",
        "none"
      ]
    },
    noCountryFlags: {
      value: false
    },
    noResultsEmoji: {
      value: null
    },
    perLine: {
      value: 9
    },
    previewEmoji: {
      value: null
    },
    previewPosition: {
      value: "bottom",
      choices: [
        "top",
        "bottom",
        "none"
      ]
    },
    searchPosition: {
      value: "sticky",
      choices: [
        "sticky",
        "static",
        "none"
      ]
    },
    set: {
      value: "native",
      choices: [
        "native",
        "apple",
        "facebook",
        "google",
        "twitter"
      ]
    },
    skin: {
      value: 1,
      choices: [
        1,
        2,
        3,
        4,
        5,
        6
      ]
    },
    skinTonePosition: {
      value: "preview",
      choices: [
        "preview",
        "search",
        "none"
      ]
    },
    theme: {
      value: "auto",
      choices: [
        "auto",
        "light",
        "dark"
      ]
    },
    // Data
    categories: null,
    categoryIcons: null,
    custom: null,
    data: null,
    i18n: null,
    // Callbacks
    getImageURL: null,
    getSpritesheetURL: null,
    onAddCustomEmoji: null,
    onClickOutside: null,
    onEmojiSelect: null,
    // Deprecated
    stickySearch: {
      deprecated: true,
      value: true
    }
  };
  var $7adb23b0109cc36a$export$dbe3113d60765c1a = null;
  var $7adb23b0109cc36a$export$2d0294657ab35f1b = null;
  var $7adb23b0109cc36a$var$fetchCache = {};
  async function $7adb23b0109cc36a$var$fetchJSON(src) {
    if ($7adb23b0109cc36a$var$fetchCache[src])
      return $7adb23b0109cc36a$var$fetchCache[src];
    const response = await fetch(src);
    const json = await response.json();
    $7adb23b0109cc36a$var$fetchCache[src] = json;
    return json;
  }
  var $7adb23b0109cc36a$var$promise = null;
  var $7adb23b0109cc36a$var$initCallback = null;
  var $7adb23b0109cc36a$var$initialized = false;
  function $7adb23b0109cc36a$export$2cd8252107eb640b(options, { caller } = {}) {
    $7adb23b0109cc36a$var$promise || ($7adb23b0109cc36a$var$promise = new Promise((resolve) => {
      $7adb23b0109cc36a$var$initCallback = resolve;
    }));
    if (options)
      $7adb23b0109cc36a$var$_init(options);
    else if (caller && !$7adb23b0109cc36a$var$initialized)
      console.warn(`\`${caller}\` requires data to be initialized first. Promise will be pending until \`init\` is called.`);
    return $7adb23b0109cc36a$var$promise;
  }
  async function $7adb23b0109cc36a$var$_init(props) {
    $7adb23b0109cc36a$var$initialized = true;
    let { emojiVersion, set, locale } = props;
    emojiVersion || (emojiVersion = (0, $b247ea80b67298d5$export$2e2bcd8739ae039).emojiVersion.value);
    set || (set = (0, $b247ea80b67298d5$export$2e2bcd8739ae039).set.value);
    locale || (locale = (0, $b247ea80b67298d5$export$2e2bcd8739ae039).locale.value);
    if (!$7adb23b0109cc36a$export$2d0294657ab35f1b) {
      $7adb23b0109cc36a$export$2d0294657ab35f1b = (typeof props.data === "function" ? await props.data() : props.data) || await $7adb23b0109cc36a$var$fetchJSON(`https://cdn.jsdelivr.net/npm/@emoji-mart/data@latest/sets/${emojiVersion}/${set}.json`);
      $7adb23b0109cc36a$export$2d0294657ab35f1b.emoticons = {};
      $7adb23b0109cc36a$export$2d0294657ab35f1b.natives = {};
      $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.unshift({
        id: "frequent",
        emojis: []
      });
      for (const alias in $7adb23b0109cc36a$export$2d0294657ab35f1b.aliases) {
        const emojiId = $7adb23b0109cc36a$export$2d0294657ab35f1b.aliases[alias];
        const emoji = $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emojiId];
        if (!emoji)
          continue;
        emoji.aliases || (emoji.aliases = []);
        emoji.aliases.push(alias);
      }
      $7adb23b0109cc36a$export$2d0294657ab35f1b.originalCategories = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories;
    } else
      $7adb23b0109cc36a$export$2d0294657ab35f1b.categories = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.filter((c2) => {
        const isCustom = !!c2.name;
        if (!isCustom)
          return true;
        return false;
      });
    $7adb23b0109cc36a$export$dbe3113d60765c1a = (typeof props.i18n === "function" ? await props.i18n() : props.i18n) || (locale == "en" ? (0, /* @__PURE__ */ $parcel$interopDefault($8d50d93417ef682a$exports)) : await $7adb23b0109cc36a$var$fetchJSON(`https://cdn.jsdelivr.net/npm/@emoji-mart/data@latest/i18n/${locale}.json`));
    if (props.custom)
      for (let i2 in props.custom) {
        i2 = parseInt(i2);
        const category = props.custom[i2];
        const prevCategory = props.custom[i2 - 1];
        if (!category.emojis || !category.emojis.length)
          continue;
        category.id || (category.id = `custom_${i2 + 1}`);
        category.name || (category.name = $7adb23b0109cc36a$export$dbe3113d60765c1a.categories.custom);
        if (prevCategory && !category.icon)
          category.target = prevCategory.target || prevCategory;
        $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.push(category);
        for (const emoji of category.emojis)
          $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emoji.id] = emoji;
      }
    if (props.categories)
      $7adb23b0109cc36a$export$2d0294657ab35f1b.categories = $7adb23b0109cc36a$export$2d0294657ab35f1b.originalCategories.filter((c2) => {
        return props.categories.indexOf(c2.id) != -1;
      }).sort((c1, c2) => {
        const i1 = props.categories.indexOf(c1.id);
        const i2 = props.categories.indexOf(c2.id);
        return i1 - i2;
      });
    let latestVersionSupport = null;
    let noCountryFlags = null;
    if (set == "native") {
      latestVersionSupport = (0, $c84d045dcc34faf5$export$2e2bcd8739ae039).latestVersion();
      noCountryFlags = props.noCountryFlags || (0, $c84d045dcc34faf5$export$2e2bcd8739ae039).noCountryFlags();
    }
    let categoryIndex = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.length;
    let resetSearchIndex = false;
    while (categoryIndex--) {
      const category = $7adb23b0109cc36a$export$2d0294657ab35f1b.categories[categoryIndex];
      if (category.id == "frequent") {
        let { maxFrequentRows, perLine } = props;
        maxFrequentRows = maxFrequentRows >= 0 ? maxFrequentRows : (0, $b247ea80b67298d5$export$2e2bcd8739ae039).maxFrequentRows.value;
        perLine || (perLine = (0, $b247ea80b67298d5$export$2e2bcd8739ae039).perLine.value);
        category.emojis = (0, $b22cfd0a55410b4f$export$2e2bcd8739ae039).get({
          maxFrequentRows,
          perLine
        });
      }
      if (!category.emojis || !category.emojis.length) {
        $7adb23b0109cc36a$export$2d0294657ab35f1b.categories.splice(categoryIndex, 1);
        continue;
      }
      const { categoryIcons } = props;
      if (categoryIcons) {
        const icon = categoryIcons[category.id];
        if (icon && !category.icon)
          category.icon = icon;
      }
      let emojiIndex = category.emojis.length;
      while (emojiIndex--) {
        const emojiId = category.emojis[emojiIndex];
        const emoji = emojiId.id ? emojiId : $7adb23b0109cc36a$export$2d0294657ab35f1b.emojis[emojiId];
        const ignore = () => {
          category.emojis.splice(emojiIndex, 1);
        };
        if (!emoji || props.exceptEmojis && props.exceptEmojis.includes(emoji.id)) {
          ignore();
          continue;
        }
        if (latestVersionSupport && emoji.version > latestVersionSupport) {
          ignore();
          continue;
        }
        if (noCountryFlags && category.id == "flags") {
          if (!(0, $e6eae5155b87f591$export$bcb25aa587e9cb13).includes(emoji.id)) {
            ignore();
            continue;
          }
        }
        if (!emoji.search) {
          resetSearchIndex = true;
          emoji.search = "," + [
            [
              emoji.id,
              false
            ],
            [
              emoji.name,
              true
            ],
            [
              emoji.keywords,
              false
            ],
            [
              emoji.emoticons,
              false
            ]
          ].map(([strings, split]) => {
            if (!strings)
              return;
            return (Array.isArray(strings) ? strings : [
              strings
            ]).map((string) => {
              return (split ? string.split(/[-|_|\s]+/) : [
                string
              ]).map((s2) => s2.toLowerCase());
            }).flat();
          }).flat().filter((a2) => a2 && a2.trim()).join(",");
          if (emoji.emoticons)
            for (const emoticon of emoji.emoticons) {
              if ($7adb23b0109cc36a$export$2d0294657ab35f1b.emoticons[emoticon])
                continue;
              $7adb23b0109cc36a$export$2d0294657ab35f1b.emoticons[emoticon] = emoji.id;
            }
          let skinIndex = 0;
          for (const skin of emoji.skins) {
            if (!skin)
              continue;
            skinIndex++;
            const { native } = skin;
            if (native) {
              $7adb23b0109cc36a$export$2d0294657ab35f1b.natives[native] = emoji.id;
              emoji.search += `,${native}`;
            }
            const skinShortcodes = skinIndex == 1 ? "" : `:skin-tone-${skinIndex}:`;
            skin.shortcodes = `:${emoji.id}:${skinShortcodes}`;
          }
        }
      }
    }
    if (resetSearchIndex)
      (0, $c4d155af13ad4d4b$export$2e2bcd8739ae039).reset();
    $7adb23b0109cc36a$var$initCallback();
  }
  function $7adb23b0109cc36a$export$75fe5f91d452f94b(props, defaultProps, element) {
    props || (props = {});
    const _props = {};
    for (let k2 in defaultProps)
      _props[k2] = $7adb23b0109cc36a$export$88c9ddb45cea7241(k2, props, defaultProps, element);
    return _props;
  }
  function $7adb23b0109cc36a$export$88c9ddb45cea7241(propName, props, defaultProps, element) {
    const defaults = defaultProps[propName];
    let value = element && element.getAttribute(propName) || (props[propName] != null && props[propName] != void 0 ? props[propName] : null);
    if (!defaults)
      return value;
    if (value != null && defaults.value && typeof defaults.value != typeof value) {
      if (typeof defaults.value == "boolean")
        value = value == "false" ? false : true;
      else
        value = defaults.value.constructor(value);
    }
    if (defaults.transform && value)
      value = defaults.transform(value);
    if (value == null || defaults.choices && defaults.choices.indexOf(value) == -1)
      value = defaults.value;
    return value;
  }
  var $c4d155af13ad4d4b$var$SHORTCODES_REGEX = /^(?:\:([^\:]+)\:)(?:\:skin-tone-(\d)\:)?$/;
  var $c4d155af13ad4d4b$var$Pool = null;
  function $c4d155af13ad4d4b$var$get(emojiId) {
    if (emojiId.id)
      return emojiId;
    return (0, $7adb23b0109cc36a$export$2d0294657ab35f1b).emojis[emojiId] || (0, $7adb23b0109cc36a$export$2d0294657ab35f1b).emojis[(0, $7adb23b0109cc36a$export$2d0294657ab35f1b).aliases[emojiId]] || (0, $7adb23b0109cc36a$export$2d0294657ab35f1b).emojis[(0, $7adb23b0109cc36a$export$2d0294657ab35f1b).natives[emojiId]];
  }
  function $c4d155af13ad4d4b$var$reset() {
    $c4d155af13ad4d4b$var$Pool = null;
  }
  async function $c4d155af13ad4d4b$var$search(value, { maxResults, caller } = {}) {
    if (!value || !value.trim().length)
      return null;
    maxResults || (maxResults = 90);
    await (0, $7adb23b0109cc36a$export$2cd8252107eb640b)(null, {
      caller: caller || "SearchIndex.search"
    });
    const values = value.toLowerCase().replace(/(\w)-/, "$1 ").split(/[\s|,]+/).filter((word, i2, words) => {
      return word.trim() && words.indexOf(word) == i2;
    });
    if (!values.length)
      return;
    let pool = $c4d155af13ad4d4b$var$Pool || ($c4d155af13ad4d4b$var$Pool = Object.values((0, $7adb23b0109cc36a$export$2d0294657ab35f1b).emojis));
    let results, scores;
    for (const value1 of values) {
      if (!pool.length)
        break;
      results = [];
      scores = {};
      for (const emoji of pool) {
        if (!emoji.search)
          continue;
        const score = emoji.search.indexOf(`,${value1}`);
        if (score == -1)
          continue;
        results.push(emoji);
        scores[emoji.id] || (scores[emoji.id] = 0);
        scores[emoji.id] += emoji.id == value1 ? 0 : score + 1;
      }
      pool = results;
    }
    if (results.length < 2)
      return results;
    results.sort((a2, b2) => {
      const aScore = scores[a2.id];
      const bScore = scores[b2.id];
      if (aScore == bScore)
        return a2.id.localeCompare(b2.id);
      return aScore - bScore;
    });
    if (results.length > maxResults)
      results = results.slice(0, maxResults);
    return results;
  }
  var $c4d155af13ad4d4b$export$2e2bcd8739ae039 = {
    search: $c4d155af13ad4d4b$var$search,
    get: $c4d155af13ad4d4b$var$get,
    reset: $c4d155af13ad4d4b$var$reset,
    SHORTCODES_REGEX: $c4d155af13ad4d4b$var$SHORTCODES_REGEX
  };
  var $e6eae5155b87f591$export$bcb25aa587e9cb13 = [
    "checkered_flag",
    "crossed_flags",
    "pirate_flag",
    "rainbow-flag",
    "transgender_flag",
    "triangular_flag_on_post",
    "waving_black_flag",
    "waving_white_flag"
  ];
  function $693b183b0a78708f$export$9cb4719e2e525b7a(a2, b2) {
    return Array.isArray(a2) && Array.isArray(b2) && a2.length === b2.length && a2.every((val, index) => val == b2[index]);
  }
  async function $693b183b0a78708f$export$e772c8ff12451969(frames = 1) {
    for (let _2 in [
      ...Array(frames).keys()
    ])
      await new Promise(requestAnimationFrame);
  }
  function $693b183b0a78708f$export$d10ac59fbe52a745(emoji, { skinIndex = 0 } = {}) {
    const skin = emoji.skins[skinIndex] || (() => {
      skinIndex = 0;
      return emoji.skins[skinIndex];
    })();
    const emojiData = {
      id: emoji.id,
      name: emoji.name,
      native: skin.native,
      unified: skin.unified,
      keywords: emoji.keywords,
      shortcodes: skin.shortcodes || emoji.shortcodes
    };
    if (emoji.skins.length > 1)
      emojiData.skin = skinIndex + 1;
    if (skin.src)
      emojiData.src = skin.src;
    if (emoji.aliases && emoji.aliases.length)
      emojiData.aliases = emoji.aliases;
    if (emoji.emoticons && emoji.emoticons.length)
      emojiData.emoticons = emoji.emoticons;
    return emojiData;
  }
  var $fcccfb36ed0cde68$var$categories = {
    activity: {
      outline: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M12 0C5.373 0 0 5.372 0 12c0 6.627 5.373 12 12 12 6.628 0 12-5.373 12-12 0-6.628-5.372-12-12-12m9.949 11H17.05c.224-2.527 1.232-4.773 1.968-6.113A9.966 9.966 0 0 1 21.949 11M13 11V2.051a9.945 9.945 0 0 1 4.432 1.564c-.858 1.491-2.156 4.22-2.392 7.385H13zm-2 0H8.961c-.238-3.165-1.536-5.894-2.393-7.385A9.95 9.95 0 0 1 11 2.051V11zm0 2v8.949a9.937 9.937 0 0 1-4.432-1.564c.857-1.492 2.155-4.221 2.393-7.385H11zm4.04 0c.236 3.164 1.534 5.893 2.392 7.385A9.92 9.92 0 0 1 13 21.949V13h2.04zM4.982 4.887C5.718 6.227 6.726 8.473 6.951 11h-4.9a9.977 9.977 0 0 1 2.931-6.113M2.051 13h4.9c-.226 2.527-1.233 4.771-1.969 6.113A9.972 9.972 0 0 1 2.051 13m16.967 6.113c-.735-1.342-1.744-3.586-1.968-6.113h4.899a9.961 9.961 0 0 1-2.931 6.113"
        })
      }),
      solid: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M16.17 337.5c0 44.98 7.565 83.54 13.98 107.9C35.22 464.3 50.46 496 174.9 496c9.566 0 19.59-.4707 29.84-1.271L17.33 307.3C16.53 317.6 16.17 327.7 16.17 337.5zM495.8 174.5c0-44.98-7.565-83.53-13.98-107.9c-4.688-17.54-18.34-31.23-36.04-35.95C435.5 27.91 392.9 16 337 16c-9.564 0-19.59 .4707-29.84 1.271l187.5 187.5C495.5 194.4 495.8 184.3 495.8 174.5zM26.77 248.8l236.3 236.3c142-36.1 203.9-150.4 222.2-221.1L248.9 26.87C106.9 62.96 45.07 177.2 26.77 248.8zM256 335.1c0 9.141-7.474 16-16 16c-4.094 0-8.188-1.564-11.31-4.689L164.7 283.3C161.6 280.2 160 276.1 160 271.1c0-8.529 6.865-16 16-16c4.095 0 8.189 1.562 11.31 4.688l64.01 64C254.4 327.8 256 331.9 256 335.1zM304 287.1c0 9.141-7.474 16-16 16c-4.094 0-8.188-1.564-11.31-4.689L212.7 235.3C209.6 232.2 208 228.1 208 223.1c0-9.141 7.473-16 16-16c4.094 0 8.188 1.562 11.31 4.688l64.01 64.01C302.5 279.8 304 283.9 304 287.1zM256 175.1c0-9.141 7.473-16 16-16c4.094 0 8.188 1.562 11.31 4.688l64.01 64.01c3.125 3.125 4.688 7.219 4.688 11.31c0 9.133-7.468 16-16 16c-4.094 0-8.189-1.562-11.31-4.688l-64.01-64.01C257.6 184.2 256 180.1 256 175.1z"
        })
      })
    },
    custom: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 448 512",
      children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
        d: "M417.1 368c-5.937 10.27-16.69 16-27.75 16c-5.422 0-10.92-1.375-15.97-4.281L256 311.4V448c0 17.67-14.33 32-31.1 32S192 465.7 192 448V311.4l-118.3 68.29C68.67 382.6 63.17 384 57.75 384c-11.06 0-21.81-5.734-27.75-16c-8.828-15.31-3.594-34.88 11.72-43.72L159.1 256L41.72 187.7C26.41 178.9 21.17 159.3 29.1 144C36.63 132.5 49.26 126.7 61.65 128.2C65.78 128.7 69.88 130.1 73.72 132.3L192 200.6V64c0-17.67 14.33-32 32-32S256 46.33 256 64v136.6l118.3-68.29c3.838-2.213 7.939-3.539 12.07-4.051C398.7 126.7 411.4 132.5 417.1 144c8.828 15.31 3.594 34.88-11.72 43.72L288 256l118.3 68.28C421.6 333.1 426.8 352.7 417.1 368z"
      })
    }),
    flags: {
      outline: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M0 0l6.084 24H8L1.916 0zM21 5h-4l-1-4H4l3 12h3l1 4h13L21 5zM6.563 3h7.875l2 8H8.563l-2-8zm8.832 10l-2.856 1.904L12.063 13h3.332zM19 13l-1.5-6h1.938l2 8H16l3-2z"
        })
      }),
      solid: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M64 496C64 504.8 56.75 512 48 512h-32C7.25 512 0 504.8 0 496V32c0-17.75 14.25-32 32-32s32 14.25 32 32V496zM476.3 0c-6.365 0-13.01 1.35-19.34 4.233c-45.69 20.86-79.56 27.94-107.8 27.94c-59.96 0-94.81-31.86-163.9-31.87C160.9 .3055 131.6 4.867 96 15.75v350.5c32-9.984 59.87-14.1 84.85-14.1c73.63 0 124.9 31.78 198.6 31.78c31.91 0 68.02-5.971 111.1-23.09C504.1 355.9 512 344.4 512 332.1V30.73C512 11.1 495.3 0 476.3 0z"
        })
      })
    },
    foods: {
      outline: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M17 4.978c-1.838 0-2.876.396-3.68.934.513-1.172 1.768-2.934 4.68-2.934a1 1 0 0 0 0-2c-2.921 0-4.629 1.365-5.547 2.512-.064.078-.119.162-.18.244C11.73 1.838 10.798.023 9.207.023 8.579.022 7.85.306 7 .978 5.027 2.54 5.329 3.902 6.492 4.999 3.609 5.222 0 7.352 0 12.969c0 4.582 4.961 11.009 9 11.009 1.975 0 2.371-.486 3-1 .629.514 1.025 1 3 1 4.039 0 9-6.418 9-11 0-5.953-4.055-8-7-8M8.242 2.546c.641-.508.943-.523.965-.523.426.169.975 1.405 1.357 3.055-1.527-.629-2.741-1.352-2.98-1.846.059-.112.241-.356.658-.686M15 21.978c-1.08 0-1.21-.109-1.559-.402l-.176-.146c-.367-.302-.816-.452-1.266-.452s-.898.15-1.266.452l-.176.146c-.347.292-.477.402-1.557.402-2.813 0-7-5.389-7-9.009 0-5.823 4.488-5.991 5-5.991 1.939 0 2.484.471 3.387 1.251l.323.276a1.995 1.995 0 0 0 2.58 0l.323-.276c.902-.78 1.447-1.251 3.387-1.251.512 0 5 .168 5 6 0 3.617-4.187 9-7 9"
        })
      }),
      solid: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M481.9 270.1C490.9 279.1 496 291.3 496 304C496 316.7 490.9 328.9 481.9 337.9C472.9 346.9 460.7 352 448 352H64C51.27 352 39.06 346.9 30.06 337.9C21.06 328.9 16 316.7 16 304C16 291.3 21.06 279.1 30.06 270.1C39.06 261.1 51.27 256 64 256H448C460.7 256 472.9 261.1 481.9 270.1zM475.3 388.7C478.3 391.7 480 395.8 480 400V416C480 432.1 473.3 449.3 461.3 461.3C449.3 473.3 432.1 480 416 480H96C79.03 480 62.75 473.3 50.75 461.3C38.74 449.3 32 432.1 32 416V400C32 395.8 33.69 391.7 36.69 388.7C39.69 385.7 43.76 384 48 384H464C468.2 384 472.3 385.7 475.3 388.7zM50.39 220.8C45.93 218.6 42.03 215.5 38.97 211.6C35.91 207.7 33.79 203.2 32.75 198.4C31.71 193.5 31.8 188.5 32.99 183.7C54.98 97.02 146.5 32 256 32C365.5 32 457 97.02 479 183.7C480.2 188.5 480.3 193.5 479.2 198.4C478.2 203.2 476.1 207.7 473 211.6C469.1 215.5 466.1 218.6 461.6 220.8C457.2 222.9 452.3 224 447.3 224H64.67C59.73 224 54.84 222.9 50.39 220.8zM372.7 116.7C369.7 119.7 368 123.8 368 128C368 131.2 368.9 134.3 370.7 136.9C372.5 139.5 374.1 141.6 377.9 142.8C380.8 143.1 384 144.3 387.1 143.7C390.2 143.1 393.1 141.6 395.3 139.3C397.6 137.1 399.1 134.2 399.7 131.1C400.3 128 399.1 124.8 398.8 121.9C397.6 118.1 395.5 116.5 392.9 114.7C390.3 112.9 387.2 111.1 384 111.1C379.8 111.1 375.7 113.7 372.7 116.7V116.7zM244.7 84.69C241.7 87.69 240 91.76 240 96C240 99.16 240.9 102.3 242.7 104.9C244.5 107.5 246.1 109.6 249.9 110.8C252.8 111.1 256 112.3 259.1 111.7C262.2 111.1 265.1 109.6 267.3 107.3C269.6 105.1 271.1 102.2 271.7 99.12C272.3 96.02 271.1 92.8 270.8 89.88C269.6 86.95 267.5 84.45 264.9 82.7C262.3 80.94 259.2 79.1 256 79.1C251.8 79.1 247.7 81.69 244.7 84.69V84.69zM116.7 116.7C113.7 119.7 112 123.8 112 128C112 131.2 112.9 134.3 114.7 136.9C116.5 139.5 118.1 141.6 121.9 142.8C124.8 143.1 128 144.3 131.1 143.7C134.2 143.1 137.1 141.6 139.3 139.3C141.6 137.1 143.1 134.2 143.7 131.1C144.3 128 143.1 124.8 142.8 121.9C141.6 118.1 139.5 116.5 136.9 114.7C134.3 112.9 131.2 111.1 128 111.1C123.8 111.1 119.7 113.7 116.7 116.7L116.7 116.7z"
        })
      })
    },
    frequent: {
      outline: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        children: [
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M13 4h-2l-.001 7H9v2h2v2h2v-2h4v-2h-4z"
          }),
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10"
          })
        ]
      }),
      solid: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M256 512C114.6 512 0 397.4 0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512zM232 256C232 264 236 271.5 242.7 275.1L338.7 339.1C349.7 347.3 364.6 344.3 371.1 333.3C379.3 322.3 376.3 307.4 365.3 300L280 243.2V120C280 106.7 269.3 96 255.1 96C242.7 96 231.1 106.7 231.1 120L232 256z"
        })
      })
    },
    nature: {
      outline: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        children: [
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M15.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 15.5 8M8.5 8a1.5 1.5 0 1 0 .001 3.001A1.5 1.5 0 0 0 8.5 8"
          }),
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M18.933 0h-.027c-.97 0-2.138.787-3.018 1.497-1.274-.374-2.612-.51-3.887-.51-1.285 0-2.616.133-3.874.517C7.245.79 6.069 0 5.093 0h-.027C3.352 0 .07 2.67.002 7.026c-.039 2.479.276 4.238 1.04 5.013.254.258.882.677 1.295.882.191 3.177.922 5.238 2.536 6.38.897.637 2.187.949 3.2 1.102C8.04 20.6 8 20.795 8 21c0 1.773 2.35 3 4 3 1.648 0 4-1.227 4-3 0-.201-.038-.393-.072-.586 2.573-.385 5.435-1.877 5.925-7.587.396-.22.887-.568 1.104-.788.763-.774 1.079-2.534 1.04-5.013C23.929 2.67 20.646 0 18.933 0M3.223 9.135c-.237.281-.837 1.155-.884 1.238-.15-.41-.368-1.349-.337-3.291.051-3.281 2.478-4.972 3.091-5.031.256.015.731.27 1.265.646-1.11 1.171-2.275 2.915-2.352 5.125-.133.546-.398.858-.783 1.313M12 22c-.901 0-1.954-.693-2-1 0-.654.475-1.236 1-1.602V20a1 1 0 1 0 2 0v-.602c.524.365 1 .947 1 1.602-.046.307-1.099 1-2 1m3-3.48v.02a4.752 4.752 0 0 0-1.262-1.02c1.092-.516 2.239-1.334 2.239-2.217 0-1.842-1.781-2.195-3.977-2.195-2.196 0-3.978.354-3.978 2.195 0 .883 1.148 1.701 2.238 2.217A4.8 4.8 0 0 0 9 18.539v-.025c-1-.076-2.182-.281-2.973-.842-1.301-.92-1.838-3.045-1.853-6.478l.023-.041c.496-.826 1.49-1.45 1.804-3.102 0-2.047 1.357-3.631 2.362-4.522C9.37 3.178 10.555 3 11.948 3c1.447 0 2.685.192 3.733.57 1 .9 2.316 2.465 2.316 4.48.313 1.651 1.307 2.275 1.803 3.102.035.058.068.117.102.178-.059 5.967-1.949 7.01-4.902 7.19m6.628-8.202c-.037-.065-.074-.13-.113-.195a7.587 7.587 0 0 0-.739-.987c-.385-.455-.648-.768-.782-1.313-.076-2.209-1.241-3.954-2.353-5.124.531-.376 1.004-.63 1.261-.647.636.071 3.044 1.764 3.096 5.031.027 1.81-.347 3.218-.37 3.235"
          })
        ]
      }),
      solid: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 576 512",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M332.7 19.85C334.6 8.395 344.5 0 356.1 0C363.6 0 370.6 3.52 375.1 9.502L392 32H444.1C456.8 32 469.1 37.06 478.1 46.06L496 64H552C565.3 64 576 74.75 576 88V112C576 156.2 540.2 192 496 192H426.7L421.6 222.5L309.6 158.5L332.7 19.85zM448 64C439.2 64 432 71.16 432 80C432 88.84 439.2 96 448 96C456.8 96 464 88.84 464 80C464 71.16 456.8 64 448 64zM416 256.1V480C416 497.7 401.7 512 384 512H352C334.3 512 320 497.7 320 480V364.8C295.1 377.1 268.8 384 240 384C211.2 384 184 377.1 160 364.8V480C160 497.7 145.7 512 128 512H96C78.33 512 64 497.7 64 480V249.8C35.23 238.9 12.64 214.5 4.836 183.3L.9558 167.8C-3.331 150.6 7.094 133.2 24.24 128.1C41.38 124.7 58.76 135.1 63.05 152.2L66.93 167.8C70.49 182 83.29 191.1 97.97 191.1H303.8L416 256.1z"
        })
      })
    },
    objects: {
      outline: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        children: [
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M12 0a9 9 0 0 0-5 16.482V21s2.035 3 5 3 5-3 5-3v-4.518A9 9 0 0 0 12 0zm0 2c3.86 0 7 3.141 7 7s-3.14 7-7 7-7-3.141-7-7 3.14-7 7-7zM9 17.477c.94.332 1.946.523 3 .523s2.06-.19 3-.523v.834c-.91.436-1.925.689-3 .689a6.924 6.924 0 0 1-3-.69v-.833zm.236 3.07A8.854 8.854 0 0 0 12 21c.965 0 1.888-.167 2.758-.451C14.155 21.173 13.153 22 12 22c-1.102 0-2.117-.789-2.764-1.453z"
          }),
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M14.745 12.449h-.004c-.852-.024-1.188-.858-1.577-1.824-.421-1.061-.703-1.561-1.182-1.566h-.009c-.481 0-.783.497-1.235 1.537-.436.982-.801 1.811-1.636 1.791l-.276-.043c-.565-.171-.853-.691-1.284-1.794-.125-.313-.202-.632-.27-.913-.051-.213-.127-.53-.195-.634C7.067 9.004 7.039 9 6.99 9A1 1 0 0 1 7 7h.01c1.662.017 2.015 1.373 2.198 2.134.486-.981 1.304-2.058 2.797-2.075 1.531.018 2.28 1.153 2.731 2.141l.002-.008C14.944 8.424 15.327 7 16.979 7h.032A1 1 0 1 1 17 9h-.011c-.149.076-.256.474-.319.709a6.484 6.484 0 0 1-.311.951c-.429.973-.79 1.789-1.614 1.789"
          })
        ]
      }),
      solid: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 384 512",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M112.1 454.3c0 6.297 1.816 12.44 5.284 17.69l17.14 25.69c5.25 7.875 17.17 14.28 26.64 14.28h61.67c9.438 0 21.36-6.401 26.61-14.28l17.08-25.68c2.938-4.438 5.348-12.37 5.348-17.7L272 415.1h-160L112.1 454.3zM191.4 .0132C89.44 .3257 16 82.97 16 175.1c0 44.38 16.44 84.84 43.56 115.8c16.53 18.84 42.34 58.23 52.22 91.45c.0313 .25 .0938 .5166 .125 .7823h160.2c.0313-.2656 .0938-.5166 .125-.7823c9.875-33.22 35.69-72.61 52.22-91.45C351.6 260.8 368 220.4 368 175.1C368 78.61 288.9-.2837 191.4 .0132zM192 96.01c-44.13 0-80 35.89-80 79.1C112 184.8 104.8 192 96 192S80 184.8 80 176c0-61.76 50.25-111.1 112-111.1c8.844 0 16 7.159 16 16S200.8 96.01 192 96.01z"
        })
      })
    },
    people: {
      outline: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        children: [
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M12 0C5.373 0 0 5.373 0 12s5.373 12 12 12 12-5.373 12-12S18.627 0 12 0m0 22C6.486 22 2 17.514 2 12S6.486 2 12 2s10 4.486 10 10-4.486 10-10 10"
          }),
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M8 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 8 7M16 7a2 2 0 1 0-.001 3.999A2 2 0 0 0 16 7M15.232 15c-.693 1.195-1.87 2-3.349 2-1.477 0-2.655-.805-3.347-2H15m3-2H6a6 6 0 1 0 12 0"
          })
        ]
      }),
      solid: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M0 256C0 114.6 114.6 0 256 0C397.4 0 512 114.6 512 256C512 397.4 397.4 512 256 512C114.6 512 0 397.4 0 256zM256 432C332.1 432 396.2 382 415.2 314.1C419.1 300.4 407.8 288 393.6 288H118.4C104.2 288 92.92 300.4 96.76 314.1C115.8 382 179.9 432 256 432V432zM176.4 160C158.7 160 144.4 174.3 144.4 192C144.4 209.7 158.7 224 176.4 224C194 224 208.4 209.7 208.4 192C208.4 174.3 194 160 176.4 160zM336.4 224C354 224 368.4 209.7 368.4 192C368.4 174.3 354 160 336.4 160C318.7 160 304.4 174.3 304.4 192C304.4 209.7 318.7 224 336.4 224z"
        })
      })
    },
    places: {
      outline: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        children: [
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M6.5 12C5.122 12 4 13.121 4 14.5S5.122 17 6.5 17 9 15.879 9 14.5 7.878 12 6.5 12m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5M17.5 12c-1.378 0-2.5 1.121-2.5 2.5s1.122 2.5 2.5 2.5 2.5-1.121 2.5-2.5-1.122-2.5-2.5-2.5m0 3c-.275 0-.5-.225-.5-.5s.225-.5.5-.5.5.225.5.5-.225.5-.5.5"
          }),
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
            d: "M22.482 9.494l-1.039-.346L21.4 9h.6c.552 0 1-.439 1-.992 0-.006-.003-.008-.003-.008H23c0-1-.889-2-1.984-2h-.642l-.731-1.717C19.262 3.012 18.091 2 16.764 2H7.236C5.909 2 4.738 3.012 4.357 4.283L3.626 6h-.642C1.889 6 1 7 1 8h.003S1 8.002 1 8.008C1 8.561 1.448 9 2 9h.6l-.043.148-1.039.346a2.001 2.001 0 0 0-1.359 2.097l.751 7.508a1 1 0 0 0 .994.901H3v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h6v1c0 1.103.896 2 2 2h2c1.104 0 2-.897 2-2v-1h1.096a.999.999 0 0 0 .994-.901l.751-7.508a2.001 2.001 0 0 0-1.359-2.097M6.273 4.857C6.402 4.43 6.788 4 7.236 4h9.527c.448 0 .834.43.963.857L19.313 9H4.688l1.585-4.143zM7 21H5v-1h2v1zm12 0h-2v-1h2v1zm2.189-3H2.811l-.662-6.607L3 11h18l.852.393L21.189 18z"
          })
        ]
      }),
      solid: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M39.61 196.8L74.8 96.29C88.27 57.78 124.6 32 165.4 32H346.6C387.4 32 423.7 57.78 437.2 96.29L472.4 196.8C495.6 206.4 512 229.3 512 256V448C512 465.7 497.7 480 480 480H448C430.3 480 416 465.7 416 448V400H96V448C96 465.7 81.67 480 64 480H32C14.33 480 0 465.7 0 448V256C0 229.3 16.36 206.4 39.61 196.8V196.8zM109.1 192H402.9L376.8 117.4C372.3 104.6 360.2 96 346.6 96H165.4C151.8 96 139.7 104.6 135.2 117.4L109.1 192zM96 256C78.33 256 64 270.3 64 288C64 305.7 78.33 320 96 320C113.7 320 128 305.7 128 288C128 270.3 113.7 256 96 256zM416 320C433.7 320 448 305.7 448 288C448 270.3 433.7 256 416 256C398.3 256 384 270.3 384 288C384 305.7 398.3 320 416 320z"
        })
      })
    },
    symbols: {
      outline: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 24 24",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M0 0h11v2H0zM4 11h3V6h4V4H0v2h4zM15.5 17c1.381 0 2.5-1.116 2.5-2.493s-1.119-2.493-2.5-2.493S13 13.13 13 14.507 14.119 17 15.5 17m0-2.986c.276 0 .5.222.5.493 0 .272-.224.493-.5.493s-.5-.221-.5-.493.224-.493.5-.493M21.5 19.014c-1.381 0-2.5 1.116-2.5 2.493S20.119 24 21.5 24s2.5-1.116 2.5-2.493-1.119-2.493-2.5-2.493m0 2.986a.497.497 0 0 1-.5-.493c0-.271.224-.493.5-.493s.5.222.5.493a.497.497 0 0 1-.5.493M22 13l-9 9 1.513 1.5 8.99-9.009zM17 11c2.209 0 4-1.119 4-2.5V2s.985-.161 1.498.949C23.01 4.055 23 6 23 6s1-1.119 1-3.135C24-.02 21 0 21 0h-2v6.347A5.853 5.853 0 0 0 17 6c-2.209 0-4 1.119-4 2.5s1.791 2.5 4 2.5M10.297 20.482l-1.475-1.585a47.54 47.54 0 0 1-1.442 1.129c-.307-.288-.989-1.016-2.045-2.183.902-.836 1.479-1.466 1.729-1.892s.376-.871.376-1.336c0-.592-.273-1.178-.818-1.759-.546-.581-1.329-.871-2.349-.871-1.008 0-1.79.293-2.344.879-.556.587-.832 1.181-.832 1.784 0 .813.419 1.748 1.256 2.805-.847.614-1.444 1.208-1.794 1.784a3.465 3.465 0 0 0-.523 1.833c0 .857.308 1.56.924 2.107.616.549 1.423.823 2.42.823 1.173 0 2.444-.379 3.813-1.137L8.235 24h2.819l-2.09-2.383 1.333-1.135zm-6.736-6.389a1.02 1.02 0 0 1 .73-.286c.31 0 .559.085.747.254a.849.849 0 0 1 .283.659c0 .518-.419 1.112-1.257 1.784-.536-.651-.805-1.231-.805-1.742a.901.901 0 0 1 .302-.669M3.74 22c-.427 0-.778-.116-1.057-.349-.279-.232-.418-.487-.418-.766 0-.594.509-1.288 1.527-2.083.968 1.134 1.717 1.946 2.248 2.438-.921.507-1.686.76-2.3.76"
        })
      }),
      solid: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: "0 0 512 512",
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
          d: "M500.3 7.251C507.7 13.33 512 22.41 512 31.1V175.1C512 202.5 483.3 223.1 447.1 223.1C412.7 223.1 383.1 202.5 383.1 175.1C383.1 149.5 412.7 127.1 447.1 127.1V71.03L351.1 90.23V207.1C351.1 234.5 323.3 255.1 287.1 255.1C252.7 255.1 223.1 234.5 223.1 207.1C223.1 181.5 252.7 159.1 287.1 159.1V63.1C287.1 48.74 298.8 35.61 313.7 32.62L473.7 .6198C483.1-1.261 492.9 1.173 500.3 7.251H500.3zM74.66 303.1L86.5 286.2C92.43 277.3 102.4 271.1 113.1 271.1H174.9C185.6 271.1 195.6 277.3 201.5 286.2L213.3 303.1H239.1C266.5 303.1 287.1 325.5 287.1 351.1V463.1C287.1 490.5 266.5 511.1 239.1 511.1H47.1C21.49 511.1-.0019 490.5-.0019 463.1V351.1C-.0019 325.5 21.49 303.1 47.1 303.1H74.66zM143.1 359.1C117.5 359.1 95.1 381.5 95.1 407.1C95.1 434.5 117.5 455.1 143.1 455.1C170.5 455.1 191.1 434.5 191.1 407.1C191.1 381.5 170.5 359.1 143.1 359.1zM440.3 367.1H496C502.7 367.1 508.6 372.1 510.1 378.4C513.3 384.6 511.6 391.7 506.5 396L378.5 508C372.9 512.1 364.6 513.3 358.6 508.9C352.6 504.6 350.3 496.6 353.3 489.7L391.7 399.1H336C329.3 399.1 323.4 395.9 321 389.6C318.7 383.4 320.4 376.3 325.5 371.1L453.5 259.1C459.1 255 467.4 254.7 473.4 259.1C479.4 263.4 481.6 271.4 478.7 278.3L440.3 367.1zM116.7 219.1L19.85 119.2C-8.112 90.26-6.614 42.31 24.85 15.34C51.82-8.137 93.26-3.642 118.2 21.83L128.2 32.32L137.7 21.83C162.7-3.642 203.6-8.137 231.6 15.34C262.6 42.31 264.1 90.26 236.1 119.2L139.7 219.1C133.2 225.6 122.7 225.6 116.7 219.1H116.7z"
        })
      })
    }
  };
  var $fcccfb36ed0cde68$var$search = {
    loupe: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
        d: "M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z"
      })
    }),
    delete: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 20 20",
      children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("path", {
        d: "M10 8.586L2.929 1.515 1.515 2.929 8.586 10l-7.071 7.071 1.414 1.414L10 11.414l7.071 7.071 1.414-1.414L11.414 10l7.071-7.071-1.414-1.414L10 8.586z"
      })
    })
  };
  var $fcccfb36ed0cde68$export$2e2bcd8739ae039 = {
    categories: $fcccfb36ed0cde68$var$categories,
    search: $fcccfb36ed0cde68$var$search
  };
  function $254755d3f438722f$export$2e2bcd8739ae039(props) {
    let { id, skin, emoji } = props;
    if (props.shortcodes) {
      const matches = props.shortcodes.match((0, $c4d155af13ad4d4b$export$2e2bcd8739ae039).SHORTCODES_REGEX);
      if (matches) {
        id = matches[1];
        if (matches[2])
          skin = matches[2];
      }
    }
    emoji || (emoji = (0, $c4d155af13ad4d4b$export$2e2bcd8739ae039).get(id || props.native));
    if (!emoji)
      return props.fallback;
    const emojiSkin = emoji.skins[skin - 1] || emoji.skins[0];
    const imageSrc = emojiSkin.src || (props.set != "native" && !props.spritesheet ? typeof props.getImageURL === "function" ? props.getImageURL(props.set, emojiSkin.unified) : `https://cdn.jsdelivr.net/npm/emoji-datasource-${props.set}@14.0.0/img/${props.set}/64/${emojiSkin.unified}.png` : void 0);
    const spritesheetSrc = typeof props.getSpritesheetURL === "function" ? props.getSpritesheetURL(props.set) : `https://cdn.jsdelivr.net/npm/emoji-datasource-${props.set}@14.0.0/img/${props.set}/sheets-256/64.png`;
    return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
      class: "emoji-mart-emoji",
      "data-emoji-set": props.set,
      children: imageSrc ? /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("img", {
        style: {
          maxWidth: props.size || "1em",
          maxHeight: props.size || "1em",
          display: "inline-block"
        },
        alt: emojiSkin.native || emojiSkin.shortcodes,
        src: imageSrc
      }) : props.set == "native" ? /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
        style: {
          fontSize: props.size,
          fontFamily: '"EmojiMart", "Segoe UI Emoji", "Segoe UI Symbol", "Segoe UI", "Apple Color Emoji", "Twemoji Mozilla", "Noto Color Emoji", "Android Emoji"'
        },
        children: emojiSkin.native
      }) : /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
        style: {
          display: "block",
          width: props.size,
          height: props.size,
          backgroundImage: `url(${spritesheetSrc})`,
          backgroundSize: `${100 * (0, $7adb23b0109cc36a$export$2d0294657ab35f1b).sheet.cols}% ${100 * (0, $7adb23b0109cc36a$export$2d0294657ab35f1b).sheet.rows}%`,
          backgroundPosition: `${100 / ((0, $7adb23b0109cc36a$export$2d0294657ab35f1b).sheet.cols - 1) * emojiSkin.x}% ${100 / ((0, $7adb23b0109cc36a$export$2d0294657ab35f1b).sheet.rows - 1) * emojiSkin.y}%`
        }
      })
    });
  }
  var $6f57cc9cd54c5aaa$var$WindowHTMLElement = typeof window !== "undefined" && window.HTMLElement ? window.HTMLElement : Object;
  var $6f57cc9cd54c5aaa$export$2e2bcd8739ae039 = class extends $6f57cc9cd54c5aaa$var$WindowHTMLElement {
    static get observedAttributes() {
      return Object.keys(this.Props);
    }
    update(props = {}) {
      for (let k2 in props)
        this.attributeChangedCallback(k2, null, props[k2]);
    }
    attributeChangedCallback(attr, _2, newValue) {
      if (!this.component)
        return;
      const value = (0, $7adb23b0109cc36a$export$88c9ddb45cea7241)(attr, {
        [attr]: newValue
      }, this.constructor.Props, this);
      if (this.component.componentWillReceiveProps)
        this.component.componentWillReceiveProps({
          [attr]: value
        });
      else {
        this.component.props[attr] = value;
        this.component.forceUpdate();
      }
    }
    disconnectedCallback() {
      this.disconnected = true;
      if (this.component && this.component.unregister)
        this.component.unregister();
    }
    constructor(props = {}) {
      super();
      this.props = props;
      if (props.parent || props.ref) {
        let ref = null;
        const parent = props.parent || (ref = props.ref && props.ref.current);
        if (ref)
          ref.innerHTML = "";
        if (parent)
          parent.appendChild(this);
      }
    }
  };
  var $26f27c338a96b1a6$export$2e2bcd8739ae039 = class extends (0, $6f57cc9cd54c5aaa$export$2e2bcd8739ae039) {
    setShadow() {
      this.attachShadow({
        mode: "open"
      });
    }
    injectStyles(styles) {
      if (!styles)
        return;
      const style = document.createElement("style");
      style.textContent = styles;
      this.shadowRoot.insertBefore(style, this.shadowRoot.firstChild);
    }
    constructor(props, { styles } = {}) {
      super(props);
      this.setShadow();
      this.injectStyles(styles);
    }
  };
  var $3d90f6e46fb2dd47$export$2e2bcd8739ae039 = {
    fallback: "",
    id: "",
    native: "",
    shortcodes: "",
    size: {
      value: "",
      transform: (value) => {
        if (!/\D/.test(value))
          return `${value}px`;
        return value;
      }
    },
    // Shared
    set: (0, $b247ea80b67298d5$export$2e2bcd8739ae039).set,
    skin: (0, $b247ea80b67298d5$export$2e2bcd8739ae039).skin
  };
  var $331b4160623139bf$export$2e2bcd8739ae039 = class extends (0, $6f57cc9cd54c5aaa$export$2e2bcd8739ae039) {
    async connectedCallback() {
      const props = (0, $7adb23b0109cc36a$export$75fe5f91d452f94b)(this.props, (0, $3d90f6e46fb2dd47$export$2e2bcd8739ae039), this);
      props.element = this;
      props.ref = (component) => {
        this.component = component;
      };
      await (0, $7adb23b0109cc36a$export$2cd8252107eb640b)();
      if (this.disconnected)
        return;
      (0, $fb96b826c0c5f37a$export$b3890eb0ae9dca99)(/* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)((0, $254755d3f438722f$export$2e2bcd8739ae039), {
        ...props
      }), this);
    }
    constructor(props) {
      super(props);
    }
  };
  (0, $c770c458706daa72$export$2e2bcd8739ae039)($331b4160623139bf$export$2e2bcd8739ae039, "Props", (0, $3d90f6e46fb2dd47$export$2e2bcd8739ae039));
  if (typeof customElements !== "undefined" && !customElements.get("em-emoji"))
    customElements.define("em-emoji", $331b4160623139bf$export$2e2bcd8739ae039);
  var $1a9a8ef576b7773d$var$t;
  var $1a9a8ef576b7773d$var$u;
  var $1a9a8ef576b7773d$var$r;
  var $1a9a8ef576b7773d$var$i = [];
  var $1a9a8ef576b7773d$var$c = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__b;
  var $1a9a8ef576b7773d$var$f = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__r;
  var $1a9a8ef576b7773d$var$e = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).diffed;
  var $1a9a8ef576b7773d$var$a = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__c;
  var $1a9a8ef576b7773d$var$v = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).unmount;
  function $1a9a8ef576b7773d$var$x() {
    var t6;
    for ($1a9a8ef576b7773d$var$i.sort(function(n11, t7) {
      return n11.__v.__b - t7.__v.__b;
    }); t6 = $1a9a8ef576b7773d$var$i.pop(); )
      if (t6.__P)
        try {
          t6.__H.__h.forEach($1a9a8ef576b7773d$var$g), t6.__H.__h.forEach($1a9a8ef576b7773d$var$j), t6.__H.__h = [];
        } catch (u4) {
          t6.__H.__h = [], (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__e(u4, t6.__v);
        }
  }
  (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__b = function(n12) {
    $1a9a8ef576b7773d$var$u = null, $1a9a8ef576b7773d$var$c && $1a9a8ef576b7773d$var$c(n12);
  }, (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__r = function(n13) {
    $1a9a8ef576b7773d$var$f && $1a9a8ef576b7773d$var$f(n13), $1a9a8ef576b7773d$var$t = 0;
    var r8 = ($1a9a8ef576b7773d$var$u = n13.__c).__H;
    r8 && (r8.__h.forEach($1a9a8ef576b7773d$var$g), r8.__h.forEach($1a9a8ef576b7773d$var$j), r8.__h = []);
  }, (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).diffed = function(t8) {
    $1a9a8ef576b7773d$var$e && $1a9a8ef576b7773d$var$e(t8);
    var o6 = t8.__c;
    o6 && o6.__H && o6.__H.__h.length && (1 !== $1a9a8ef576b7773d$var$i.push(o6) && $1a9a8ef576b7773d$var$r === (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).requestAnimationFrame || (($1a9a8ef576b7773d$var$r = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).requestAnimationFrame) || function(n14) {
      var t9, u5 = function() {
        clearTimeout(r9), $1a9a8ef576b7773d$var$b && cancelAnimationFrame(t9), setTimeout(n14);
      }, r9 = setTimeout(u5, 100);
      $1a9a8ef576b7773d$var$b && (t9 = requestAnimationFrame(u5));
    })($1a9a8ef576b7773d$var$x)), $1a9a8ef576b7773d$var$u = null;
  }, (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__c = function(t10, u6) {
    u6.some(function(t11) {
      try {
        t11.__h.forEach($1a9a8ef576b7773d$var$g), t11.__h = t11.__h.filter(function(n15) {
          return !n15.__ || $1a9a8ef576b7773d$var$j(n15);
        });
      } catch (r10) {
        u6.some(function(n16) {
          n16.__h && (n16.__h = []);
        }), u6 = [], (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__e(r10, t11.__v);
      }
    }), $1a9a8ef576b7773d$var$a && $1a9a8ef576b7773d$var$a(t10, u6);
  }, (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).unmount = function(t12) {
    $1a9a8ef576b7773d$var$v && $1a9a8ef576b7773d$var$v(t12);
    var u7, r11 = t12.__c;
    r11 && r11.__H && (r11.__H.__.forEach(function(n17) {
      try {
        $1a9a8ef576b7773d$var$g(n17);
      } catch (n18) {
        u7 = n18;
      }
    }), u7 && (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__e(u7, r11.__v));
  };
  var $1a9a8ef576b7773d$var$b = "function" == typeof requestAnimationFrame;
  function $1a9a8ef576b7773d$var$g(n19) {
    var t13 = $1a9a8ef576b7773d$var$u, r12 = n19.__c;
    "function" == typeof r12 && (n19.__c = void 0, r12()), $1a9a8ef576b7773d$var$u = t13;
  }
  function $1a9a8ef576b7773d$var$j(n20) {
    var t14 = $1a9a8ef576b7773d$var$u;
    n20.__c = n20.__(), $1a9a8ef576b7773d$var$u = t14;
  }
  function $dc040a17866866fa$var$S(n1, t1) {
    for (var e1 in t1)
      n1[e1] = t1[e1];
    return n1;
  }
  function $dc040a17866866fa$var$C(n2, t2) {
    for (var e2 in n2)
      if ("__source" !== e2 && !(e2 in t2))
        return true;
    for (var r1 in t2)
      if ("__source" !== r1 && n2[r1] !== t2[r1])
        return true;
    return false;
  }
  function $dc040a17866866fa$export$221d75b3f55bb0bd(n3) {
    this.props = n3;
  }
  ($dc040a17866866fa$export$221d75b3f55bb0bd.prototype = new (0, $fb96b826c0c5f37a$export$16fa2f45be04daa8)()).isPureReactComponent = true, $dc040a17866866fa$export$221d75b3f55bb0bd.prototype.shouldComponentUpdate = function(n6, t5) {
    return $dc040a17866866fa$var$C(this.props, n6) || $dc040a17866866fa$var$C(this.state, t5);
  };
  var $dc040a17866866fa$var$w = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__b;
  (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__b = function(n7) {
    n7.type && n7.type.__f && n7.ref && (n7.props.ref = n7.ref, n7.ref = null), $dc040a17866866fa$var$w && $dc040a17866866fa$var$w(n7);
  };
  var $dc040a17866866fa$var$R = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
  var $dc040a17866866fa$var$A = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__e;
  (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__e = function(n12, t10, e6) {
    if (n12.then) {
      for (var r5, u1 = t10; u1 = u1.__; )
        if ((r5 = u1.__c) && r5.__c)
          return null == t10.__e && (t10.__e = e6.__e, t10.__k = e6.__k), r5.__c(n12, t10);
    }
    $dc040a17866866fa$var$A(n12, t10, e6);
  };
  var $dc040a17866866fa$var$O = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).unmount;
  function $dc040a17866866fa$export$74bf444e3cd11ea5() {
    this.__u = 0, this.t = null, this.__b = null;
  }
  function $dc040a17866866fa$var$U(n13) {
    var t11 = n13.__.__c;
    return t11 && t11.__e && t11.__e(n13);
  }
  function $dc040a17866866fa$export$998bcd577473dd93() {
    this.u = null, this.o = null;
  }
  (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).unmount = function(n17) {
    var t13 = n17.__c;
    t13 && t13.__R && t13.__R(), t13 && true === n17.__h && (n17.type = null), $dc040a17866866fa$var$O && $dc040a17866866fa$var$O(n17);
  }, ($dc040a17866866fa$export$74bf444e3cd11ea5.prototype = new (0, $fb96b826c0c5f37a$export$16fa2f45be04daa8)()).__c = function(n18, t14) {
    var e8 = t14.__c, r7 = this;
    null == r7.t && (r7.t = []), r7.t.push(e8);
    var u4 = $dc040a17866866fa$var$U(r7.__v), o1 = false, i1 = function() {
      o1 || (o1 = true, e8.__R = null, u4 ? u4(l1) : l1());
    };
    e8.__R = i1;
    var l1 = function() {
      if (!--r7.__u) {
        if (r7.state.__e) {
          var n19 = r7.state.__e;
          r7.__v.__k[0] = function n22(t17, e9, r8) {
            return t17 && (t17.__v = null, t17.__k = t17.__k && t17.__k.map(function(t18) {
              return n22(t18, e9, r8);
            }), t17.__c && t17.__c.__P === e9 && (t17.__e && r8.insertBefore(t17.__e, t17.__d), t17.__c.__e = true, t17.__c.__P = r8)), t17;
          }(n19, n19.__c.__P, n19.__c.__O);
        }
        var t15;
        for (r7.setState({
          __e: r7.__b = null
        }); t15 = r7.t.pop(); )
          t15.forceUpdate();
      }
    }, c1 = true === t14.__h;
    r7.__u++ || c1 || r7.setState({
      __e: r7.__b = r7.__v.__k[0]
    }), n18.then(i1, i1);
  }, $dc040a17866866fa$export$74bf444e3cd11ea5.prototype.componentWillUnmount = function() {
    this.t = [];
  }, $dc040a17866866fa$export$74bf444e3cd11ea5.prototype.render = function(n23, t19) {
    if (this.__b) {
      if (this.__v.__k) {
        var e10 = document.createElement("div"), r9 = this.__v.__k[0].__c;
        this.__v.__k[0] = function n24(t20, e13, r12) {
          return t20 && (t20.__c && t20.__c.__H && (t20.__c.__H.__.forEach(function(n25) {
            "function" == typeof n25.__c && n25.__c();
          }), t20.__c.__H = null), null != (t20 = $dc040a17866866fa$var$S({}, t20)).__c && (t20.__c.__P === r12 && (t20.__c.__P = e13), t20.__c = null), t20.__k = t20.__k && t20.__k.map(function(t21) {
            return n24(t21, e13, r12);
          })), t20;
        }(this.__b, e10, r9.__O = r9.__P);
      }
      this.__b = null;
    }
    var u5 = t19.__e && (0, $fb96b826c0c5f37a$export$c8a8987d4410bf2d)((0, $fb96b826c0c5f37a$export$ffb0004e005737fa), null, n23.fallback);
    return u5 && (u5.__h = null), [
      (0, $fb96b826c0c5f37a$export$c8a8987d4410bf2d)((0, $fb96b826c0c5f37a$export$ffb0004e005737fa), null, t19.__e ? null : n23.children),
      u5
    ];
  };
  var $dc040a17866866fa$var$T = function(n26, t22, e14) {
    if (++e14[1] === e14[0] && n26.o.delete(t22), n26.props.revealOrder && ("t" !== n26.props.revealOrder[0] || !n26.o.size))
      for (e14 = n26.u; e14; ) {
        for (; e14.length > 3; )
          e14.pop()();
        if (e14[1] < e14[0])
          break;
        n26.u = e14 = e14[2];
      }
  };
  ($dc040a17866866fa$export$998bcd577473dd93.prototype = new (0, $fb96b826c0c5f37a$export$16fa2f45be04daa8)()).__e = function(n33) {
    var t25 = this, e16 = $dc040a17866866fa$var$U(t25.__v), r13 = t25.o.get(n33);
    return r13[0]++, function(u6) {
      var o2 = function() {
        t25.props.revealOrder ? (r13.push(u6), $dc040a17866866fa$var$T(t25, n33, r13)) : u6();
      };
      e16 ? e16(o2) : o2();
    };
  }, $dc040a17866866fa$export$998bcd577473dd93.prototype.render = function(n34) {
    this.u = null, this.o = /* @__PURE__ */ new Map();
    var t26 = (0, $fb96b826c0c5f37a$export$47e4c5b300681277)(n34.children);
    n34.revealOrder && "b" === n34.revealOrder[0] && t26.reverse();
    for (var e17 = t26.length; e17--; )
      this.o.set(t26[e17], this.u = [
        1,
        0,
        this.u
      ]);
    return n34.children;
  }, $dc040a17866866fa$export$998bcd577473dd93.prototype.componentDidUpdate = $dc040a17866866fa$export$998bcd577473dd93.prototype.componentDidMount = function() {
    var n35 = this;
    this.o.forEach(function(t27, e18) {
      $dc040a17866866fa$var$T(n35, e18, t27);
    });
  };
  var $dc040a17866866fa$var$j = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
  var $dc040a17866866fa$var$P = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|marker(?!H|W|U)|overline|paint|stop|strikethrough|stroke|text(?!L)|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
  var $dc040a17866866fa$var$V = "undefined" != typeof document;
  var $dc040a17866866fa$var$z = function(n36) {
    return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/i : /fil|che|ra/i).test(n36);
  };
  (0, $fb96b826c0c5f37a$export$16fa2f45be04daa8).prototype.isReactComponent = {}, [
    "componentWillMount",
    "componentWillReceiveProps",
    "componentWillUpdate"
  ].forEach(function(n39) {
    Object.defineProperty((0, $fb96b826c0c5f37a$export$16fa2f45be04daa8).prototype, n39, {
      configurable: true,
      get: function() {
        return this["UNSAFE_" + n39];
      },
      set: function(t30) {
        Object.defineProperty(this, n39, {
          configurable: true,
          writable: true,
          value: t30
        });
      }
    });
  });
  var $dc040a17866866fa$var$H = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).event;
  function $dc040a17866866fa$var$Z() {
  }
  function $dc040a17866866fa$var$Y() {
    return this.cancelBubble;
  }
  function $dc040a17866866fa$var$q() {
    return this.defaultPrevented;
  }
  (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).event = function(n40) {
    return $dc040a17866866fa$var$H && (n40 = $dc040a17866866fa$var$H(n40)), n40.persist = $dc040a17866866fa$var$Z, n40.isPropagationStopped = $dc040a17866866fa$var$Y, n40.isDefaultPrevented = $dc040a17866866fa$var$q, n40.nativeEvent = n40;
  };
  var $dc040a17866866fa$var$G;
  var $dc040a17866866fa$var$J = {
    configurable: true,
    get: function() {
      return this.class;
    }
  };
  var $dc040a17866866fa$var$K = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).vnode;
  (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).vnode = function(n41) {
    var t31 = n41.type, e21 = n41.props, r14 = e21;
    if ("string" == typeof t31) {
      var u7 = -1 === t31.indexOf("-");
      for (var o3 in r14 = {}, e21) {
        var i2 = e21[o3];
        $dc040a17866866fa$var$V && "children" === o3 && "noscript" === t31 || "value" === o3 && "defaultValue" in e21 && null == i2 || ("defaultValue" === o3 && "value" in e21 && null == e21.value ? o3 = "value" : "download" === o3 && true === i2 ? i2 = "" : /ondoubleclick/i.test(o3) ? o3 = "ondblclick" : /^onchange(textarea|input)/i.test(o3 + t31) && !$dc040a17866866fa$var$z(e21.type) ? o3 = "oninput" : /^onfocus$/i.test(o3) ? o3 = "onfocusin" : /^onblur$/i.test(o3) ? o3 = "onfocusout" : /^on(Ani|Tra|Tou|BeforeInp)/.test(o3) ? o3 = o3.toLowerCase() : u7 && $dc040a17866866fa$var$P.test(o3) ? o3 = o3.replace(/[A-Z0-9]/, "-$&").toLowerCase() : null === i2 && (i2 = void 0), r14[o3] = i2);
      }
      "select" == t31 && r14.multiple && Array.isArray(r14.value) && (r14.value = (0, $fb96b826c0c5f37a$export$47e4c5b300681277)(e21.children).forEach(function(n42) {
        n42.props.selected = -1 != r14.value.indexOf(n42.props.value);
      })), "select" == t31 && null != r14.defaultValue && (r14.value = (0, $fb96b826c0c5f37a$export$47e4c5b300681277)(e21.children).forEach(function(n43) {
        n43.props.selected = r14.multiple ? -1 != r14.defaultValue.indexOf(n43.props.value) : r14.defaultValue == n43.props.value;
      })), n41.props = r14, e21.class != e21.className && ($dc040a17866866fa$var$J.enumerable = "className" in e21, null != e21.className && (r14.class = e21.className), Object.defineProperty(r14, "className", $dc040a17866866fa$var$J));
    }
    n41.$$typeof = $dc040a17866866fa$var$j, $dc040a17866866fa$var$K && $dc040a17866866fa$var$K(n41);
  };
  var $dc040a17866866fa$var$Q = (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__r;
  (0, $fb96b826c0c5f37a$export$41c562ebe57d11e2).__r = function(n44) {
    $dc040a17866866fa$var$Q && $dc040a17866866fa$var$Q(n44), $dc040a17866866fa$var$G = n44.__c;
  };
  var $ec8c39fdad15601a$var$THEME_ICONS = {
    light: "outline",
    dark: "solid"
  };
  var $ec8c39fdad15601a$export$2e2bcd8739ae039 = class extends (0, $dc040a17866866fa$export$221d75b3f55bb0bd) {
    renderIcon(category) {
      const { icon } = category;
      if (icon) {
        if (icon.svg)
          return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
            class: "flex",
            dangerouslySetInnerHTML: {
              __html: icon.svg
            }
          });
        if (icon.src)
          return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("img", {
            src: icon.src
          });
      }
      const categoryIcons = (0, $fcccfb36ed0cde68$export$2e2bcd8739ae039).categories[category.id] || (0, $fcccfb36ed0cde68$export$2e2bcd8739ae039).categories.custom;
      const style = this.props.icons == "auto" ? $ec8c39fdad15601a$var$THEME_ICONS[this.props.theme] : this.props.icons;
      return categoryIcons[style] || categoryIcons;
    }
    render() {
      let selectedCategoryIndex = null;
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("nav", {
        id: "nav",
        class: "padding",
        "data-position": this.props.position,
        dir: this.props.dir,
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
          class: "flex relative",
          children: [
            this.categories.map((category, i2) => {
              const title = category.name || (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).categories[category.id];
              const selected = !this.props.unfocused && category.id == this.state.categoryId;
              if (selected)
                selectedCategoryIndex = i2;
              return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
                "aria-label": title,
                "aria-selected": selected || void 0,
                title,
                type: "button",
                class: "flex flex-grow flex-center",
                onMouseDown: (e2) => e2.preventDefault(),
                onClick: () => {
                  this.props.onClick({
                    category,
                    i: i2
                  });
                },
                children: this.renderIcon(category)
              });
            }),
            /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
              class: "bar",
              style: {
                width: `${100 / this.categories.length}%`,
                opacity: selectedCategoryIndex == null ? 0 : 1,
                transform: this.props.dir === "rtl" ? `scaleX(-1) translateX(${selectedCategoryIndex * 100}%)` : `translateX(${selectedCategoryIndex * 100}%)`
              }
            })
          ]
        })
      });
    }
    constructor() {
      super();
      this.categories = (0, $7adb23b0109cc36a$export$2d0294657ab35f1b).categories.filter((category) => {
        return !category.target;
      });
      this.state = {
        categoryId: this.categories[0].id
      };
    }
  };
  var $e0d4dda61265ff1e$export$2e2bcd8739ae039 = class extends (0, $dc040a17866866fa$export$221d75b3f55bb0bd) {
    shouldComponentUpdate(nextProps) {
      for (let k2 in nextProps) {
        if (k2 == "children")
          continue;
        if (nextProps[k2] != this.props[k2])
          return true;
      }
      return false;
    }
    render() {
      return this.props.children;
    }
  };
  var $89bd6bb200cc8fef$var$Performance = {
    rowsPerRender: 10
  };
  var $89bd6bb200cc8fef$export$2e2bcd8739ae039 = class extends (0, $fb96b826c0c5f37a$export$16fa2f45be04daa8) {
    getInitialState(props = this.props) {
      return {
        skin: (0, $f72b75cf796873c7$export$2e2bcd8739ae039).get("skin") || props.skin,
        theme: this.initTheme(props.theme)
      };
    }
    componentWillMount() {
      this.dir = (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).rtl ? "rtl" : "ltr";
      this.refs = {
        menu: (0, $fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
        navigation: (0, $fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
        scroll: (0, $fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
        search: (0, $fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
        searchInput: (0, $fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
        skinToneButton: (0, $fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
        skinToneRadio: (0, $fb96b826c0c5f37a$export$7d1e3a5e95ceca43)()
      };
      this.initGrid();
      if (this.props.stickySearch == false && this.props.searchPosition == "sticky") {
        console.warn("[EmojiMart] Deprecation warning: `stickySearch` has been renamed `searchPosition`.");
        this.props.searchPosition = "static";
      }
    }
    componentDidMount() {
      this.register();
      this.shadowRoot = this.base.parentNode;
      if (this.props.autoFocus) {
        const { searchInput } = this.refs;
        if (searchInput.current)
          searchInput.current.focus();
      }
    }
    componentWillReceiveProps(nextProps) {
      this.nextState || (this.nextState = {});
      for (const k1 in nextProps)
        this.nextState[k1] = nextProps[k1];
      clearTimeout(this.nextStateTimer);
      this.nextStateTimer = setTimeout(() => {
        let requiresGridReset = false;
        for (const k2 in this.nextState) {
          this.props[k2] = this.nextState[k2];
          if (k2 === "custom" || k2 === "categories")
            requiresGridReset = true;
        }
        delete this.nextState;
        const nextState = this.getInitialState();
        if (requiresGridReset)
          return this.reset(nextState);
        this.setState(nextState);
      });
    }
    componentWillUnmount() {
      this.unregister();
    }
    async reset(nextState = {}) {
      await (0, $7adb23b0109cc36a$export$2cd8252107eb640b)(this.props);
      this.initGrid();
      this.unobserve();
      this.setState(nextState, () => {
        this.observeCategories();
        this.observeRows();
      });
    }
    register() {
      document.addEventListener("click", this.handleClickOutside);
      this.observe();
    }
    unregister() {
      document.removeEventListener("click", this.handleClickOutside);
      this.unobserve();
    }
    observe() {
      this.observeCategories();
      this.observeRows();
    }
    unobserve({ except = [] } = {}) {
      if (!Array.isArray(except))
        except = [
          except
        ];
      for (const observer of this.observers) {
        if (except.includes(observer))
          continue;
        observer.disconnect();
      }
      this.observers = [].concat(except);
    }
    initGrid() {
      const { categories } = (0, $7adb23b0109cc36a$export$2d0294657ab35f1b);
      this.refs.categories = /* @__PURE__ */ new Map();
      const navKey = (0, $7adb23b0109cc36a$export$2d0294657ab35f1b).categories.map((category) => category.id).join(",");
      if (this.navKey && this.navKey != navKey)
        this.refs.scroll.current && (this.refs.scroll.current.scrollTop = 0);
      this.navKey = navKey;
      this.grid = [];
      this.grid.setsize = 0;
      const addRow = (rows, category) => {
        const row = [];
        row.__categoryId = category.id;
        row.__index = rows.length;
        this.grid.push(row);
        const rowIndex = this.grid.length - 1;
        const rowRef = rowIndex % $89bd6bb200cc8fef$var$Performance.rowsPerRender ? {} : (0, $fb96b826c0c5f37a$export$7d1e3a5e95ceca43)();
        rowRef.index = rowIndex;
        rowRef.posinset = this.grid.setsize + 1;
        rows.push(rowRef);
        return row;
      };
      for (let category1 of categories) {
        const rows = [];
        let row = addRow(rows, category1);
        for (let emoji of category1.emojis) {
          if (row.length == this.getPerLine())
            row = addRow(rows, category1);
          this.grid.setsize += 1;
          row.push(emoji);
        }
        this.refs.categories.set(category1.id, {
          root: (0, $fb96b826c0c5f37a$export$7d1e3a5e95ceca43)(),
          rows
        });
      }
    }
    initTheme(theme) {
      if (theme != "auto")
        return theme;
      if (!this.darkMedia) {
        this.darkMedia = matchMedia("(prefers-color-scheme: dark)");
        if (this.darkMedia.media.match(/^not/))
          return "light";
        this.darkMedia.addListener(() => {
          if (this.props.theme != "auto")
            return;
          this.setState({
            theme: this.darkMedia.matches ? "dark" : "light"
          });
        });
      }
      return this.darkMedia.matches ? "dark" : "light";
    }
    initDynamicPerLine(props = this.props) {
      if (!props.dynamicWidth)
        return;
      const { element, emojiButtonSize } = props;
      const calculatePerLine = () => {
        const { width } = element.getBoundingClientRect();
        return Math.floor(width / emojiButtonSize);
      };
      const observer = new ResizeObserver(() => {
        this.unobserve({
          except: observer
        });
        this.setState({
          perLine: calculatePerLine()
        }, () => {
          this.initGrid();
          this.forceUpdate(() => {
            this.observeCategories();
            this.observeRows();
          });
        });
      });
      observer.observe(element);
      this.observers.push(observer);
      return calculatePerLine();
    }
    getPerLine() {
      return this.state.perLine || this.props.perLine;
    }
    getEmojiByPos([p1, p2]) {
      const grid = this.state.searchResults || this.grid;
      const emoji = grid[p1] && grid[p1][p2];
      if (!emoji)
        return;
      return (0, $c4d155af13ad4d4b$export$2e2bcd8739ae039).get(emoji);
    }
    observeCategories() {
      const navigation = this.refs.navigation.current;
      if (!navigation)
        return;
      const visibleCategories = /* @__PURE__ */ new Map();
      const setFocusedCategory = (categoryId) => {
        if (categoryId != navigation.state.categoryId)
          navigation.setState({
            categoryId
          });
      };
      const observerOptions = {
        root: this.refs.scroll.current,
        threshold: [
          0,
          1
        ]
      };
      const observer = new IntersectionObserver((entries) => {
        for (const entry of entries) {
          const id = entry.target.dataset.id;
          visibleCategories.set(id, entry.intersectionRatio);
        }
        const ratios = [
          ...visibleCategories
        ];
        for (const [id, ratio] of ratios)
          if (ratio) {
            setFocusedCategory(id);
            break;
          }
      }, observerOptions);
      for (const { root } of this.refs.categories.values())
        observer.observe(root.current);
      this.observers.push(observer);
    }
    observeRows() {
      const visibleRows = {
        ...this.state.visibleRows
      };
      const observer = new IntersectionObserver((entries) => {
        for (const entry of entries) {
          const index = parseInt(entry.target.dataset.index);
          if (entry.isIntersecting)
            visibleRows[index] = true;
          else
            delete visibleRows[index];
        }
        this.setState({
          visibleRows
        });
      }, {
        root: this.refs.scroll.current,
        rootMargin: `${this.props.emojiButtonSize * ($89bd6bb200cc8fef$var$Performance.rowsPerRender + 5)}px 0px ${this.props.emojiButtonSize * $89bd6bb200cc8fef$var$Performance.rowsPerRender}px`
      });
      for (const { rows } of this.refs.categories.values()) {
        for (const row of rows)
          if (row.current)
            observer.observe(row.current);
      }
      this.observers.push(observer);
    }
    preventDefault(e2) {
      e2.preventDefault();
    }
    unfocusSearch() {
      const input = this.refs.searchInput.current;
      if (!input)
        return;
      input.blur();
    }
    navigate({ e: e2, input, left, right, up, down }) {
      const grid = this.state.searchResults || this.grid;
      if (!grid.length)
        return;
      let [p1, p2] = this.state.pos;
      const pos = (() => {
        if (p1 == 0) {
          if (p2 == 0 && !e2.repeat && (left || up))
            return null;
        }
        if (p1 == -1) {
          if (!e2.repeat && (right || down) && input.selectionStart == input.value.length)
            return [
              0,
              0
            ];
          return null;
        }
        if (left || right) {
          let row = grid[p1];
          const increment = left ? -1 : 1;
          p2 += increment;
          if (!row[p2]) {
            p1 += increment;
            row = grid[p1];
            if (!row) {
              p1 = left ? 0 : grid.length - 1;
              p2 = left ? 0 : grid[p1].length - 1;
              return [
                p1,
                p2
              ];
            }
            p2 = left ? row.length - 1 : 0;
          }
          return [
            p1,
            p2
          ];
        }
        if (up || down) {
          p1 += up ? -1 : 1;
          const row = grid[p1];
          if (!row) {
            p1 = up ? 0 : grid.length - 1;
            p2 = up ? 0 : grid[p1].length - 1;
            return [
              p1,
              p2
            ];
          }
          if (!row[p2])
            p2 = row.length - 1;
          return [
            p1,
            p2
          ];
        }
      })();
      if (pos)
        e2.preventDefault();
      else {
        if (this.state.pos[0] > -1)
          this.setState({
            pos: [
              -1,
              -1
            ]
          });
        return;
      }
      this.setState({
        pos,
        keyboard: true
      }, () => {
        this.scrollTo({
          row: pos[0]
        });
      });
    }
    scrollTo({ categoryId, row }) {
      const grid = this.state.searchResults || this.grid;
      if (!grid.length)
        return;
      const scroll = this.refs.scroll.current;
      const scrollRect = scroll.getBoundingClientRect();
      let scrollTop = 0;
      if (row >= 0)
        categoryId = grid[row].__categoryId;
      if (categoryId) {
        const ref = this.refs[categoryId] || this.refs.categories.get(categoryId).root;
        const categoryRect = ref.current.getBoundingClientRect();
        scrollTop = categoryRect.top - (scrollRect.top - scroll.scrollTop) + 1;
      }
      if (row >= 0) {
        if (!row)
          scrollTop = 0;
        else {
          const rowIndex = grid[row].__index;
          const rowTop = scrollTop + rowIndex * this.props.emojiButtonSize;
          const rowBot = rowTop + this.props.emojiButtonSize + this.props.emojiButtonSize * 0.88;
          if (rowTop < scroll.scrollTop)
            scrollTop = rowTop;
          else if (rowBot > scroll.scrollTop + scrollRect.height)
            scrollTop = rowBot - scrollRect.height;
          else
            return;
        }
      }
      this.ignoreMouse();
      scroll.scrollTop = scrollTop;
    }
    ignoreMouse() {
      this.mouseIsIgnored = true;
      clearTimeout(this.ignoreMouseTimer);
      this.ignoreMouseTimer = setTimeout(() => {
        delete this.mouseIsIgnored;
      }, 100);
    }
    handleEmojiOver(pos) {
      if (this.mouseIsIgnored || this.state.showSkins)
        return;
      this.setState({
        pos: pos || [
          -1,
          -1
        ],
        keyboard: false
      });
    }
    handleEmojiClick({ e: e2, emoji, pos }) {
      if (!this.props.onEmojiSelect)
        return;
      if (!emoji && pos)
        emoji = this.getEmojiByPos(pos);
      if (emoji) {
        const emojiData = (0, $693b183b0a78708f$export$d10ac59fbe52a745)(emoji, {
          skinIndex: this.state.skin - 1
        });
        if (this.props.maxFrequentRows)
          (0, $b22cfd0a55410b4f$export$2e2bcd8739ae039).add(emojiData, this.props);
        this.props.onEmojiSelect(emojiData, e2);
      }
    }
    closeSkins() {
      if (!this.state.showSkins)
        return;
      this.setState({
        showSkins: null,
        tempSkin: null
      });
      this.base.removeEventListener("click", this.handleBaseClick);
      this.base.removeEventListener("keydown", this.handleBaseKeydown);
    }
    handleSkinMouseOver(tempSkin) {
      this.setState({
        tempSkin
      });
    }
    handleSkinClick(skin) {
      this.ignoreMouse();
      this.closeSkins();
      this.setState({
        skin,
        tempSkin: null
      });
      (0, $f72b75cf796873c7$export$2e2bcd8739ae039).set("skin", skin);
    }
    renderNav() {
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)((0, $ec8c39fdad15601a$export$2e2bcd8739ae039), {
        ref: this.refs.navigation,
        icons: this.props.icons,
        theme: this.state.theme,
        dir: this.dir,
        unfocused: !!this.state.searchResults,
        position: this.props.navPosition,
        onClick: this.handleCategoryClick
      }, this.navKey);
    }
    renderPreview() {
      const emoji = this.getEmojiByPos(this.state.pos);
      const noSearchResults = this.state.searchResults && !this.state.searchResults.length;
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
        id: "preview",
        class: "flex flex-middle",
        dir: this.dir,
        "data-position": this.props.previewPosition,
        children: [
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            class: "flex flex-middle flex-grow",
            children: [
              /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                class: "flex flex-auto flex-middle flex-center",
                style: {
                  height: this.props.emojiButtonSize,
                  fontSize: this.props.emojiButtonSize
                },
                children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)((0, $254755d3f438722f$export$2e2bcd8739ae039), {
                  emoji,
                  id: noSearchResults ? this.props.noResultsEmoji || "cry" : this.props.previewEmoji || (this.props.previewPosition == "top" ? "point_down" : "point_up"),
                  set: this.props.set,
                  size: this.props.emojiButtonSize,
                  skin: this.state.tempSkin || this.state.skin,
                  spritesheet: true,
                  getSpritesheetURL: this.props.getSpritesheetURL
                })
              }),
              /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                class: `margin-${this.dir[0]}`,
                children: emoji || noSearchResults ? /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                  class: `padding-${this.dir[2]} align-${this.dir[0]}`,
                  children: [
                    /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                      class: "preview-title ellipsis",
                      children: emoji ? emoji.name : (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).search_no_results_1
                    }),
                    /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                      class: "preview-subtitle ellipsis color-c",
                      children: emoji ? emoji.skins[0].shortcodes : (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).search_no_results_2
                    })
                  ]
                }) : /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                  class: "preview-placeholder color-c",
                  children: (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).pick
                })
              })
            ]
          }),
          !emoji && this.props.skinTonePosition == "preview" && this.renderSkinToneButton()
        ]
      });
    }
    renderEmojiButton(emoji, { pos, posinset, grid }) {
      const size = this.props.emojiButtonSize;
      const skin = this.state.tempSkin || this.state.skin;
      const emojiSkin = emoji.skins[skin - 1] || emoji.skins[0];
      const native = emojiSkin.native;
      const selected = (0, $693b183b0a78708f$export$9cb4719e2e525b7a)(this.state.pos, pos);
      const key = pos.concat(emoji.id).join("");
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)((0, $e0d4dda61265ff1e$export$2e2bcd8739ae039), {
        selected,
        skin,
        size,
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
          "aria-label": native,
          "aria-selected": selected || void 0,
          "aria-posinset": posinset,
          "aria-setsize": grid.setsize,
          "data-keyboard": this.state.keyboard,
          title: this.props.previewPosition == "none" ? emoji.name : void 0,
          type: "button",
          class: "flex flex-center flex-middle",
          tabindex: "-1",
          onClick: (e2) => this.handleEmojiClick({
            e: e2,
            emoji
          }),
          onMouseEnter: () => this.handleEmojiOver(pos),
          onMouseLeave: () => this.handleEmojiOver(),
          style: {
            width: this.props.emojiButtonSize,
            height: this.props.emojiButtonSize,
            fontSize: this.props.emojiSize,
            lineHeight: 0
          },
          children: [
            /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
              "aria-hidden": "true",
              class: "background",
              style: {
                borderRadius: this.props.emojiButtonRadius,
                backgroundColor: this.props.emojiButtonColors ? this.props.emojiButtonColors[(posinset - 1) % this.props.emojiButtonColors.length] : void 0
              }
            }),
            /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)((0, $254755d3f438722f$export$2e2bcd8739ae039), {
              emoji,
              set: this.props.set,
              size: this.props.emojiSize,
              skin,
              spritesheet: true,
              getSpritesheetURL: this.props.getSpritesheetURL
            })
          ]
        })
      }, key);
    }
    renderSearch() {
      const renderSkinTone = this.props.previewPosition == "none" || this.props.skinTonePosition == "search";
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
        children: [
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            class: "spacer"
          }),
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            class: "flex flex-middle",
            children: [
              /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                class: "search relative flex-grow",
                children: [
                  /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("input", {
                    type: "search",
                    ref: this.refs.searchInput,
                    placeholder: (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).search,
                    onClick: this.handleSearchClick,
                    onInput: this.handleSearchInput,
                    onKeyDown: this.handleSearchKeyDown,
                    autoComplete: "off"
                  }),
                  /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
                    class: "icon loupe flex",
                    children: (0, $fcccfb36ed0cde68$export$2e2bcd8739ae039).search.loupe
                  }),
                  this.state.searchResults && /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
                    title: "Clear",
                    "aria-label": "Clear",
                    type: "button",
                    class: "icon delete flex",
                    onClick: this.clearSearch,
                    onMouseDown: this.preventDefault,
                    children: (0, $fcccfb36ed0cde68$export$2e2bcd8739ae039).search.delete
                  })
                ]
              }),
              renderSkinTone && this.renderSkinToneButton()
            ]
          })
        ]
      });
    }
    renderSearchResults() {
      const { searchResults } = this.state;
      if (!searchResults)
        return null;
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
        class: "category",
        ref: this.refs.search,
        children: [
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            class: `sticky padding-small align-${this.dir[0]}`,
            children: (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).categories.search
          }),
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            children: !searchResults.length ? /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
              class: `padding-small align-${this.dir[0]}`,
              children: this.props.onAddCustomEmoji && /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("a", {
                onClick: this.props.onAddCustomEmoji,
                children: (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).add_custom
              })
            }) : searchResults.map((row, i2) => {
              return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                class: "flex",
                children: row.map((emoji, ii2) => {
                  return this.renderEmojiButton(emoji, {
                    pos: [
                      i2,
                      ii2
                    ],
                    posinset: i2 * this.props.perLine + ii2 + 1,
                    grid: searchResults
                  });
                })
              });
            })
          })
        ]
      });
    }
    renderCategories() {
      const { categories } = (0, $7adb23b0109cc36a$export$2d0294657ab35f1b);
      const hidden = !!this.state.searchResults;
      const perLine = this.getPerLine();
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
        style: {
          visibility: hidden ? "hidden" : void 0,
          display: hidden ? "none" : void 0,
          height: "100%"
        },
        children: categories.map((category) => {
          const { root, rows } = this.refs.categories.get(category.id);
          return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            "data-id": category.target ? category.target.id : category.id,
            class: "category",
            ref: root,
            children: [
              /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                class: `sticky padding-small align-${this.dir[0]}`,
                children: category.name || (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).categories[category.id]
              }),
              /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                class: "relative",
                style: {
                  height: rows.length * this.props.emojiButtonSize
                },
                children: rows.map((row, i2) => {
                  const targetRow = row.index - row.index % $89bd6bb200cc8fef$var$Performance.rowsPerRender;
                  const visible = this.state.visibleRows[targetRow];
                  const ref = "current" in row ? row : void 0;
                  if (!visible && !ref)
                    return null;
                  const start2 = i2 * perLine;
                  const end = start2 + perLine;
                  const emojiIds = category.emojis.slice(start2, end);
                  if (emojiIds.length < perLine)
                    emojiIds.push(...new Array(perLine - emojiIds.length));
                  return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                    "data-index": row.index,
                    ref,
                    class: "flex row",
                    style: {
                      top: i2 * this.props.emojiButtonSize
                    },
                    children: visible && emojiIds.map((emojiId, ii2) => {
                      if (!emojiId)
                        return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
                          style: {
                            width: this.props.emojiButtonSize,
                            height: this.props.emojiButtonSize
                          }
                        });
                      const emoji = (0, $c4d155af13ad4d4b$export$2e2bcd8739ae039).get(emojiId);
                      return this.renderEmojiButton(emoji, {
                        pos: [
                          row.index,
                          ii2
                        ],
                        posinset: row.posinset + ii2,
                        grid: this.grid
                      });
                    })
                  }, row.index);
                })
              })
            ]
          });
        })
      });
    }
    renderSkinToneButton() {
      if (this.props.skinTonePosition == "none")
        return null;
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
        class: "flex flex-auto flex-center flex-middle",
        style: {
          position: "relative",
          width: this.props.emojiButtonSize,
          height: this.props.emojiButtonSize
        },
        children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
          type: "button",
          ref: this.refs.skinToneButton,
          class: "skin-tone-button flex flex-auto flex-center flex-middle",
          "aria-selected": this.state.showSkins ? "" : void 0,
          "aria-label": (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).skins.choose,
          title: (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).skins.choose,
          onClick: this.openSkins,
          style: {
            width: this.props.emojiSize,
            height: this.props.emojiSize
          },
          children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
            class: `skin-tone skin-tone-${this.state.skin}`
          })
        })
      });
    }
    renderLiveRegion() {
      const emoji = this.getEmojiByPos(this.state.pos);
      const contents = emoji ? emoji.name : "";
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
        "aria-live": "polite",
        class: "sr-only",
        children: contents
      });
    }
    renderSkins() {
      const skinToneButton = this.refs.skinToneButton.current;
      const skinToneButtonRect = skinToneButton.getBoundingClientRect();
      const baseRect = this.base.getBoundingClientRect();
      const position = {};
      if (this.dir == "ltr")
        position.right = baseRect.right - skinToneButtonRect.right - 3;
      else
        position.left = skinToneButtonRect.left - baseRect.left - 3;
      if (this.props.previewPosition == "bottom" && this.props.skinTonePosition == "preview")
        position.bottom = baseRect.bottom - skinToneButtonRect.top + 6;
      else {
        position.top = skinToneButtonRect.bottom - baseRect.top + 3;
        position.bottom = "auto";
      }
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
        ref: this.refs.menu,
        role: "radiogroup",
        dir: this.dir,
        "aria-label": (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).skins.choose,
        class: "menu hidden",
        "data-position": position.top ? "top" : "bottom",
        style: position,
        children: [
          ...Array(6).keys()
        ].map((i2) => {
          const skin = i2 + 1;
          const checked = this.state.skin == skin;
          return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            children: [
              /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("input", {
                type: "radio",
                name: "skin-tone",
                value: skin,
                "aria-label": (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).skins[skin],
                ref: checked ? this.refs.skinToneRadio : null,
                defaultChecked: checked,
                onChange: () => this.handleSkinMouseOver(skin),
                onKeyDown: (e2) => {
                  if (e2.code == "Enter" || e2.code == "Space" || e2.code == "Tab") {
                    e2.preventDefault();
                    this.handleSkinClick(skin);
                  }
                }
              }),
              /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("button", {
                "aria-hidden": "true",
                tabindex: "-1",
                onClick: () => this.handleSkinClick(skin),
                onMouseEnter: () => this.handleSkinMouseOver(skin),
                onMouseLeave: () => this.handleSkinMouseOver(),
                class: "option flex flex-grow flex-middle",
                children: [
                  /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
                    class: `skin-tone skin-tone-${skin}`
                  }),
                  /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("span", {
                    class: "margin-small-lr",
                    children: (0, $7adb23b0109cc36a$export$dbe3113d60765c1a).skins[skin]
                  })
                ]
              })
            ]
          });
        })
      });
    }
    render() {
      const lineWidth = this.props.perLine * this.props.emojiButtonSize;
      return /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("section", {
        id: "root",
        class: "flex flex-column",
        dir: this.dir,
        style: {
          width: this.props.dynamicWidth ? "100%" : `calc(${lineWidth}px + (var(--padding) + var(--sidebar-width)))`
        },
        "data-emoji-set": this.props.set,
        "data-theme": this.state.theme,
        "data-menu": this.state.showSkins ? "" : void 0,
        children: [
          this.props.previewPosition == "top" && this.renderPreview(),
          this.props.navPosition == "top" && this.renderNav(),
          this.props.searchPosition == "sticky" && /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            class: "padding-lr",
            children: this.renderSearch()
          }),
          /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
            ref: this.refs.scroll,
            class: "scroll flex-grow padding-lr",
            children: /* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)("div", {
              style: {
                width: this.props.dynamicWidth ? "100%" : lineWidth,
                height: "100%"
              },
              children: [
                this.props.searchPosition == "static" && this.renderSearch(),
                this.renderSearchResults(),
                this.renderCategories()
              ]
            })
          }),
          this.props.navPosition == "bottom" && this.renderNav(),
          this.props.previewPosition == "bottom" && this.renderPreview(),
          this.state.showSkins && this.renderSkins(),
          this.renderLiveRegion()
        ]
      });
    }
    constructor(props) {
      super();
      (0, $c770c458706daa72$export$2e2bcd8739ae039)(this, "handleClickOutside", (e2) => {
        const { element } = this.props;
        if (e2.target != element) {
          if (this.state.showSkins)
            this.closeSkins();
          if (this.props.onClickOutside)
            this.props.onClickOutside(e2);
        }
      });
      (0, $c770c458706daa72$export$2e2bcd8739ae039)(this, "handleBaseClick", (e2) => {
        if (!this.state.showSkins)
          return;
        if (!e2.target.closest(".menu")) {
          e2.preventDefault();
          e2.stopImmediatePropagation();
          this.closeSkins();
        }
      });
      (0, $c770c458706daa72$export$2e2bcd8739ae039)(this, "handleBaseKeydown", (e2) => {
        if (!this.state.showSkins)
          return;
        if (e2.key == "Escape") {
          e2.preventDefault();
          e2.stopImmediatePropagation();
          this.closeSkins();
        }
      });
      (0, $c770c458706daa72$export$2e2bcd8739ae039)(this, "handleSearchClick", () => {
        const emoji = this.getEmojiByPos(this.state.pos);
        if (!emoji)
          return;
        this.setState({
          pos: [
            -1,
            -1
          ]
        });
      });
      (0, $c770c458706daa72$export$2e2bcd8739ae039)(this, "handleSearchInput", async () => {
        const input = this.refs.searchInput.current;
        if (!input)
          return;
        const { value } = input;
        const searchResults = await (0, $c4d155af13ad4d4b$export$2e2bcd8739ae039).search(value);
        const afterRender = () => {
          if (!this.refs.scroll.current)
            return;
          this.refs.scroll.current.scrollTop = 0;
        };
        if (!searchResults)
          return this.setState({
            searchResults,
            pos: [
              -1,
              -1
            ]
          }, afterRender);
        const pos = input.selectionStart == input.value.length ? [
          0,
          0
        ] : [
          -1,
          -1
        ];
        const grid = [];
        grid.setsize = searchResults.length;
        let row = null;
        for (let emoji of searchResults) {
          if (!grid.length || row.length == this.getPerLine()) {
            row = [];
            row.__categoryId = "search";
            row.__index = grid.length;
            grid.push(row);
          }
          row.push(emoji);
        }
        this.ignoreMouse();
        this.setState({
          searchResults: grid,
          pos
        }, afterRender);
      });
      (0, $c770c458706daa72$export$2e2bcd8739ae039)(this, "handleSearchKeyDown", (e2) => {
        const input = e2.currentTarget;
        e2.stopImmediatePropagation();
        switch (e2.key) {
          case "ArrowLeft":
            this.navigate({
              e: e2,
              input,
              left: true
            });
            break;
          case "ArrowRight":
            this.navigate({
              e: e2,
              input,
              right: true
            });
            break;
          case "ArrowUp":
            this.navigate({
              e: e2,
              input,
              up: true
            });
            break;
          case "ArrowDown":
            this.navigate({
              e: e2,
              input,
              down: true
            });
            break;
          case "Enter":
            e2.preventDefault();
            this.handleEmojiClick({
              e: e2,
              pos: this.state.pos
            });
            break;
          case "Escape":
            e2.preventDefault();
            if (this.state.searchResults)
              this.clearSearch();
            else
              this.unfocusSearch();
            break;
          default:
            break;
        }
      });
      (0, $c770c458706daa72$export$2e2bcd8739ae039)(this, "clearSearch", () => {
        const input = this.refs.searchInput.current;
        if (!input)
          return;
        input.value = "";
        input.focus();
        this.handleSearchInput();
      });
      (0, $c770c458706daa72$export$2e2bcd8739ae039)(this, "handleCategoryClick", ({ category, i: i2 }) => {
        this.scrollTo(i2 == 0 ? {
          row: -1
        } : {
          categoryId: category.id
        });
      });
      (0, $c770c458706daa72$export$2e2bcd8739ae039)(this, "openSkins", (e2) => {
        const { currentTarget } = e2;
        const rect = currentTarget.getBoundingClientRect();
        this.setState({
          showSkins: rect
        }, async () => {
          await (0, $693b183b0a78708f$export$e772c8ff12451969)(2);
          const menu = this.refs.menu.current;
          if (!menu)
            return;
          menu.classList.remove("hidden");
          this.refs.skinToneRadio.current.focus();
          this.base.addEventListener("click", this.handleBaseClick, true);
          this.base.addEventListener("keydown", this.handleBaseKeydown, true);
        });
      });
      this.observers = [];
      this.state = {
        pos: [
          -1,
          -1
        ],
        perLine: this.initDynamicPerLine(props),
        visibleRows: {
          0: true
        },
        ...this.getInitialState(props)
      };
    }
  };
  var $efa000751917694d$export$2e2bcd8739ae039 = class extends (0, $26f27c338a96b1a6$export$2e2bcd8739ae039) {
    async connectedCallback() {
      const props = (0, $7adb23b0109cc36a$export$75fe5f91d452f94b)(this.props, (0, $b247ea80b67298d5$export$2e2bcd8739ae039), this);
      props.element = this;
      props.ref = (component) => {
        this.component = component;
      };
      await (0, $7adb23b0109cc36a$export$2cd8252107eb640b)(props);
      if (this.disconnected)
        return;
      (0, $fb96b826c0c5f37a$export$b3890eb0ae9dca99)(/* @__PURE__ */ (0, $bd9dd35321b03dd4$export$34b9dba7ce09269b)((0, $89bd6bb200cc8fef$export$2e2bcd8739ae039), {
        ...props
      }), this.shadowRoot);
    }
    constructor(props) {
      super(props, {
        styles: (0, /* @__PURE__ */ $parcel$interopDefault($329d53ba9fd7125f$exports))
      });
    }
  };
  (0, $c770c458706daa72$export$2e2bcd8739ae039)($efa000751917694d$export$2e2bcd8739ae039, "Props", (0, $b247ea80b67298d5$export$2e2bcd8739ae039));
  if (typeof customElements !== "undefined" && !customElements.get("em-emoji-picker"))
    customElements.define("em-emoji-picker", $efa000751917694d$export$2e2bcd8739ae039);
  var $329d53ba9fd7125f$exports = {};
  $329d53ba9fd7125f$exports = ':host {\n  width: min-content;\n  height: 435px;\n  min-height: 230px;\n  border-radius: var(--border-radius);\n  box-shadow: var(--shadow);\n  --border-radius: 10px;\n  --category-icon-size: 18px;\n  --font-family: -apple-system, BlinkMacSystemFont, "Helvetica Neue", sans-serif;\n  --font-size: 15px;\n  --preview-placeholder-size: 21px;\n  --preview-title-size: 1.1em;\n  --preview-subtitle-size: .9em;\n  --shadow-color: 0deg 0% 0%;\n  --shadow: .3px .5px 2.7px hsl(var(--shadow-color) / .14), .4px .8px 1px -3.2px hsl(var(--shadow-color) / .14), 1px 2px 2.5px -4.5px hsl(var(--shadow-color) / .14);\n  display: flex;\n}\n\n[data-theme="light"] {\n  --em-rgb-color: var(--rgb-color, 34, 36, 39);\n  --em-rgb-accent: var(--rgb-accent, 34, 102, 237);\n  --em-rgb-background: var(--rgb-background, 255, 255, 255);\n  --em-rgb-input: var(--rgb-input, 255, 255, 255);\n  --em-color-border: var(--color-border, rgba(0, 0, 0, .05));\n  --em-color-border-over: var(--color-border-over, rgba(0, 0, 0, .1));\n}\n\n[data-theme="dark"] {\n  --em-rgb-color: var(--rgb-color, 222, 222, 221);\n  --em-rgb-accent: var(--rgb-accent, 58, 130, 247);\n  --em-rgb-background: var(--rgb-background, 21, 22, 23);\n  --em-rgb-input: var(--rgb-input, 0, 0, 0);\n  --em-color-border: var(--color-border, rgba(255, 255, 255, .1));\n  --em-color-border-over: var(--color-border-over, rgba(255, 255, 255, .2));\n}\n\n#root {\n  --color-a: rgb(var(--em-rgb-color));\n  --color-b: rgba(var(--em-rgb-color), .65);\n  --color-c: rgba(var(--em-rgb-color), .45);\n  --padding: 12px;\n  --padding-small: calc(var(--padding) / 2);\n  --sidebar-width: 16px;\n  --duration: 225ms;\n  --duration-fast: 125ms;\n  --duration-instant: 50ms;\n  --easing: cubic-bezier(.4, 0, .2, 1);\n  width: 100%;\n  text-align: left;\n  border-radius: var(--border-radius);\n  background-color: rgb(var(--em-rgb-background));\n  position: relative;\n}\n\n@media (prefers-reduced-motion) {\n  #root {\n    --duration: 0;\n    --duration-fast: 0;\n    --duration-instant: 0;\n  }\n}\n\n#root[data-menu] button {\n  cursor: auto;\n}\n\n#root[data-menu] .menu button {\n  cursor: pointer;\n}\n\n:host, #root, input, button {\n  color: rgb(var(--em-rgb-color));\n  font-family: var(--font-family);\n  font-size: var(--font-size);\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  line-height: normal;\n}\n\n*, :before, :after {\n  box-sizing: border-box;\n  min-width: 0;\n  margin: 0;\n  padding: 0;\n}\n\n.relative {\n  position: relative;\n}\n\n.flex {\n  display: flex;\n}\n\n.flex-auto {\n  flex: none;\n}\n\n.flex-center {\n  justify-content: center;\n}\n\n.flex-column {\n  flex-direction: column;\n}\n\n.flex-grow {\n  flex: auto;\n}\n\n.flex-middle {\n  align-items: center;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.padding {\n  padding: var(--padding);\n}\n\n.padding-t {\n  padding-top: var(--padding);\n}\n\n.padding-lr {\n  padding-left: var(--padding);\n  padding-right: var(--padding);\n}\n\n.padding-r {\n  padding-right: var(--padding);\n}\n\n.padding-small {\n  padding: var(--padding-small);\n}\n\n.padding-small-b {\n  padding-bottom: var(--padding-small);\n}\n\n.padding-small-lr {\n  padding-left: var(--padding-small);\n  padding-right: var(--padding-small);\n}\n\n.margin {\n  margin: var(--padding);\n}\n\n.margin-r {\n  margin-right: var(--padding);\n}\n\n.margin-l {\n  margin-left: var(--padding);\n}\n\n.margin-small-l {\n  margin-left: var(--padding-small);\n}\n\n.margin-small-lr {\n  margin-left: var(--padding-small);\n  margin-right: var(--padding-small);\n}\n\n.align-l {\n  text-align: left;\n}\n\n.align-r {\n  text-align: right;\n}\n\n.color-a {\n  color: var(--color-a);\n}\n\n.color-b {\n  color: var(--color-b);\n}\n\n.color-c {\n  color: var(--color-c);\n}\n\n.ellipsis {\n  white-space: nowrap;\n  max-width: 100%;\n  width: auto;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n\n.sr-only {\n  width: 1px;\n  height: 1px;\n  position: absolute;\n  top: auto;\n  left: -10000px;\n  overflow: hidden;\n}\n\na {\n  cursor: pointer;\n  color: rgb(var(--em-rgb-accent));\n}\n\na:hover {\n  text-decoration: underline;\n}\n\n.spacer {\n  height: 10px;\n}\n\n[dir="rtl"] .scroll {\n  padding-left: 0;\n  padding-right: var(--padding);\n}\n\n.scroll {\n  padding-right: 0;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.scroll::-webkit-scrollbar {\n  width: var(--sidebar-width);\n  height: var(--sidebar-width);\n}\n\n.scroll::-webkit-scrollbar-track {\n  border: 0;\n}\n\n.scroll::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n  display: none;\n}\n\n.scroll::-webkit-scrollbar-corner {\n  background-color: rgba(0, 0, 0, 0);\n}\n\n.scroll::-webkit-scrollbar-thumb {\n  min-height: 20%;\n  min-height: 65px;\n  border: 4px solid rgb(var(--em-rgb-background));\n  border-radius: 8px;\n}\n\n.scroll::-webkit-scrollbar-thumb:hover {\n  background-color: var(--em-color-border-over) !important;\n}\n\n.scroll:hover::-webkit-scrollbar-thumb {\n  background-color: var(--em-color-border);\n}\n\n.sticky {\n  z-index: 1;\n  background-color: rgba(var(--em-rgb-background), .9);\n  -webkit-backdrop-filter: blur(4px);\n  backdrop-filter: blur(4px);\n  font-weight: 500;\n  position: sticky;\n  top: -1px;\n}\n\n[dir="rtl"] .search input[type="search"] {\n  padding: 10px 2.2em 10px 2em;\n}\n\n[dir="rtl"] .search .loupe {\n  left: auto;\n  right: .7em;\n}\n\n[dir="rtl"] .search .delete {\n  left: .7em;\n  right: auto;\n}\n\n.search {\n  z-index: 2;\n  position: relative;\n}\n\n.search input, .search button {\n  font-size: calc(var(--font-size)  - 1px);\n}\n\n.search input[type="search"] {\n  width: 100%;\n  background-color: var(--em-color-border);\n  transition-duration: var(--duration);\n  transition-property: background-color, box-shadow;\n  transition-timing-function: var(--easing);\n  border: 0;\n  border-radius: 10px;\n  outline: 0;\n  padding: 10px 2em 10px 2.2em;\n  display: block;\n}\n\n.search input[type="search"]::-ms-input-placeholder {\n  color: inherit;\n  opacity: .6;\n}\n\n.search input[type="search"]::placeholder {\n  color: inherit;\n  opacity: .6;\n}\n\n.search input[type="search"], .search input[type="search"]::-webkit-search-decoration, .search input[type="search"]::-webkit-search-cancel-button, .search input[type="search"]::-webkit-search-results-button, .search input[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance: none;\n  -ms-appearance: none;\n  appearance: none;\n}\n\n.search input[type="search"]:focus {\n  background-color: rgb(var(--em-rgb-input));\n  box-shadow: inset 0 0 0 1px rgb(var(--em-rgb-accent)), 0 1px 3px rgba(65, 69, 73, .2);\n}\n\n.search .icon {\n  z-index: 1;\n  color: rgba(var(--em-rgb-color), .7);\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n\n.search .loupe {\n  pointer-events: none;\n  left: .7em;\n}\n\n.search .delete {\n  right: .7em;\n}\n\nsvg {\n  fill: currentColor;\n  width: 1em;\n  height: 1em;\n}\n\nbutton {\n  -webkit-appearance: none;\n  -ms-appearance: none;\n  appearance: none;\n  cursor: pointer;\n  color: currentColor;\n  background-color: rgba(0, 0, 0, 0);\n  border: 0;\n}\n\n#nav {\n  z-index: 2;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  padding-right: var(--sidebar-width);\n  position: relative;\n}\n\n#nav button {\n  color: var(--color-b);\n  transition: color var(--duration) var(--easing);\n}\n\n#nav button:hover {\n  color: var(--color-a);\n}\n\n#nav svg, #nav img {\n  width: var(--category-icon-size);\n  height: var(--category-icon-size);\n}\n\n#nav[dir="rtl"] .bar {\n  left: auto;\n  right: 0;\n}\n\n#nav .bar {\n  width: 100%;\n  height: 3px;\n  background-color: rgb(var(--em-rgb-accent));\n  transition: transform var(--duration) var(--easing);\n  border-radius: 3px 3px 0 0;\n  position: absolute;\n  bottom: -12px;\n  left: 0;\n}\n\n#nav button[aria-selected] {\n  color: rgb(var(--em-rgb-accent));\n}\n\n#preview {\n  z-index: 2;\n  padding: calc(var(--padding)  + 4px) var(--padding);\n  padding-right: var(--sidebar-width);\n  position: relative;\n}\n\n#preview .preview-placeholder {\n  font-size: var(--preview-placeholder-size);\n}\n\n#preview .preview-title {\n  font-size: var(--preview-title-size);\n}\n\n#preview .preview-subtitle {\n  font-size: var(--preview-subtitle-size);\n}\n\n#nav:before, #preview:before {\n  content: "";\n  height: 2px;\n  position: absolute;\n  left: 0;\n  right: 0;\n}\n\n#nav[data-position="top"]:before, #preview[data-position="top"]:before {\n  background: linear-gradient(to bottom, var(--em-color-border), transparent);\n  top: 100%;\n}\n\n#nav[data-position="bottom"]:before, #preview[data-position="bottom"]:before {\n  background: linear-gradient(to top, var(--em-color-border), transparent);\n  bottom: 100%;\n}\n\n.category:last-child {\n  min-height: calc(100% + 1px);\n}\n\n.category button {\n  font-family: -apple-system, BlinkMacSystemFont, Helvetica Neue, sans-serif;\n  position: relative;\n}\n\n.category button > * {\n  position: relative;\n}\n\n.category button .background {\n  opacity: 0;\n  background-color: var(--em-color-border);\n  transition: opacity var(--duration-fast) var(--easing) var(--duration-instant);\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n}\n\n.category button:hover .background {\n  transition-duration: var(--duration-instant);\n  transition-delay: 0s;\n}\n\n.category button[aria-selected] .background {\n  opacity: 1;\n}\n\n.category button[data-keyboard] .background {\n  transition: none;\n}\n\n.row {\n  width: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n}\n\n.skin-tone-button {\n  border: 1px solid rgba(0, 0, 0, 0);\n  border-radius: 100%;\n}\n\n.skin-tone-button:hover {\n  border-color: var(--em-color-border);\n}\n\n.skin-tone-button:active .skin-tone {\n  transform: scale(.85) !important;\n}\n\n.skin-tone-button .skin-tone {\n  transition: transform var(--duration) var(--easing);\n}\n\n.skin-tone-button[aria-selected] {\n  background-color: var(--em-color-border);\n  border-top-color: rgba(0, 0, 0, .05);\n  border-bottom-color: rgba(0, 0, 0, 0);\n  border-left-width: 0;\n  border-right-width: 0;\n}\n\n.skin-tone-button[aria-selected] .skin-tone {\n  transform: scale(.9);\n}\n\n.menu {\n  z-index: 2;\n  white-space: nowrap;\n  border: 1px solid var(--em-color-border);\n  background-color: rgba(var(--em-rgb-background), .9);\n  -webkit-backdrop-filter: blur(4px);\n  backdrop-filter: blur(4px);\n  transition-property: opacity, transform;\n  transition-duration: var(--duration);\n  transition-timing-function: var(--easing);\n  border-radius: 10px;\n  padding: 4px;\n  position: absolute;\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, .05);\n}\n\n.menu.hidden {\n  opacity: 0;\n}\n\n.menu[data-position="bottom"] {\n  transform-origin: 100% 100%;\n}\n\n.menu[data-position="bottom"].hidden {\n  transform: scale(.9)rotate(-3deg)translateY(5%);\n}\n\n.menu[data-position="top"] {\n  transform-origin: 100% 0;\n}\n\n.menu[data-position="top"].hidden {\n  transform: scale(.9)rotate(3deg)translateY(-5%);\n}\n\n.menu input[type="radio"] {\n  clip: rect(0 0 0 0);\n  width: 1px;\n  height: 1px;\n  border: 0;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  overflow: hidden;\n}\n\n.menu input[type="radio"]:checked + .option {\n  box-shadow: 0 0 0 2px rgb(var(--em-rgb-accent));\n}\n\n.option {\n  width: 100%;\n  border-radius: 6px;\n  padding: 4px 6px;\n}\n\n.option:hover {\n  color: #fff;\n  background-color: rgb(var(--em-rgb-accent));\n}\n\n.skin-tone {\n  width: 16px;\n  height: 16px;\n  border-radius: 100%;\n  display: inline-block;\n  position: relative;\n  overflow: hidden;\n}\n\n.skin-tone:after {\n  content: "";\n  mix-blend-mode: overlay;\n  background: linear-gradient(rgba(255, 255, 255, .2), rgba(0, 0, 0, 0));\n  border: 1px solid rgba(0, 0, 0, .8);\n  border-radius: 100%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  box-shadow: inset 0 -2px 3px #000, inset 0 1px 2px #fff;\n}\n\n.skin-tone-1 {\n  background-color: #ffc93a;\n}\n\n.skin-tone-2 {\n  background-color: #ffdab7;\n}\n\n.skin-tone-3 {\n  background-color: #e7b98f;\n}\n\n.skin-tone-4 {\n  background-color: #c88c61;\n}\n\n.skin-tone-5 {\n  background-color: #a46134;\n}\n\n.skin-tone-6 {\n  background-color: #5d4437;\n}\n\n[data-index] {\n  justify-content: space-between;\n}\n\n[data-emoji-set="twitter"] .skin-tone:after {\n  box-shadow: none;\n  border-color: rgba(0, 0, 0, .5);\n}\n\n[data-emoji-set="twitter"] .skin-tone-1 {\n  background-color: #fade72;\n}\n\n[data-emoji-set="twitter"] .skin-tone-2 {\n  background-color: #f3dfd0;\n}\n\n[data-emoji-set="twitter"] .skin-tone-3 {\n  background-color: #eed3a8;\n}\n\n[data-emoji-set="twitter"] .skin-tone-4 {\n  background-color: #cfad8d;\n}\n\n[data-emoji-set="twitter"] .skin-tone-5 {\n  background-color: #a8805d;\n}\n\n[data-emoji-set="twitter"] .skin-tone-6 {\n  background-color: #765542;\n}\n\n[data-emoji-set="google"] .skin-tone:after {\n  box-shadow: inset 0 0 2px 2px rgba(0, 0, 0, .4);\n}\n\n[data-emoji-set="google"] .skin-tone-1 {\n  background-color: #f5c748;\n}\n\n[data-emoji-set="google"] .skin-tone-2 {\n  background-color: #f1d5aa;\n}\n\n[data-emoji-set="google"] .skin-tone-3 {\n  background-color: #d4b48d;\n}\n\n[data-emoji-set="google"] .skin-tone-4 {\n  background-color: #aa876b;\n}\n\n[data-emoji-set="google"] .skin-tone-5 {\n  background-color: #916544;\n}\n\n[data-emoji-set="google"] .skin-tone-6 {\n  background-color: #61493f;\n}\n\n[data-emoji-set="facebook"] .skin-tone:after {\n  border-color: rgba(0, 0, 0, .4);\n  box-shadow: inset 0 -2px 3px #000, inset 0 1px 4px #fff;\n}\n\n[data-emoji-set="facebook"] .skin-tone-1 {\n  background-color: #f5c748;\n}\n\n[data-emoji-set="facebook"] .skin-tone-2 {\n  background-color: #f1d5aa;\n}\n\n[data-emoji-set="facebook"] .skin-tone-3 {\n  background-color: #d4b48d;\n}\n\n[data-emoji-set="facebook"] .skin-tone-4 {\n  background-color: #aa876b;\n}\n\n[data-emoji-set="facebook"] .skin-tone-5 {\n  background-color: #916544;\n}\n\n[data-emoji-set="facebook"] .skin-tone-6 {\n  background-color: #61493f;\n}\n\n';

  // app/javascript/controllers/emoji_picker_controller.js
  var emoji_picker_controller_default = class extends Controller {
    static targets = ["trixEditor", "pickerContainer"];
    connect() {
      const trigger = document.querySelector(".trix-button");
      const pickerOptions = {
        theme: "dark",
        previewPosition: "none",
        onEmojiSelect: (emoji) => {
          this.trixEditorTarget.editor.insertHTML(emoji.native);
          this.trixEditorTarget.editor.expandSelectionInDirection("forward");
          picker.remove();
        },
        onClickOutside: () => {
          picker.remove();
        },
        data: () => fetch("https://cdn.jsdelivr.net/npm/@emoji-mart/data").then((res) => res.json())
      };
      const picker = new $efa000751917694d$export$2e2bcd8739ae039(pickerOptions);
      trigger.addEventListener("click", (e2) => {
        this.pickerContainerTarget.appendChild(picker);
      });
    }
  };

  // app/javascript/controllers/hello_controller.js
  var hello_controller_default = class extends Controller {
    connect() {
      this.element.textContent = "Hello World!";
    }
  };

  // app/javascript/controllers/mentions_controller.js
  var import_tributejs = __toESM(require_tribute_min());

  // node_modules/trix/dist/trix.esm.min.js
  var t = "2.0.6";
  var e = "[data-trix-attachment]";
  var i = { preview: { presentation: "gallery", caption: { name: true, size: true } }, file: { caption: { size: true } } };
  var n = { default: { tagName: "div", parse: false }, quote: { tagName: "blockquote", nestable: true }, heading1: { tagName: "h1", terminal: true, breakOnReturn: true, group: false }, code: { tagName: "pre", terminal: true, text: { plaintext: true } }, bulletList: { tagName: "ul", parse: false }, bullet: { tagName: "li", listAttribute: "bulletList", group: false, nestable: true, test(t2) {
    return r2(t2.parentNode) === n[this.listAttribute].tagName;
  } }, numberList: { tagName: "ol", parse: false }, number: { tagName: "li", listAttribute: "numberList", group: false, nestable: true, test(t2) {
    return r2(t2.parentNode) === n[this.listAttribute].tagName;
  } }, attachmentGallery: { tagName: "div", exclusive: true, terminal: true, parse: false, group: false } };
  var r2 = (t2) => {
    var e2;
    return null == t2 || null === (e2 = t2.tagName) || void 0 === e2 ? void 0 : e2.toLowerCase();
  };
  var o = navigator.userAgent.match(/android\s([0-9]+.*Chrome)/i);
  var s = o && parseInt(o[1]);
  var a = { composesExistingText: /Android.*Chrome/.test(navigator.userAgent), recentAndroid: s && s > 12, samsungAndroid: s && navigator.userAgent.match(/Android.*SM-/), forcesObjectResizing: /Trident.*rv:11/.test(navigator.userAgent), supportsInputEvents: "undefined" != typeof InputEvent && ["data", "getTargetRanges", "inputType"].every((t2) => t2 in InputEvent.prototype) };
  var l = { attachFiles: "Attach Files", bold: "Bold", bullets: "Bullets", byte: "Byte", bytes: "Bytes", captionPlaceholder: "Add a caption\u2026", code: "Code", heading1: "Heading", indent: "Increase Level", italic: "Italic", link: "Link", numbers: "Numbers", outdent: "Decrease Level", quote: "Quote", redo: "Redo", remove: "Remove", strike: "Strikethrough", undo: "Undo", unlink: "Unlink", url: "URL", urlPlaceholder: "Enter a URL\u2026", GB: "GB", KB: "KB", MB: "MB", PB: "PB", TB: "TB" };
  var c = [l.bytes, l.KB, l.MB, l.GB, l.TB, l.PB];
  var u = { prefix: "IEC", precision: 2, formatter(t2) {
    switch (t2) {
      case 0:
        return "0 ".concat(l.bytes);
      case 1:
        return "1 ".concat(l.byte);
      default:
        let e2;
        "SI" === this.prefix ? e2 = 1e3 : "IEC" === this.prefix && (e2 = 1024);
        const i2 = Math.floor(Math.log(t2) / Math.log(e2)), n2 = (t2 / Math.pow(e2, i2)).toFixed(this.precision).replace(/0*$/, "").replace(/\.$/, "");
        return "".concat(n2, " ").concat(c[i2]);
    }
  } };
  var h = "\uFEFF";
  var d = "\xA0";
  var g = function(t2) {
    for (const e2 in t2) {
      const i2 = t2[e2];
      this[e2] = i2;
    }
    return this;
  };
  var m = document.documentElement;
  var p = m.matches;
  var f = function(t2) {
    let { onElement: e2, matchingSelector: i2, withCallback: n2, inPhase: r3, preventDefault: o2, times: s2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    const a2 = e2 || m, l2 = i2, c2 = "capturing" === r3, u2 = function(t3) {
      null != s2 && 0 == --s2 && u2.destroy();
      const e3 = A(t3.target, { matchingSelector: l2 });
      null != e3 && (null == n2 || n2.call(e3, t3, e3), o2 && t3.preventDefault());
    };
    return u2.destroy = () => a2.removeEventListener(t2, u2, c2), a2.addEventListener(t2, u2, c2), u2;
  };
  var b = function(t2) {
    let { onElement: e2, bubbles: i2, cancelable: n2, attributes: r3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    const o2 = null != e2 ? e2 : m;
    i2 = false !== i2, n2 = false !== n2;
    const s2 = document.createEvent("Events");
    return s2.initEvent(t2, i2, n2), null != r3 && g.call(s2, r3), o2.dispatchEvent(s2);
  };
  var v = function(t2, e2) {
    if (1 === (null == t2 ? void 0 : t2.nodeType))
      return p.call(t2, e2);
  };
  var A = function(t2) {
    let { matchingSelector: e2, untilNode: i2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    for (; t2 && t2.nodeType !== Node.ELEMENT_NODE; )
      t2 = t2.parentNode;
    if (null != t2) {
      if (null == e2)
        return t2;
      if (t2.closest && null == i2)
        return t2.closest(e2);
      for (; t2 && t2 !== i2; ) {
        if (v(t2, e2))
          return t2;
        t2 = t2.parentNode;
      }
    }
  };
  var x = (t2) => document.activeElement !== t2 && y(t2, document.activeElement);
  var y = function(t2, e2) {
    if (t2 && e2)
      for (; e2; ) {
        if (e2 === t2)
          return true;
        e2 = e2.parentNode;
      }
  };
  var C = function(t2) {
    var e2;
    if (null === (e2 = t2) || void 0 === e2 || !e2.parentNode)
      return;
    let i2 = 0;
    for (t2 = t2.previousSibling; t2; )
      i2++, t2 = t2.previousSibling;
    return i2;
  };
  var R = (t2) => {
    var e2;
    return null == t2 || null === (e2 = t2.parentNode) || void 0 === e2 ? void 0 : e2.removeChild(t2);
  };
  var S = function(t2) {
    let { onlyNodesOfType: e2, usingFilter: i2, expandEntityReferences: n2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    const r3 = (() => {
      switch (e2) {
        case "element":
          return NodeFilter.SHOW_ELEMENT;
        case "text":
          return NodeFilter.SHOW_TEXT;
        case "comment":
          return NodeFilter.SHOW_COMMENT;
        default:
          return NodeFilter.SHOW_ALL;
      }
    })();
    return document.createTreeWalker(t2, r3, null != i2 ? i2 : null, true === n2);
  };
  var E = (t2) => {
    var e2;
    return null == t2 || null === (e2 = t2.tagName) || void 0 === e2 ? void 0 : e2.toLowerCase();
  };
  var k = function(t2) {
    let e2, i2, n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    "object" == typeof t2 ? (n2 = t2, t2 = n2.tagName) : n2 = { attributes: n2 };
    const r3 = document.createElement(t2);
    if (null != n2.editable && (null == n2.attributes && (n2.attributes = {}), n2.attributes.contenteditable = n2.editable), n2.attributes)
      for (e2 in n2.attributes)
        i2 = n2.attributes[e2], r3.setAttribute(e2, i2);
    if (n2.style)
      for (e2 in n2.style)
        i2 = n2.style[e2], r3.style[e2] = i2;
    if (n2.data)
      for (e2 in n2.data)
        i2 = n2.data[e2], r3.dataset[e2] = i2;
    return n2.className && n2.className.split(" ").forEach((t3) => {
      r3.classList.add(t3);
    }), n2.textContent && (r3.textContent = n2.textContent), n2.childNodes && [].concat(n2.childNodes).forEach((t3) => {
      r3.appendChild(t3);
    }), r3;
  };
  var L;
  var D = function() {
    if (null != L)
      return L;
    L = [];
    for (const t2 in n) {
      const e2 = n[t2];
      e2.tagName && L.push(e2.tagName);
    }
    return L;
  };
  var w = (t2) => F(null == t2 ? void 0 : t2.firstChild);
  var T = function(t2) {
    let { strict: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { strict: true };
    return e2 ? F(t2) : F(t2) || !F(t2.firstChild) && function(t3) {
      return D().includes(E(t3)) && !D().includes(E(t3.firstChild));
    }(t2);
  };
  var F = (t2) => B(t2) && "block" === (null == t2 ? void 0 : t2.data);
  var B = (t2) => (null == t2 ? void 0 : t2.nodeType) === Node.COMMENT_NODE;
  var I = function(t2) {
    let { name: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (t2)
      return O(t2) ? t2.data === h ? !e2 || t2.parentNode.dataset.trixCursorTarget === e2 : void 0 : I(t2.firstChild);
  };
  var P = (t2) => v(t2, e);
  var N = (t2) => O(t2) && "" === (null == t2 ? void 0 : t2.data);
  var O = (t2) => (null == t2 ? void 0 : t2.nodeType) === Node.TEXT_NODE;
  var M = { level2Enabled: true, getLevel() {
    return this.level2Enabled && a.supportsInputEvents ? 2 : 0;
  }, pickFiles(t2) {
    const e2 = k("input", { type: "file", multiple: true, hidden: true, id: this.fileInputId });
    e2.addEventListener("change", () => {
      t2(e2.files), R(e2);
    }), R(document.getElementById(this.fileInputId)), document.body.appendChild(e2), e2.click();
  } };
  var j = { removeBlankTableCells: false, tableCellSeparator: " | ", tableRowSeparator: "\n" };
  var W = { bold: { tagName: "strong", inheritable: true, parser(t2) {
    const e2 = window.getComputedStyle(t2);
    return "bold" === e2.fontWeight || e2.fontWeight >= 600;
  } }, italic: { tagName: "em", inheritable: true, parser: (t2) => "italic" === window.getComputedStyle(t2).fontStyle }, href: { groupTagName: "a", parser(t2) {
    const i2 = "a:not(".concat(e, ")"), n2 = t2.closest(i2);
    if (n2)
      return n2.getAttribute("href");
  } }, strike: { tagName: "del", inheritable: true }, frozen: { style: { backgroundColor: "highlight" } } };
  var U = { getDefaultHTML: () => '<div class="trix-button-row">\n      <span class="trix-button-group trix-button-group--text-tools" data-trix-button-group="text-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-bold" data-trix-attribute="bold" data-trix-key="b" title="'.concat(l.bold, '" tabindex="-1">').concat(l.bold, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-italic" data-trix-attribute="italic" data-trix-key="i" title="').concat(l.italic, '" tabindex="-1">').concat(l.italic, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-strike" data-trix-attribute="strike" title="').concat(l.strike, '" tabindex="-1">').concat(l.strike, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-link" data-trix-attribute="href" data-trix-action="link" data-trix-key="k" title="').concat(l.link, '" tabindex="-1">').concat(l.link, '</button>\n      </span>\n\n      <span class="trix-button-group trix-button-group--block-tools" data-trix-button-group="block-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-heading-1" data-trix-attribute="heading1" title="').concat(l.heading1, '" tabindex="-1">').concat(l.heading1, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-quote" data-trix-attribute="quote" title="').concat(l.quote, '" tabindex="-1">').concat(l.quote, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-code" data-trix-attribute="code" title="').concat(l.code, '" tabindex="-1">').concat(l.code, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-bullet-list" data-trix-attribute="bullet" title="').concat(l.bullets, '" tabindex="-1">').concat(l.bullets, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-number-list" data-trix-attribute="number" title="').concat(l.numbers, '" tabindex="-1">').concat(l.numbers, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-decrease-nesting-level" data-trix-action="decreaseNestingLevel" title="').concat(l.outdent, '" tabindex="-1">').concat(l.outdent, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-increase-nesting-level" data-trix-action="increaseNestingLevel" title="').concat(l.indent, '" tabindex="-1">').concat(l.indent, '</button>\n      </span>\n\n      <span class="trix-button-group trix-button-group--file-tools" data-trix-button-group="file-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-attach" data-trix-action="attachFiles" title="').concat(l.attachFiles, '" tabindex="-1">').concat(l.attachFiles, '</button>\n      </span>\n\n      <span class="trix-button-group-spacer"></span>\n\n      <span class="trix-button-group trix-button-group--history-tools" data-trix-button-group="history-tools">\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-undo" data-trix-action="undo" data-trix-key="z" title="').concat(l.undo, '" tabindex="-1">').concat(l.undo, '</button>\n        <button type="button" class="trix-button trix-button--icon trix-button--icon-redo" data-trix-action="redo" data-trix-key="shift+z" title="').concat(l.redo, '" tabindex="-1">').concat(l.redo, '</button>\n      </span>\n    </div>\n\n    <div class="trix-dialogs" data-trix-dialogs>\n      <div class="trix-dialog trix-dialog--link" data-trix-dialog="href" data-trix-dialog-attribute="href">\n        <div class="trix-dialog__link-fields">\n          <input type="url" name="href" class="trix-input trix-input--dialog" placeholder="').concat(l.urlPlaceholder, '" aria-label="').concat(l.url, '" required data-trix-input>\n          <div class="trix-button-group">\n            <input type="button" class="trix-button trix-button--dialog" value="').concat(l.link, '" data-trix-method="setAttribute">\n            <input type="button" class="trix-button trix-button--dialog" value="').concat(l.unlink, '" data-trix-method="removeAttribute">\n          </div>\n        </div>\n      </div>\n    </div>') };
  var q = { interval: 5e3 };
  var V = Object.freeze({ __proto__: null, attachments: i, blockAttributes: n, browser: a, css: { attachment: "attachment", attachmentCaption: "attachment__caption", attachmentCaptionEditor: "attachment__caption-editor", attachmentMetadata: "attachment__metadata", attachmentMetadataContainer: "attachment__metadata-container", attachmentName: "attachment__name", attachmentProgress: "attachment__progress", attachmentSize: "attachment__size", attachmentToolbar: "attachment__toolbar", attachmentGallery: "attachment-gallery" }, fileSize: u, input: M, keyNames: { 8: "backspace", 9: "tab", 13: "return", 27: "escape", 37: "left", 39: "right", 46: "delete", 68: "d", 72: "h", 79: "o" }, lang: l, parser: j, textAttributes: W, toolbar: U, undo: q });
  var z = class {
    static proxyMethod(t2) {
      const { name: e2, toMethod: i2, toProperty: n2, optional: r3 } = _(t2);
      this.prototype[e2] = function() {
        let t3, o2;
        var s2, a2;
        i2 ? o2 = r3 ? null === (s2 = this[i2]) || void 0 === s2 ? void 0 : s2.call(this) : this[i2]() : n2 && (o2 = this[n2]);
        return r3 ? (t3 = null === (a2 = o2) || void 0 === a2 ? void 0 : a2[e2], t3 ? H.call(t3, o2, arguments) : void 0) : (t3 = o2[e2], H.call(t3, o2, arguments));
      };
    }
  };
  var _ = function(t2) {
    const e2 = t2.match(J);
    if (!e2)
      throw new Error("can't parse @proxyMethod expression: ".concat(t2));
    const i2 = { name: e2[4] };
    return null != e2[2] ? i2.toMethod = e2[1] : i2.toProperty = e2[1], null != e2[3] && (i2.optional = true), i2;
  };
  var { apply: H } = Function.prototype;
  var J = new RegExp("^(.+?)(\\(\\))?(\\?)?\\.(.+?)$");
  var K;
  var G;
  var $;
  var X = class extends z {
    static box() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
      return t2 instanceof this ? t2 : this.fromUCS2String(null == t2 ? void 0 : t2.toString());
    }
    static fromUCS2String(t2) {
      return new this(t2, tt(t2));
    }
    static fromCodepoints(t2) {
      return new this(et(t2), t2);
    }
    constructor(t2, e2) {
      super(...arguments), this.ucs2String = t2, this.codepoints = e2, this.length = this.codepoints.length, this.ucs2Length = this.ucs2String.length;
    }
    offsetToUCS2Offset(t2) {
      return et(this.codepoints.slice(0, Math.max(0, t2))).length;
    }
    offsetFromUCS2Offset(t2) {
      return tt(this.ucs2String.slice(0, Math.max(0, t2))).length;
    }
    slice() {
      return this.constructor.fromCodepoints(this.codepoints.slice(...arguments));
    }
    charAt(t2) {
      return this.slice(t2, t2 + 1);
    }
    isEqualTo(t2) {
      return this.constructor.box(t2).ucs2String === this.ucs2String;
    }
    toJSON() {
      return this.ucs2String;
    }
    getCacheKey() {
      return this.ucs2String;
    }
    toString() {
      return this.ucs2String;
    }
  };
  var Y = 1 === (null === (K = Array.from) || void 0 === K ? void 0 : K.call(Array, "\u{1F47C}").length);
  var Q = null != (null === (G = " ".codePointAt) || void 0 === G ? void 0 : G.call(" ", 0));
  var Z = " \u{1F47C}" === (null === ($ = String.fromCodePoint) || void 0 === $ ? void 0 : $.call(String, 32, 128124));
  var tt;
  var et;
  tt = Y && Q ? (t2) => Array.from(t2).map((t3) => t3.codePointAt(0)) : function(t2) {
    const e2 = [];
    let i2 = 0;
    const { length: n2 } = t2;
    for (; i2 < n2; ) {
      let r3 = t2.charCodeAt(i2++);
      if (55296 <= r3 && r3 <= 56319 && i2 < n2) {
        const e3 = t2.charCodeAt(i2++);
        56320 == (64512 & e3) ? r3 = ((1023 & r3) << 10) + (1023 & e3) + 65536 : i2--;
      }
      e2.push(r3);
    }
    return e2;
  }, et = Z ? (t2) => String.fromCodePoint(...Array.from(t2 || [])) : function(t2) {
    return (() => {
      const e2 = [];
      return Array.from(t2).forEach((t3) => {
        let i2 = "";
        t3 > 65535 && (t3 -= 65536, i2 += String.fromCharCode(t3 >>> 10 & 1023 | 55296), t3 = 56320 | 1023 & t3), e2.push(i2 + String.fromCharCode(t3));
      }), e2;
    })().join("");
  };
  var it = 0;
  var nt = class extends z {
    static fromJSONString(t2) {
      return this.fromJSON(JSON.parse(t2));
    }
    constructor() {
      super(...arguments), this.id = ++it;
    }
    hasSameConstructorAs(t2) {
      return this.constructor === (null == t2 ? void 0 : t2.constructor);
    }
    isEqualTo(t2) {
      return this === t2;
    }
    inspect() {
      const t2 = [], e2 = this.contentsForInspection() || {};
      for (const i2 in e2) {
        const n2 = e2[i2];
        t2.push("".concat(i2, "=").concat(n2));
      }
      return "#<".concat(this.constructor.name, ":").concat(this.id).concat(t2.length ? " ".concat(t2.join(", ")) : "", ">");
    }
    contentsForInspection() {
    }
    toJSONString() {
      return JSON.stringify(this);
    }
    toUTF16String() {
      return X.box(this);
    }
    getCacheKey() {
      return this.id.toString();
    }
  };
  var rt = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
    if (t2.length !== e2.length)
      return false;
    for (let i2 = 0; i2 < t2.length; i2++) {
      if (t2[i2] !== e2[i2])
        return false;
    }
    return true;
  };
  var ot = function(t2) {
    const e2 = t2.slice(0);
    for (var i2 = arguments.length, n2 = new Array(i2 > 1 ? i2 - 1 : 0), r3 = 1; r3 < i2; r3++)
      n2[r3 - 1] = arguments[r3];
    return e2.splice(...n2), e2;
  };
  var st = /[\u05BE\u05C0\u05C3\u05D0-\u05EA\u05F0-\u05F4\u061B\u061F\u0621-\u063A\u0640-\u064A\u066D\u0671-\u06B7\u06BA-\u06BE\u06C0-\u06CE\u06D0-\u06D5\u06E5\u06E6\u200F\u202B\u202E\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE72\uFE74\uFE76-\uFEFC]/;
  var at = function() {
    const t2 = k("input", { dir: "auto", name: "x", dirName: "x.dir" }), e2 = k("textarea", { dir: "auto", name: "y", dirName: "y.dir" }), i2 = k("form");
    i2.appendChild(t2), i2.appendChild(e2);
    const n2 = function() {
      try {
        return new FormData(i2).has(e2.dirName);
      } catch (t3) {
        return false;
      }
    }(), r3 = function() {
      try {
        return t2.matches(":dir(ltr),:dir(rtl)");
      } catch (t3) {
        return false;
      }
    }();
    return n2 ? function(t3) {
      return e2.value = t3, new FormData(i2).get(e2.dirName);
    } : r3 ? function(e3) {
      return t2.value = e3, t2.matches(":dir(rtl)") ? "rtl" : "ltr";
    } : function(t3) {
      const e3 = t3.trim().charAt(0);
      return st.test(e3) ? "rtl" : "ltr";
    };
  }();
  var lt = null;
  var ct = null;
  var ut = null;
  var ht = null;
  var dt = () => (lt || (lt = ft().concat(mt())), lt);
  var gt = (t2) => n[t2];
  var mt = () => (ct || (ct = Object.keys(n)), ct);
  var pt = (t2) => W[t2];
  var ft = () => (ut || (ut = Object.keys(W)), ut);
  var bt = function(t2, e2) {
    vt(t2).textContent = e2.replace(/%t/g, t2);
  };
  var vt = function(t2) {
    const e2 = document.createElement("style");
    e2.setAttribute("type", "text/css"), e2.setAttribute("data-tag-name", t2.toLowerCase());
    const i2 = At();
    return i2 && e2.setAttribute("nonce", i2), document.head.insertBefore(e2, document.head.firstChild), e2;
  };
  var At = function() {
    const t2 = xt("trix-csp-nonce") || xt("csp-nonce");
    if (t2)
      return t2.getAttribute("content");
  };
  var xt = (t2) => document.head.querySelector("meta[name=".concat(t2, "]"));
  var yt = { "application/x-trix-feature-detection": "test" };
  var Ct = function(t2) {
    const e2 = t2.getData("text/plain"), i2 = t2.getData("text/html");
    if (!e2 || !i2)
      return null == e2 ? void 0 : e2.length;
    {
      const { body: t3 } = new DOMParser().parseFromString(i2, "text/html");
      if (t3.textContent === e2)
        return !t3.querySelector("*");
    }
  };
  var Rt = /Mac|^iP/.test(navigator.platform) ? (t2) => t2.metaKey : (t2) => t2.ctrlKey;
  var St = (t2) => setTimeout(t2, 1);
  var Et = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
    const e2 = {};
    for (const i2 in t2) {
      const n2 = t2[i2];
      e2[i2] = n2;
    }
    return e2;
  };
  var kt = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    if (Object.keys(t2).length !== Object.keys(e2).length)
      return false;
    for (const i2 in t2) {
      if (t2[i2] !== e2[i2])
        return false;
    }
    return true;
  };
  var Lt = function(t2) {
    if (null != t2)
      return Array.isArray(t2) || (t2 = [t2, t2]), [Tt(t2[0]), Tt(null != t2[1] ? t2[1] : t2[0])];
  };
  var Dt = function(t2) {
    if (null == t2)
      return;
    const [e2, i2] = Lt(t2);
    return Ft(e2, i2);
  };
  var wt = function(t2, e2) {
    if (null == t2 || null == e2)
      return;
    const [i2, n2] = Lt(t2), [r3, o2] = Lt(e2);
    return Ft(i2, r3) && Ft(n2, o2);
  };
  var Tt = function(t2) {
    return "number" == typeof t2 ? t2 : Et(t2);
  };
  var Ft = function(t2, e2) {
    return "number" == typeof t2 ? t2 === e2 : kt(t2, e2);
  };
  var Bt = class extends z {
    constructor() {
      super(...arguments), this.update = this.update.bind(this), this.run = this.run.bind(this), this.selectionManagers = [];
    }
    start() {
      if (!this.started)
        return this.started = true, "onselectionchange" in document ? document.addEventListener("selectionchange", this.update, true) : this.run();
    }
    stop() {
      if (this.started)
        return this.started = false, document.removeEventListener("selectionchange", this.update, true);
    }
    registerSelectionManager(t2) {
      if (!this.selectionManagers.includes(t2))
        return this.selectionManagers.push(t2), this.start();
    }
    unregisterSelectionManager(t2) {
      if (this.selectionManagers = this.selectionManagers.filter((e2) => e2 !== t2), 0 === this.selectionManagers.length)
        return this.stop();
    }
    notifySelectionManagersOfSelectionChange() {
      return this.selectionManagers.map((t2) => t2.selectionDidChange());
    }
    update() {
      const t2 = Ot(), e2 = "Caret" === window.getSelection().type;
      if (!It(t2, this.domRange) || e2)
        return this.domRange = t2, this.notifySelectionManagersOfSelectionChange();
    }
    reset() {
      return this.domRange = null, this.update();
    }
    run() {
      if (this.started)
        return this.update(), requestAnimationFrame(this.run);
    }
  };
  var It = (t2, e2) => (null == t2 ? void 0 : t2.startContainer) === (null == e2 ? void 0 : e2.startContainer) && (null == t2 ? void 0 : t2.startOffset) === (null == e2 ? void 0 : e2.startOffset) && (null == t2 ? void 0 : t2.endContainer) === (null == e2 ? void 0 : e2.endContainer) && (null == t2 ? void 0 : t2.endOffset) === (null == e2 ? void 0 : e2.endOffset);
  var Pt = new Bt();
  var Nt = function() {
    const t2 = window.getSelection();
    if (t2.rangeCount > 0)
      return t2;
  };
  var Ot = function() {
    var t2;
    const e2 = null === (t2 = Nt()) || void 0 === t2 ? void 0 : t2.getRangeAt(0);
    if (e2 && !jt(e2))
      return e2;
  };
  var Mt = function(t2) {
    const e2 = window.getSelection();
    return e2.removeAllRanges(), e2.addRange(t2), Pt.update();
  };
  var jt = (t2) => Wt(t2.startContainer) || Wt(t2.endContainer);
  var Wt = (t2) => !Object.getPrototypeOf(t2);
  var Ut = (t2) => t2.replace(new RegExp("".concat(h), "g"), "").replace(new RegExp("".concat(d), "g"), " ");
  var qt = new RegExp("[^\\S".concat(d, "]"));
  var Vt = (t2) => t2.replace(new RegExp("".concat(qt.source), "g"), " ").replace(/\ {2,}/g, " ");
  var zt = function(t2, e2) {
    if (t2.isEqualTo(e2))
      return ["", ""];
    const i2 = _t(t2, e2), { length: n2 } = i2.utf16String;
    let r3;
    if (n2) {
      const { offset: o2 } = i2, s2 = t2.codepoints.slice(0, o2).concat(t2.codepoints.slice(o2 + n2));
      r3 = _t(e2, X.fromCodepoints(s2));
    } else
      r3 = _t(e2, t2);
    return [i2.utf16String.toString(), r3.utf16String.toString()];
  };
  var _t = function(t2, e2) {
    let i2 = 0, n2 = t2.length, r3 = e2.length;
    for (; i2 < n2 && t2.charAt(i2).isEqualTo(e2.charAt(i2)); )
      i2++;
    for (; n2 > i2 + 1 && t2.charAt(n2 - 1).isEqualTo(e2.charAt(r3 - 1)); )
      n2--, r3--;
    return { utf16String: t2.slice(i2, n2), offset: i2 };
  };
  var Ht = class _Ht extends nt {
    static fromCommonAttributesOfObjects() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      if (!t2.length)
        return new this();
      let e2 = $t(t2[0]), i2 = e2.getKeys();
      return t2.slice(1).forEach((t3) => {
        i2 = e2.getKeysCommonToHash($t(t3)), e2 = e2.slice(i2);
      }), e2;
    }
    static box(t2) {
      return $t(t2);
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      super(...arguments), this.values = Gt(t2);
    }
    add(t2, e2) {
      return this.merge(Jt(t2, e2));
    }
    remove(t2) {
      return new _Ht(Gt(this.values, t2));
    }
    get(t2) {
      return this.values[t2];
    }
    has(t2) {
      return t2 in this.values;
    }
    merge(t2) {
      return new _Ht(Kt(this.values, Xt(t2)));
    }
    slice(t2) {
      const e2 = {};
      return Array.from(t2).forEach((t3) => {
        this.has(t3) && (e2[t3] = this.values[t3]);
      }), new _Ht(e2);
    }
    getKeys() {
      return Object.keys(this.values);
    }
    getKeysCommonToHash(t2) {
      return t2 = $t(t2), this.getKeys().filter((e2) => this.values[e2] === t2.values[e2]);
    }
    isEqualTo(t2) {
      return rt(this.toArray(), $t(t2).toArray());
    }
    isEmpty() {
      return 0 === this.getKeys().length;
    }
    toArray() {
      if (!this.array) {
        const t2 = [];
        for (const e2 in this.values) {
          const i2 = this.values[e2];
          t2.push(t2.push(e2, i2));
        }
        this.array = t2.slice(0);
      }
      return this.array;
    }
    toObject() {
      return Gt(this.values);
    }
    toJSON() {
      return this.toObject();
    }
    contentsForInspection() {
      return { values: JSON.stringify(this.values) };
    }
  };
  var Jt = function(t2, e2) {
    const i2 = {};
    return i2[t2] = e2, i2;
  };
  var Kt = function(t2, e2) {
    const i2 = Gt(t2);
    for (const t3 in e2) {
      const n2 = e2[t3];
      i2[t3] = n2;
    }
    return i2;
  };
  var Gt = function(t2, e2) {
    const i2 = {};
    return Object.keys(t2).sort().forEach((n2) => {
      n2 !== e2 && (i2[n2] = t2[n2]);
    }), i2;
  };
  var $t = function(t2) {
    return t2 instanceof Ht ? t2 : new Ht(t2);
  };
  var Xt = function(t2) {
    return t2 instanceof Ht ? t2.values : t2;
  };
  var Yt = class {
    static groupObjects() {
      let t2, e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], { depth: i2, asTree: n2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      n2 && null == i2 && (i2 = 0);
      const r3 = [];
      return Array.from(e2).forEach((e3) => {
        var o2;
        if (t2) {
          var s2, a2, l2;
          if (null !== (s2 = e3.canBeGrouped) && void 0 !== s2 && s2.call(e3, i2) && null !== (a2 = (l2 = t2[t2.length - 1]).canBeGroupedWith) && void 0 !== a2 && a2.call(l2, e3, i2))
            return void t2.push(e3);
          r3.push(new this(t2, { depth: i2, asTree: n2 })), t2 = null;
        }
        null !== (o2 = e3.canBeGrouped) && void 0 !== o2 && o2.call(e3, i2) ? t2 = [e3] : r3.push(e3);
      }), t2 && r3.push(new this(t2, { depth: i2, asTree: n2 })), r3;
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], { depth: e2, asTree: i2 } = arguments.length > 1 ? arguments[1] : void 0;
      this.objects = t2, i2 && (this.depth = e2, this.objects = this.constructor.groupObjects(this.objects, { asTree: i2, depth: this.depth + 1 }));
    }
    getObjects() {
      return this.objects;
    }
    getDepth() {
      return this.depth;
    }
    getCacheKey() {
      const t2 = ["objectGroup"];
      return Array.from(this.getObjects()).forEach((e2) => {
        t2.push(e2.getCacheKey());
      }), t2.join("/");
    }
  };
  var Qt = class extends z {
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), this.objects = {}, Array.from(t2).forEach((t3) => {
        const e2 = JSON.stringify(t3);
        null == this.objects[e2] && (this.objects[e2] = t3);
      });
    }
    find(t2) {
      const e2 = JSON.stringify(t2);
      return this.objects[e2];
    }
  };
  var Zt = class {
    constructor(t2) {
      this.reset(t2);
    }
    add(t2) {
      const e2 = te(t2);
      this.elements[e2] = t2;
    }
    remove(t2) {
      const e2 = te(t2), i2 = this.elements[e2];
      if (i2)
        return delete this.elements[e2], i2;
    }
    reset() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      return this.elements = {}, Array.from(t2).forEach((t3) => {
        this.add(t3);
      }), t2;
    }
  };
  var te = (t2) => t2.dataset.trixStoreKey;
  var ee = class extends z {
    isPerforming() {
      return true === this.performing;
    }
    hasPerformed() {
      return true === this.performed;
    }
    hasSucceeded() {
      return this.performed && this.succeeded;
    }
    hasFailed() {
      return this.performed && !this.succeeded;
    }
    getPromise() {
      return this.promise || (this.promise = new Promise((t2, e2) => (this.performing = true, this.perform((i2, n2) => {
        this.succeeded = i2, this.performing = false, this.performed = true, this.succeeded ? t2(n2) : e2(n2);
      })))), this.promise;
    }
    perform(t2) {
      return t2(false);
    }
    release() {
      var t2, e2;
      null === (t2 = this.promise) || void 0 === t2 || null === (e2 = t2.cancel) || void 0 === e2 || e2.call(t2), this.promise = null, this.performing = null, this.performed = null, this.succeeded = null;
    }
  };
  ee.proxyMethod("getPromise().then"), ee.proxyMethod("getPromise().catch");
  var ie = class extends z {
    constructor(t2) {
      let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.object = t2, this.options = e2, this.childViews = [], this.rootView = this;
    }
    getNodes() {
      return this.nodes || (this.nodes = this.createNodes()), this.nodes.map((t2) => t2.cloneNode(true));
    }
    invalidate() {
      var t2;
      return this.nodes = null, this.childViews = [], null === (t2 = this.parentView) || void 0 === t2 ? void 0 : t2.invalidate();
    }
    invalidateViewForObject(t2) {
      var e2;
      return null === (e2 = this.findViewForObject(t2)) || void 0 === e2 ? void 0 : e2.invalidate();
    }
    findOrCreateCachedChildView(t2, e2, i2) {
      let n2 = this.getCachedViewForObject(e2);
      return n2 ? this.recordChildView(n2) : (n2 = this.createChildView(...arguments), this.cacheViewForObject(n2, e2)), n2;
    }
    createChildView(t2, e2) {
      let i2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
      e2 instanceof Yt && (i2.viewClass = t2, t2 = ne);
      const n2 = new t2(e2, i2);
      return this.recordChildView(n2);
    }
    recordChildView(t2) {
      return t2.parentView = this, t2.rootView = this.rootView, this.childViews.push(t2), t2;
    }
    getAllChildViews() {
      let t2 = [];
      return this.childViews.forEach((e2) => {
        t2.push(e2), t2 = t2.concat(e2.getAllChildViews());
      }), t2;
    }
    findElement() {
      return this.findElementForObject(this.object);
    }
    findElementForObject(t2) {
      const e2 = null == t2 ? void 0 : t2.id;
      if (e2)
        return this.rootView.element.querySelector("[data-trix-id='".concat(e2, "']"));
    }
    findViewForObject(t2) {
      for (const e2 of this.getAllChildViews())
        if (e2.object === t2)
          return e2;
    }
    getViewCache() {
      return this.rootView !== this ? this.rootView.getViewCache() : this.isViewCachingEnabled() ? (this.viewCache || (this.viewCache = {}), this.viewCache) : void 0;
    }
    isViewCachingEnabled() {
      return false !== this.shouldCacheViews;
    }
    enableViewCaching() {
      this.shouldCacheViews = true;
    }
    disableViewCaching() {
      this.shouldCacheViews = false;
    }
    getCachedViewForObject(t2) {
      var e2;
      return null === (e2 = this.getViewCache()) || void 0 === e2 ? void 0 : e2[t2.getCacheKey()];
    }
    cacheViewForObject(t2, e2) {
      const i2 = this.getViewCache();
      i2 && (i2[e2.getCacheKey()] = t2);
    }
    garbageCollectCachedViews() {
      const t2 = this.getViewCache();
      if (t2) {
        const e2 = this.getAllChildViews().concat(this).map((t3) => t3.object.getCacheKey());
        for (const i2 in t2)
          e2.includes(i2) || delete t2[i2];
      }
    }
  };
  var ne = class extends ie {
    constructor() {
      super(...arguments), this.objectGroup = this.object, this.viewClass = this.options.viewClass, delete this.options.viewClass;
    }
    getChildViews() {
      return this.childViews.length || Array.from(this.objectGroup.getObjects()).forEach((t2) => {
        this.findOrCreateCachedChildView(this.viewClass, t2, this.options);
      }), this.childViews;
    }
    createNodes() {
      const t2 = this.createContainerElement();
      return this.getChildViews().forEach((e2) => {
        Array.from(e2.getNodes()).forEach((e3) => {
          t2.appendChild(e3);
        });
      }), [t2];
    }
    createContainerElement() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.objectGroup.getDepth();
      return this.getChildViews()[0].createContainerElement(t2);
    }
  };
  var { css: re } = V;
  var oe = class extends ie {
    constructor() {
      super(...arguments), this.attachment = this.object, this.attachment.uploadProgressDelegate = this, this.attachmentPiece = this.options.piece;
    }
    createContentNodes() {
      return [];
    }
    createNodes() {
      let t2;
      const e2 = t2 = k({ tagName: "figure", className: this.getClassName(), data: this.getData(), editable: false }), i2 = this.getHref();
      return i2 && (t2 = k({ tagName: "a", editable: false, attributes: { href: i2, tabindex: -1 } }), e2.appendChild(t2)), this.attachment.hasContent() ? t2.innerHTML = this.attachment.getContent() : this.createContentNodes().forEach((e3) => {
        t2.appendChild(e3);
      }), t2.appendChild(this.createCaptionElement()), this.attachment.isPending() && (this.progressElement = k({ tagName: "progress", attributes: { class: re.attachmentProgress, value: this.attachment.getUploadProgress(), max: 100 }, data: { trixMutable: true, trixStoreKey: ["progressElement", this.attachment.id].join("/") } }), e2.appendChild(this.progressElement)), [se("left"), e2, se("right")];
    }
    createCaptionElement() {
      const t2 = k({ tagName: "figcaption", className: re.attachmentCaption }), e2 = this.attachmentPiece.getCaption();
      if (e2)
        t2.classList.add("".concat(re.attachmentCaption, "--edited")), t2.textContent = e2;
      else {
        let e3, i2;
        const n2 = this.getCaptionConfig();
        if (n2.name && (e3 = this.attachment.getFilename()), n2.size && (i2 = this.attachment.getFormattedFilesize()), e3) {
          const i3 = k({ tagName: "span", className: re.attachmentName, textContent: e3 });
          t2.appendChild(i3);
        }
        if (i2) {
          e3 && t2.appendChild(document.createTextNode(" "));
          const n3 = k({ tagName: "span", className: re.attachmentSize, textContent: i2 });
          t2.appendChild(n3);
        }
      }
      return t2;
    }
    getClassName() {
      const t2 = [re.attachment, "".concat(re.attachment, "--").concat(this.attachment.getType())], e2 = this.attachment.getExtension();
      return e2 && t2.push("".concat(re.attachment, "--").concat(e2)), t2.join(" ");
    }
    getData() {
      const t2 = { trixAttachment: JSON.stringify(this.attachment), trixContentType: this.attachment.getContentType(), trixId: this.attachment.id }, { attributes: e2 } = this.attachmentPiece;
      return e2.isEmpty() || (t2.trixAttributes = JSON.stringify(e2)), this.attachment.isPending() && (t2.trixSerialize = false), t2;
    }
    getHref() {
      if (!ae(this.attachment.getContent(), "a"))
        return this.attachment.getHref();
    }
    getCaptionConfig() {
      var t2;
      const e2 = this.attachment.getType(), n2 = Et(null === (t2 = i[e2]) || void 0 === t2 ? void 0 : t2.caption);
      return "file" === e2 && (n2.name = true), n2;
    }
    findProgressElement() {
      var t2;
      return null === (t2 = this.findElement()) || void 0 === t2 ? void 0 : t2.querySelector("progress");
    }
    attachmentDidChangeUploadProgress() {
      const t2 = this.attachment.getUploadProgress(), e2 = this.findProgressElement();
      e2 && (e2.value = t2);
    }
  };
  var se = (t2) => k({ tagName: "span", textContent: h, data: { trixCursorTarget: t2, trixSerialize: false } });
  var ae = function(t2, e2) {
    const i2 = k("div");
    return i2.innerHTML = t2 || "", i2.querySelector(e2);
  };
  var le = class extends oe {
    constructor() {
      super(...arguments), this.attachment.previewDelegate = this;
    }
    createContentNodes() {
      return this.image = k({ tagName: "img", attributes: { src: "" }, data: { trixMutable: true } }), this.refresh(this.image), [this.image];
    }
    createCaptionElement() {
      const t2 = super.createCaptionElement(...arguments);
      return t2.textContent || t2.setAttribute("data-trix-placeholder", l.captionPlaceholder), t2;
    }
    refresh(t2) {
      var e2;
      t2 || (t2 = null === (e2 = this.findElement()) || void 0 === e2 ? void 0 : e2.querySelector("img"));
      if (t2)
        return this.updateAttributesForImage(t2);
    }
    updateAttributesForImage(t2) {
      const e2 = this.attachment.getURL(), i2 = this.attachment.getPreviewURL();
      if (t2.src = i2 || e2, i2 === e2)
        t2.removeAttribute("data-trix-serialized-attributes");
      else {
        const i3 = JSON.stringify({ src: e2 });
        t2.setAttribute("data-trix-serialized-attributes", i3);
      }
      const n2 = this.attachment.getWidth(), r3 = this.attachment.getHeight();
      null != n2 && (t2.width = n2), null != r3 && (t2.height = r3);
      const o2 = ["imageElement", this.attachment.id, t2.src, t2.width, t2.height].join("/");
      t2.dataset.trixStoreKey = o2;
    }
    attachmentDidChangeAttributes() {
      return this.refresh(this.image), this.refresh();
    }
  };
  var ce = class extends ie {
    constructor() {
      super(...arguments), this.piece = this.object, this.attributes = this.piece.getAttributes(), this.textConfig = this.options.textConfig, this.context = this.options.context, this.piece.attachment ? this.attachment = this.piece.attachment : this.string = this.piece.toString();
    }
    createNodes() {
      let t2 = this.attachment ? this.createAttachmentNodes() : this.createStringNodes();
      const e2 = this.createElement();
      if (e2) {
        const i2 = function(t3) {
          for (; null !== (e3 = t3) && void 0 !== e3 && e3.firstElementChild; ) {
            var e3;
            t3 = t3.firstElementChild;
          }
          return t3;
        }(e2);
        Array.from(t2).forEach((t3) => {
          i2.appendChild(t3);
        }), t2 = [e2];
      }
      return t2;
    }
    createAttachmentNodes() {
      const t2 = this.attachment.isPreviewable() ? le : oe;
      return this.createChildView(t2, this.piece.attachment, { piece: this.piece }).getNodes();
    }
    createStringNodes() {
      var t2;
      if (null !== (t2 = this.textConfig) && void 0 !== t2 && t2.plaintext)
        return [document.createTextNode(this.string)];
      {
        const t3 = [], e2 = this.string.split("\n");
        for (let i2 = 0; i2 < e2.length; i2++) {
          const n2 = e2[i2];
          if (i2 > 0) {
            const e3 = k("br");
            t3.push(e3);
          }
          if (n2.length) {
            const e3 = document.createTextNode(this.preserveSpaces(n2));
            t3.push(e3);
          }
        }
        return t3;
      }
    }
    createElement() {
      let t2, e2, i2;
      const n2 = {};
      for (e2 in this.attributes) {
        i2 = this.attributes[e2];
        const o2 = pt(e2);
        if (o2) {
          if (o2.tagName) {
            var r3;
            const e3 = k(o2.tagName);
            r3 ? (r3.appendChild(e3), r3 = e3) : t2 = r3 = e3;
          }
          if (o2.styleProperty && (n2[o2.styleProperty] = i2), o2.style)
            for (e2 in o2.style)
              i2 = o2.style[e2], n2[e2] = i2;
        }
      }
      if (Object.keys(n2).length)
        for (e2 in t2 || (t2 = k("span")), n2)
          i2 = n2[e2], t2.style[e2] = i2;
      return t2;
    }
    createContainerElement() {
      for (const t2 in this.attributes) {
        const e2 = this.attributes[t2], i2 = pt(t2);
        if (i2 && i2.groupTagName) {
          const n2 = {};
          return n2[t2] = e2, k(i2.groupTagName, n2);
        }
      }
    }
    preserveSpaces(t2) {
      return this.context.isLast && (t2 = t2.replace(/\ $/, d)), t2 = t2.replace(/(\S)\ {3}(\S)/g, "$1 ".concat(d, " $2")).replace(/\ {2}/g, "".concat(d, " ")).replace(/\ {2}/g, " ".concat(d)), (this.context.isFirst || this.context.followsWhitespace) && (t2 = t2.replace(/^\ /, d)), t2;
    }
  };
  var ue = class extends ie {
    constructor() {
      super(...arguments), this.text = this.object, this.textConfig = this.options.textConfig;
    }
    createNodes() {
      const t2 = [], e2 = Yt.groupObjects(this.getPieces()), i2 = e2.length - 1;
      for (let r3 = 0; r3 < e2.length; r3++) {
        const o2 = e2[r3], s2 = {};
        0 === r3 && (s2.isFirst = true), r3 === i2 && (s2.isLast = true), he(n2) && (s2.followsWhitespace = true);
        const a2 = this.findOrCreateCachedChildView(ce, o2, { textConfig: this.textConfig, context: s2 });
        t2.push(...Array.from(a2.getNodes() || []));
        var n2 = o2;
      }
      return t2;
    }
    getPieces() {
      return Array.from(this.text.getPieces()).filter((t2) => !t2.hasAttribute("blockBreak"));
    }
  };
  var he = (t2) => /\s$/.test(null == t2 ? void 0 : t2.toString());
  var { css: de } = V;
  var ge = class extends ie {
    constructor() {
      super(...arguments), this.block = this.object, this.attributes = this.block.getAttributes();
    }
    createNodes() {
      const t2 = [document.createComment("block")];
      if (this.block.isEmpty())
        t2.push(k("br"));
      else {
        var e2;
        const i2 = null === (e2 = gt(this.block.getLastAttribute())) || void 0 === e2 ? void 0 : e2.text, n2 = this.findOrCreateCachedChildView(ue, this.block.text, { textConfig: i2 });
        t2.push(...Array.from(n2.getNodes() || [])), this.shouldAddExtraNewlineElement() && t2.push(k("br"));
      }
      if (this.attributes.length)
        return t2;
      {
        let e3;
        const { tagName: i2 } = n.default;
        this.block.isRTL() && (e3 = { dir: "rtl" });
        const r3 = k({ tagName: i2, attributes: e3 });
        return t2.forEach((t3) => r3.appendChild(t3)), [r3];
      }
    }
    createContainerElement(t2) {
      let e2, i2;
      const n2 = this.attributes[t2], { tagName: r3 } = gt(n2);
      if (0 === t2 && this.block.isRTL() && (e2 = { dir: "rtl" }), "attachmentGallery" === n2) {
        const t3 = this.block.getBlockBreakPosition();
        i2 = "".concat(de.attachmentGallery, " ").concat(de.attachmentGallery, "--").concat(t3);
      }
      return k({ tagName: r3, className: i2, attributes: e2 });
    }
    shouldAddExtraNewlineElement() {
      return /\n\n$/.test(this.block.toString());
    }
  };
  var me = class extends ie {
    static render(t2) {
      const e2 = k("div"), i2 = new this(t2, { element: e2 });
      return i2.render(), i2.sync(), e2;
    }
    constructor() {
      super(...arguments), this.element = this.options.element, this.elementStore = new Zt(), this.setDocument(this.object);
    }
    setDocument(t2) {
      t2.isEqualTo(this.document) || (this.document = this.object = t2);
    }
    render() {
      if (this.childViews = [], this.shadowElement = k("div"), !this.document.isEmpty()) {
        const t2 = Yt.groupObjects(this.document.getBlocks(), { asTree: true });
        Array.from(t2).forEach((t3) => {
          const e2 = this.findOrCreateCachedChildView(ge, t3);
          Array.from(e2.getNodes()).map((t4) => this.shadowElement.appendChild(t4));
        });
      }
    }
    isSynced() {
      return fe(this.shadowElement, this.element);
    }
    sync() {
      const t2 = this.createDocumentFragmentForSync();
      for (; this.element.lastChild; )
        this.element.removeChild(this.element.lastChild);
      return this.element.appendChild(t2), this.didSync();
    }
    didSync() {
      return this.elementStore.reset(pe(this.element)), St(() => this.garbageCollectCachedViews());
    }
    createDocumentFragmentForSync() {
      const t2 = document.createDocumentFragment();
      return Array.from(this.shadowElement.childNodes).forEach((e2) => {
        t2.appendChild(e2.cloneNode(true));
      }), Array.from(pe(t2)).forEach((t3) => {
        const e2 = this.elementStore.remove(t3);
        e2 && t3.parentNode.replaceChild(e2, t3);
      }), t2;
    }
  };
  var pe = (t2) => t2.querySelectorAll("[data-trix-store-key]");
  var fe = (t2, e2) => be(t2.innerHTML) === be(e2.innerHTML);
  var be = (t2) => t2.replace(/&nbsp;/g, " ");
  function ve(t2) {
    var e2, i2;
    function n2(e3, i3) {
      try {
        var o2 = t2[e3](i3), s2 = o2.value, a2 = s2 instanceof Ae;
        Promise.resolve(a2 ? s2.v : s2).then(function(i4) {
          if (a2) {
            var l2 = "return" === e3 ? "return" : "next";
            if (!s2.k || i4.done)
              return n2(l2, i4);
            i4 = t2[l2](i4).value;
          }
          r3(o2.done ? "return" : "normal", i4);
        }, function(t3) {
          n2("throw", t3);
        });
      } catch (t3) {
        r3("throw", t3);
      }
    }
    function r3(t3, r4) {
      switch (t3) {
        case "return":
          e2.resolve({ value: r4, done: true });
          break;
        case "throw":
          e2.reject(r4);
          break;
        default:
          e2.resolve({ value: r4, done: false });
      }
      (e2 = e2.next) ? n2(e2.key, e2.arg) : i2 = null;
    }
    this._invoke = function(t3, r4) {
      return new Promise(function(o2, s2) {
        var a2 = { key: t3, arg: r4, resolve: o2, reject: s2, next: null };
        i2 ? i2 = i2.next = a2 : (e2 = i2 = a2, n2(t3, r4));
      });
    }, "function" != typeof t2.return && (this.return = void 0);
  }
  function Ae(t2, e2) {
    this.v = t2, this.k = e2;
  }
  function xe(t2, e2, i2) {
    return (e2 = ye(e2)) in t2 ? Object.defineProperty(t2, e2, { value: i2, enumerable: true, configurable: true, writable: true }) : t2[e2] = i2, t2;
  }
  function ye(t2) {
    var e2 = function(t3, e3) {
      if ("object" != typeof t3 || null === t3)
        return t3;
      var i2 = t3[Symbol.toPrimitive];
      if (void 0 !== i2) {
        var n2 = i2.call(t3, e3 || "default");
        if ("object" != typeof n2)
          return n2;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return ("string" === e3 ? String : Number)(t3);
    }(t2, "string");
    return "symbol" == typeof e2 ? e2 : String(e2);
  }
  ve.prototype["function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator"] = function() {
    return this;
  }, ve.prototype.next = function(t2) {
    return this._invoke("next", t2);
  }, ve.prototype.throw = function(t2) {
    return this._invoke("throw", t2);
  }, ve.prototype.return = function(t2) {
    return this._invoke("return", t2);
  };
  var Ce = class extends nt {
    static registerType(t2, e2) {
      e2.type = t2, this.types[t2] = e2;
    }
    static fromJSON(t2) {
      const e2 = this.types[t2.type];
      if (e2)
        return e2.fromJSON(t2);
    }
    constructor(t2) {
      let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.attributes = Ht.box(e2);
    }
    copyWithAttributes(t2) {
      return new this.constructor(this.getValue(), t2);
    }
    copyWithAdditionalAttributes(t2) {
      return this.copyWithAttributes(this.attributes.merge(t2));
    }
    copyWithoutAttribute(t2) {
      return this.copyWithAttributes(this.attributes.remove(t2));
    }
    copy() {
      return this.copyWithAttributes(this.attributes);
    }
    getAttribute(t2) {
      return this.attributes.get(t2);
    }
    getAttributesHash() {
      return this.attributes;
    }
    getAttributes() {
      return this.attributes.toObject();
    }
    hasAttribute(t2) {
      return this.attributes.has(t2);
    }
    hasSameStringValueAsPiece(t2) {
      return t2 && this.toString() === t2.toString();
    }
    hasSameAttributesAsPiece(t2) {
      return t2 && (this.attributes === t2.attributes || this.attributes.isEqualTo(t2.attributes));
    }
    isBlockBreak() {
      return false;
    }
    isEqualTo(t2) {
      return super.isEqualTo(...arguments) || this.hasSameConstructorAs(t2) && this.hasSameStringValueAsPiece(t2) && this.hasSameAttributesAsPiece(t2);
    }
    isEmpty() {
      return 0 === this.length;
    }
    isSerializable() {
      return true;
    }
    toJSON() {
      return { type: this.constructor.type, attributes: this.getAttributes() };
    }
    contentsForInspection() {
      return { type: this.constructor.type, attributes: this.attributes.inspect() };
    }
    canBeGrouped() {
      return this.hasAttribute("href");
    }
    canBeGroupedWith(t2) {
      return this.getAttribute("href") === t2.getAttribute("href");
    }
    getLength() {
      return this.length;
    }
    canBeConsolidatedWith(t2) {
      return false;
    }
  };
  xe(Ce, "types", {});
  var Re = class extends ee {
    constructor(t2) {
      super(...arguments), this.url = t2;
    }
    perform(t2) {
      const e2 = new Image();
      e2.onload = () => (e2.width = this.width = e2.naturalWidth, e2.height = this.height = e2.naturalHeight, t2(true, e2)), e2.onerror = () => t2(false), e2.src = this.url;
    }
  };
  var Se = class _Se extends nt {
    static attachmentForFile(t2) {
      const e2 = new this(this.attributesForFile(t2));
      return e2.setFile(t2), e2;
    }
    static attributesForFile(t2) {
      return new Ht({ filename: t2.name, filesize: t2.size, contentType: t2.type });
    }
    static fromJSON(t2) {
      return new this(t2);
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      super(t2), this.releaseFile = this.releaseFile.bind(this), this.attributes = Ht.box(t2), this.didChangeAttributes();
    }
    getAttribute(t2) {
      return this.attributes.get(t2);
    }
    hasAttribute(t2) {
      return this.attributes.has(t2);
    }
    getAttributes() {
      return this.attributes.toObject();
    }
    setAttributes() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      const e2 = this.attributes.merge(t2);
      var i2, n2, r3, o2;
      if (!this.attributes.isEqualTo(e2))
        return this.attributes = e2, this.didChangeAttributes(), null === (i2 = this.previewDelegate) || void 0 === i2 || null === (n2 = i2.attachmentDidChangeAttributes) || void 0 === n2 || n2.call(i2, this), null === (r3 = this.delegate) || void 0 === r3 || null === (o2 = r3.attachmentDidChangeAttributes) || void 0 === o2 ? void 0 : o2.call(r3, this);
    }
    didChangeAttributes() {
      if (this.isPreviewable())
        return this.preloadURL();
    }
    isPending() {
      return null != this.file && !(this.getURL() || this.getHref());
    }
    isPreviewable() {
      return this.attributes.has("previewable") ? this.attributes.get("previewable") : _Se.previewablePattern.test(this.getContentType());
    }
    getType() {
      return this.hasContent() ? "content" : this.isPreviewable() ? "preview" : "file";
    }
    getURL() {
      return this.attributes.get("url");
    }
    getHref() {
      return this.attributes.get("href");
    }
    getFilename() {
      return this.attributes.get("filename") || "";
    }
    getFilesize() {
      return this.attributes.get("filesize");
    }
    getFormattedFilesize() {
      const t2 = this.attributes.get("filesize");
      return "number" == typeof t2 ? u.formatter(t2) : "";
    }
    getExtension() {
      var t2;
      return null === (t2 = this.getFilename().match(/\.(\w+)$/)) || void 0 === t2 ? void 0 : t2[1].toLowerCase();
    }
    getContentType() {
      return this.attributes.get("contentType");
    }
    hasContent() {
      return this.attributes.has("content");
    }
    getContent() {
      return this.attributes.get("content");
    }
    getWidth() {
      return this.attributes.get("width");
    }
    getHeight() {
      return this.attributes.get("height");
    }
    getFile() {
      return this.file;
    }
    setFile(t2) {
      if (this.file = t2, this.isPreviewable())
        return this.preloadFile();
    }
    releaseFile() {
      this.releasePreloadedFile(), this.file = null;
    }
    getUploadProgress() {
      return null != this.uploadProgress ? this.uploadProgress : 0;
    }
    setUploadProgress(t2) {
      var e2, i2;
      if (this.uploadProgress !== t2)
        return this.uploadProgress = t2, null === (e2 = this.uploadProgressDelegate) || void 0 === e2 || null === (i2 = e2.attachmentDidChangeUploadProgress) || void 0 === i2 ? void 0 : i2.call(e2, this);
    }
    toJSON() {
      return this.getAttributes();
    }
    getCacheKey() {
      return [super.getCacheKey(...arguments), this.attributes.getCacheKey(), this.getPreviewURL()].join("/");
    }
    getPreviewURL() {
      return this.previewURL || this.preloadingURL;
    }
    setPreviewURL(t2) {
      var e2, i2, n2, r3;
      if (t2 !== this.getPreviewURL())
        return this.previewURL = t2, null === (e2 = this.previewDelegate) || void 0 === e2 || null === (i2 = e2.attachmentDidChangeAttributes) || void 0 === i2 || i2.call(e2, this), null === (n2 = this.delegate) || void 0 === n2 || null === (r3 = n2.attachmentDidChangePreviewURL) || void 0 === r3 ? void 0 : r3.call(n2, this);
    }
    preloadURL() {
      return this.preload(this.getURL(), this.releaseFile);
    }
    preloadFile() {
      if (this.file)
        return this.fileObjectURL = URL.createObjectURL(this.file), this.preload(this.fileObjectURL);
    }
    releasePreloadedFile() {
      this.fileObjectURL && (URL.revokeObjectURL(this.fileObjectURL), this.fileObjectURL = null);
    }
    preload(t2, e2) {
      if (t2 && t2 !== this.getPreviewURL()) {
        this.preloadingURL = t2;
        return new Re(t2).then((i2) => {
          let { width: n2, height: r3 } = i2;
          return this.getWidth() && this.getHeight() || this.setAttributes({ width: n2, height: r3 }), this.preloadingURL = null, this.setPreviewURL(t2), null == e2 ? void 0 : e2();
        }).catch(() => (this.preloadingURL = null, null == e2 ? void 0 : e2()));
      }
    }
  };
  xe(Se, "previewablePattern", /^image(\/(gif|png|webp|jpe?g)|$)/);
  var Ee = class _Ee extends Ce {
    static fromJSON(t2) {
      return new this(Se.fromJSON(t2.attachment), t2.attributes);
    }
    constructor(t2) {
      super(...arguments), this.attachment = t2, this.length = 1, this.ensureAttachmentExclusivelyHasAttribute("href"), this.attachment.hasContent() || this.removeProhibitedAttributes();
    }
    ensureAttachmentExclusivelyHasAttribute(t2) {
      this.hasAttribute(t2) && (this.attachment.hasAttribute(t2) || this.attachment.setAttributes(this.attributes.slice([t2])), this.attributes = this.attributes.remove(t2));
    }
    removeProhibitedAttributes() {
      const t2 = this.attributes.slice(_Ee.permittedAttributes);
      t2.isEqualTo(this.attributes) || (this.attributes = t2);
    }
    getValue() {
      return this.attachment;
    }
    isSerializable() {
      return !this.attachment.isPending();
    }
    getCaption() {
      return this.attributes.get("caption") || "";
    }
    isEqualTo(t2) {
      var e2;
      return super.isEqualTo(t2) && this.attachment.id === (null == t2 || null === (e2 = t2.attachment) || void 0 === e2 ? void 0 : e2.id);
    }
    toString() {
      return "\uFFFC";
    }
    toJSON() {
      const t2 = super.toJSON(...arguments);
      return t2.attachment = this.attachment, t2;
    }
    getCacheKey() {
      return [super.getCacheKey(...arguments), this.attachment.getCacheKey()].join("/");
    }
    toConsole() {
      return JSON.stringify(this.toString());
    }
  };
  xe(Ee, "permittedAttributes", ["caption", "presentation"]), Ce.registerType("attachment", Ee);
  var ke = class extends Ce {
    static fromJSON(t2) {
      return new this(t2.string, t2.attributes);
    }
    constructor(t2) {
      super(...arguments), this.string = ((t3) => t3.replace(/\r\n/g, "\n"))(t2), this.length = this.string.length;
    }
    getValue() {
      return this.string;
    }
    toString() {
      return this.string.toString();
    }
    isBlockBreak() {
      return "\n" === this.toString() && true === this.getAttribute("blockBreak");
    }
    toJSON() {
      const t2 = super.toJSON(...arguments);
      return t2.string = this.string, t2;
    }
    canBeConsolidatedWith(t2) {
      return t2 && this.hasSameConstructorAs(t2) && this.hasSameAttributesAsPiece(t2);
    }
    consolidateWith(t2) {
      return new this.constructor(this.toString() + t2.toString(), this.attributes);
    }
    splitAtOffset(t2) {
      let e2, i2;
      return 0 === t2 ? (e2 = null, i2 = this) : t2 === this.length ? (e2 = this, i2 = null) : (e2 = new this.constructor(this.string.slice(0, t2), this.attributes), i2 = new this.constructor(this.string.slice(t2), this.attributes)), [e2, i2];
    }
    toConsole() {
      let { string: t2 } = this;
      return t2.length > 15 && (t2 = t2.slice(0, 14) + "\u2026"), JSON.stringify(t2.toString());
    }
  };
  Ce.registerType("string", ke);
  var Le = class extends nt {
    static box(t2) {
      return t2 instanceof this ? t2 : new this(t2);
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), this.objects = t2.slice(0), this.length = this.objects.length;
    }
    indexOf(t2) {
      return this.objects.indexOf(t2);
    }
    splice() {
      for (var t2 = arguments.length, e2 = new Array(t2), i2 = 0; i2 < t2; i2++)
        e2[i2] = arguments[i2];
      return new this.constructor(ot(this.objects, ...e2));
    }
    eachObject(t2) {
      return this.objects.map((e2, i2) => t2(e2, i2));
    }
    insertObjectAtIndex(t2, e2) {
      return this.splice(e2, 0, t2);
    }
    insertSplittableListAtIndex(t2, e2) {
      return this.splice(e2, 0, ...t2.objects);
    }
    insertSplittableListAtPosition(t2, e2) {
      const [i2, n2] = this.splitObjectAtPosition(e2);
      return new this.constructor(i2).insertSplittableListAtIndex(t2, n2);
    }
    editObjectAtIndex(t2, e2) {
      return this.replaceObjectAtIndex(e2(this.objects[t2]), t2);
    }
    replaceObjectAtIndex(t2, e2) {
      return this.splice(e2, 1, t2);
    }
    removeObjectAtIndex(t2) {
      return this.splice(t2, 1);
    }
    getObjectAtIndex(t2) {
      return this.objects[t2];
    }
    getSplittableListInRange(t2) {
      const [e2, i2, n2] = this.splitObjectsAtRange(t2);
      return new this.constructor(e2.slice(i2, n2 + 1));
    }
    selectSplittableList(t2) {
      const e2 = this.objects.filter((e3) => t2(e3));
      return new this.constructor(e2);
    }
    removeObjectsInRange(t2) {
      const [e2, i2, n2] = this.splitObjectsAtRange(t2);
      return new this.constructor(e2).splice(i2, n2 - i2 + 1);
    }
    transformObjectsInRange(t2, e2) {
      const [i2, n2, r3] = this.splitObjectsAtRange(t2), o2 = i2.map((t3, i3) => n2 <= i3 && i3 <= r3 ? e2(t3) : t3);
      return new this.constructor(o2);
    }
    splitObjectsAtRange(t2) {
      let e2, [i2, n2, r3] = this.splitObjectAtPosition(we(t2));
      return [i2, e2] = new this.constructor(i2).splitObjectAtPosition(Te(t2) + r3), [i2, n2, e2 - 1];
    }
    getObjectAtPosition(t2) {
      const { index: e2 } = this.findIndexAndOffsetAtPosition(t2);
      return this.objects[e2];
    }
    splitObjectAtPosition(t2) {
      let e2, i2;
      const { index: n2, offset: r3 } = this.findIndexAndOffsetAtPosition(t2), o2 = this.objects.slice(0);
      if (null != n2)
        if (0 === r3)
          e2 = n2, i2 = 0;
        else {
          const t3 = this.getObjectAtIndex(n2), [s2, a2] = t3.splitAtOffset(r3);
          o2.splice(n2, 1, s2, a2), e2 = n2 + 1, i2 = s2.getLength() - r3;
        }
      else
        e2 = o2.length, i2 = 0;
      return [o2, e2, i2];
    }
    consolidate() {
      const t2 = [];
      let e2 = this.objects[0];
      return this.objects.slice(1).forEach((i2) => {
        var n2, r3;
        null !== (n2 = (r3 = e2).canBeConsolidatedWith) && void 0 !== n2 && n2.call(r3, i2) ? e2 = e2.consolidateWith(i2) : (t2.push(e2), e2 = i2);
      }), e2 && t2.push(e2), new this.constructor(t2);
    }
    consolidateFromIndexToIndex(t2, e2) {
      const i2 = this.objects.slice(0).slice(t2, e2 + 1), n2 = new this.constructor(i2).consolidate().toArray();
      return this.splice(t2, i2.length, ...n2);
    }
    findIndexAndOffsetAtPosition(t2) {
      let e2, i2 = 0;
      for (e2 = 0; e2 < this.objects.length; e2++) {
        const n2 = i2 + this.objects[e2].getLength();
        if (i2 <= t2 && t2 < n2)
          return { index: e2, offset: t2 - i2 };
        i2 = n2;
      }
      return { index: null, offset: null };
    }
    findPositionAtIndexAndOffset(t2, e2) {
      let i2 = 0;
      for (let n2 = 0; n2 < this.objects.length; n2++) {
        const r3 = this.objects[n2];
        if (n2 < t2)
          i2 += r3.getLength();
        else if (n2 === t2) {
          i2 += e2;
          break;
        }
      }
      return i2;
    }
    getEndPosition() {
      return null == this.endPosition && (this.endPosition = 0, this.objects.forEach((t2) => this.endPosition += t2.getLength())), this.endPosition;
    }
    toString() {
      return this.objects.join("");
    }
    toArray() {
      return this.objects.slice(0);
    }
    toJSON() {
      return this.toArray();
    }
    isEqualTo(t2) {
      return super.isEqualTo(...arguments) || De(this.objects, null == t2 ? void 0 : t2.objects);
    }
    contentsForInspection() {
      return { objects: "[".concat(this.objects.map((t2) => t2.inspect()).join(", "), "]") };
    }
  };
  var De = function(t2) {
    let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
    if (t2.length !== e2.length)
      return false;
    let i2 = true;
    for (let n2 = 0; n2 < t2.length; n2++) {
      const r3 = t2[n2];
      i2 && !r3.isEqualTo(e2[n2]) && (i2 = false);
    }
    return i2;
  };
  var we = (t2) => t2[0];
  var Te = (t2) => t2[1];
  var Fe = class extends nt {
    static textForAttachmentWithAttributes(t2, e2) {
      return new this([new Ee(t2, e2)]);
    }
    static textForStringWithAttributes(t2, e2) {
      return new this([new ke(t2, e2)]);
    }
    static fromJSON(t2) {
      return new this(Array.from(t2).map((t3) => Ce.fromJSON(t3)));
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments);
      const e2 = t2.filter((t3) => !t3.isEmpty());
      this.pieceList = new Le(e2);
    }
    copy() {
      return this.copyWithPieceList(this.pieceList);
    }
    copyWithPieceList(t2) {
      return new this.constructor(t2.consolidate().toArray());
    }
    copyUsingObjectMap(t2) {
      const e2 = this.getPieces().map((e3) => t2.find(e3) || e3);
      return new this.constructor(e2);
    }
    appendText(t2) {
      return this.insertTextAtPosition(t2, this.getLength());
    }
    insertTextAtPosition(t2, e2) {
      return this.copyWithPieceList(this.pieceList.insertSplittableListAtPosition(t2.pieceList, e2));
    }
    removeTextAtRange(t2) {
      return this.copyWithPieceList(this.pieceList.removeObjectsInRange(t2));
    }
    replaceTextAtRange(t2, e2) {
      return this.removeTextAtRange(e2).insertTextAtPosition(t2, e2[0]);
    }
    moveTextFromRangeToPosition(t2, e2) {
      if (t2[0] <= e2 && e2 <= t2[1])
        return;
      const i2 = this.getTextAtRange(t2), n2 = i2.getLength();
      return t2[0] < e2 && (e2 -= n2), this.removeTextAtRange(t2).insertTextAtPosition(i2, e2);
    }
    addAttributeAtRange(t2, e2, i2) {
      const n2 = {};
      return n2[t2] = e2, this.addAttributesAtRange(n2, i2);
    }
    addAttributesAtRange(t2, e2) {
      return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e2, (e3) => e3.copyWithAdditionalAttributes(t2)));
    }
    removeAttributeAtRange(t2, e2) {
      return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e2, (e3) => e3.copyWithoutAttribute(t2)));
    }
    setAttributesAtRange(t2, e2) {
      return this.copyWithPieceList(this.pieceList.transformObjectsInRange(e2, (e3) => e3.copyWithAttributes(t2)));
    }
    getAttributesAtPosition(t2) {
      var e2;
      return (null === (e2 = this.pieceList.getObjectAtPosition(t2)) || void 0 === e2 ? void 0 : e2.getAttributes()) || {};
    }
    getCommonAttributes() {
      const t2 = Array.from(this.pieceList.toArray()).map((t3) => t3.getAttributes());
      return Ht.fromCommonAttributesOfObjects(t2).toObject();
    }
    getCommonAttributesAtRange(t2) {
      return this.getTextAtRange(t2).getCommonAttributes() || {};
    }
    getExpandedRangeForAttributeAtOffset(t2, e2) {
      let i2, n2 = i2 = e2;
      const r3 = this.getLength();
      for (; n2 > 0 && this.getCommonAttributesAtRange([n2 - 1, i2])[t2]; )
        n2--;
      for (; i2 < r3 && this.getCommonAttributesAtRange([e2, i2 + 1])[t2]; )
        i2++;
      return [n2, i2];
    }
    getTextAtRange(t2) {
      return this.copyWithPieceList(this.pieceList.getSplittableListInRange(t2));
    }
    getStringAtRange(t2) {
      return this.pieceList.getSplittableListInRange(t2).toString();
    }
    getStringAtPosition(t2) {
      return this.getStringAtRange([t2, t2 + 1]);
    }
    startsWithString(t2) {
      return this.getStringAtRange([0, t2.length]) === t2;
    }
    endsWithString(t2) {
      const e2 = this.getLength();
      return this.getStringAtRange([e2 - t2.length, e2]) === t2;
    }
    getAttachmentPieces() {
      return this.pieceList.toArray().filter((t2) => !!t2.attachment);
    }
    getAttachments() {
      return this.getAttachmentPieces().map((t2) => t2.attachment);
    }
    getAttachmentAndPositionById(t2) {
      let e2 = 0;
      for (const n2 of this.pieceList.toArray()) {
        var i2;
        if ((null === (i2 = n2.attachment) || void 0 === i2 ? void 0 : i2.id) === t2)
          return { attachment: n2.attachment, position: e2 };
        e2 += n2.length;
      }
      return { attachment: null, position: null };
    }
    getAttachmentById(t2) {
      const { attachment: e2 } = this.getAttachmentAndPositionById(t2);
      return e2;
    }
    getRangeOfAttachment(t2) {
      const e2 = this.getAttachmentAndPositionById(t2.id), i2 = e2.position;
      if (t2 = e2.attachment)
        return [i2, i2 + 1];
    }
    updateAttributesForAttachment(t2, e2) {
      const i2 = this.getRangeOfAttachment(e2);
      return i2 ? this.addAttributesAtRange(t2, i2) : this;
    }
    getLength() {
      return this.pieceList.getEndPosition();
    }
    isEmpty() {
      return 0 === this.getLength();
    }
    isEqualTo(t2) {
      var e2;
      return super.isEqualTo(t2) || (null == t2 || null === (e2 = t2.pieceList) || void 0 === e2 ? void 0 : e2.isEqualTo(this.pieceList));
    }
    isBlockBreak() {
      return 1 === this.getLength() && this.pieceList.getObjectAtIndex(0).isBlockBreak();
    }
    eachPiece(t2) {
      return this.pieceList.eachObject(t2);
    }
    getPieces() {
      return this.pieceList.toArray();
    }
    getPieceAtPosition(t2) {
      return this.pieceList.getObjectAtPosition(t2);
    }
    contentsForInspection() {
      return { pieceList: this.pieceList.inspect() };
    }
    toSerializableText() {
      const t2 = this.pieceList.selectSplittableList((t3) => t3.isSerializable());
      return this.copyWithPieceList(t2);
    }
    toString() {
      return this.pieceList.toString();
    }
    toJSON() {
      return this.pieceList.toJSON();
    }
    toConsole() {
      return JSON.stringify(this.pieceList.toArray().map((t2) => JSON.parse(t2.toConsole())));
    }
    getDirection() {
      return at(this.toString());
    }
    isRTL() {
      return "rtl" === this.getDirection();
    }
  };
  var Be = class _Be extends nt {
    static fromJSON(t2) {
      return new this(Fe.fromJSON(t2.text), t2.attributes);
    }
    constructor(t2, e2) {
      super(...arguments), this.text = Ie(t2 || new Fe()), this.attributes = e2 || [];
    }
    isEmpty() {
      return this.text.isBlockBreak();
    }
    isEqualTo(t2) {
      return !!super.isEqualTo(t2) || this.text.isEqualTo(null == t2 ? void 0 : t2.text) && rt(this.attributes, null == t2 ? void 0 : t2.attributes);
    }
    copyWithText(t2) {
      return new _Be(t2, this.attributes);
    }
    copyWithoutText() {
      return this.copyWithText(null);
    }
    copyWithAttributes(t2) {
      return new _Be(this.text, t2);
    }
    copyWithoutAttributes() {
      return this.copyWithAttributes(null);
    }
    copyUsingObjectMap(t2) {
      const e2 = t2.find(this.text);
      return e2 ? this.copyWithText(e2) : this.copyWithText(this.text.copyUsingObjectMap(t2));
    }
    addAttribute(t2) {
      const e2 = this.attributes.concat(We(t2));
      return this.copyWithAttributes(e2);
    }
    removeAttribute(t2) {
      const { listAttribute: e2 } = gt(t2), i2 = qe(qe(this.attributes, t2), e2);
      return this.copyWithAttributes(i2);
    }
    removeLastAttribute() {
      return this.removeAttribute(this.getLastAttribute());
    }
    getLastAttribute() {
      return Ue(this.attributes);
    }
    getAttributes() {
      return this.attributes.slice(0);
    }
    getAttributeLevel() {
      return this.attributes.length;
    }
    getAttributeAtLevel(t2) {
      return this.attributes[t2 - 1];
    }
    hasAttribute(t2) {
      return this.attributes.includes(t2);
    }
    hasAttributes() {
      return this.getAttributeLevel() > 0;
    }
    getLastNestableAttribute() {
      return Ue(this.getNestableAttributes());
    }
    getNestableAttributes() {
      return this.attributes.filter((t2) => gt(t2).nestable);
    }
    getNestingLevel() {
      return this.getNestableAttributes().length;
    }
    decreaseNestingLevel() {
      const t2 = this.getLastNestableAttribute();
      return t2 ? this.removeAttribute(t2) : this;
    }
    increaseNestingLevel() {
      const t2 = this.getLastNestableAttribute();
      if (t2) {
        const e2 = this.attributes.lastIndexOf(t2), i2 = ot(this.attributes, e2 + 1, 0, ...We(t2));
        return this.copyWithAttributes(i2);
      }
      return this;
    }
    getListItemAttributes() {
      return this.attributes.filter((t2) => gt(t2).listAttribute);
    }
    isListItem() {
      var t2;
      return null === (t2 = gt(this.getLastAttribute())) || void 0 === t2 ? void 0 : t2.listAttribute;
    }
    isTerminalBlock() {
      var t2;
      return null === (t2 = gt(this.getLastAttribute())) || void 0 === t2 ? void 0 : t2.terminal;
    }
    breaksOnReturn() {
      var t2;
      return null === (t2 = gt(this.getLastAttribute())) || void 0 === t2 ? void 0 : t2.breakOnReturn;
    }
    findLineBreakInDirectionFromPosition(t2, e2) {
      const i2 = this.toString();
      let n2;
      switch (t2) {
        case "forward":
          n2 = i2.indexOf("\n", e2);
          break;
        case "backward":
          n2 = i2.slice(0, e2).lastIndexOf("\n");
      }
      if (-1 !== n2)
        return n2;
    }
    contentsForInspection() {
      return { text: this.text.inspect(), attributes: this.attributes };
    }
    toString() {
      return this.text.toString();
    }
    toJSON() {
      return { text: this.text, attributes: this.attributes };
    }
    getDirection() {
      return this.text.getDirection();
    }
    isRTL() {
      return this.text.isRTL();
    }
    getLength() {
      return this.text.getLength();
    }
    canBeConsolidatedWith(t2) {
      return !this.hasAttributes() && !t2.hasAttributes() && this.getDirection() === t2.getDirection();
    }
    consolidateWith(t2) {
      const e2 = Fe.textForStringWithAttributes("\n"), i2 = this.getTextWithoutBlockBreak().appendText(e2);
      return this.copyWithText(i2.appendText(t2.text));
    }
    splitAtOffset(t2) {
      let e2, i2;
      return 0 === t2 ? (e2 = null, i2 = this) : t2 === this.getLength() ? (e2 = this, i2 = null) : (e2 = this.copyWithText(this.text.getTextAtRange([0, t2])), i2 = this.copyWithText(this.text.getTextAtRange([t2, this.getLength()]))), [e2, i2];
    }
    getBlockBreakPosition() {
      return this.text.getLength() - 1;
    }
    getTextWithoutBlockBreak() {
      return Me(this.text) ? this.text.getTextAtRange([0, this.getBlockBreakPosition()]) : this.text.copy();
    }
    canBeGrouped(t2) {
      return this.attributes[t2];
    }
    canBeGroupedWith(t2, e2) {
      const i2 = t2.getAttributes(), r3 = i2[e2], o2 = this.attributes[e2];
      return o2 === r3 && !(false === gt(o2).group && !(() => {
        if (!ht) {
          ht = [];
          for (const t3 in n) {
            const { listAttribute: e3 } = n[t3];
            null != e3 && ht.push(e3);
          }
        }
        return ht;
      })().includes(i2[e2 + 1])) && (this.getDirection() === t2.getDirection() || t2.isEmpty());
    }
  };
  var Ie = function(t2) {
    return t2 = Pe(t2), t2 = Oe(t2);
  };
  var Pe = function(t2) {
    let e2 = false;
    const i2 = t2.getPieces();
    let n2 = i2.slice(0, i2.length - 1);
    const r3 = i2[i2.length - 1];
    return r3 ? (n2 = n2.map((t3) => t3.isBlockBreak() ? (e2 = true, je(t3)) : t3), e2 ? new Fe([...n2, r3]) : t2) : t2;
  };
  var Ne = Fe.textForStringWithAttributes("\n", { blockBreak: true });
  var Oe = function(t2) {
    return Me(t2) ? t2 : t2.appendText(Ne);
  };
  var Me = function(t2) {
    const e2 = t2.getLength();
    if (0 === e2)
      return false;
    return t2.getTextAtRange([e2 - 1, e2]).isBlockBreak();
  };
  var je = (t2) => t2.copyWithoutAttribute("blockBreak");
  var We = function(t2) {
    const { listAttribute: e2 } = gt(t2);
    return e2 ? [e2, t2] : [t2];
  };
  var Ue = (t2) => t2.slice(-1)[0];
  var qe = function(t2, e2) {
    const i2 = t2.lastIndexOf(e2);
    return -1 === i2 ? t2 : ot(t2, i2, 1);
  };
  var Ve = class extends nt {
    static fromJSON(t2) {
      return new this(Array.from(t2).map((t3) => Be.fromJSON(t3)));
    }
    static fromString(t2, e2) {
      const i2 = Fe.textForStringWithAttributes(t2, e2);
      return new this([new Be(i2)]);
    }
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), 0 === t2.length && (t2 = [new Be()]), this.blockList = Le.box(t2);
    }
    isEmpty() {
      const t2 = this.getBlockAtIndex(0);
      return 1 === this.blockList.length && t2.isEmpty() && !t2.hasAttributes();
    }
    copy() {
      const t2 = (arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}).consolidateBlocks ? this.blockList.consolidate().toArray() : this.blockList.toArray();
      return new this.constructor(t2);
    }
    copyUsingObjectsFromDocument(t2) {
      const e2 = new Qt(t2.getObjects());
      return this.copyUsingObjectMap(e2);
    }
    copyUsingObjectMap(t2) {
      const e2 = this.getBlocks().map((e3) => t2.find(e3) || e3.copyUsingObjectMap(t2));
      return new this.constructor(e2);
    }
    copyWithBaseBlockAttributes() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      const e2 = this.getBlocks().map((e3) => {
        const i2 = t2.concat(e3.getAttributes());
        return e3.copyWithAttributes(i2);
      });
      return new this.constructor(e2);
    }
    replaceBlock(t2, e2) {
      const i2 = this.blockList.indexOf(t2);
      return -1 === i2 ? this : new this.constructor(this.blockList.replaceObjectAtIndex(e2, i2));
    }
    insertDocumentAtRange(t2, e2) {
      const { blockList: i2 } = t2;
      e2 = Lt(e2);
      let [n2] = e2;
      const { index: r3, offset: o2 } = this.locationFromPosition(n2);
      let s2 = this;
      const a2 = this.getBlockAtPosition(n2);
      return Dt(e2) && a2.isEmpty() && !a2.hasAttributes() ? s2 = new this.constructor(s2.blockList.removeObjectAtIndex(r3)) : a2.getBlockBreakPosition() === o2 && n2++, s2 = s2.removeTextAtRange(e2), new this.constructor(s2.blockList.insertSplittableListAtPosition(i2, n2));
    }
    mergeDocumentAtRange(t2, e2) {
      let i2, n2;
      e2 = Lt(e2);
      const [r3] = e2, o2 = this.locationFromPosition(r3), s2 = this.getBlockAtIndex(o2.index).getAttributes(), a2 = t2.getBaseBlockAttributes(), l2 = s2.slice(-a2.length);
      if (rt(a2, l2)) {
        const e3 = s2.slice(0, -a2.length);
        i2 = t2.copyWithBaseBlockAttributes(e3);
      } else
        i2 = t2.copy({ consolidateBlocks: true }).copyWithBaseBlockAttributes(s2);
      const c2 = i2.getBlockCount(), u2 = i2.getBlockAtIndex(0);
      if (rt(s2, u2.getAttributes())) {
        const t3 = u2.getTextWithoutBlockBreak();
        if (n2 = this.insertTextAtRange(t3, e2), c2 > 1) {
          i2 = new this.constructor(i2.getBlocks().slice(1));
          const e3 = r3 + t3.getLength();
          n2 = n2.insertDocumentAtRange(i2, e3);
        }
      } else
        n2 = this.insertDocumentAtRange(i2, e2);
      return n2;
    }
    insertTextAtRange(t2, e2) {
      e2 = Lt(e2);
      const [i2] = e2, { index: n2, offset: r3 } = this.locationFromPosition(i2), o2 = this.removeTextAtRange(e2);
      return new this.constructor(o2.blockList.editObjectAtIndex(n2, (e3) => e3.copyWithText(e3.text.insertTextAtPosition(t2, r3))));
    }
    removeTextAtRange(t2) {
      let e2;
      t2 = Lt(t2);
      const [i2, n2] = t2;
      if (Dt(t2))
        return this;
      const [r3, o2] = Array.from(this.locationRangeFromRange(t2)), s2 = r3.index, a2 = r3.offset, l2 = this.getBlockAtIndex(s2), c2 = o2.index, u2 = o2.offset, h2 = this.getBlockAtIndex(c2);
      if (n2 - i2 == 1 && l2.getBlockBreakPosition() === a2 && h2.getBlockBreakPosition() !== u2 && "\n" === h2.text.getStringAtPosition(u2))
        e2 = this.blockList.editObjectAtIndex(c2, (t3) => t3.copyWithText(t3.text.removeTextAtRange([u2, u2 + 1])));
      else {
        let t3;
        const i3 = l2.text.getTextAtRange([0, a2]), n3 = h2.text.getTextAtRange([u2, h2.getLength()]), r4 = i3.appendText(n3);
        t3 = s2 !== c2 && 0 === a2 && l2.getAttributeLevel() >= h2.getAttributeLevel() ? h2.copyWithText(r4) : l2.copyWithText(r4);
        const o3 = c2 + 1 - s2;
        e2 = this.blockList.splice(s2, o3, t3);
      }
      return new this.constructor(e2);
    }
    moveTextFromRangeToPosition(t2, e2) {
      let i2;
      t2 = Lt(t2);
      const [n2, r3] = t2;
      if (n2 <= e2 && e2 <= r3)
        return this;
      let o2 = this.getDocumentAtRange(t2), s2 = this.removeTextAtRange(t2);
      const a2 = n2 < e2;
      a2 && (e2 -= o2.getLength());
      const [l2, ...c2] = o2.getBlocks();
      return 0 === c2.length ? (i2 = l2.getTextWithoutBlockBreak(), a2 && (e2 += 1)) : i2 = l2.text, s2 = s2.insertTextAtRange(i2, e2), 0 === c2.length ? s2 : (o2 = new this.constructor(c2), e2 += i2.getLength(), s2.insertDocumentAtRange(o2, e2));
    }
    addAttributeAtRange(t2, e2, i2) {
      let { blockList: n2 } = this;
      return this.eachBlockAtRange(i2, (i3, r3, o2) => n2 = n2.editObjectAtIndex(o2, function() {
        return gt(t2) ? i3.addAttribute(t2, e2) : r3[0] === r3[1] ? i3 : i3.copyWithText(i3.text.addAttributeAtRange(t2, e2, r3));
      })), new this.constructor(n2);
    }
    addAttribute(t2, e2) {
      let { blockList: i2 } = this;
      return this.eachBlock((n2, r3) => i2 = i2.editObjectAtIndex(r3, () => n2.addAttribute(t2, e2))), new this.constructor(i2);
    }
    removeAttributeAtRange(t2, e2) {
      let { blockList: i2 } = this;
      return this.eachBlockAtRange(e2, function(e3, n2, r3) {
        gt(t2) ? i2 = i2.editObjectAtIndex(r3, () => e3.removeAttribute(t2)) : n2[0] !== n2[1] && (i2 = i2.editObjectAtIndex(r3, () => e3.copyWithText(e3.text.removeAttributeAtRange(t2, n2))));
      }), new this.constructor(i2);
    }
    updateAttributesForAttachment(t2, e2) {
      const i2 = this.getRangeOfAttachment(e2), [n2] = Array.from(i2), { index: r3 } = this.locationFromPosition(n2), o2 = this.getTextAtIndex(r3);
      return new this.constructor(this.blockList.editObjectAtIndex(r3, (i3) => i3.copyWithText(o2.updateAttributesForAttachment(t2, e2))));
    }
    removeAttributeForAttachment(t2, e2) {
      const i2 = this.getRangeOfAttachment(e2);
      return this.removeAttributeAtRange(t2, i2);
    }
    insertBlockBreakAtRange(t2) {
      let e2;
      t2 = Lt(t2);
      const [i2] = t2, { offset: n2 } = this.locationFromPosition(i2), r3 = this.removeTextAtRange(t2);
      return 0 === n2 && (e2 = [new Be()]), new this.constructor(r3.blockList.insertSplittableListAtPosition(new Le(e2), i2));
    }
    applyBlockAttributeAtRange(t2, e2, i2) {
      const n2 = this.expandRangeToLineBreaksAndSplitBlocks(i2);
      let r3 = n2.document;
      i2 = n2.range;
      const o2 = gt(t2);
      if (o2.listAttribute) {
        r3 = r3.removeLastListAttributeAtRange(i2, { exceptAttributeName: t2 });
        const e3 = r3.convertLineBreaksToBlockBreaksInRange(i2);
        r3 = e3.document, i2 = e3.range;
      } else
        r3 = o2.exclusive ? r3.removeBlockAttributesAtRange(i2) : o2.terminal ? r3.removeLastTerminalAttributeAtRange(i2) : r3.consolidateBlocksAtRange(i2);
      return r3.addAttributeAtRange(t2, e2, i2);
    }
    removeLastListAttributeAtRange(t2) {
      let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, { blockList: i2 } = this;
      return this.eachBlockAtRange(t2, function(t3, n2, r3) {
        const o2 = t3.getLastAttribute();
        o2 && gt(o2).listAttribute && o2 !== e2.exceptAttributeName && (i2 = i2.editObjectAtIndex(r3, () => t3.removeAttribute(o2)));
      }), new this.constructor(i2);
    }
    removeLastTerminalAttributeAtRange(t2) {
      let { blockList: e2 } = this;
      return this.eachBlockAtRange(t2, function(t3, i2, n2) {
        const r3 = t3.getLastAttribute();
        r3 && gt(r3).terminal && (e2 = e2.editObjectAtIndex(n2, () => t3.removeAttribute(r3)));
      }), new this.constructor(e2);
    }
    removeBlockAttributesAtRange(t2) {
      let { blockList: e2 } = this;
      return this.eachBlockAtRange(t2, function(t3, i2, n2) {
        t3.hasAttributes() && (e2 = e2.editObjectAtIndex(n2, () => t3.copyWithoutAttributes()));
      }), new this.constructor(e2);
    }
    expandRangeToLineBreaksAndSplitBlocks(t2) {
      let e2;
      t2 = Lt(t2);
      let [i2, n2] = t2;
      const r3 = this.locationFromPosition(i2), o2 = this.locationFromPosition(n2);
      let s2 = this;
      const a2 = s2.getBlockAtIndex(r3.index);
      if (r3.offset = a2.findLineBreakInDirectionFromPosition("backward", r3.offset), null != r3.offset && (e2 = s2.positionFromLocation(r3), s2 = s2.insertBlockBreakAtRange([e2, e2 + 1]), o2.index += 1, o2.offset -= s2.getBlockAtIndex(r3.index).getLength(), r3.index += 1), r3.offset = 0, 0 === o2.offset && o2.index > r3.index)
        o2.index -= 1, o2.offset = s2.getBlockAtIndex(o2.index).getBlockBreakPosition();
      else {
        const t3 = s2.getBlockAtIndex(o2.index);
        "\n" === t3.text.getStringAtRange([o2.offset - 1, o2.offset]) ? o2.offset -= 1 : o2.offset = t3.findLineBreakInDirectionFromPosition("forward", o2.offset), o2.offset !== t3.getBlockBreakPosition() && (e2 = s2.positionFromLocation(o2), s2 = s2.insertBlockBreakAtRange([e2, e2 + 1]));
      }
      return i2 = s2.positionFromLocation(r3), n2 = s2.positionFromLocation(o2), { document: s2, range: t2 = Lt([i2, n2]) };
    }
    convertLineBreaksToBlockBreaksInRange(t2) {
      t2 = Lt(t2);
      let [e2] = t2;
      const i2 = this.getStringAtRange(t2).slice(0, -1);
      let n2 = this;
      return i2.replace(/.*?\n/g, function(t3) {
        e2 += t3.length, n2 = n2.insertBlockBreakAtRange([e2 - 1, e2]);
      }), { document: n2, range: t2 };
    }
    consolidateBlocksAtRange(t2) {
      t2 = Lt(t2);
      const [e2, i2] = t2, n2 = this.locationFromPosition(e2).index, r3 = this.locationFromPosition(i2).index;
      return new this.constructor(this.blockList.consolidateFromIndexToIndex(n2, r3));
    }
    getDocumentAtRange(t2) {
      t2 = Lt(t2);
      const e2 = this.blockList.getSplittableListInRange(t2).toArray();
      return new this.constructor(e2);
    }
    getStringAtRange(t2) {
      let e2;
      const i2 = t2 = Lt(t2);
      return i2[i2.length - 1] !== this.getLength() && (e2 = -1), this.getDocumentAtRange(t2).toString().slice(0, e2);
    }
    getBlockAtIndex(t2) {
      return this.blockList.getObjectAtIndex(t2);
    }
    getBlockAtPosition(t2) {
      const { index: e2 } = this.locationFromPosition(t2);
      return this.getBlockAtIndex(e2);
    }
    getTextAtIndex(t2) {
      var e2;
      return null === (e2 = this.getBlockAtIndex(t2)) || void 0 === e2 ? void 0 : e2.text;
    }
    getTextAtPosition(t2) {
      const { index: e2 } = this.locationFromPosition(t2);
      return this.getTextAtIndex(e2);
    }
    getPieceAtPosition(t2) {
      const { index: e2, offset: i2 } = this.locationFromPosition(t2);
      return this.getTextAtIndex(e2).getPieceAtPosition(i2);
    }
    getCharacterAtPosition(t2) {
      const { index: e2, offset: i2 } = this.locationFromPosition(t2);
      return this.getTextAtIndex(e2).getStringAtRange([i2, i2 + 1]);
    }
    getLength() {
      return this.blockList.getEndPosition();
    }
    getBlocks() {
      return this.blockList.toArray();
    }
    getBlockCount() {
      return this.blockList.length;
    }
    getEditCount() {
      return this.editCount;
    }
    eachBlock(t2) {
      return this.blockList.eachObject(t2);
    }
    eachBlockAtRange(t2, e2) {
      let i2, n2;
      t2 = Lt(t2);
      const [r3, o2] = t2, s2 = this.locationFromPosition(r3), a2 = this.locationFromPosition(o2);
      if (s2.index === a2.index)
        return i2 = this.getBlockAtIndex(s2.index), n2 = [s2.offset, a2.offset], e2(i2, n2, s2.index);
      for (let t3 = s2.index; t3 <= a2.index; t3++)
        if (i2 = this.getBlockAtIndex(t3), i2) {
          switch (t3) {
            case s2.index:
              n2 = [s2.offset, i2.text.getLength()];
              break;
            case a2.index:
              n2 = [0, a2.offset];
              break;
            default:
              n2 = [0, i2.text.getLength()];
          }
          e2(i2, n2, t3);
        }
    }
    getCommonAttributesAtRange(t2) {
      t2 = Lt(t2);
      const [e2] = t2;
      if (Dt(t2))
        return this.getCommonAttributesAtPosition(e2);
      {
        const e3 = [], i2 = [];
        return this.eachBlockAtRange(t2, function(t3, n2) {
          if (n2[0] !== n2[1])
            return e3.push(t3.text.getCommonAttributesAtRange(n2)), i2.push(ze(t3));
        }), Ht.fromCommonAttributesOfObjects(e3).merge(Ht.fromCommonAttributesOfObjects(i2)).toObject();
      }
    }
    getCommonAttributesAtPosition(t2) {
      let e2, i2;
      const { index: n2, offset: r3 } = this.locationFromPosition(t2), o2 = this.getBlockAtIndex(n2);
      if (!o2)
        return {};
      const s2 = ze(o2), a2 = o2.text.getAttributesAtPosition(r3), l2 = o2.text.getAttributesAtPosition(r3 - 1), c2 = Object.keys(W).filter((t3) => W[t3].inheritable);
      for (e2 in l2)
        i2 = l2[e2], (i2 === a2[e2] || c2.includes(e2)) && (s2[e2] = i2);
      return s2;
    }
    getRangeOfCommonAttributeAtPosition(t2, e2) {
      const { index: i2, offset: n2 } = this.locationFromPosition(e2), r3 = this.getTextAtIndex(i2), [o2, s2] = Array.from(r3.getExpandedRangeForAttributeAtOffset(t2, n2)), a2 = this.positionFromLocation({ index: i2, offset: o2 }), l2 = this.positionFromLocation({ index: i2, offset: s2 });
      return Lt([a2, l2]);
    }
    getBaseBlockAttributes() {
      let t2 = this.getBlockAtIndex(0).getAttributes();
      for (let e2 = 1; e2 < this.getBlockCount(); e2++) {
        const i2 = this.getBlockAtIndex(e2).getAttributes(), n2 = Math.min(t2.length, i2.length);
        t2 = (() => {
          const e3 = [];
          for (let r3 = 0; r3 < n2 && i2[r3] === t2[r3]; r3++)
            e3.push(i2[r3]);
          return e3;
        })();
      }
      return t2;
    }
    getAttachmentById(t2) {
      for (const e2 of this.getAttachments())
        if (e2.id === t2)
          return e2;
    }
    getAttachmentPieces() {
      let t2 = [];
      return this.blockList.eachObject((e2) => {
        let { text: i2 } = e2;
        return t2 = t2.concat(i2.getAttachmentPieces());
      }), t2;
    }
    getAttachments() {
      return this.getAttachmentPieces().map((t2) => t2.attachment);
    }
    getRangeOfAttachment(t2) {
      let e2 = 0;
      const i2 = this.blockList.toArray();
      for (let n2 = 0; n2 < i2.length; n2++) {
        const { text: r3 } = i2[n2], o2 = r3.getRangeOfAttachment(t2);
        if (o2)
          return Lt([e2 + o2[0], e2 + o2[1]]);
        e2 += r3.getLength();
      }
    }
    getLocationRangeOfAttachment(t2) {
      const e2 = this.getRangeOfAttachment(t2);
      return this.locationRangeFromRange(e2);
    }
    getAttachmentPieceForAttachment(t2) {
      for (const e2 of this.getAttachmentPieces())
        if (e2.attachment === t2)
          return e2;
    }
    findRangesForBlockAttribute(t2) {
      let e2 = 0;
      const i2 = [];
      return this.getBlocks().forEach((n2) => {
        const r3 = n2.getLength();
        n2.hasAttribute(t2) && i2.push([e2, e2 + r3]), e2 += r3;
      }), i2;
    }
    findRangesForTextAttribute(t2) {
      let { withValue: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i2 = 0, n2 = [];
      const r3 = [];
      return this.getPieces().forEach((o2) => {
        const s2 = o2.getLength();
        (function(i3) {
          return e2 ? i3.getAttribute(t2) === e2 : i3.hasAttribute(t2);
        })(o2) && (n2[1] === i2 ? n2[1] = i2 + s2 : r3.push(n2 = [i2, i2 + s2])), i2 += s2;
      }), r3;
    }
    locationFromPosition(t2) {
      const e2 = this.blockList.findIndexAndOffsetAtPosition(Math.max(0, t2));
      if (null != e2.index)
        return e2;
      {
        const t3 = this.getBlocks();
        return { index: t3.length - 1, offset: t3[t3.length - 1].getLength() };
      }
    }
    positionFromLocation(t2) {
      return this.blockList.findPositionAtIndexAndOffset(t2.index, t2.offset);
    }
    locationRangeFromPosition(t2) {
      return Lt(this.locationFromPosition(t2));
    }
    locationRangeFromRange(t2) {
      if (!(t2 = Lt(t2)))
        return;
      const [e2, i2] = Array.from(t2), n2 = this.locationFromPosition(e2), r3 = this.locationFromPosition(i2);
      return Lt([n2, r3]);
    }
    rangeFromLocationRange(t2) {
      let e2;
      t2 = Lt(t2);
      const i2 = this.positionFromLocation(t2[0]);
      return Dt(t2) || (e2 = this.positionFromLocation(t2[1])), Lt([i2, e2]);
    }
    isEqualTo(t2) {
      return this.blockList.isEqualTo(null == t2 ? void 0 : t2.blockList);
    }
    getTexts() {
      return this.getBlocks().map((t2) => t2.text);
    }
    getPieces() {
      const t2 = [];
      return Array.from(this.getTexts()).forEach((e2) => {
        t2.push(...Array.from(e2.getPieces() || []));
      }), t2;
    }
    getObjects() {
      return this.getBlocks().concat(this.getTexts()).concat(this.getPieces());
    }
    toSerializableDocument() {
      const t2 = [];
      return this.blockList.eachObject((e2) => t2.push(e2.copyWithText(e2.text.toSerializableText()))), new this.constructor(t2);
    }
    toString() {
      return this.blockList.toString();
    }
    toJSON() {
      return this.blockList.toJSON();
    }
    toConsole() {
      return JSON.stringify(this.blockList.toArray().map((t2) => JSON.parse(t2.text.toConsole())));
    }
  };
  var ze = function(t2) {
    const e2 = {}, i2 = t2.getLastAttribute();
    return i2 && (e2[i2] = true), e2;
  };
  var _e = "style href src width height class".split(" ");
  var He = "javascript:".split(" ");
  var Je = "script iframe form".split(" ");
  var Ke = class extends z {
    static sanitize(t2, e2) {
      const i2 = new this(t2, e2);
      return i2.sanitize(), i2;
    }
    constructor(t2) {
      let { allowedAttributes: e2, forbiddenProtocols: i2, forbiddenElements: n2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.allowedAttributes = e2 || _e, this.forbiddenProtocols = i2 || He, this.forbiddenElements = n2 || Je, this.body = Ge(t2);
    }
    sanitize() {
      return this.sanitizeElements(), this.normalizeListElementNesting();
    }
    getHTML() {
      return this.body.innerHTML;
    }
    getBody() {
      return this.body;
    }
    sanitizeElements() {
      const t2 = S(this.body), e2 = [];
      for (; t2.nextNode(); ) {
        const i2 = t2.currentNode;
        switch (i2.nodeType) {
          case Node.ELEMENT_NODE:
            this.elementIsRemovable(i2) ? e2.push(i2) : this.sanitizeElement(i2);
            break;
          case Node.COMMENT_NODE:
            e2.push(i2);
        }
      }
      return e2.forEach((t3) => R(t3)), this.body;
    }
    sanitizeElement(t2) {
      return t2.hasAttribute("href") && this.forbiddenProtocols.includes(t2.protocol) && t2.removeAttribute("href"), Array.from(t2.attributes).forEach((e2) => {
        let { name: i2 } = e2;
        this.allowedAttributes.includes(i2) || 0 === i2.indexOf("data-trix") || t2.removeAttribute(i2);
      }), t2;
    }
    normalizeListElementNesting() {
      return Array.from(this.body.querySelectorAll("ul,ol")).forEach((t2) => {
        const e2 = t2.previousElementSibling;
        e2 && "li" === E(e2) && e2.appendChild(t2);
      }), this.body;
    }
    elementIsRemovable(t2) {
      if ((null == t2 ? void 0 : t2.nodeType) === Node.ELEMENT_NODE)
        return this.elementIsForbidden(t2) || this.elementIsntSerializable(t2);
    }
    elementIsForbidden(t2) {
      return this.forbiddenElements.includes(E(t2));
    }
    elementIsntSerializable(t2) {
      return "false" === t2.getAttribute("data-trix-serialize") && !P(t2);
    }
  };
  var Ge = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
    t2 = t2.replace(/<\/html[^>]*>[^]*$/i, "</html>");
    const e2 = document.implementation.createHTMLDocument("");
    return e2.documentElement.innerHTML = t2, Array.from(e2.head.querySelectorAll("style")).forEach((t3) => {
      e2.body.appendChild(t3);
    }), e2.body;
  };
  var $e = function(t2) {
    let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
    return { string: t2 = Ut(t2), attributes: e2, type: "string" };
  };
  var Xe = (t2, e2) => {
    try {
      return JSON.parse(t2.getAttribute("data-trix-".concat(e2)));
    } catch (t3) {
      return {};
    }
  };
  var Ye = class extends z {
    static parse(t2, e2) {
      const i2 = new this(t2, e2);
      return i2.parse(), i2;
    }
    constructor(t2) {
      let { referenceElement: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      super(...arguments), this.html = t2, this.referenceElement = e2, this.blocks = [], this.blockElements = [], this.processedElements = [];
    }
    getDocument() {
      return Ve.fromJSON(this.blocks);
    }
    parse() {
      try {
        this.createHiddenContainer();
        const t2 = Ke.sanitize(this.html).getHTML();
        this.containerElement.innerHTML = t2;
        const e2 = S(this.containerElement, { usingFilter: ei });
        for (; e2.nextNode(); )
          this.processNode(e2.currentNode);
        return this.translateBlockElementMarginsToNewlines();
      } finally {
        this.removeHiddenContainer();
      }
    }
    createHiddenContainer() {
      return this.referenceElement ? (this.containerElement = this.referenceElement.cloneNode(false), this.containerElement.removeAttribute("id"), this.containerElement.setAttribute("data-trix-internal", ""), this.containerElement.style.display = "none", this.referenceElement.parentNode.insertBefore(this.containerElement, this.referenceElement.nextSibling)) : (this.containerElement = k({ tagName: "div", style: { display: "none" } }), document.body.appendChild(this.containerElement));
    }
    removeHiddenContainer() {
      return R(this.containerElement);
    }
    processNode(t2) {
      switch (t2.nodeType) {
        case Node.TEXT_NODE:
          if (!this.isInsignificantTextNode(t2))
            return this.appendBlockForTextNode(t2), this.processTextNode(t2);
          break;
        case Node.ELEMENT_NODE:
          return this.appendBlockForElement(t2), this.processElement(t2);
      }
    }
    appendBlockForTextNode(t2) {
      const e2 = t2.parentNode;
      if (e2 === this.currentBlockElement && this.isBlockElement(t2.previousSibling))
        return this.appendStringWithAttributes("\n");
      if (e2 === this.containerElement || this.isBlockElement(e2)) {
        var i2;
        const t3 = this.getBlockAttributes(e2);
        rt(t3, null === (i2 = this.currentBlock) || void 0 === i2 ? void 0 : i2.attributes) || (this.currentBlock = this.appendBlockForAttributesWithElement(t3, e2), this.currentBlockElement = e2);
      }
    }
    appendBlockForElement(t2) {
      const e2 = this.isBlockElement(t2), i2 = y(this.currentBlockElement, t2);
      if (e2 && !this.isBlockElement(t2.firstChild)) {
        if (!this.isInsignificantTextNode(t2.firstChild) || !this.isBlockElement(t2.firstElementChild)) {
          const e3 = this.getBlockAttributes(t2);
          if (t2.firstChild) {
            if (i2 && rt(e3, this.currentBlock.attributes))
              return this.appendStringWithAttributes("\n");
            this.currentBlock = this.appendBlockForAttributesWithElement(e3, t2), this.currentBlockElement = t2;
          }
        }
      } else if (this.currentBlockElement && !i2 && !e2) {
        const e3 = this.findParentBlockElement(t2);
        if (e3)
          return this.appendBlockForElement(e3);
        this.currentBlock = this.appendEmptyBlock(), this.currentBlockElement = null;
      }
    }
    findParentBlockElement(t2) {
      let { parentElement: e2 } = t2;
      for (; e2 && e2 !== this.containerElement; ) {
        if (this.isBlockElement(e2) && this.blockElements.includes(e2))
          return e2;
        e2 = e2.parentElement;
      }
      return null;
    }
    processTextNode(t2) {
      let e2 = t2.data;
      var i2;
      Qe(t2.parentNode) || (e2 = Vt(e2), ri(null === (i2 = t2.previousSibling) || void 0 === i2 ? void 0 : i2.textContent) && (e2 = ii(e2)));
      return this.appendStringWithAttributes(e2, this.getTextAttributes(t2.parentNode));
    }
    processElement(t2) {
      let e2;
      if (P(t2)) {
        if (e2 = Xe(t2, "attachment"), Object.keys(e2).length) {
          const i2 = this.getTextAttributes(t2);
          this.appendAttachmentWithAttributes(e2, i2), t2.innerHTML = "";
        }
        return this.processedElements.push(t2);
      }
      switch (E(t2)) {
        case "br":
          return this.isExtraBR(t2) || this.isBlockElement(t2.nextSibling) || this.appendStringWithAttributes("\n", this.getTextAttributes(t2)), this.processedElements.push(t2);
        case "img":
          e2 = { url: t2.getAttribute("src"), contentType: "image" };
          const i2 = ((t3) => {
            const e3 = t3.getAttribute("width"), i3 = t3.getAttribute("height"), n2 = {};
            return e3 && (n2.width = parseInt(e3, 10)), i3 && (n2.height = parseInt(i3, 10)), n2;
          })(t2);
          for (const t3 in i2) {
            const n2 = i2[t3];
            e2[t3] = n2;
          }
          return this.appendAttachmentWithAttributes(e2, this.getTextAttributes(t2)), this.processedElements.push(t2);
        case "tr":
          if (this.needsTableSeparator(t2))
            return this.appendStringWithAttributes(j.tableRowSeparator);
          break;
        case "td":
          if (this.needsTableSeparator(t2))
            return this.appendStringWithAttributes(j.tableCellSeparator);
      }
    }
    appendBlockForAttributesWithElement(t2, e2) {
      this.blockElements.push(e2);
      const i2 = function() {
        return { text: [], attributes: arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {} };
      }(t2);
      return this.blocks.push(i2), i2;
    }
    appendEmptyBlock() {
      return this.appendBlockForAttributesWithElement([], null);
    }
    appendStringWithAttributes(t2, e2) {
      return this.appendPiece($e(t2, e2));
    }
    appendAttachmentWithAttributes(t2, e2) {
      return this.appendPiece(function(t3) {
        return { attachment: t3, attributes: arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, type: "attachment" };
      }(t2, e2));
    }
    appendPiece(t2) {
      return 0 === this.blocks.length && this.appendEmptyBlock(), this.blocks[this.blocks.length - 1].text.push(t2);
    }
    appendStringToTextAtIndex(t2, e2) {
      const { text: i2 } = this.blocks[e2], n2 = i2[i2.length - 1];
      if ("string" !== (null == n2 ? void 0 : n2.type))
        return i2.push($e(t2));
      n2.string += t2;
    }
    prependStringToTextAtIndex(t2, e2) {
      const { text: i2 } = this.blocks[e2], n2 = i2[0];
      if ("string" !== (null == n2 ? void 0 : n2.type))
        return i2.unshift($e(t2));
      n2.string = t2 + n2.string;
    }
    getTextAttributes(t2) {
      let e2;
      const i2 = {};
      for (const n2 in W) {
        const r3 = W[n2];
        if (r3.tagName && A(t2, { matchingSelector: r3.tagName, untilNode: this.containerElement }))
          i2[n2] = true;
        else if (r3.parser) {
          if (e2 = r3.parser(t2), e2) {
            let o2 = false;
            for (const i3 of this.findBlockElementAncestors(t2))
              if (r3.parser(i3) === e2) {
                o2 = true;
                break;
              }
            o2 || (i2[n2] = e2);
          }
        } else
          r3.styleProperty && (e2 = t2.style[r3.styleProperty], e2 && (i2[n2] = e2));
      }
      if (P(t2)) {
        const n2 = Xe(t2, "attributes");
        for (const t3 in n2)
          e2 = n2[t3], i2[t3] = e2;
      }
      return i2;
    }
    getBlockAttributes(t2) {
      const e2 = [];
      for (; t2 && t2 !== this.containerElement; ) {
        for (const r3 in n) {
          const o2 = n[r3];
          var i2;
          if (false !== o2.parse) {
            if (E(t2) === o2.tagName)
              (null !== (i2 = o2.test) && void 0 !== i2 && i2.call(o2, t2) || !o2.test) && (e2.push(r3), o2.listAttribute && e2.push(o2.listAttribute));
          }
        }
        t2 = t2.parentNode;
      }
      return e2.reverse();
    }
    findBlockElementAncestors(t2) {
      const e2 = [];
      for (; t2 && t2 !== this.containerElement; ) {
        const i2 = E(t2);
        D().includes(i2) && e2.push(t2), t2 = t2.parentNode;
      }
      return e2;
    }
    isBlockElement(t2) {
      if ((null == t2 ? void 0 : t2.nodeType) === Node.ELEMENT_NODE && !P(t2) && !A(t2, { matchingSelector: "td", untilNode: this.containerElement }))
        return D().includes(E(t2)) || "block" === window.getComputedStyle(t2).display;
    }
    isInsignificantTextNode(t2) {
      if ((null == t2 ? void 0 : t2.nodeType) !== Node.TEXT_NODE)
        return;
      if (!ni(t2.data))
        return;
      const { parentNode: e2, previousSibling: i2, nextSibling: n2 } = t2;
      return Ze(e2.previousSibling) && !this.isBlockElement(e2.previousSibling) || Qe(e2) ? void 0 : !i2 || this.isBlockElement(i2) || !n2 || this.isBlockElement(n2);
    }
    isExtraBR(t2) {
      return "br" === E(t2) && this.isBlockElement(t2.parentNode) && t2.parentNode.lastChild === t2;
    }
    needsTableSeparator(t2) {
      if (j.removeBlankTableCells) {
        var e2;
        const i2 = null === (e2 = t2.previousSibling) || void 0 === e2 ? void 0 : e2.textContent;
        return i2 && /\S/.test(i2);
      }
      return t2.previousSibling;
    }
    translateBlockElementMarginsToNewlines() {
      const t2 = this.getMarginOfDefaultBlockElement();
      for (let e2 = 0; e2 < this.blocks.length; e2++) {
        const i2 = this.getMarginOfBlockElementAtIndex(e2);
        i2 && (i2.top > 2 * t2.top && this.prependStringToTextAtIndex("\n", e2), i2.bottom > 2 * t2.bottom && this.appendStringToTextAtIndex("\n", e2));
      }
    }
    getMarginOfBlockElementAtIndex(t2) {
      const e2 = this.blockElements[t2];
      if (e2 && e2.textContent && !D().includes(E(e2)) && !this.processedElements.includes(e2))
        return ti(e2);
    }
    getMarginOfDefaultBlockElement() {
      const t2 = k(n.default.tagName);
      return this.containerElement.appendChild(t2), ti(t2);
    }
  };
  var Qe = function(t2) {
    const { whiteSpace: e2 } = window.getComputedStyle(t2);
    return ["pre", "pre-wrap", "pre-line"].includes(e2);
  };
  var Ze = (t2) => t2 && !ri(t2.textContent);
  var ti = function(t2) {
    const e2 = window.getComputedStyle(t2);
    if ("block" === e2.display)
      return { top: parseInt(e2.marginTop), bottom: parseInt(e2.marginBottom) };
  };
  var ei = function(t2) {
    return "style" === E(t2) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
  };
  var ii = (t2) => t2.replace(new RegExp("^".concat(qt.source, "+")), "");
  var ni = (t2) => new RegExp("^".concat(qt.source, "*$")).test(t2);
  var ri = (t2) => /\s$/.test(t2);
  var oi = ["contenteditable", "data-trix-id", "data-trix-store-key", "data-trix-mutable", "data-trix-placeholder", "tabindex"];
  var si = "data-trix-serialized-attributes";
  var ai = "[".concat(si, "]");
  var li = new RegExp("<!--block-->", "g");
  var ci = { "application/json": function(t2) {
    let e2;
    if (t2 instanceof Ve)
      e2 = t2;
    else {
      if (!(t2 instanceof HTMLElement))
        throw new Error("unserializable object");
      e2 = Ye.parse(t2.innerHTML).getDocument();
    }
    return e2.toSerializableDocument().toJSONString();
  }, "text/html": function(t2) {
    let e2;
    if (t2 instanceof Ve)
      e2 = me.render(t2);
    else {
      if (!(t2 instanceof HTMLElement))
        throw new Error("unserializable object");
      e2 = t2.cloneNode(true);
    }
    return Array.from(e2.querySelectorAll("[data-trix-serialize=false]")).forEach((t3) => {
      R(t3);
    }), oi.forEach((t3) => {
      Array.from(e2.querySelectorAll("[".concat(t3, "]"))).forEach((e3) => {
        e3.removeAttribute(t3);
      });
    }), Array.from(e2.querySelectorAll(ai)).forEach((t3) => {
      try {
        const e3 = JSON.parse(t3.getAttribute(si));
        t3.removeAttribute(si);
        for (const i2 in e3) {
          const n2 = e3[i2];
          t3.setAttribute(i2, n2);
        }
      } catch (t4) {
      }
    }), e2.innerHTML.replace(li, "");
  } };
  var ui = Object.freeze({ __proto__: null });
  var hi = class extends z {
    constructor(t2, e2) {
      super(...arguments), this.attachmentManager = t2, this.attachment = e2, this.id = this.attachment.id, this.file = this.attachment.file;
    }
    remove() {
      return this.attachmentManager.requestRemovalOfAttachment(this.attachment);
    }
  };
  hi.proxyMethod("attachment.getAttribute"), hi.proxyMethod("attachment.hasAttribute"), hi.proxyMethod("attachment.setAttribute"), hi.proxyMethod("attachment.getAttributes"), hi.proxyMethod("attachment.setAttributes"), hi.proxyMethod("attachment.isPending"), hi.proxyMethod("attachment.isPreviewable"), hi.proxyMethod("attachment.getURL"), hi.proxyMethod("attachment.getHref"), hi.proxyMethod("attachment.getFilename"), hi.proxyMethod("attachment.getFilesize"), hi.proxyMethod("attachment.getFormattedFilesize"), hi.proxyMethod("attachment.getExtension"), hi.proxyMethod("attachment.getContentType"), hi.proxyMethod("attachment.getFile"), hi.proxyMethod("attachment.setFile"), hi.proxyMethod("attachment.releaseFile"), hi.proxyMethod("attachment.getUploadProgress"), hi.proxyMethod("attachment.setUploadProgress");
  var di = class extends z {
    constructor() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
      super(...arguments), this.managedAttachments = {}, Array.from(t2).forEach((t3) => {
        this.manageAttachment(t3);
      });
    }
    getAttachments() {
      const t2 = [];
      for (const e2 in this.managedAttachments) {
        const i2 = this.managedAttachments[e2];
        t2.push(i2);
      }
      return t2;
    }
    manageAttachment(t2) {
      return this.managedAttachments[t2.id] || (this.managedAttachments[t2.id] = new hi(this, t2)), this.managedAttachments[t2.id];
    }
    attachmentIsManaged(t2) {
      return t2.id in this.managedAttachments;
    }
    requestRemovalOfAttachment(t2) {
      var e2, i2;
      if (this.attachmentIsManaged(t2))
        return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.attachmentManagerDidRequestRemovalOfAttachment) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    unmanageAttachment(t2) {
      const e2 = this.managedAttachments[t2.id];
      return delete this.managedAttachments[t2.id], e2;
    }
  };
  var gi = class {
    constructor(t2) {
      this.composition = t2, this.document = this.composition.document;
      const e2 = this.composition.getSelectedRange();
      this.startPosition = e2[0], this.endPosition = e2[1], this.startLocation = this.document.locationFromPosition(this.startPosition), this.endLocation = this.document.locationFromPosition(this.endPosition), this.block = this.document.getBlockAtIndex(this.endLocation.index), this.breaksOnReturn = this.block.breaksOnReturn(), this.previousCharacter = this.block.text.getStringAtPosition(this.endLocation.offset - 1), this.nextCharacter = this.block.text.getStringAtPosition(this.endLocation.offset);
    }
    shouldInsertBlockBreak() {
      return this.block.hasAttributes() && this.block.isListItem() && !this.block.isEmpty() ? 0 !== this.startLocation.offset : this.breaksOnReturn && "\n" !== this.nextCharacter;
    }
    shouldBreakFormattedBlock() {
      return this.block.hasAttributes() && !this.block.isListItem() && (this.breaksOnReturn && "\n" === this.nextCharacter || "\n" === this.previousCharacter);
    }
    shouldDecreaseListLevel() {
      return this.block.hasAttributes() && this.block.isListItem() && this.block.isEmpty();
    }
    shouldPrependListItem() {
      return this.block.isListItem() && 0 === this.startLocation.offset && !this.block.isEmpty();
    }
    shouldRemoveLastBlockAttribute() {
      return this.block.hasAttributes() && !this.block.isListItem() && this.block.isEmpty();
    }
  };
  var mi = class extends z {
    constructor() {
      super(...arguments), this.document = new Ve(), this.attachments = [], this.currentAttributes = {}, this.revision = 0;
    }
    setDocument(t2) {
      var e2, i2;
      if (!t2.isEqualTo(this.document))
        return this.document = t2, this.refreshAttachments(), this.revision++, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionDidChangeDocument) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    getSnapshot() {
      return { document: this.document, selectedRange: this.getSelectedRange() };
    }
    loadSnapshot(t2) {
      var e2, i2, n2, r3;
      let { document: o2, selectedRange: s2 } = t2;
      return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionWillLoadSnapshot) || void 0 === i2 || i2.call(e2), this.setDocument(null != o2 ? o2 : new Ve()), this.setSelection(null != s2 ? s2 : [0, 0]), null === (n2 = this.delegate) || void 0 === n2 || null === (r3 = n2.compositionDidLoadSnapshot) || void 0 === r3 ? void 0 : r3.call(n2);
    }
    insertText(t2) {
      let { updatePosition: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { updatePosition: true };
      const i2 = this.getSelectedRange();
      this.setDocument(this.document.insertTextAtRange(t2, i2));
      const n2 = i2[0], r3 = n2 + t2.getLength();
      return e2 && this.setSelection(r3), this.notifyDelegateOfInsertionAtRange([n2, r3]);
    }
    insertBlock() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Be();
      const e2 = new Ve([t2]);
      return this.insertDocument(e2);
    }
    insertDocument() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Ve();
      const e2 = this.getSelectedRange();
      this.setDocument(this.document.insertDocumentAtRange(t2, e2));
      const i2 = e2[0], n2 = i2 + t2.getLength();
      return this.setSelection(n2), this.notifyDelegateOfInsertionAtRange([i2, n2]);
    }
    insertString(t2, e2) {
      const i2 = this.getCurrentTextAttributes(), n2 = Fe.textForStringWithAttributes(t2, i2);
      return this.insertText(n2, e2);
    }
    insertBlockBreak() {
      const t2 = this.getSelectedRange();
      this.setDocument(this.document.insertBlockBreakAtRange(t2));
      const e2 = t2[0], i2 = e2 + 1;
      return this.setSelection(i2), this.notifyDelegateOfInsertionAtRange([e2, i2]);
    }
    insertLineBreak() {
      const t2 = new gi(this);
      if (t2.shouldDecreaseListLevel())
        return this.decreaseListLevel(), this.setSelection(t2.startPosition);
      if (t2.shouldPrependListItem()) {
        const e2 = new Ve([t2.block.copyWithoutText()]);
        return this.insertDocument(e2);
      }
      return t2.shouldInsertBlockBreak() ? this.insertBlockBreak() : t2.shouldRemoveLastBlockAttribute() ? this.removeLastBlockAttribute() : t2.shouldBreakFormattedBlock() ? this.breakFormattedBlock(t2) : this.insertString("\n");
    }
    insertHTML(t2) {
      const e2 = Ye.parse(t2).getDocument(), i2 = this.getSelectedRange();
      this.setDocument(this.document.mergeDocumentAtRange(e2, i2));
      const n2 = i2[0], r3 = n2 + e2.getLength() - 1;
      return this.setSelection(r3), this.notifyDelegateOfInsertionAtRange([n2, r3]);
    }
    replaceHTML(t2) {
      const e2 = Ye.parse(t2).getDocument().copyUsingObjectsFromDocument(this.document), i2 = this.getLocationRange({ strict: false }), n2 = this.document.rangeFromLocationRange(i2);
      return this.setDocument(e2), this.setSelection(n2);
    }
    insertFile(t2) {
      return this.insertFiles([t2]);
    }
    insertFiles(t2) {
      const e2 = [];
      return Array.from(t2).forEach((t3) => {
        var i2;
        if (null !== (i2 = this.delegate) && void 0 !== i2 && i2.compositionShouldAcceptFile(t3)) {
          const i3 = Se.attachmentForFile(t3);
          e2.push(i3);
        }
      }), this.insertAttachments(e2);
    }
    insertAttachment(t2) {
      return this.insertAttachments([t2]);
    }
    insertAttachments(t2) {
      let e2 = new Fe();
      return Array.from(t2).forEach((t3) => {
        var n2;
        const r3 = t3.getType(), o2 = null === (n2 = i[r3]) || void 0 === n2 ? void 0 : n2.presentation, s2 = this.getCurrentTextAttributes();
        o2 && (s2.presentation = o2);
        const a2 = Fe.textForAttachmentWithAttributes(t3, s2);
        e2 = e2.appendText(a2);
      }), this.insertText(e2);
    }
    shouldManageDeletingInDirection(t2) {
      const e2 = this.getLocationRange();
      if (Dt(e2)) {
        if ("backward" === t2 && 0 === e2[0].offset)
          return true;
        if (this.shouldManageMovingCursorInDirection(t2))
          return true;
      } else if (e2[0].index !== e2[1].index)
        return true;
      return false;
    }
    deleteInDirection(t2) {
      let e2, i2, n2, { length: r3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      const o2 = this.getLocationRange();
      let s2 = this.getSelectedRange();
      const a2 = Dt(s2);
      if (a2 ? i2 = "backward" === t2 && 0 === o2[0].offset : n2 = o2[0].index !== o2[1].index, i2 && this.canDecreaseBlockAttributeLevel()) {
        const t3 = this.getBlock();
        if (t3.isListItem() ? this.decreaseListLevel() : this.decreaseBlockAttributeLevel(), this.setSelection(s2[0]), t3.isEmpty())
          return false;
      }
      return a2 && (s2 = this.getExpandedRangeInDirection(t2, { length: r3 }), "backward" === t2 && (e2 = this.getAttachmentAtRange(s2))), e2 ? (this.editAttachment(e2), false) : (this.setDocument(this.document.removeTextAtRange(s2)), this.setSelection(s2[0]), !i2 && !n2 && void 0);
    }
    moveTextFromRange(t2) {
      const [e2] = Array.from(this.getSelectedRange());
      return this.setDocument(this.document.moveTextFromRangeToPosition(t2, e2)), this.setSelection(e2);
    }
    removeAttachment(t2) {
      const e2 = this.document.getRangeOfAttachment(t2);
      if (e2)
        return this.stopEditingAttachment(), this.setDocument(this.document.removeTextAtRange(e2)), this.setSelection(e2[0]);
    }
    removeLastBlockAttribute() {
      const [t2, e2] = Array.from(this.getSelectedRange()), i2 = this.document.getBlockAtPosition(e2);
      return this.removeCurrentAttribute(i2.getLastAttribute()), this.setSelection(t2);
    }
    insertPlaceholder() {
      return this.placeholderPosition = this.getPosition(), this.insertString(" ");
    }
    selectPlaceholder() {
      if (null != this.placeholderPosition)
        return this.setSelectedRange([this.placeholderPosition, this.placeholderPosition + 1]), this.getSelectedRange();
    }
    forgetPlaceholder() {
      this.placeholderPosition = null;
    }
    hasCurrentAttribute(t2) {
      const e2 = this.currentAttributes[t2];
      return null != e2 && false !== e2;
    }
    toggleCurrentAttribute(t2) {
      const e2 = !this.currentAttributes[t2];
      return e2 ? this.setCurrentAttribute(t2, e2) : this.removeCurrentAttribute(t2);
    }
    canSetCurrentAttribute(t2) {
      return gt(t2) ? this.canSetCurrentBlockAttribute(t2) : this.canSetCurrentTextAttribute(t2);
    }
    canSetCurrentTextAttribute(t2) {
      const e2 = this.getSelectedDocument();
      if (e2) {
        for (const t3 of Array.from(e2.getAttachments()))
          if (!t3.hasContent())
            return false;
        return true;
      }
    }
    canSetCurrentBlockAttribute(t2) {
      const e2 = this.getBlock();
      if (e2)
        return !e2.isTerminalBlock();
    }
    setCurrentAttribute(t2, e2) {
      return gt(t2) ? this.setBlockAttribute(t2, e2) : (this.setTextAttribute(t2, e2), this.currentAttributes[t2] = e2, this.notifyDelegateOfCurrentAttributesChange());
    }
    setTextAttribute(t2, e2) {
      const i2 = this.getSelectedRange();
      if (!i2)
        return;
      const [n2, r3] = Array.from(i2);
      if (n2 !== r3)
        return this.setDocument(this.document.addAttributeAtRange(t2, e2, i2));
      if ("href" === t2) {
        const t3 = Fe.textForStringWithAttributes(e2, { href: e2 });
        return this.insertText(t3);
      }
    }
    setBlockAttribute(t2, e2) {
      const i2 = this.getSelectedRange();
      if (this.canSetCurrentAttribute(t2))
        return this.setDocument(this.document.applyBlockAttributeAtRange(t2, e2, i2)), this.setSelection(i2);
    }
    removeCurrentAttribute(t2) {
      return gt(t2) ? (this.removeBlockAttribute(t2), this.updateCurrentAttributes()) : (this.removeTextAttribute(t2), delete this.currentAttributes[t2], this.notifyDelegateOfCurrentAttributesChange());
    }
    removeTextAttribute(t2) {
      const e2 = this.getSelectedRange();
      if (e2)
        return this.setDocument(this.document.removeAttributeAtRange(t2, e2));
    }
    removeBlockAttribute(t2) {
      const e2 = this.getSelectedRange();
      if (e2)
        return this.setDocument(this.document.removeAttributeAtRange(t2, e2));
    }
    canDecreaseNestingLevel() {
      var t2;
      return (null === (t2 = this.getBlock()) || void 0 === t2 ? void 0 : t2.getNestingLevel()) > 0;
    }
    canIncreaseNestingLevel() {
      var t2;
      const e2 = this.getBlock();
      if (e2) {
        if (null === (t2 = gt(e2.getLastNestableAttribute())) || void 0 === t2 || !t2.listAttribute)
          return e2.getNestingLevel() > 0;
        {
          const t3 = this.getPreviousBlock();
          if (t3)
            return function() {
              let t4 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
              return rt((arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : []).slice(0, t4.length), t4);
            }(t3.getListItemAttributes(), e2.getListItemAttributes());
        }
      }
    }
    decreaseNestingLevel() {
      const t2 = this.getBlock();
      if (t2)
        return this.setDocument(this.document.replaceBlock(t2, t2.decreaseNestingLevel()));
    }
    increaseNestingLevel() {
      const t2 = this.getBlock();
      if (t2)
        return this.setDocument(this.document.replaceBlock(t2, t2.increaseNestingLevel()));
    }
    canDecreaseBlockAttributeLevel() {
      var t2;
      return (null === (t2 = this.getBlock()) || void 0 === t2 ? void 0 : t2.getAttributeLevel()) > 0;
    }
    decreaseBlockAttributeLevel() {
      var t2;
      const e2 = null === (t2 = this.getBlock()) || void 0 === t2 ? void 0 : t2.getLastAttribute();
      if (e2)
        return this.removeCurrentAttribute(e2);
    }
    decreaseListLevel() {
      let [t2] = Array.from(this.getSelectedRange());
      const { index: e2 } = this.document.locationFromPosition(t2);
      let i2 = e2;
      const n2 = this.getBlock().getAttributeLevel();
      let r3 = this.document.getBlockAtIndex(i2 + 1);
      for (; r3 && r3.isListItem() && !(r3.getAttributeLevel() <= n2); )
        i2++, r3 = this.document.getBlockAtIndex(i2 + 1);
      t2 = this.document.positionFromLocation({ index: e2, offset: 0 });
      const o2 = this.document.positionFromLocation({ index: i2, offset: 0 });
      return this.setDocument(this.document.removeLastListAttributeAtRange([t2, o2]));
    }
    updateCurrentAttributes() {
      const t2 = this.getSelectedRange({ ignoreLock: true });
      if (t2) {
        const e2 = this.document.getCommonAttributesAtRange(t2);
        if (Array.from(dt()).forEach((t3) => {
          e2[t3] || this.canSetCurrentAttribute(t3) || (e2[t3] = false);
        }), !kt(e2, this.currentAttributes))
          return this.currentAttributes = e2, this.notifyDelegateOfCurrentAttributesChange();
      }
    }
    getCurrentAttributes() {
      return g.call({}, this.currentAttributes);
    }
    getCurrentTextAttributes() {
      const t2 = {};
      for (const e2 in this.currentAttributes) {
        const i2 = this.currentAttributes[e2];
        false !== i2 && pt(e2) && (t2[e2] = i2);
      }
      return t2;
    }
    freezeSelection() {
      return this.setCurrentAttribute("frozen", true);
    }
    thawSelection() {
      return this.removeCurrentAttribute("frozen");
    }
    hasFrozenSelection() {
      return this.hasCurrentAttribute("frozen");
    }
    setSelection(t2) {
      var e2;
      const i2 = this.document.locationRangeFromRange(t2);
      return null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.compositionDidRequestChangingSelectionToLocationRange(i2);
    }
    getSelectedRange() {
      const t2 = this.getLocationRange();
      if (t2)
        return this.document.rangeFromLocationRange(t2);
    }
    setSelectedRange(t2) {
      const e2 = this.document.locationRangeFromRange(t2);
      return this.getSelectionManager().setLocationRange(e2);
    }
    getPosition() {
      const t2 = this.getLocationRange();
      if (t2)
        return this.document.positionFromLocation(t2[0]);
    }
    getLocationRange(t2) {
      return this.targetLocationRange ? this.targetLocationRange : this.getSelectionManager().getLocationRange(t2) || Lt({ index: 0, offset: 0 });
    }
    withTargetLocationRange(t2, e2) {
      let i2;
      this.targetLocationRange = t2;
      try {
        i2 = e2();
      } finally {
        this.targetLocationRange = null;
      }
      return i2;
    }
    withTargetRange(t2, e2) {
      const i2 = this.document.locationRangeFromRange(t2);
      return this.withTargetLocationRange(i2, e2);
    }
    withTargetDOMRange(t2, e2) {
      const i2 = this.createLocationRangeFromDOMRange(t2, { strict: false });
      return this.withTargetLocationRange(i2, e2);
    }
    getExpandedRangeInDirection(t2) {
      let { length: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, [i2, n2] = Array.from(this.getSelectedRange());
      return "backward" === t2 ? e2 ? i2 -= e2 : i2 = this.translateUTF16PositionFromOffset(i2, -1) : e2 ? n2 += e2 : n2 = this.translateUTF16PositionFromOffset(n2, 1), Lt([i2, n2]);
    }
    shouldManageMovingCursorInDirection(t2) {
      if (this.editingAttachment)
        return true;
      const e2 = this.getExpandedRangeInDirection(t2);
      return null != this.getAttachmentAtRange(e2);
    }
    moveCursorInDirection(t2) {
      let e2, i2;
      if (this.editingAttachment)
        i2 = this.document.getRangeOfAttachment(this.editingAttachment);
      else {
        const n2 = this.getSelectedRange();
        i2 = this.getExpandedRangeInDirection(t2), e2 = !wt(n2, i2);
      }
      if ("backward" === t2 ? this.setSelectedRange(i2[0]) : this.setSelectedRange(i2[1]), e2) {
        const t3 = this.getAttachmentAtRange(i2);
        if (t3)
          return this.editAttachment(t3);
      }
    }
    expandSelectionInDirection(t2) {
      let { length: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      const i2 = this.getExpandedRangeInDirection(t2, { length: e2 });
      return this.setSelectedRange(i2);
    }
    expandSelectionForEditing() {
      if (this.hasCurrentAttribute("href"))
        return this.expandSelectionAroundCommonAttribute("href");
    }
    expandSelectionAroundCommonAttribute(t2) {
      const e2 = this.getPosition(), i2 = this.document.getRangeOfCommonAttributeAtPosition(t2, e2);
      return this.setSelectedRange(i2);
    }
    selectionContainsAttachments() {
      var t2;
      return (null === (t2 = this.getSelectedAttachments()) || void 0 === t2 ? void 0 : t2.length) > 0;
    }
    selectionIsInCursorTarget() {
      return this.editingAttachment || this.positionIsCursorTarget(this.getPosition());
    }
    positionIsCursorTarget(t2) {
      const e2 = this.document.locationFromPosition(t2);
      if (e2)
        return this.locationIsCursorTarget(e2);
    }
    positionIsBlockBreak(t2) {
      var e2;
      return null === (e2 = this.document.getPieceAtPosition(t2)) || void 0 === e2 ? void 0 : e2.isBlockBreak();
    }
    getSelectedDocument() {
      const t2 = this.getSelectedRange();
      if (t2)
        return this.document.getDocumentAtRange(t2);
    }
    getSelectedAttachments() {
      var t2;
      return null === (t2 = this.getSelectedDocument()) || void 0 === t2 ? void 0 : t2.getAttachments();
    }
    getAttachments() {
      return this.attachments.slice(0);
    }
    refreshAttachments() {
      const t2 = this.document.getAttachments(), { added: e2, removed: i2 } = function() {
        let t3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
        const i3 = [], n2 = [], r3 = /* @__PURE__ */ new Set();
        t3.forEach((t4) => {
          r3.add(t4);
        });
        const o2 = /* @__PURE__ */ new Set();
        return e3.forEach((t4) => {
          o2.add(t4), r3.has(t4) || i3.push(t4);
        }), t3.forEach((t4) => {
          o2.has(t4) || n2.push(t4);
        }), { added: i3, removed: n2 };
      }(this.attachments, t2);
      return this.attachments = t2, Array.from(i2).forEach((t3) => {
        var e3, i3;
        t3.delegate = null, null === (e3 = this.delegate) || void 0 === e3 || null === (i3 = e3.compositionDidRemoveAttachment) || void 0 === i3 || i3.call(e3, t3);
      }), (() => {
        const t3 = [];
        return Array.from(e2).forEach((e3) => {
          var i3, n2;
          e3.delegate = this, t3.push(null === (i3 = this.delegate) || void 0 === i3 || null === (n2 = i3.compositionDidAddAttachment) || void 0 === n2 ? void 0 : n2.call(i3, e3));
        }), t3;
      })();
    }
    attachmentDidChangeAttributes(t2) {
      var e2, i2;
      return this.revision++, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionDidEditAttachment) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    attachmentDidChangePreviewURL(t2) {
      var e2, i2;
      return this.revision++, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionDidChangeAttachmentPreviewURL) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    editAttachment(t2, e2) {
      var i2, n2;
      if (t2 !== this.editingAttachment)
        return this.stopEditingAttachment(), this.editingAttachment = t2, null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionDidStartEditingAttachment) || void 0 === n2 ? void 0 : n2.call(i2, this.editingAttachment, e2);
    }
    stopEditingAttachment() {
      var t2, e2;
      this.editingAttachment && (null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.compositionDidStopEditingAttachment) || void 0 === e2 || e2.call(t2, this.editingAttachment), this.editingAttachment = null);
    }
    updateAttributesForAttachment(t2, e2) {
      return this.setDocument(this.document.updateAttributesForAttachment(t2, e2));
    }
    removeAttributeForAttachment(t2, e2) {
      return this.setDocument(this.document.removeAttributeForAttachment(t2, e2));
    }
    breakFormattedBlock(t2) {
      let { document: e2 } = t2;
      const { block: i2 } = t2;
      let n2 = t2.startPosition, r3 = [n2 - 1, n2];
      i2.getBlockBreakPosition() === t2.startLocation.offset ? (i2.breaksOnReturn() && "\n" === t2.nextCharacter ? n2 += 1 : e2 = e2.removeTextAtRange(r3), r3 = [n2, n2]) : "\n" === t2.nextCharacter ? "\n" === t2.previousCharacter ? r3 = [n2 - 1, n2 + 1] : (r3 = [n2, n2 + 1], n2 += 1) : t2.startLocation.offset - 1 != 0 && (n2 += 1);
      const o2 = new Ve([i2.removeLastAttribute().copyWithoutText()]);
      return this.setDocument(e2.insertDocumentAtRange(o2, r3)), this.setSelection(n2);
    }
    getPreviousBlock() {
      const t2 = this.getLocationRange();
      if (t2) {
        const { index: e2 } = t2[0];
        if (e2 > 0)
          return this.document.getBlockAtIndex(e2 - 1);
      }
    }
    getBlock() {
      const t2 = this.getLocationRange();
      if (t2)
        return this.document.getBlockAtIndex(t2[0].index);
    }
    getAttachmentAtRange(t2) {
      const e2 = this.document.getDocumentAtRange(t2);
      if (e2.toString() === "".concat("\uFFFC", "\n"))
        return e2.getAttachments()[0];
    }
    notifyDelegateOfCurrentAttributesChange() {
      var t2, e2;
      return null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.compositionDidChangeCurrentAttributes) || void 0 === e2 ? void 0 : e2.call(t2, this.currentAttributes);
    }
    notifyDelegateOfInsertionAtRange(t2) {
      var e2, i2;
      return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionDidPerformInsertionAtRange) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    translateUTF16PositionFromOffset(t2, e2) {
      const i2 = this.document.toUTF16String(), n2 = i2.offsetFromUCS2Offset(t2);
      return i2.offsetToUCS2Offset(n2 + e2);
    }
  };
  mi.proxyMethod("getSelectionManager().getPointRange"), mi.proxyMethod("getSelectionManager().setLocationRangeFromPointRange"), mi.proxyMethod("getSelectionManager().createLocationRangeFromDOMRange"), mi.proxyMethod("getSelectionManager().locationIsCursorTarget"), mi.proxyMethod("getSelectionManager().selectionIsExpanded"), mi.proxyMethod("delegate?.getSelectionManager");
  var pi = class extends z {
    constructor(t2) {
      super(...arguments), this.composition = t2, this.undoEntries = [], this.redoEntries = [];
    }
    recordUndoEntry(t2) {
      let { context: e2, consolidatable: i2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      const n2 = this.undoEntries.slice(-1)[0];
      if (!i2 || !fi(n2, t2, e2)) {
        const i3 = this.createEntry({ description: t2, context: e2 });
        this.undoEntries.push(i3), this.redoEntries = [];
      }
    }
    undo() {
      const t2 = this.undoEntries.pop();
      if (t2) {
        const e2 = this.createEntry(t2);
        return this.redoEntries.push(e2), this.composition.loadSnapshot(t2.snapshot);
      }
    }
    redo() {
      const t2 = this.redoEntries.pop();
      if (t2) {
        const e2 = this.createEntry(t2);
        return this.undoEntries.push(e2), this.composition.loadSnapshot(t2.snapshot);
      }
    }
    canUndo() {
      return this.undoEntries.length > 0;
    }
    canRedo() {
      return this.redoEntries.length > 0;
    }
    createEntry() {
      let { description: t2, context: e2 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      return { description: null == t2 ? void 0 : t2.toString(), context: JSON.stringify(e2), snapshot: this.composition.getSnapshot() };
    }
  };
  var fi = (t2, e2, i2) => (null == t2 ? void 0 : t2.description) === (null == e2 ? void 0 : e2.toString()) && (null == t2 ? void 0 : t2.context) === JSON.stringify(i2);
  var bi = "attachmentGallery";
  var vi = class {
    constructor(t2) {
      this.document = t2.document, this.selectedRange = t2.selectedRange;
    }
    perform() {
      return this.removeBlockAttribute(), this.applyBlockAttribute();
    }
    getSnapshot() {
      return { document: this.document, selectedRange: this.selectedRange };
    }
    removeBlockAttribute() {
      return this.findRangesOfBlocks().map((t2) => this.document = this.document.removeAttributeAtRange(bi, t2));
    }
    applyBlockAttribute() {
      let t2 = 0;
      this.findRangesOfPieces().forEach((e2) => {
        e2[1] - e2[0] > 1 && (e2[0] += t2, e2[1] += t2, "\n" !== this.document.getCharacterAtPosition(e2[1]) && (this.document = this.document.insertBlockBreakAtRange(e2[1]), e2[1] < this.selectedRange[1] && this.moveSelectedRangeForward(), e2[1]++, t2++), 0 !== e2[0] && "\n" !== this.document.getCharacterAtPosition(e2[0] - 1) && (this.document = this.document.insertBlockBreakAtRange(e2[0]), e2[0] < this.selectedRange[0] && this.moveSelectedRangeForward(), e2[0]++, t2++), this.document = this.document.applyBlockAttributeAtRange(bi, true, e2));
      });
    }
    findRangesOfBlocks() {
      return this.document.findRangesForBlockAttribute(bi);
    }
    findRangesOfPieces() {
      return this.document.findRangesForTextAttribute("presentation", { withValue: "gallery" });
    }
    moveSelectedRangeForward() {
      this.selectedRange[0] += 1, this.selectedRange[1] += 1;
    }
  };
  var Ai = function(t2) {
    const e2 = new vi(t2);
    return e2.perform(), e2.getSnapshot();
  };
  var xi = [Ai];
  var yi = class {
    constructor(t2, e2, i2) {
      this.insertFiles = this.insertFiles.bind(this), this.composition = t2, this.selectionManager = e2, this.element = i2, this.undoManager = new pi(this.composition), this.filters = xi.slice(0);
    }
    loadDocument(t2) {
      return this.loadSnapshot({ document: t2, selectedRange: [0, 0] });
    }
    loadHTML() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "";
      const e2 = Ye.parse(t2, { referenceElement: this.element }).getDocument();
      return this.loadDocument(e2);
    }
    loadJSON(t2) {
      let { document: e2, selectedRange: i2 } = t2;
      return e2 = Ve.fromJSON(e2), this.loadSnapshot({ document: e2, selectedRange: i2 });
    }
    loadSnapshot(t2) {
      return this.undoManager = new pi(this.composition), this.composition.loadSnapshot(t2);
    }
    getDocument() {
      return this.composition.document;
    }
    getSelectedDocument() {
      return this.composition.getSelectedDocument();
    }
    getSnapshot() {
      return this.composition.getSnapshot();
    }
    toJSON() {
      return this.getSnapshot();
    }
    deleteInDirection(t2) {
      return this.composition.deleteInDirection(t2);
    }
    insertAttachment(t2) {
      return this.composition.insertAttachment(t2);
    }
    insertAttachments(t2) {
      return this.composition.insertAttachments(t2);
    }
    insertDocument(t2) {
      return this.composition.insertDocument(t2);
    }
    insertFile(t2) {
      return this.composition.insertFile(t2);
    }
    insertFiles(t2) {
      return this.composition.insertFiles(t2);
    }
    insertHTML(t2) {
      return this.composition.insertHTML(t2);
    }
    insertString(t2) {
      return this.composition.insertString(t2);
    }
    insertText(t2) {
      return this.composition.insertText(t2);
    }
    insertLineBreak() {
      return this.composition.insertLineBreak();
    }
    getSelectedRange() {
      return this.composition.getSelectedRange();
    }
    getPosition() {
      return this.composition.getPosition();
    }
    getClientRectAtPosition(t2) {
      const e2 = this.getDocument().locationRangeFromRange([t2, t2 + 1]);
      return this.selectionManager.getClientRectAtLocationRange(e2);
    }
    expandSelectionInDirection(t2) {
      return this.composition.expandSelectionInDirection(t2);
    }
    moveCursorInDirection(t2) {
      return this.composition.moveCursorInDirection(t2);
    }
    setSelectedRange(t2) {
      return this.composition.setSelectedRange(t2);
    }
    activateAttribute(t2) {
      let e2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1];
      return this.composition.setCurrentAttribute(t2, e2);
    }
    attributeIsActive(t2) {
      return this.composition.hasCurrentAttribute(t2);
    }
    canActivateAttribute(t2) {
      return this.composition.canSetCurrentAttribute(t2);
    }
    deactivateAttribute(t2) {
      return this.composition.removeCurrentAttribute(t2);
    }
    canDecreaseNestingLevel() {
      return this.composition.canDecreaseNestingLevel();
    }
    canIncreaseNestingLevel() {
      return this.composition.canIncreaseNestingLevel();
    }
    decreaseNestingLevel() {
      if (this.canDecreaseNestingLevel())
        return this.composition.decreaseNestingLevel();
    }
    increaseNestingLevel() {
      if (this.canIncreaseNestingLevel())
        return this.composition.increaseNestingLevel();
    }
    canRedo() {
      return this.undoManager.canRedo();
    }
    canUndo() {
      return this.undoManager.canUndo();
    }
    recordUndoEntry(t2) {
      let { context: e2, consolidatable: i2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      return this.undoManager.recordUndoEntry(t2, { context: e2, consolidatable: i2 });
    }
    redo() {
      if (this.canRedo())
        return this.undoManager.redo();
    }
    undo() {
      if (this.canUndo())
        return this.undoManager.undo();
    }
  };
  var Ci = class {
    constructor(t2) {
      this.element = t2;
    }
    findLocationFromContainerAndOffset(t2, e2) {
      let { strict: i2 } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : { strict: true }, n2 = 0, r3 = false;
      const o2 = { index: 0, offset: 0 }, s2 = this.findAttachmentElementParentForNode(t2);
      s2 && (t2 = s2.parentNode, e2 = C(s2));
      const a2 = S(this.element, { usingFilter: ki });
      for (; a2.nextNode(); ) {
        const s3 = a2.currentNode;
        if (s3 === t2 && O(t2)) {
          I(s3) || (o2.offset += e2);
          break;
        }
        if (s3.parentNode === t2) {
          if (n2++ === e2)
            break;
        } else if (!y(t2, s3) && n2 > 0)
          break;
        T(s3, { strict: i2 }) ? (r3 && o2.index++, o2.offset = 0, r3 = true) : o2.offset += Ri(s3);
      }
      return o2;
    }
    findContainerAndOffsetFromLocation(t2) {
      let e2, i2;
      if (0 === t2.index && 0 === t2.offset) {
        for (e2 = this.element, i2 = 0; e2.firstChild; )
          if (e2 = e2.firstChild, w(e2)) {
            i2 = 1;
            break;
          }
        return [e2, i2];
      }
      let [n2, r3] = this.findNodeAndOffsetFromLocation(t2);
      if (n2) {
        if (O(n2))
          0 === Ri(n2) ? (e2 = n2.parentNode.parentNode, i2 = C(n2.parentNode), I(n2, { name: "right" }) && i2++) : (e2 = n2, i2 = t2.offset - r3);
        else {
          if (e2 = n2.parentNode, !T(n2.previousSibling) && !w(e2))
            for (; n2 === e2.lastChild && (n2 = e2, e2 = e2.parentNode, !w(e2)); )
              ;
          i2 = C(n2), 0 !== t2.offset && i2++;
        }
        return [e2, i2];
      }
    }
    findNodeAndOffsetFromLocation(t2) {
      let e2, i2, n2 = 0;
      for (const r3 of this.getSignificantNodesForIndex(t2.index)) {
        const o2 = Ri(r3);
        if (t2.offset <= n2 + o2)
          if (O(r3)) {
            if (e2 = r3, i2 = n2, t2.offset === i2 && I(e2))
              break;
          } else
            e2 || (e2 = r3, i2 = n2);
        if (n2 += o2, n2 > t2.offset)
          break;
      }
      return [e2, i2];
    }
    findAttachmentElementParentForNode(t2) {
      for (; t2 && t2 !== this.element; ) {
        if (P(t2))
          return t2;
        t2 = t2.parentNode;
      }
    }
    getSignificantNodesForIndex(t2) {
      const e2 = [], i2 = S(this.element, { usingFilter: Si });
      let n2 = false;
      for (; i2.nextNode(); ) {
        const o2 = i2.currentNode;
        var r3;
        if (F(o2)) {
          if (null != r3 ? r3++ : r3 = 0, r3 === t2)
            n2 = true;
          else if (n2)
            break;
        } else
          n2 && e2.push(o2);
      }
      return e2;
    }
  };
  var Ri = function(t2) {
    if (t2.nodeType === Node.TEXT_NODE) {
      if (I(t2))
        return 0;
      return t2.textContent.length;
    }
    return "br" === E(t2) || P(t2) ? 1 : 0;
  };
  var Si = function(t2) {
    return Ei(t2) === NodeFilter.FILTER_ACCEPT ? ki(t2) : NodeFilter.FILTER_REJECT;
  };
  var Ei = function(t2) {
    return N(t2) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
  };
  var ki = function(t2) {
    return P(t2.parentNode) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;
  };
  var Li = class {
    createDOMRangeFromPoint(t2) {
      let e2, { x: i2, y: n2 } = t2;
      if (document.caretPositionFromPoint) {
        const { offsetNode: t3, offset: r3 } = document.caretPositionFromPoint(i2, n2);
        return e2 = document.createRange(), e2.setStart(t3, r3), e2;
      }
      if (document.caretRangeFromPoint)
        return document.caretRangeFromPoint(i2, n2);
      if (document.body.createTextRange) {
        const t3 = Ot();
        try {
          const t4 = document.body.createTextRange();
          t4.moveToPoint(i2, n2), t4.select();
        } catch (t4) {
        }
        return e2 = Ot(), Mt(t3), e2;
      }
    }
    getClientRectsForDOMRange(t2) {
      const e2 = Array.from(t2.getClientRects());
      return [e2[0], e2[e2.length - 1]];
    }
  };
  var Di = class extends z {
    constructor(t2) {
      super(...arguments), this.didMouseDown = this.didMouseDown.bind(this), this.selectionDidChange = this.selectionDidChange.bind(this), this.element = t2, this.locationMapper = new Ci(this.element), this.pointMapper = new Li(), this.lockCount = 0, f("mousedown", { onElement: this.element, withCallback: this.didMouseDown });
    }
    getLocationRange() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      return false === t2.strict ? this.createLocationRangeFromDOMRange(Ot()) : t2.ignoreLock ? this.currentLocationRange : this.lockedLocationRange ? this.lockedLocationRange : this.currentLocationRange;
    }
    setLocationRange(t2) {
      if (this.lockedLocationRange)
        return;
      t2 = Lt(t2);
      const e2 = this.createDOMRangeFromLocationRange(t2);
      e2 && (Mt(e2), this.updateCurrentLocationRange(t2));
    }
    setLocationRangeFromPointRange(t2) {
      t2 = Lt(t2);
      const e2 = this.getLocationAtPoint(t2[0]), i2 = this.getLocationAtPoint(t2[1]);
      this.setLocationRange([e2, i2]);
    }
    getClientRectAtLocationRange(t2) {
      const e2 = this.createDOMRangeFromLocationRange(t2);
      if (e2)
        return this.getClientRectsForDOMRange(e2)[1];
    }
    locationIsCursorTarget(t2) {
      const e2 = Array.from(this.findNodeAndOffsetFromLocation(t2))[0];
      return I(e2);
    }
    lock() {
      0 == this.lockCount++ && (this.updateCurrentLocationRange(), this.lockedLocationRange = this.getLocationRange());
    }
    unlock() {
      if (0 == --this.lockCount) {
        const { lockedLocationRange: t2 } = this;
        if (this.lockedLocationRange = null, null != t2)
          return this.setLocationRange(t2);
      }
    }
    clearSelection() {
      var t2;
      return null === (t2 = Nt()) || void 0 === t2 ? void 0 : t2.removeAllRanges();
    }
    selectionIsCollapsed() {
      var t2;
      return true === (null === (t2 = Ot()) || void 0 === t2 ? void 0 : t2.collapsed);
    }
    selectionIsExpanded() {
      return !this.selectionIsCollapsed();
    }
    createLocationRangeFromDOMRange(t2, e2) {
      if (null == t2 || !this.domRangeWithinElement(t2))
        return;
      const i2 = this.findLocationFromContainerAndOffset(t2.startContainer, t2.startOffset, e2);
      if (!i2)
        return;
      const n2 = t2.collapsed ? void 0 : this.findLocationFromContainerAndOffset(t2.endContainer, t2.endOffset, e2);
      return Lt([i2, n2]);
    }
    didMouseDown() {
      return this.pauseTemporarily();
    }
    pauseTemporarily() {
      let t2;
      this.paused = true;
      const e2 = () => {
        if (this.paused = false, clearTimeout(i2), Array.from(t2).forEach((t3) => {
          t3.destroy();
        }), y(document, this.element))
          return this.selectionDidChange();
      }, i2 = setTimeout(e2, 200);
      t2 = ["mousemove", "keydown"].map((t3) => f(t3, { onElement: document, withCallback: e2 }));
    }
    selectionDidChange() {
      if (!this.paused && !x(this.element))
        return this.updateCurrentLocationRange();
    }
    updateCurrentLocationRange(t2) {
      var e2, i2;
      if ((null != t2 ? t2 : t2 = this.createLocationRangeFromDOMRange(Ot())) && !wt(t2, this.currentLocationRange))
        return this.currentLocationRange = t2, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.locationRangeDidChange) || void 0 === i2 ? void 0 : i2.call(e2, this.currentLocationRange.slice(0));
    }
    createDOMRangeFromLocationRange(t2) {
      const e2 = this.findContainerAndOffsetFromLocation(t2[0]), i2 = Dt(t2) ? e2 : this.findContainerAndOffsetFromLocation(t2[1]) || e2;
      if (null != e2 && null != i2) {
        const t3 = document.createRange();
        return t3.setStart(...Array.from(e2 || [])), t3.setEnd(...Array.from(i2 || [])), t3;
      }
    }
    getLocationAtPoint(t2) {
      const e2 = this.createDOMRangeFromPoint(t2);
      var i2;
      if (e2)
        return null === (i2 = this.createLocationRangeFromDOMRange(e2)) || void 0 === i2 ? void 0 : i2[0];
    }
    domRangeWithinElement(t2) {
      return t2.collapsed ? y(this.element, t2.startContainer) : y(this.element, t2.startContainer) && y(this.element, t2.endContainer);
    }
  };
  Di.proxyMethod("locationMapper.findLocationFromContainerAndOffset"), Di.proxyMethod("locationMapper.findContainerAndOffsetFromLocation"), Di.proxyMethod("locationMapper.findNodeAndOffsetFromLocation"), Di.proxyMethod("pointMapper.createDOMRangeFromPoint"), Di.proxyMethod("pointMapper.getClientRectsForDOMRange");
  var wi = Object.freeze({ __proto__: null, Attachment: Se, AttachmentManager: di, AttachmentPiece: Ee, Block: Be, Composition: mi, Document: Ve, Editor: yi, HTMLParser: Ye, HTMLSanitizer: Ke, LineBreakInsertion: gi, LocationMapper: Ci, ManagedAttachment: hi, Piece: Ce, PointMapper: Li, SelectionManager: Di, SplittableList: Le, StringPiece: ke, Text: Fe, UndoManager: pi });
  var Ti = Object.freeze({ __proto__: null, ObjectView: ie, AttachmentView: oe, BlockView: ge, DocumentView: me, PieceView: ce, PreviewableAttachmentView: le, TextView: ue });
  var { lang: Fi, css: Bi, keyNames: Ii } = V;
  var Pi = function(t2) {
    return function() {
      const e2 = t2.apply(this, arguments);
      e2.do(), this.undos || (this.undos = []), this.undos.push(e2.undo);
    };
  };
  var Ni = class extends z {
    constructor(t2, e2, i2) {
      let n2 = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {};
      super(...arguments), xe(this, "makeElementMutable", Pi(() => ({ do: () => {
        this.element.dataset.trixMutable = true;
      }, undo: () => delete this.element.dataset.trixMutable }))), xe(this, "addToolbar", Pi(() => {
        const t3 = k({ tagName: "div", className: Bi.attachmentToolbar, data: { trixMutable: true }, childNodes: k({ tagName: "div", className: "trix-button-row", childNodes: k({ tagName: "span", className: "trix-button-group trix-button-group--actions", childNodes: k({ tagName: "button", className: "trix-button trix-button--remove", textContent: Fi.remove, attributes: { title: Fi.remove }, data: { trixAction: "remove" } }) }) }) });
        return this.attachment.isPreviewable() && t3.appendChild(k({ tagName: "div", className: Bi.attachmentMetadataContainer, childNodes: k({ tagName: "span", className: Bi.attachmentMetadata, childNodes: [k({ tagName: "span", className: Bi.attachmentName, textContent: this.attachment.getFilename(), attributes: { title: this.attachment.getFilename() } }), k({ tagName: "span", className: Bi.attachmentSize, textContent: this.attachment.getFormattedFilesize() })] }) })), f("click", { onElement: t3, withCallback: this.didClickToolbar }), f("click", { onElement: t3, matchingSelector: "[data-trix-action]", withCallback: this.didClickActionButton }), b("trix-attachment-before-toolbar", { onElement: this.element, attributes: { toolbar: t3, attachment: this.attachment } }), { do: () => this.element.appendChild(t3), undo: () => R(t3) };
      })), xe(this, "installCaptionEditor", Pi(() => {
        const t3 = k({ tagName: "textarea", className: Bi.attachmentCaptionEditor, attributes: { placeholder: Fi.captionPlaceholder }, data: { trixMutable: true } });
        t3.value = this.attachmentPiece.getCaption();
        const e3 = t3.cloneNode();
        e3.classList.add("trix-autoresize-clone"), e3.tabIndex = -1;
        const i3 = function() {
          e3.value = t3.value, t3.style.height = e3.scrollHeight + "px";
        };
        f("input", { onElement: t3, withCallback: i3 }), f("input", { onElement: t3, withCallback: this.didInputCaption }), f("keydown", { onElement: t3, withCallback: this.didKeyDownCaption }), f("change", { onElement: t3, withCallback: this.didChangeCaption }), f("blur", { onElement: t3, withCallback: this.didBlurCaption });
        const n3 = this.element.querySelector("figcaption"), r3 = n3.cloneNode();
        return { do: () => {
          if (n3.style.display = "none", r3.appendChild(t3), r3.appendChild(e3), r3.classList.add("".concat(Bi.attachmentCaption, "--editing")), n3.parentElement.insertBefore(r3, n3), i3(), this.options.editCaption)
            return St(() => t3.focus());
        }, undo() {
          R(r3), n3.style.display = null;
        } };
      })), this.didClickToolbar = this.didClickToolbar.bind(this), this.didClickActionButton = this.didClickActionButton.bind(this), this.didKeyDownCaption = this.didKeyDownCaption.bind(this), this.didInputCaption = this.didInputCaption.bind(this), this.didChangeCaption = this.didChangeCaption.bind(this), this.didBlurCaption = this.didBlurCaption.bind(this), this.attachmentPiece = t2, this.element = e2, this.container = i2, this.options = n2, this.attachment = this.attachmentPiece.attachment, "a" === E(this.element) && (this.element = this.element.firstChild), this.install();
    }
    install() {
      this.makeElementMutable(), this.addToolbar(), this.attachment.isPreviewable() && this.installCaptionEditor();
    }
    uninstall() {
      var t2;
      let e2 = this.undos.pop();
      for (this.savePendingCaption(); e2; )
        e2(), e2 = this.undos.pop();
      null === (t2 = this.delegate) || void 0 === t2 || t2.didUninstallAttachmentEditor(this);
    }
    savePendingCaption() {
      if (null != this.pendingCaption) {
        const r3 = this.pendingCaption;
        var t2, e2, i2, n2;
        if (this.pendingCaption = null, r3)
          null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.attachmentEditorDidRequestUpdatingAttributesForAttachment) || void 0 === e2 || e2.call(t2, { caption: r3 }, this.attachment);
        else
          null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.attachmentEditorDidRequestRemovingAttributeForAttachment) || void 0 === n2 || n2.call(i2, "caption", this.attachment);
      }
    }
    didClickToolbar(t2) {
      return t2.preventDefault(), t2.stopPropagation();
    }
    didClickActionButton(t2) {
      var e2;
      if ("remove" === t2.target.getAttribute("data-trix-action"))
        return null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.attachmentEditorDidRequestRemovalOfAttachment(this.attachment);
    }
    didKeyDownCaption(t2) {
      var e2, i2;
      if ("return" === Ii[t2.keyCode])
        return t2.preventDefault(), this.savePendingCaption(), null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.attachmentEditorDidRequestDeselectingAttachment) || void 0 === i2 ? void 0 : i2.call(e2, this.attachment);
    }
    didInputCaption(t2) {
      this.pendingCaption = t2.target.value.replace(/\s/g, " ").trim();
    }
    didChangeCaption(t2) {
      return this.savePendingCaption();
    }
    didBlurCaption(t2) {
      return this.savePendingCaption();
    }
  };
  var Oi = class extends z {
    constructor(t2, i2) {
      super(...arguments), this.didFocus = this.didFocus.bind(this), this.didBlur = this.didBlur.bind(this), this.didClickAttachment = this.didClickAttachment.bind(this), this.element = t2, this.composition = i2, this.documentView = new me(this.composition.document, { element: this.element }), f("focus", { onElement: this.element, withCallback: this.didFocus }), f("blur", { onElement: this.element, withCallback: this.didBlur }), f("click", { onElement: this.element, matchingSelector: "a[contenteditable=false]", preventDefault: true }), f("mousedown", { onElement: this.element, matchingSelector: e, withCallback: this.didClickAttachment }), f("click", { onElement: this.element, matchingSelector: "a".concat(e), preventDefault: true });
    }
    didFocus(t2) {
      var e2;
      const i2 = () => {
        var t3, e3;
        if (!this.focused)
          return this.focused = true, null === (t3 = this.delegate) || void 0 === t3 || null === (e3 = t3.compositionControllerDidFocus) || void 0 === e3 ? void 0 : e3.call(t3);
      };
      return (null === (e2 = this.blurPromise) || void 0 === e2 ? void 0 : e2.then(i2)) || i2();
    }
    didBlur(t2) {
      this.blurPromise = new Promise((t3) => St(() => {
        var e2, i2;
        x(this.element) || (this.focused = null, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionControllerDidBlur) || void 0 === i2 || i2.call(e2));
        return this.blurPromise = null, t3();
      }));
    }
    didClickAttachment(t2, e2) {
      var i2, n2;
      const r3 = this.findAttachmentForElement(e2), o2 = !!A(t2.target, { matchingSelector: "figcaption" });
      return null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionControllerDidSelectAttachment) || void 0 === n2 ? void 0 : n2.call(i2, r3, { editCaption: o2 });
    }
    getSerializableElement() {
      return this.isEditingAttachment() ? this.documentView.shadowElement : this.element;
    }
    render() {
      var t2, e2, i2, n2, r3, o2;
      (this.revision !== this.composition.revision && (this.documentView.setDocument(this.composition.document), this.documentView.render(), this.revision = this.composition.revision), this.canSyncDocumentView() && !this.documentView.isSynced()) && (null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionControllerWillSyncDocumentView) || void 0 === n2 || n2.call(i2), this.documentView.sync(), null === (r3 = this.delegate) || void 0 === r3 || null === (o2 = r3.compositionControllerDidSyncDocumentView) || void 0 === o2 || o2.call(r3));
      return null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.compositionControllerDidRender) || void 0 === e2 ? void 0 : e2.call(t2);
    }
    rerenderViewForObject(t2) {
      return this.invalidateViewForObject(t2), this.render();
    }
    invalidateViewForObject(t2) {
      return this.documentView.invalidateViewForObject(t2);
    }
    isViewCachingEnabled() {
      return this.documentView.isViewCachingEnabled();
    }
    enableViewCaching() {
      return this.documentView.enableViewCaching();
    }
    disableViewCaching() {
      return this.documentView.disableViewCaching();
    }
    refreshViewCache() {
      return this.documentView.garbageCollectCachedViews();
    }
    isEditingAttachment() {
      return !!this.attachmentEditor;
    }
    installAttachmentEditorForAttachment(t2, e2) {
      var i2;
      if ((null === (i2 = this.attachmentEditor) || void 0 === i2 ? void 0 : i2.attachment) === t2)
        return;
      const n2 = this.documentView.findElementForObject(t2);
      if (!n2)
        return;
      this.uninstallAttachmentEditor();
      const r3 = this.composition.document.getAttachmentPieceForAttachment(t2);
      this.attachmentEditor = new Ni(r3, n2, this.element, e2), this.attachmentEditor.delegate = this;
    }
    uninstallAttachmentEditor() {
      var t2;
      return null === (t2 = this.attachmentEditor) || void 0 === t2 ? void 0 : t2.uninstall();
    }
    didUninstallAttachmentEditor() {
      return this.attachmentEditor = null, this.render();
    }
    attachmentEditorDidRequestUpdatingAttributesForAttachment(t2, e2) {
      var i2, n2;
      return null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionControllerWillUpdateAttachment) || void 0 === n2 || n2.call(i2, e2), this.composition.updateAttributesForAttachment(t2, e2);
    }
    attachmentEditorDidRequestRemovingAttributeForAttachment(t2, e2) {
      var i2, n2;
      return null === (i2 = this.delegate) || void 0 === i2 || null === (n2 = i2.compositionControllerWillUpdateAttachment) || void 0 === n2 || n2.call(i2, e2), this.composition.removeAttributeForAttachment(t2, e2);
    }
    attachmentEditorDidRequestRemovalOfAttachment(t2) {
      var e2, i2;
      return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionControllerDidRequestRemovalOfAttachment) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    attachmentEditorDidRequestDeselectingAttachment(t2) {
      var e2, i2;
      return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.compositionControllerDidRequestDeselectingAttachment) || void 0 === i2 ? void 0 : i2.call(e2, t2);
    }
    canSyncDocumentView() {
      return !this.isEditingAttachment();
    }
    findAttachmentForElement(t2) {
      return this.composition.document.getAttachmentById(parseInt(t2.dataset.trixId, 10));
    }
  };
  var Mi = class extends z {
  };
  var ji = "data-trix-mutable";
  var Wi = "[".concat(ji, "]");
  var Ui = { attributes: true, childList: true, characterData: true, characterDataOldValue: true, subtree: true };
  var qi = class extends z {
    constructor(t2) {
      super(t2), this.didMutate = this.didMutate.bind(this), this.element = t2, this.observer = new window.MutationObserver(this.didMutate), this.start();
    }
    start() {
      return this.reset(), this.observer.observe(this.element, Ui);
    }
    stop() {
      return this.observer.disconnect();
    }
    didMutate(t2) {
      var e2, i2;
      if (this.mutations.push(...Array.from(this.findSignificantMutations(t2) || [])), this.mutations.length)
        return null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.elementDidMutate) || void 0 === i2 || i2.call(e2, this.getMutationSummary()), this.reset();
    }
    reset() {
      this.mutations = [];
    }
    findSignificantMutations(t2) {
      return t2.filter((t3) => this.mutationIsSignificant(t3));
    }
    mutationIsSignificant(t2) {
      if (this.nodeIsMutable(t2.target))
        return false;
      for (const e2 of Array.from(this.nodesModifiedByMutation(t2)))
        if (this.nodeIsSignificant(e2))
          return true;
      return false;
    }
    nodeIsSignificant(t2) {
      return t2 !== this.element && !this.nodeIsMutable(t2) && !N(t2);
    }
    nodeIsMutable(t2) {
      return A(t2, { matchingSelector: Wi });
    }
    nodesModifiedByMutation(t2) {
      const e2 = [];
      switch (t2.type) {
        case "attributes":
          t2.attributeName !== ji && e2.push(t2.target);
          break;
        case "characterData":
          e2.push(t2.target.parentNode), e2.push(t2.target);
          break;
        case "childList":
          e2.push(...Array.from(t2.addedNodes || [])), e2.push(...Array.from(t2.removedNodes || []));
      }
      return e2;
    }
    getMutationSummary() {
      return this.getTextMutationSummary();
    }
    getTextMutationSummary() {
      const { additions: t2, deletions: e2 } = this.getTextChangesFromCharacterData(), i2 = this.getTextChangesFromChildList();
      Array.from(i2.additions).forEach((e3) => {
        Array.from(t2).includes(e3) || t2.push(e3);
      }), e2.push(...Array.from(i2.deletions || []));
      const n2 = {}, r3 = t2.join("");
      r3 && (n2.textAdded = r3);
      const o2 = e2.join("");
      return o2 && (n2.textDeleted = o2), n2;
    }
    getMutationsByType(t2) {
      return Array.from(this.mutations).filter((e2) => e2.type === t2);
    }
    getTextChangesFromChildList() {
      let t2, e2;
      const i2 = [], n2 = [];
      Array.from(this.getMutationsByType("childList")).forEach((t3) => {
        i2.push(...Array.from(t3.addedNodes || [])), n2.push(...Array.from(t3.removedNodes || []));
      });
      0 === i2.length && 1 === n2.length && F(n2[0]) ? (t2 = [], e2 = ["\n"]) : (t2 = Vi(i2), e2 = Vi(n2));
      return { additions: t2.filter((t3, i3) => t3 !== e2[i3]).map(Ut), deletions: e2.filter((e3, i3) => e3 !== t2[i3]).map(Ut) };
    }
    getTextChangesFromCharacterData() {
      let t2, e2;
      const i2 = this.getMutationsByType("characterData");
      if (i2.length) {
        const n2 = i2[0], r3 = i2[i2.length - 1], o2 = function(t3, e3) {
          let i3, n3;
          return t3 = X.box(t3), (e3 = X.box(e3)).length < t3.length ? [n3, i3] = zt(t3, e3) : [i3, n3] = zt(e3, t3), { added: i3, removed: n3 };
        }(Ut(n2.oldValue), Ut(r3.target.data));
        t2 = o2.added, e2 = o2.removed;
      }
      return { additions: t2 ? [t2] : [], deletions: e2 ? [e2] : [] };
    }
  };
  var Vi = function() {
    let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
    const e2 = [];
    for (const i2 of Array.from(t2))
      switch (i2.nodeType) {
        case Node.TEXT_NODE:
          e2.push(i2.data);
          break;
        case Node.ELEMENT_NODE:
          "br" === E(i2) ? e2.push("\n") : e2.push(...Array.from(Vi(i2.childNodes) || []));
      }
    return e2;
  };
  var zi = class extends ee {
    constructor(t2) {
      super(...arguments), this.file = t2;
    }
    perform(t2) {
      const e2 = new FileReader();
      return e2.onerror = () => t2(false), e2.onload = () => {
        e2.onerror = null;
        try {
          e2.abort();
        } catch (t3) {
        }
        return t2(true, this.file);
      }, e2.readAsArrayBuffer(this.file);
    }
  };
  var _i = class {
    constructor(t2) {
      this.element = t2;
    }
    shouldIgnore(t2) {
      return !!a.samsungAndroid && (this.previousEvent = this.event, this.event = t2, this.checkSamsungKeyboardBuggyModeStart(), this.checkSamsungKeyboardBuggyModeEnd(), this.buggyMode);
    }
    checkSamsungKeyboardBuggyModeStart() {
      this.insertingLongTextAfterUnidentifiedChar() && Hi(this.element.innerText, this.event.data) && (this.buggyMode = true, this.event.preventDefault());
    }
    checkSamsungKeyboardBuggyModeEnd() {
      this.buggyMode && "insertText" !== this.event.inputType && (this.buggyMode = false);
    }
    insertingLongTextAfterUnidentifiedChar() {
      var t2;
      return this.isBeforeInputInsertText() && this.previousEventWasUnidentifiedKeydown() && (null === (t2 = this.event.data) || void 0 === t2 ? void 0 : t2.length) > 50;
    }
    isBeforeInputInsertText() {
      return "beforeinput" === this.event.type && "insertText" === this.event.inputType;
    }
    previousEventWasUnidentifiedKeydown() {
      var t2, e2;
      return "keydown" === (null === (t2 = this.previousEvent) || void 0 === t2 ? void 0 : t2.type) && "Unidentified" === (null === (e2 = this.previousEvent) || void 0 === e2 ? void 0 : e2.key);
    }
  };
  var Hi = (t2, e2) => Ki(t2) === Ki(e2);
  var Ji = new RegExp("(".concat("\uFFFC", "|").concat(h, "|").concat(d, "|\\s)+"), "g");
  var Ki = (t2) => t2.replace(Ji, " ").trim();
  var Gi = class extends z {
    constructor(t2) {
      super(...arguments), this.element = t2, this.mutationObserver = new qi(this.element), this.mutationObserver.delegate = this, this.flakyKeyboardDetector = new _i(this.element);
      for (const t3 in this.constructor.events)
        f(t3, { onElement: this.element, withCallback: this.handlerFor(t3) });
    }
    elementDidMutate(t2) {
    }
    editorWillSyncDocumentView() {
      return this.mutationObserver.stop();
    }
    editorDidSyncDocumentView() {
      return this.mutationObserver.start();
    }
    requestRender() {
      var t2, e2;
      return null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.inputControllerDidRequestRender) || void 0 === e2 ? void 0 : e2.call(t2);
    }
    requestReparse() {
      var t2, e2;
      return null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.inputControllerDidRequestReparse) || void 0 === e2 || e2.call(t2), this.requestRender();
    }
    attachFiles(t2) {
      const e2 = Array.from(t2).map((t3) => new zi(t3));
      return Promise.all(e2).then((t3) => {
        this.handleInput(function() {
          var e3, i2;
          return null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillAttachFiles(), null === (i2 = this.responder) || void 0 === i2 || i2.insertFiles(t3), this.requestRender();
        });
      });
    }
    handlerFor(t2) {
      return (e2) => {
        e2.defaultPrevented || this.handleInput(() => {
          if (!x(this.element)) {
            if (this.flakyKeyboardDetector.shouldIgnore(e2))
              return;
            this.eventName = t2, this.constructor.events[t2].call(this, e2);
          }
        });
      };
    }
    handleInput(t2) {
      try {
        var e2;
        null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillHandleInput(), t2.call(this);
      } finally {
        var i2;
        null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerDidHandleInput();
      }
    }
    createLinkHTML(t2, e2) {
      const i2 = document.createElement("a");
      return i2.href = t2, i2.textContent = e2 || t2, i2.outerHTML;
    }
  };
  var $i;
  xe(Gi, "events", {});
  var { browser: Xi, keyNames: Yi } = V;
  var Qi = 0;
  var Zi = class extends Gi {
    constructor() {
      super(...arguments), this.resetInputSummary();
    }
    setInputSummary() {
      let t2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
      this.inputSummary.eventName = this.eventName;
      for (const e2 in t2) {
        const i2 = t2[e2];
        this.inputSummary[e2] = i2;
      }
      return this.inputSummary;
    }
    resetInputSummary() {
      this.inputSummary = {};
    }
    reset() {
      return this.resetInputSummary(), Pt.reset();
    }
    elementDidMutate(t2) {
      var e2, i2;
      return this.isComposing() ? null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.inputControllerDidAllowUnhandledInput) || void 0 === i2 ? void 0 : i2.call(e2) : this.handleInput(function() {
        return this.mutationIsSignificant(t2) && (this.mutationIsExpected(t2) ? this.requestRender() : this.requestReparse()), this.reset();
      });
    }
    mutationIsExpected(t2) {
      let { textAdded: e2, textDeleted: i2 } = t2;
      if (this.inputSummary.preferDocument)
        return true;
      const n2 = null != e2 ? e2 === this.inputSummary.textAdded : !this.inputSummary.textAdded, r3 = null != i2 ? this.inputSummary.didDelete : !this.inputSummary.didDelete, o2 = ["\n", " \n"].includes(e2) && !n2, s2 = "\n" === i2 && !r3;
      if (o2 && !s2 || s2 && !o2) {
        const t3 = this.getSelectedRange();
        if (t3) {
          var a2;
          const i3 = o2 ? e2.replace(/\n$/, "").length || -1 : (null == e2 ? void 0 : e2.length) || 1;
          if (null !== (a2 = this.responder) && void 0 !== a2 && a2.positionIsBlockBreak(t3[1] + i3))
            return true;
        }
      }
      return n2 && r3;
    }
    mutationIsSignificant(t2) {
      var e2;
      const i2 = Object.keys(t2).length > 0, n2 = "" === (null === (e2 = this.compositionInput) || void 0 === e2 ? void 0 : e2.getEndData());
      return i2 || !n2;
    }
    getCompositionInput() {
      if (this.isComposing())
        return this.compositionInput;
      this.compositionInput = new on(this);
    }
    isComposing() {
      return this.compositionInput && !this.compositionInput.isEnded();
    }
    deleteInDirection(t2, e2) {
      var i2;
      return false !== (null === (i2 = this.responder) || void 0 === i2 ? void 0 : i2.deleteInDirection(t2)) ? this.setInputSummary({ didDelete: true }) : e2 ? (e2.preventDefault(), this.requestRender()) : void 0;
    }
    serializeSelectionToDataTransfer(t2) {
      var e2;
      if (!function(t3) {
        if (null == t3 || !t3.setData)
          return false;
        for (const e3 in yt) {
          const i3 = yt[e3];
          try {
            if (t3.setData(e3, i3), !t3.getData(e3) === i3)
              return false;
          } catch (t4) {
            return false;
          }
        }
        return true;
      }(t2))
        return;
      const i2 = null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.getSelectedDocument().toSerializableDocument();
      return t2.setData("application/x-trix-document", JSON.stringify(i2)), t2.setData("text/html", me.render(i2).innerHTML), t2.setData("text/plain", i2.toString().replace(/\n$/, "")), true;
    }
    canAcceptDataTransfer(t2) {
      const e2 = {};
      return Array.from((null == t2 ? void 0 : t2.types) || []).forEach((t3) => {
        e2[t3] = true;
      }), e2.Files || e2["application/x-trix-document"] || e2["text/html"] || e2["text/plain"];
    }
    getPastedHTMLUsingHiddenElement(t2) {
      const e2 = this.getSelectedRange(), i2 = { position: "absolute", left: "".concat(window.pageXOffset, "px"), top: "".concat(window.pageYOffset, "px"), opacity: 0 }, n2 = k({ style: i2, tagName: "div", editable: true });
      return document.body.appendChild(n2), n2.focus(), requestAnimationFrame(() => {
        const i3 = n2.innerHTML;
        return R(n2), this.setSelectedRange(e2), t2(i3);
      });
    }
  };
  xe(Zi, "events", { keydown(t2) {
    this.isComposing() || this.resetInputSummary(), this.inputSummary.didInput = true;
    const e2 = Yi[t2.keyCode];
    if (e2) {
      var i2;
      let n3 = this.keys;
      ["ctrl", "alt", "shift", "meta"].forEach((e3) => {
        var i3;
        t2["".concat(e3, "Key")] && ("ctrl" === e3 && (e3 = "control"), n3 = null === (i3 = n3) || void 0 === i3 ? void 0 : i3[e3]);
      }), null != (null === (i2 = n3) || void 0 === i2 ? void 0 : i2[e2]) && (this.setInputSummary({ keyName: e2 }), Pt.reset(), n3[e2].call(this, t2));
    }
    if (Rt(t2)) {
      const e3 = String.fromCharCode(t2.keyCode).toLowerCase();
      if (e3) {
        var n2;
        const i3 = ["alt", "shift"].map((e4) => {
          if (t2["".concat(e4, "Key")])
            return e4;
        }).filter((t3) => t3);
        i3.push(e3), null !== (n2 = this.delegate) && void 0 !== n2 && n2.inputControllerDidReceiveKeyboardCommand(i3) && t2.preventDefault();
      }
    }
  }, keypress(t2) {
    if (null != this.inputSummary.eventName)
      return;
    if (t2.metaKey)
      return;
    if (t2.ctrlKey && !t2.altKey)
      return;
    const e2 = nn(t2);
    var i2, n2;
    return e2 ? (null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerWillPerformTyping(), null === (n2 = this.responder) || void 0 === n2 || n2.insertString(e2), this.setInputSummary({ textAdded: e2, didDelete: this.selectionIsExpanded() })) : void 0;
  }, textInput(t2) {
    const { data: e2 } = t2, { textAdded: i2 } = this.inputSummary;
    if (i2 && i2 !== e2 && i2.toUpperCase() === e2) {
      var n2;
      const t3 = this.getSelectedRange();
      return this.setSelectedRange([t3[0], t3[1] + i2.length]), null === (n2 = this.responder) || void 0 === n2 || n2.insertString(e2), this.setInputSummary({ textAdded: e2 }), this.setSelectedRange(t3);
    }
  }, dragenter(t2) {
    t2.preventDefault();
  }, dragstart(t2) {
    var e2, i2;
    return this.serializeSelectionToDataTransfer(t2.dataTransfer), this.draggedRange = this.getSelectedRange(), null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.inputControllerDidStartDrag) || void 0 === i2 ? void 0 : i2.call(e2);
  }, dragover(t2) {
    if (this.draggedRange || this.canAcceptDataTransfer(t2.dataTransfer)) {
      t2.preventDefault();
      const n2 = { x: t2.clientX, y: t2.clientY };
      var e2, i2;
      if (!kt(n2, this.draggingPoint))
        return this.draggingPoint = n2, null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.inputControllerDidReceiveDragOverPoint) || void 0 === i2 ? void 0 : i2.call(e2, this.draggingPoint);
    }
  }, dragend(t2) {
    var e2, i2;
    null === (e2 = this.delegate) || void 0 === e2 || null === (i2 = e2.inputControllerDidCancelDrag) || void 0 === i2 || i2.call(e2), this.draggedRange = null, this.draggingPoint = null;
  }, drop(t2) {
    var e2, i2;
    t2.preventDefault();
    const n2 = null === (e2 = t2.dataTransfer) || void 0 === e2 ? void 0 : e2.files, r3 = t2.dataTransfer.getData("application/x-trix-document"), o2 = { x: t2.clientX, y: t2.clientY };
    if (null === (i2 = this.responder) || void 0 === i2 || i2.setLocationRangeFromPointRange(o2), null != n2 && n2.length)
      this.attachFiles(n2);
    else if (this.draggedRange) {
      var s2, a2;
      null === (s2 = this.delegate) || void 0 === s2 || s2.inputControllerWillMoveText(), null === (a2 = this.responder) || void 0 === a2 || a2.moveTextFromRange(this.draggedRange), this.draggedRange = null, this.requestRender();
    } else if (r3) {
      var l2;
      const t3 = Ve.fromJSONString(r3);
      null === (l2 = this.responder) || void 0 === l2 || l2.insertDocument(t3), this.requestRender();
    }
    this.draggedRange = null, this.draggingPoint = null;
  }, cut(t2) {
    var e2, i2;
    if (null !== (e2 = this.responder) && void 0 !== e2 && e2.selectionIsExpanded() && (this.serializeSelectionToDataTransfer(t2.clipboardData) && t2.preventDefault(), null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerWillCutText(), this.deleteInDirection("backward"), t2.defaultPrevented))
      return this.requestRender();
  }, copy(t2) {
    var e2;
    null !== (e2 = this.responder) && void 0 !== e2 && e2.selectionIsExpanded() && this.serializeSelectionToDataTransfer(t2.clipboardData) && t2.preventDefault();
  }, paste(t2) {
    const e2 = t2.clipboardData || t2.testClipboardData, i2 = { clipboard: e2 };
    if (!e2 || rn(t2))
      return void this.getPastedHTMLUsingHiddenElement((t3) => {
        var e3, n3, r4;
        return i2.type = "text/html", i2.html = t3, null === (e3 = this.delegate) || void 0 === e3 || e3.inputControllerWillPaste(i2), null === (n3 = this.responder) || void 0 === n3 || n3.insertHTML(i2.html), this.requestRender(), null === (r4 = this.delegate) || void 0 === r4 ? void 0 : r4.inputControllerDidPaste(i2);
      });
    const n2 = e2.getData("URL"), r3 = e2.getData("text/html"), o2 = e2.getData("public.url-name");
    if (n2) {
      var s2, a2, l2;
      let t3;
      i2.type = "text/html", t3 = o2 ? Vt(o2).trim() : n2, i2.html = this.createLinkHTML(n2, t3), null === (s2 = this.delegate) || void 0 === s2 || s2.inputControllerWillPaste(i2), this.setInputSummary({ textAdded: t3, didDelete: this.selectionIsExpanded() }), null === (a2 = this.responder) || void 0 === a2 || a2.insertHTML(i2.html), this.requestRender(), null === (l2 = this.delegate) || void 0 === l2 || l2.inputControllerDidPaste(i2);
    } else if (Ct(e2)) {
      var c2, u2, h2;
      i2.type = "text/plain", i2.string = e2.getData("text/plain"), null === (c2 = this.delegate) || void 0 === c2 || c2.inputControllerWillPaste(i2), this.setInputSummary({ textAdded: i2.string, didDelete: this.selectionIsExpanded() }), null === (u2 = this.responder) || void 0 === u2 || u2.insertString(i2.string), this.requestRender(), null === (h2 = this.delegate) || void 0 === h2 || h2.inputControllerDidPaste(i2);
    } else if (r3) {
      var d2, g2, m2;
      i2.type = "text/html", i2.html = r3, null === (d2 = this.delegate) || void 0 === d2 || d2.inputControllerWillPaste(i2), null === (g2 = this.responder) || void 0 === g2 || g2.insertHTML(i2.html), this.requestRender(), null === (m2 = this.delegate) || void 0 === m2 || m2.inputControllerDidPaste(i2);
    } else if (Array.from(e2.types).includes("Files")) {
      var p2, f2;
      const t3 = null === (p2 = e2.items) || void 0 === p2 || null === (p2 = p2[0]) || void 0 === p2 || null === (f2 = p2.getAsFile) || void 0 === f2 ? void 0 : f2.call(p2);
      if (t3) {
        var b2, v2, A2;
        const e3 = tn(t3);
        !t3.name && e3 && (t3.name = "pasted-file-".concat(++Qi, ".").concat(e3)), i2.type = "File", i2.file = t3, null === (b2 = this.delegate) || void 0 === b2 || b2.inputControllerWillAttachFiles(), null === (v2 = this.responder) || void 0 === v2 || v2.insertFile(i2.file), this.requestRender(), null === (A2 = this.delegate) || void 0 === A2 || A2.inputControllerDidPaste(i2);
      }
    }
    t2.preventDefault();
  }, compositionstart(t2) {
    return this.getCompositionInput().start(t2.data);
  }, compositionupdate(t2) {
    return this.getCompositionInput().update(t2.data);
  }, compositionend(t2) {
    return this.getCompositionInput().end(t2.data);
  }, beforeinput(t2) {
    this.inputSummary.didInput = true;
  }, input(t2) {
    return this.inputSummary.didInput = true, t2.stopPropagation();
  } }), xe(Zi, "keys", { backspace(t2) {
    var e2;
    return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t2);
  }, delete(t2) {
    var e2;
    return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t2);
  }, return(t2) {
    var e2, i2;
    return this.setInputSummary({ preferDocument: true }), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 ? void 0 : i2.insertLineBreak();
  }, tab(t2) {
    var e2, i2;
    null !== (e2 = this.responder) && void 0 !== e2 && e2.canIncreaseNestingLevel() && (null === (i2 = this.responder) || void 0 === i2 || i2.increaseNestingLevel(), this.requestRender(), t2.preventDefault());
  }, left(t2) {
    var e2;
    if (this.selectionIsInCursorTarget())
      return t2.preventDefault(), null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.moveCursorInDirection("backward");
  }, right(t2) {
    var e2;
    if (this.selectionIsInCursorTarget())
      return t2.preventDefault(), null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.moveCursorInDirection("forward");
  }, control: { d(t2) {
    var e2;
    return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), this.deleteInDirection("forward", t2);
  }, h(t2) {
    var e2;
    return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), this.deleteInDirection("backward", t2);
  }, o(t2) {
    var e2, i2;
    return t2.preventDefault(), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 || i2.insertString("\n", { updatePosition: false }), this.requestRender();
  } }, shift: { return(t2) {
    var e2, i2;
    null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 || i2.insertString("\n"), this.requestRender(), t2.preventDefault();
  }, tab(t2) {
    var e2, i2;
    null !== (e2 = this.responder) && void 0 !== e2 && e2.canDecreaseNestingLevel() && (null === (i2 = this.responder) || void 0 === i2 || i2.decreaseNestingLevel(), this.requestRender(), t2.preventDefault());
  }, left(t2) {
    if (this.selectionIsInCursorTarget())
      return t2.preventDefault(), this.expandSelectionInDirection("backward");
  }, right(t2) {
    if (this.selectionIsInCursorTarget())
      return t2.preventDefault(), this.expandSelectionInDirection("forward");
  } }, alt: { backspace(t2) {
    var e2;
    return this.setInputSummary({ preferDocument: false }), null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.inputControllerWillPerformTyping();
  } }, meta: { backspace(t2) {
    var e2;
    return this.setInputSummary({ preferDocument: false }), null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.inputControllerWillPerformTyping();
  } } }), Zi.proxyMethod("responder?.getSelectedRange"), Zi.proxyMethod("responder?.setSelectedRange"), Zi.proxyMethod("responder?.expandSelectionInDirection"), Zi.proxyMethod("responder?.selectionIsInCursorTarget"), Zi.proxyMethod("responder?.selectionIsExpanded");
  var tn = (t2) => {
    var e2;
    return null === (e2 = t2.type) || void 0 === e2 || null === (e2 = e2.match(/\/(\w+)$/)) || void 0 === e2 ? void 0 : e2[1];
  };
  var en = !(null === ($i = " ".codePointAt) || void 0 === $i || !$i.call(" ", 0));
  var nn = function(t2) {
    if (t2.key && en && t2.key.codePointAt(0) === t2.keyCode)
      return t2.key;
    {
      let e2;
      if (null === t2.which ? e2 = t2.keyCode : 0 !== t2.which && 0 !== t2.charCode && (e2 = t2.charCode), null != e2 && "escape" !== Yi[e2])
        return X.fromCodepoints([e2]).toString();
    }
  };
  var rn = function(t2) {
    const e2 = t2.clipboardData;
    if (e2) {
      if (e2.types.includes("text/html")) {
        for (const t3 of e2.types) {
          const i2 = /^CorePasteboardFlavorType/.test(t3), n2 = /^dyn\./.test(t3) && e2.getData(t3);
          if (i2 || n2)
            return true;
        }
        return false;
      }
      {
        const t3 = e2.types.includes("com.apple.webarchive"), i2 = e2.types.includes("com.apple.flat-rtfd");
        return t3 || i2;
      }
    }
  };
  var on = class extends z {
    constructor(t2) {
      super(...arguments), this.inputController = t2, this.responder = this.inputController.responder, this.delegate = this.inputController.delegate, this.inputSummary = this.inputController.inputSummary, this.data = {};
    }
    start(t2) {
      if (this.data.start = t2, this.isSignificant()) {
        var e2, i2;
        if ("keypress" === this.inputSummary.eventName && this.inputSummary.textAdded)
          null === (i2 = this.responder) || void 0 === i2 || i2.deleteInDirection("left");
        this.selectionIsExpanded() || (this.insertPlaceholder(), this.requestRender()), this.range = null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.getSelectedRange();
      }
    }
    update(t2) {
      if (this.data.update = t2, this.isSignificant()) {
        const t3 = this.selectPlaceholder();
        t3 && (this.forgetPlaceholder(), this.range = t3);
      }
    }
    end(t2) {
      return this.data.end = t2, this.isSignificant() ? (this.forgetPlaceholder(), this.canApplyToDocument() ? (this.setInputSummary({ preferDocument: true, didInput: false }), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 || i2.setSelectedRange(this.range), null === (n2 = this.responder) || void 0 === n2 || n2.insertString(this.data.end), null === (r3 = this.responder) || void 0 === r3 ? void 0 : r3.setSelectedRange(this.range[0] + this.data.end.length)) : null != this.data.start || null != this.data.update ? (this.requestReparse(), this.inputController.reset()) : void 0) : this.inputController.reset();
      var e2, i2, n2, r3;
    }
    getEndData() {
      return this.data.end;
    }
    isEnded() {
      return null != this.getEndData();
    }
    isSignificant() {
      return !Xi.composesExistingText || this.inputSummary.didInput;
    }
    canApplyToDocument() {
      var t2, e2;
      return 0 === (null === (t2 = this.data.start) || void 0 === t2 ? void 0 : t2.length) && (null === (e2 = this.data.end) || void 0 === e2 ? void 0 : e2.length) > 0 && this.range;
    }
  };
  on.proxyMethod("inputController.setInputSummary"), on.proxyMethod("inputController.requestRender"), on.proxyMethod("inputController.requestReparse"), on.proxyMethod("responder?.selectionIsExpanded"), on.proxyMethod("responder?.insertPlaceholder"), on.proxyMethod("responder?.selectPlaceholder"), on.proxyMethod("responder?.forgetPlaceholder");
  var sn = class extends Gi {
    constructor() {
      super(...arguments), this.render = this.render.bind(this);
    }
    elementDidMutate() {
      return this.scheduledRender ? this.composing ? null === (t2 = this.delegate) || void 0 === t2 || null === (e2 = t2.inputControllerDidAllowUnhandledInput) || void 0 === e2 ? void 0 : e2.call(t2) : void 0 : this.reparse();
      var t2, e2;
    }
    scheduleRender() {
      return this.scheduledRender ? this.scheduledRender : this.scheduledRender = requestAnimationFrame(this.render);
    }
    render() {
      var t2, e2;
      (cancelAnimationFrame(this.scheduledRender), this.scheduledRender = null, this.composing) || (null === (e2 = this.delegate) || void 0 === e2 || e2.render());
      null === (t2 = this.afterRender) || void 0 === t2 || t2.call(this), this.afterRender = null;
    }
    reparse() {
      var t2;
      return null === (t2 = this.delegate) || void 0 === t2 ? void 0 : t2.reparse();
    }
    insertString() {
      var t2;
      let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", i2 = arguments.length > 1 ? arguments[1] : void 0;
      return null === (t2 = this.delegate) || void 0 === t2 || t2.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertString(e2, i2);
      });
    }
    toggleAttributeIfSupported(t2) {
      var e2;
      if (dt().includes(t2))
        return null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformFormatting(t2), this.withTargetDOMRange(function() {
          var e3;
          return null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.toggleCurrentAttribute(t2);
        });
    }
    activateAttributeIfSupported(t2, e2) {
      var i2;
      if (dt().includes(t2))
        return null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerWillPerformFormatting(t2), this.withTargetDOMRange(function() {
          var i3;
          return null === (i3 = this.responder) || void 0 === i3 ? void 0 : i3.setCurrentAttribute(t2, e2);
        });
    }
    deleteInDirection(t2) {
      let { recordUndoEntry: e2 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : { recordUndoEntry: true };
      var i2;
      e2 && (null === (i2 = this.delegate) || void 0 === i2 || i2.inputControllerWillPerformTyping());
      const n2 = () => {
        var e3;
        return null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.deleteInDirection(t2);
      }, r3 = this.getTargetDOMRange({ minLength: 2 });
      return r3 ? this.withTargetDOMRange(r3, n2) : n2();
    }
    withTargetDOMRange(t2, e2) {
      var i2;
      return "function" == typeof t2 && (e2 = t2, t2 = this.getTargetDOMRange()), t2 ? null === (i2 = this.responder) || void 0 === i2 ? void 0 : i2.withTargetDOMRange(t2, e2.bind(this)) : (Pt.reset(), e2.call(this));
    }
    getTargetDOMRange() {
      var t2, e2;
      let { minLength: i2 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : { minLength: 0 };
      const n2 = null === (t2 = (e2 = this.event).getTargetRanges) || void 0 === t2 ? void 0 : t2.call(e2);
      if (n2 && n2.length) {
        const t3 = an(n2[0]);
        if (0 === i2 || t3.toString().length >= i2)
          return t3;
      }
    }
    withEvent(t2, e2) {
      let i2;
      this.event = t2;
      try {
        i2 = e2.call(this);
      } finally {
        this.event = null;
      }
      return i2;
    }
  };
  xe(sn, "events", { keydown(t2) {
    if (Rt(t2)) {
      var e2;
      const i2 = hn(t2);
      null !== (e2 = this.delegate) && void 0 !== e2 && e2.inputControllerDidReceiveKeyboardCommand(i2) && t2.preventDefault();
    } else {
      let e3 = t2.key;
      t2.altKey && (e3 += "+Alt"), t2.shiftKey && (e3 += "+Shift");
      const i2 = this.constructor.keys[e3];
      if (i2)
        return this.withEvent(t2, i2);
    }
  }, paste(t2) {
    var e2;
    let i2;
    const n2 = null === (e2 = t2.clipboardData) || void 0 === e2 ? void 0 : e2.getData("URL");
    return cn(t2) ? (t2.preventDefault(), this.attachFiles(t2.clipboardData.files)) : un(t2) ? (t2.preventDefault(), i2 = { type: "text/plain", string: t2.clipboardData.getData("text/plain") }, null === (r3 = this.delegate) || void 0 === r3 || r3.inputControllerWillPaste(i2), null === (o2 = this.responder) || void 0 === o2 || o2.insertString(i2.string), this.render(), null === (s2 = this.delegate) || void 0 === s2 ? void 0 : s2.inputControllerDidPaste(i2)) : n2 ? (t2.preventDefault(), i2 = { type: "text/html", html: this.createLinkHTML(n2) }, null === (a2 = this.delegate) || void 0 === a2 || a2.inputControllerWillPaste(i2), null === (l2 = this.responder) || void 0 === l2 || l2.insertHTML(i2.html), this.render(), null === (c2 = this.delegate) || void 0 === c2 ? void 0 : c2.inputControllerDidPaste(i2)) : void 0;
    var r3, o2, s2, a2, l2, c2;
  }, beforeinput(t2) {
    const e2 = this.constructor.inputTypes[t2.inputType];
    e2 && (this.withEvent(t2, e2), this.scheduleRender());
  }, input(t2) {
    Pt.reset();
  }, dragstart(t2) {
    var e2, i2;
    null !== (e2 = this.responder) && void 0 !== e2 && e2.selectionContainsAttachments() && (t2.dataTransfer.setData("application/x-trix-dragging", true), this.dragging = { range: null === (i2 = this.responder) || void 0 === i2 ? void 0 : i2.getSelectedRange(), point: dn(t2) });
  }, dragenter(t2) {
    ln(t2) && t2.preventDefault();
  }, dragover(t2) {
    if (this.dragging) {
      t2.preventDefault();
      const i2 = dn(t2);
      var e2;
      if (!kt(i2, this.dragging.point))
        return this.dragging.point = i2, null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.setLocationRangeFromPointRange(i2);
    } else
      ln(t2) && t2.preventDefault();
  }, drop(t2) {
    var e2, i2;
    if (this.dragging)
      return t2.preventDefault(), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillMoveText(), null === (i2 = this.responder) || void 0 === i2 || i2.moveTextFromRange(this.dragging.range), this.dragging = null, this.scheduleRender();
    if (ln(t2)) {
      var n2;
      t2.preventDefault();
      const e3 = dn(t2);
      return null === (n2 = this.responder) || void 0 === n2 || n2.setLocationRangeFromPointRange(e3), this.attachFiles(t2.dataTransfer.files);
    }
  }, dragend() {
    var t2;
    this.dragging && (null === (t2 = this.responder) || void 0 === t2 || t2.setSelectedRange(this.dragging.range), this.dragging = null);
  }, compositionend(t2) {
    this.composing && (this.composing = false, a.recentAndroid || this.scheduleRender());
  } }), xe(sn, "keys", { ArrowLeft() {
    var t2, e2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.shouldManageMovingCursorInDirection("backward"))
      return this.event.preventDefault(), null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.moveCursorInDirection("backward");
  }, ArrowRight() {
    var t2, e2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.shouldManageMovingCursorInDirection("forward"))
      return this.event.preventDefault(), null === (e2 = this.responder) || void 0 === e2 ? void 0 : e2.moveCursorInDirection("forward");
  }, Backspace() {
    var t2, e2, i2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.shouldManageDeletingInDirection("backward"))
      return this.event.preventDefault(), null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillPerformTyping(), null === (i2 = this.responder) || void 0 === i2 || i2.deleteInDirection("backward"), this.render();
  }, Tab() {
    var t2, e2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.canIncreaseNestingLevel())
      return this.event.preventDefault(), null === (e2 = this.responder) || void 0 === e2 || e2.increaseNestingLevel(), this.render();
  }, "Tab+Shift"() {
    var t2, e2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.canDecreaseNestingLevel())
      return this.event.preventDefault(), null === (e2 = this.responder) || void 0 === e2 || e2.decreaseNestingLevel(), this.render();
  } }), xe(sn, "inputTypes", { deleteByComposition() {
    return this.deleteInDirection("backward", { recordUndoEntry: false });
  }, deleteByCut() {
    return this.deleteInDirection("backward");
  }, deleteByDrag() {
    return this.event.preventDefault(), this.withTargetDOMRange(function() {
      var t2;
      this.deleteByDragRange = null === (t2 = this.responder) || void 0 === t2 ? void 0 : t2.getSelectedRange();
    });
  }, deleteCompositionText() {
    return this.deleteInDirection("backward", { recordUndoEntry: false });
  }, deleteContent() {
    return this.deleteInDirection("backward");
  }, deleteContentBackward() {
    return this.deleteInDirection("backward");
  }, deleteContentForward() {
    return this.deleteInDirection("forward");
  }, deleteEntireSoftLine() {
    return this.deleteInDirection("forward");
  }, deleteHardLineBackward() {
    return this.deleteInDirection("backward");
  }, deleteHardLineForward() {
    return this.deleteInDirection("forward");
  }, deleteSoftLineBackward() {
    return this.deleteInDirection("backward");
  }, deleteSoftLineForward() {
    return this.deleteInDirection("forward");
  }, deleteWordBackward() {
    return this.deleteInDirection("backward");
  }, deleteWordForward() {
    return this.deleteInDirection("forward");
  }, formatBackColor() {
    return this.activateAttributeIfSupported("backgroundColor", this.event.data);
  }, formatBold() {
    return this.toggleAttributeIfSupported("bold");
  }, formatFontColor() {
    return this.activateAttributeIfSupported("color", this.event.data);
  }, formatFontName() {
    return this.activateAttributeIfSupported("font", this.event.data);
  }, formatIndent() {
    var t2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.canIncreaseNestingLevel())
      return this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.increaseNestingLevel();
      });
  }, formatItalic() {
    return this.toggleAttributeIfSupported("italic");
  }, formatJustifyCenter() {
    return this.toggleAttributeIfSupported("justifyCenter");
  }, formatJustifyFull() {
    return this.toggleAttributeIfSupported("justifyFull");
  }, formatJustifyLeft() {
    return this.toggleAttributeIfSupported("justifyLeft");
  }, formatJustifyRight() {
    return this.toggleAttributeIfSupported("justifyRight");
  }, formatOutdent() {
    var t2;
    if (null !== (t2 = this.responder) && void 0 !== t2 && t2.canDecreaseNestingLevel())
      return this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.decreaseNestingLevel();
      });
  }, formatRemove() {
    this.withTargetDOMRange(function() {
      for (const i2 in null === (t2 = this.responder) || void 0 === t2 ? void 0 : t2.getCurrentAttributes()) {
        var t2, e2;
        null === (e2 = this.responder) || void 0 === e2 || e2.removeCurrentAttribute(i2);
      }
    });
  }, formatSetBlockTextDirection() {
    return this.activateAttributeIfSupported("blockDir", this.event.data);
  }, formatSetInlineTextDirection() {
    return this.activateAttributeIfSupported("textDir", this.event.data);
  }, formatStrikeThrough() {
    return this.toggleAttributeIfSupported("strike");
  }, formatSubscript() {
    return this.toggleAttributeIfSupported("sub");
  }, formatSuperscript() {
    return this.toggleAttributeIfSupported("sup");
  }, formatUnderline() {
    return this.toggleAttributeIfSupported("underline");
  }, historyRedo() {
    var t2;
    return null === (t2 = this.delegate) || void 0 === t2 ? void 0 : t2.inputControllerWillPerformRedo();
  }, historyUndo() {
    var t2;
    return null === (t2 = this.delegate) || void 0 === t2 ? void 0 : t2.inputControllerWillPerformUndo();
  }, insertCompositionText() {
    return this.composing = true, this.insertString(this.event.data);
  }, insertFromComposition() {
    return this.composing = false, this.insertString(this.event.data);
  }, insertFromDrop() {
    const t2 = this.deleteByDragRange;
    var e2;
    if (t2)
      return this.deleteByDragRange = null, null === (e2 = this.delegate) || void 0 === e2 || e2.inputControllerWillMoveText(), this.withTargetDOMRange(function() {
        var e3;
        return null === (e3 = this.responder) || void 0 === e3 ? void 0 : e3.moveTextFromRange(t2);
      });
  }, insertFromPaste() {
    var t2;
    const { dataTransfer: e2 } = this.event, i2 = { dataTransfer: e2 }, n2 = e2.getData("URL"), r3 = e2.getData("text/html");
    if (n2) {
      var o2;
      let t3;
      this.event.preventDefault(), i2.type = "text/html";
      const r4 = e2.getData("public.url-name");
      t3 = r4 ? Vt(r4).trim() : n2, i2.html = this.createLinkHTML(n2, t3), null === (o2 = this.delegate) || void 0 === o2 || o2.inputControllerWillPaste(i2), this.withTargetDOMRange(function() {
        var t4;
        return null === (t4 = this.responder) || void 0 === t4 ? void 0 : t4.insertHTML(i2.html);
      }), this.afterRender = () => {
        var t4;
        return null === (t4 = this.delegate) || void 0 === t4 ? void 0 : t4.inputControllerDidPaste(i2);
      };
    } else if (Ct(e2)) {
      var s2;
      i2.type = "text/plain", i2.string = e2.getData("text/plain"), null === (s2 = this.delegate) || void 0 === s2 || s2.inputControllerWillPaste(i2), this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertString(i2.string);
      }), this.afterRender = () => {
        var t3;
        return null === (t3 = this.delegate) || void 0 === t3 ? void 0 : t3.inputControllerDidPaste(i2);
      };
    } else if (r3) {
      var a2;
      this.event.preventDefault(), i2.type = "text/html", i2.html = r3, null === (a2 = this.delegate) || void 0 === a2 || a2.inputControllerWillPaste(i2), this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertHTML(i2.html);
      }), this.afterRender = () => {
        var t3;
        return null === (t3 = this.delegate) || void 0 === t3 ? void 0 : t3.inputControllerDidPaste(i2);
      };
    } else if (null !== (t2 = e2.files) && void 0 !== t2 && t2.length) {
      var l2;
      i2.type = "File", i2.file = e2.files[0], null === (l2 = this.delegate) || void 0 === l2 || l2.inputControllerWillPaste(i2), this.withTargetDOMRange(function() {
        var t3;
        return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertFile(i2.file);
      }), this.afterRender = () => {
        var t3;
        return null === (t3 = this.delegate) || void 0 === t3 ? void 0 : t3.inputControllerDidPaste(i2);
      };
    }
  }, insertFromYank() {
    return this.insertString(this.event.data);
  }, insertLineBreak() {
    return this.insertString("\n");
  }, insertLink() {
    return this.activateAttributeIfSupported("href", this.event.data);
  }, insertOrderedList() {
    return this.toggleAttributeIfSupported("number");
  }, insertParagraph() {
    var t2;
    return null === (t2 = this.delegate) || void 0 === t2 || t2.inputControllerWillPerformTyping(), this.withTargetDOMRange(function() {
      var t3;
      return null === (t3 = this.responder) || void 0 === t3 ? void 0 : t3.insertLineBreak();
    });
  }, insertReplacementText() {
    return this.insertString(this.event.dataTransfer.getData("text/plain"), { updatePosition: false });
  }, insertText() {
    var t2;
    return this.insertString(this.event.data || (null === (t2 = this.event.dataTransfer) || void 0 === t2 ? void 0 : t2.getData("text/plain")));
  }, insertTranspose() {
    return this.insertString(this.event.data);
  }, insertUnorderedList() {
    return this.toggleAttributeIfSupported("bullet");
  } });
  var an = function(t2) {
    const e2 = document.createRange();
    return e2.setStart(t2.startContainer, t2.startOffset), e2.setEnd(t2.endContainer, t2.endOffset), e2;
  };
  var ln = (t2) => {
    var e2;
    return Array.from((null === (e2 = t2.dataTransfer) || void 0 === e2 ? void 0 : e2.types) || []).includes("Files");
  };
  var cn = function(t2) {
    const e2 = t2.clipboardData;
    if (e2)
      return e2.types.includes("Files") && 1 === e2.types.length && e2.files.length >= 1;
  };
  var un = function(t2) {
    const e2 = t2.clipboardData;
    if (e2)
      return e2.types.includes("text/plain") && 1 === e2.types.length;
  };
  var hn = function(t2) {
    const e2 = [];
    return t2.altKey && e2.push("alt"), t2.shiftKey && e2.push("shift"), e2.push(t2.key), e2;
  };
  var dn = (t2) => ({ x: t2.clientX, y: t2.clientY });
  var gn = "[data-trix-attribute]";
  var mn = "[data-trix-action]";
  var pn = "".concat(gn, ", ").concat(mn);
  var fn = "[data-trix-dialog]";
  var bn = "".concat(fn, "[data-trix-active]");
  var vn = "".concat(fn, " [data-trix-method]");
  var An = "".concat(fn, " [data-trix-input]");
  var xn = (t2, e2) => (e2 || (e2 = Cn(t2)), t2.querySelector("[data-trix-input][name='".concat(e2, "']")));
  var yn = (t2) => t2.getAttribute("data-trix-action");
  var Cn = (t2) => t2.getAttribute("data-trix-attribute") || t2.getAttribute("data-trix-dialog-attribute");
  var Rn = class extends z {
    constructor(t2) {
      super(t2), this.didClickActionButton = this.didClickActionButton.bind(this), this.didClickAttributeButton = this.didClickAttributeButton.bind(this), this.didClickDialogButton = this.didClickDialogButton.bind(this), this.didKeyDownDialogInput = this.didKeyDownDialogInput.bind(this), this.element = t2, this.attributes = {}, this.actions = {}, this.resetDialogInputs(), f("mousedown", { onElement: this.element, matchingSelector: mn, withCallback: this.didClickActionButton }), f("mousedown", { onElement: this.element, matchingSelector: gn, withCallback: this.didClickAttributeButton }), f("click", { onElement: this.element, matchingSelector: pn, preventDefault: true }), f("click", { onElement: this.element, matchingSelector: vn, withCallback: this.didClickDialogButton }), f("keydown", { onElement: this.element, matchingSelector: An, withCallback: this.didKeyDownDialogInput });
    }
    didClickActionButton(t2, e2) {
      var i2;
      null === (i2 = this.delegate) || void 0 === i2 || i2.toolbarDidClickButton(), t2.preventDefault();
      const n2 = yn(e2);
      return this.getDialog(n2) ? this.toggleDialog(n2) : null === (r3 = this.delegate) || void 0 === r3 ? void 0 : r3.toolbarDidInvokeAction(n2);
      var r3;
    }
    didClickAttributeButton(t2, e2) {
      var i2;
      null === (i2 = this.delegate) || void 0 === i2 || i2.toolbarDidClickButton(), t2.preventDefault();
      const n2 = Cn(e2);
      var r3;
      this.getDialog(n2) ? this.toggleDialog(n2) : null === (r3 = this.delegate) || void 0 === r3 || r3.toolbarDidToggleAttribute(n2);
      return this.refreshAttributeButtons();
    }
    didClickDialogButton(t2, e2) {
      const i2 = A(e2, { matchingSelector: fn });
      return this[e2.getAttribute("data-trix-method")].call(this, i2);
    }
    didKeyDownDialogInput(t2, e2) {
      if (13 === t2.keyCode) {
        t2.preventDefault();
        const i2 = e2.getAttribute("name"), n2 = this.getDialog(i2);
        this.setAttribute(n2);
      }
      if (27 === t2.keyCode)
        return t2.preventDefault(), this.hideDialog();
    }
    updateActions(t2) {
      return this.actions = t2, this.refreshActionButtons();
    }
    refreshActionButtons() {
      return this.eachActionButton((t2, e2) => {
        t2.disabled = false === this.actions[e2];
      });
    }
    eachActionButton(t2) {
      return Array.from(this.element.querySelectorAll(mn)).map((e2) => t2(e2, yn(e2)));
    }
    updateAttributes(t2) {
      return this.attributes = t2, this.refreshAttributeButtons();
    }
    refreshAttributeButtons() {
      return this.eachAttributeButton((t2, e2) => (t2.disabled = false === this.attributes[e2], this.attributes[e2] || this.dialogIsVisible(e2) ? (t2.setAttribute("data-trix-active", ""), t2.classList.add("trix-active")) : (t2.removeAttribute("data-trix-active"), t2.classList.remove("trix-active"))));
    }
    eachAttributeButton(t2) {
      return Array.from(this.element.querySelectorAll(gn)).map((e2) => t2(e2, Cn(e2)));
    }
    applyKeyboardCommand(t2) {
      const e2 = JSON.stringify(t2.sort());
      for (const t3 of Array.from(this.element.querySelectorAll("[data-trix-key]"))) {
        const i2 = t3.getAttribute("data-trix-key").split("+");
        if (JSON.stringify(i2.sort()) === e2)
          return b("mousedown", { onElement: t3 }), true;
      }
      return false;
    }
    dialogIsVisible(t2) {
      const e2 = this.getDialog(t2);
      if (e2)
        return e2.hasAttribute("data-trix-active");
    }
    toggleDialog(t2) {
      return this.dialogIsVisible(t2) ? this.hideDialog() : this.showDialog(t2);
    }
    showDialog(t2) {
      var e2, i2;
      this.hideDialog(), null === (e2 = this.delegate) || void 0 === e2 || e2.toolbarWillShowDialog();
      const n2 = this.getDialog(t2);
      n2.setAttribute("data-trix-active", ""), n2.classList.add("trix-active"), Array.from(n2.querySelectorAll("input[disabled]")).forEach((t3) => {
        t3.removeAttribute("disabled");
      });
      const r3 = Cn(n2);
      if (r3) {
        const e3 = xn(n2, t2);
        e3 && (e3.value = this.attributes[r3] || "", e3.select());
      }
      return null === (i2 = this.delegate) || void 0 === i2 ? void 0 : i2.toolbarDidShowDialog(t2);
    }
    setAttribute(t2) {
      const e2 = Cn(t2), i2 = xn(t2, e2);
      return i2.willValidate && !i2.checkValidity() ? (i2.setAttribute("data-trix-validate", ""), i2.classList.add("trix-validate"), i2.focus()) : (null === (n2 = this.delegate) || void 0 === n2 || n2.toolbarDidUpdateAttribute(e2, i2.value), this.hideDialog());
      var n2;
    }
    removeAttribute(t2) {
      var e2;
      const i2 = Cn(t2);
      return null === (e2 = this.delegate) || void 0 === e2 || e2.toolbarDidRemoveAttribute(i2), this.hideDialog();
    }
    hideDialog() {
      const t2 = this.element.querySelector(bn);
      var e2;
      if (t2)
        return t2.removeAttribute("data-trix-active"), t2.classList.remove("trix-active"), this.resetDialogInputs(), null === (e2 = this.delegate) || void 0 === e2 ? void 0 : e2.toolbarDidHideDialog(((t3) => t3.getAttribute("data-trix-dialog"))(t2));
    }
    resetDialogInputs() {
      Array.from(this.element.querySelectorAll(An)).forEach((t2) => {
        t2.setAttribute("disabled", "disabled"), t2.removeAttribute("data-trix-validate"), t2.classList.remove("trix-validate");
      });
    }
    getDialog(t2) {
      return this.element.querySelector("[data-trix-dialog=".concat(t2, "]"));
    }
  };
  var Sn = class extends Mi {
    constructor(t2) {
      let { editorElement: e2, document: i2, html: n2 } = t2;
      super(...arguments), this.editorElement = e2, this.selectionManager = new Di(this.editorElement), this.selectionManager.delegate = this, this.composition = new mi(), this.composition.delegate = this, this.attachmentManager = new di(this.composition.getAttachments()), this.attachmentManager.delegate = this, this.inputController = 2 === M.getLevel() ? new sn(this.editorElement) : new Zi(this.editorElement), this.inputController.delegate = this, this.inputController.responder = this.composition, this.compositionController = new Oi(this.editorElement, this.composition), this.compositionController.delegate = this, this.toolbarController = new Rn(this.editorElement.toolbarElement), this.toolbarController.delegate = this, this.editor = new yi(this.composition, this.selectionManager, this.editorElement), i2 ? this.editor.loadDocument(i2) : this.editor.loadHTML(n2);
    }
    registerSelectionManager() {
      return Pt.registerSelectionManager(this.selectionManager);
    }
    unregisterSelectionManager() {
      return Pt.unregisterSelectionManager(this.selectionManager);
    }
    render() {
      return this.compositionController.render();
    }
    reparse() {
      return this.composition.replaceHTML(this.editorElement.innerHTML);
    }
    compositionDidChangeDocument(t2) {
      if (this.notifyEditorElement("document-change"), !this.handlingInput)
        return this.render();
    }
    compositionDidChangeCurrentAttributes(t2) {
      return this.currentAttributes = t2, this.toolbarController.updateAttributes(this.currentAttributes), this.updateCurrentActions(), this.notifyEditorElement("attributes-change", { attributes: this.currentAttributes });
    }
    compositionDidPerformInsertionAtRange(t2) {
      this.pasting && (this.pastedRange = t2);
    }
    compositionShouldAcceptFile(t2) {
      return this.notifyEditorElement("file-accept", { file: t2 });
    }
    compositionDidAddAttachment(t2) {
      const e2 = this.attachmentManager.manageAttachment(t2);
      return this.notifyEditorElement("attachment-add", { attachment: e2 });
    }
    compositionDidEditAttachment(t2) {
      this.compositionController.rerenderViewForObject(t2);
      const e2 = this.attachmentManager.manageAttachment(t2);
      return this.notifyEditorElement("attachment-edit", { attachment: e2 }), this.notifyEditorElement("change");
    }
    compositionDidChangeAttachmentPreviewURL(t2) {
      return this.compositionController.invalidateViewForObject(t2), this.notifyEditorElement("change");
    }
    compositionDidRemoveAttachment(t2) {
      const e2 = this.attachmentManager.unmanageAttachment(t2);
      return this.notifyEditorElement("attachment-remove", { attachment: e2 });
    }
    compositionDidStartEditingAttachment(t2, e2) {
      return this.attachmentLocationRange = this.composition.document.getLocationRangeOfAttachment(t2), this.compositionController.installAttachmentEditorForAttachment(t2, e2), this.selectionManager.setLocationRange(this.attachmentLocationRange);
    }
    compositionDidStopEditingAttachment(t2) {
      this.compositionController.uninstallAttachmentEditor(), this.attachmentLocationRange = null;
    }
    compositionDidRequestChangingSelectionToLocationRange(t2) {
      if (!this.loadingSnapshot || this.isFocused())
        return this.requestedLocationRange = t2, this.compositionRevisionWhenLocationRangeRequested = this.composition.revision, this.handlingInput ? void 0 : this.render();
    }
    compositionWillLoadSnapshot() {
      this.loadingSnapshot = true;
    }
    compositionDidLoadSnapshot() {
      this.compositionController.refreshViewCache(), this.render(), this.loadingSnapshot = false;
    }
    getSelectionManager() {
      return this.selectionManager;
    }
    attachmentManagerDidRequestRemovalOfAttachment(t2) {
      return this.removeAttachment(t2);
    }
    compositionControllerWillSyncDocumentView() {
      return this.inputController.editorWillSyncDocumentView(), this.selectionManager.lock(), this.selectionManager.clearSelection();
    }
    compositionControllerDidSyncDocumentView() {
      return this.inputController.editorDidSyncDocumentView(), this.selectionManager.unlock(), this.updateCurrentActions(), this.notifyEditorElement("sync");
    }
    compositionControllerDidRender() {
      this.requestedLocationRange && (this.compositionRevisionWhenLocationRangeRequested === this.composition.revision && this.selectionManager.setLocationRange(this.requestedLocationRange), this.requestedLocationRange = null, this.compositionRevisionWhenLocationRangeRequested = null), this.renderedCompositionRevision !== this.composition.revision && (this.runEditorFilters(), this.composition.updateCurrentAttributes(), this.notifyEditorElement("render")), this.renderedCompositionRevision = this.composition.revision;
    }
    compositionControllerDidFocus() {
      return this.isFocusedInvisibly() && this.setLocationRange({ index: 0, offset: 0 }), this.toolbarController.hideDialog(), this.notifyEditorElement("focus");
    }
    compositionControllerDidBlur() {
      return this.notifyEditorElement("blur");
    }
    compositionControllerDidSelectAttachment(t2, e2) {
      return this.toolbarController.hideDialog(), this.composition.editAttachment(t2, e2);
    }
    compositionControllerDidRequestDeselectingAttachment(t2) {
      const e2 = this.attachmentLocationRange || this.composition.document.getLocationRangeOfAttachment(t2);
      return this.selectionManager.setLocationRange(e2[1]);
    }
    compositionControllerWillUpdateAttachment(t2) {
      return this.editor.recordUndoEntry("Edit Attachment", { context: t2.id, consolidatable: true });
    }
    compositionControllerDidRequestRemovalOfAttachment(t2) {
      return this.removeAttachment(t2);
    }
    inputControllerWillHandleInput() {
      this.handlingInput = true, this.requestedRender = false;
    }
    inputControllerDidRequestRender() {
      this.requestedRender = true;
    }
    inputControllerDidHandleInput() {
      if (this.handlingInput = false, this.requestedRender)
        return this.requestedRender = false, this.render();
    }
    inputControllerDidAllowUnhandledInput() {
      return this.notifyEditorElement("change");
    }
    inputControllerDidRequestReparse() {
      return this.reparse();
    }
    inputControllerWillPerformTyping() {
      return this.recordTypingUndoEntry();
    }
    inputControllerWillPerformFormatting(t2) {
      return this.recordFormattingUndoEntry(t2);
    }
    inputControllerWillCutText() {
      return this.editor.recordUndoEntry("Cut");
    }
    inputControllerWillPaste(t2) {
      return this.editor.recordUndoEntry("Paste"), this.pasting = true, this.notifyEditorElement("before-paste", { paste: t2 });
    }
    inputControllerDidPaste(t2) {
      return t2.range = this.pastedRange, this.pastedRange = null, this.pasting = null, this.notifyEditorElement("paste", { paste: t2 });
    }
    inputControllerWillMoveText() {
      return this.editor.recordUndoEntry("Move");
    }
    inputControllerWillAttachFiles() {
      return this.editor.recordUndoEntry("Drop Files");
    }
    inputControllerWillPerformUndo() {
      return this.editor.undo();
    }
    inputControllerWillPerformRedo() {
      return this.editor.redo();
    }
    inputControllerDidReceiveKeyboardCommand(t2) {
      return this.toolbarController.applyKeyboardCommand(t2);
    }
    inputControllerDidStartDrag() {
      this.locationRangeBeforeDrag = this.selectionManager.getLocationRange();
    }
    inputControllerDidReceiveDragOverPoint(t2) {
      return this.selectionManager.setLocationRangeFromPointRange(t2);
    }
    inputControllerDidCancelDrag() {
      this.selectionManager.setLocationRange(this.locationRangeBeforeDrag), this.locationRangeBeforeDrag = null;
    }
    locationRangeDidChange(t2) {
      return this.composition.updateCurrentAttributes(), this.updateCurrentActions(), this.attachmentLocationRange && !wt(this.attachmentLocationRange, t2) && this.composition.stopEditingAttachment(), this.notifyEditorElement("selection-change");
    }
    toolbarDidClickButton() {
      if (!this.getLocationRange())
        return this.setLocationRange({ index: 0, offset: 0 });
    }
    toolbarDidInvokeAction(t2) {
      return this.invokeAction(t2);
    }
    toolbarDidToggleAttribute(t2) {
      if (this.recordFormattingUndoEntry(t2), this.composition.toggleCurrentAttribute(t2), this.render(), !this.selectionFrozen)
        return this.editorElement.focus();
    }
    toolbarDidUpdateAttribute(t2, e2) {
      if (this.recordFormattingUndoEntry(t2), this.composition.setCurrentAttribute(t2, e2), this.render(), !this.selectionFrozen)
        return this.editorElement.focus();
    }
    toolbarDidRemoveAttribute(t2) {
      if (this.recordFormattingUndoEntry(t2), this.composition.removeCurrentAttribute(t2), this.render(), !this.selectionFrozen)
        return this.editorElement.focus();
    }
    toolbarWillShowDialog(t2) {
      return this.composition.expandSelectionForEditing(), this.freezeSelection();
    }
    toolbarDidShowDialog(t2) {
      return this.notifyEditorElement("toolbar-dialog-show", { dialogName: t2 });
    }
    toolbarDidHideDialog(t2) {
      return this.thawSelection(), this.editorElement.focus(), this.notifyEditorElement("toolbar-dialog-hide", { dialogName: t2 });
    }
    freezeSelection() {
      if (!this.selectionFrozen)
        return this.selectionManager.lock(), this.composition.freezeSelection(), this.selectionFrozen = true, this.render();
    }
    thawSelection() {
      if (this.selectionFrozen)
        return this.composition.thawSelection(), this.selectionManager.unlock(), this.selectionFrozen = false, this.render();
    }
    canInvokeAction(t2) {
      return !!this.actionIsExternal(t2) || !(null === (e2 = this.actions[t2]) || void 0 === e2 || null === (e2 = e2.test) || void 0 === e2 || !e2.call(this));
      var e2;
    }
    invokeAction(t2) {
      return this.actionIsExternal(t2) ? this.notifyEditorElement("action-invoke", { actionName: t2 }) : null === (e2 = this.actions[t2]) || void 0 === e2 || null === (e2 = e2.perform) || void 0 === e2 ? void 0 : e2.call(this);
      var e2;
    }
    actionIsExternal(t2) {
      return /^x-./.test(t2);
    }
    getCurrentActions() {
      const t2 = {};
      for (const e2 in this.actions)
        t2[e2] = this.canInvokeAction(e2);
      return t2;
    }
    updateCurrentActions() {
      const t2 = this.getCurrentActions();
      if (!kt(t2, this.currentActions))
        return this.currentActions = t2, this.toolbarController.updateActions(this.currentActions), this.notifyEditorElement("actions-change", { actions: this.currentActions });
    }
    runEditorFilters() {
      let t2 = this.composition.getSnapshot();
      if (Array.from(this.editor.filters).forEach((e3) => {
        const { document: i3, selectedRange: n2 } = t2;
        t2 = e3.call(this.editor, t2) || {}, t2.document || (t2.document = i3), t2.selectedRange || (t2.selectedRange = n2);
      }), e2 = t2, i2 = this.composition.getSnapshot(), !wt(e2.selectedRange, i2.selectedRange) || !e2.document.isEqualTo(i2.document))
        return this.composition.loadSnapshot(t2);
      var e2, i2;
    }
    updateInputElement() {
      const t2 = function(t3, e2) {
        const i2 = ci[e2];
        if (i2)
          return i2(t3);
        throw new Error("unknown content type: ".concat(e2));
      }(this.compositionController.getSerializableElement(), "text/html");
      return this.editorElement.setInputElementValue(t2);
    }
    notifyEditorElement(t2, e2) {
      switch (t2) {
        case "document-change":
          this.documentChangedSinceLastRender = true;
          break;
        case "render":
          this.documentChangedSinceLastRender && (this.documentChangedSinceLastRender = false, this.notifyEditorElement("change"));
          break;
        case "change":
        case "attachment-add":
        case "attachment-edit":
        case "attachment-remove":
          this.updateInputElement();
      }
      return this.editorElement.notify(t2, e2);
    }
    removeAttachment(t2) {
      return this.editor.recordUndoEntry("Delete Attachment"), this.composition.removeAttachment(t2), this.render();
    }
    recordFormattingUndoEntry(t2) {
      const e2 = gt(t2), i2 = this.selectionManager.getLocationRange();
      if (e2 || !Dt(i2))
        return this.editor.recordUndoEntry("Formatting", { context: this.getUndoContext(), consolidatable: true });
    }
    recordTypingUndoEntry() {
      return this.editor.recordUndoEntry("Typing", { context: this.getUndoContext(this.currentAttributes), consolidatable: true });
    }
    getUndoContext() {
      for (var t2 = arguments.length, e2 = new Array(t2), i2 = 0; i2 < t2; i2++)
        e2[i2] = arguments[i2];
      return [this.getLocationContext(), this.getTimeContext(), ...Array.from(e2)];
    }
    getLocationContext() {
      const t2 = this.selectionManager.getLocationRange();
      return Dt(t2) ? t2[0].index : t2;
    }
    getTimeContext() {
      return q.interval > 0 ? Math.floor((/* @__PURE__ */ new Date()).getTime() / q.interval) : 0;
    }
    isFocused() {
      var t2;
      return this.editorElement === (null === (t2 = this.editorElement.ownerDocument) || void 0 === t2 ? void 0 : t2.activeElement);
    }
    isFocusedInvisibly() {
      return this.isFocused() && !this.getLocationRange();
    }
    get actions() {
      return this.constructor.actions;
    }
  };
  xe(Sn, "actions", { undo: { test() {
    return this.editor.canUndo();
  }, perform() {
    return this.editor.undo();
  } }, redo: { test() {
    return this.editor.canRedo();
  }, perform() {
    return this.editor.redo();
  } }, link: { test() {
    return this.editor.canActivateAttribute("href");
  } }, increaseNestingLevel: { test() {
    return this.editor.canIncreaseNestingLevel();
  }, perform() {
    return this.editor.increaseNestingLevel() && this.render();
  } }, decreaseNestingLevel: { test() {
    return this.editor.canDecreaseNestingLevel();
  }, perform() {
    return this.editor.decreaseNestingLevel() && this.render();
  } }, attachFiles: { test: () => true, perform() {
    return M.pickFiles(this.editor.insertFiles);
  } } }), Sn.proxyMethod("getSelectionManager().setLocationRange"), Sn.proxyMethod("getSelectionManager().getLocationRange");
  var En = Object.freeze({ __proto__: null, AttachmentEditorController: Ni, CompositionController: Oi, Controller: Mi, EditorController: Sn, InputController: Gi, Level0InputController: Zi, Level2InputController: sn, ToolbarController: Rn });
  var kn = Object.freeze({ __proto__: null, MutationObserver: qi, SelectionChangeObserver: Bt });
  var Ln = Object.freeze({ __proto__: null, FileVerificationOperation: zi, ImagePreloadOperation: Re });
  bt("trix-toolbar", "%t {\n  display: block;\n}\n\n%t {\n  white-space: nowrap;\n}\n\n%t [data-trix-dialog] {\n  display: none;\n}\n\n%t [data-trix-dialog][data-trix-active] {\n  display: block;\n}\n\n%t [data-trix-dialog] [data-trix-validate]:invalid {\n  background-color: #ffdddd;\n}");
  var Dn = class extends HTMLElement {
    connectedCallback() {
      "" === this.innerHTML && (this.innerHTML = U.getDefaultHTML());
    }
  };
  var wn = 0;
  var Tn = function(t2) {
    if (!t2.hasAttribute("contenteditable"))
      return t2.setAttribute("contenteditable", ""), function(t3) {
        let e2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        return e2.times = 1, f(t3, e2);
      }("focus", { onElement: t2, withCallback: () => Fn(t2) });
  };
  var Fn = function(t2) {
    return Bn(t2), In(t2);
  };
  var Bn = function(t2) {
    var e2, i2;
    if (null !== (e2 = (i2 = document).queryCommandSupported) && void 0 !== e2 && e2.call(i2, "enableObjectResizing"))
      return document.execCommand("enableObjectResizing", false, false), f("mscontrolselect", { onElement: t2, preventDefault: true });
  };
  var In = function(t2) {
    var e2, i2;
    if (null !== (e2 = (i2 = document).queryCommandSupported) && void 0 !== e2 && e2.call(i2, "DefaultParagraphSeparator")) {
      const { tagName: t3 } = n.default;
      if (["div", "p"].includes(t3))
        return document.execCommand("DefaultParagraphSeparator", false, t3);
    }
  };
  var Pn = a.forcesObjectResizing ? { display: "inline", width: "auto" } : { display: "inline-block", width: "1px" };
  bt("trix-editor", "%t {\n    display: block;\n}\n\n%t:empty:not(:focus)::before {\n    content: attr(placeholder);\n    color: graytext;\n    cursor: text;\n    pointer-events: none;\n    white-space: pre-line;\n}\n\n%t a[contenteditable=false] {\n    cursor: text;\n}\n\n%t img {\n    max-width: 100%;\n    height: auto;\n}\n\n%t ".concat(e, " figcaption textarea {\n    resize: none;\n}\n\n%t ").concat(e, " figcaption textarea.trix-autoresize-clone {\n    position: absolute;\n    left: -9999px;\n    max-height: 0px;\n}\n\n%t ").concat(e, " figcaption[data-trix-placeholder]:empty::before {\n    content: attr(data-trix-placeholder);\n    color: graytext;\n}\n\n%t [data-trix-cursor-target] {\n    display: ").concat(Pn.display, " !important;\n    width: ").concat(Pn.width, " !important;\n    padding: 0 !important;\n    margin: 0 !important;\n    border: none !important;\n}\n\n%t [data-trix-cursor-target=left] {\n    vertical-align: top !important;\n    margin-left: -1px !important;\n}\n\n%t [data-trix-cursor-target=right] {\n    vertical-align: bottom !important;\n    margin-right: -1px !important;\n}"));
  var Nn = class extends HTMLElement {
    get trixId() {
      return this.hasAttribute("trix-id") ? this.getAttribute("trix-id") : (this.setAttribute("trix-id", ++wn), this.trixId);
    }
    get labels() {
      const t2 = [];
      this.id && this.ownerDocument && t2.push(...Array.from(this.ownerDocument.querySelectorAll("label[for='".concat(this.id, "']")) || []));
      const e2 = A(this, { matchingSelector: "label" });
      return e2 && [this, null].includes(e2.control) && t2.push(e2), t2;
    }
    get toolbarElement() {
      var t2;
      if (this.hasAttribute("toolbar"))
        return null === (t2 = this.ownerDocument) || void 0 === t2 ? void 0 : t2.getElementById(this.getAttribute("toolbar"));
      if (this.parentNode) {
        const t3 = "trix-toolbar-".concat(this.trixId);
        this.setAttribute("toolbar", t3);
        const e2 = k("trix-toolbar", { id: t3 });
        return this.parentNode.insertBefore(e2, this), e2;
      }
    }
    get form() {
      var t2;
      return null === (t2 = this.inputElement) || void 0 === t2 ? void 0 : t2.form;
    }
    get inputElement() {
      var t2;
      if (this.hasAttribute("input"))
        return null === (t2 = this.ownerDocument) || void 0 === t2 ? void 0 : t2.getElementById(this.getAttribute("input"));
      if (this.parentNode) {
        const t3 = "trix-input-".concat(this.trixId);
        this.setAttribute("input", t3);
        const e2 = k("input", { type: "hidden", id: t3 });
        return this.parentNode.insertBefore(e2, this.nextElementSibling), e2;
      }
    }
    get editor() {
      var t2;
      return null === (t2 = this.editorController) || void 0 === t2 ? void 0 : t2.editor;
    }
    get name() {
      var t2;
      return null === (t2 = this.inputElement) || void 0 === t2 ? void 0 : t2.name;
    }
    get value() {
      var t2;
      return null === (t2 = this.inputElement) || void 0 === t2 ? void 0 : t2.value;
    }
    set value(t2) {
      var e2;
      this.defaultValue = t2, null === (e2 = this.editor) || void 0 === e2 || e2.loadHTML(this.defaultValue);
    }
    notify(t2, e2) {
      if (this.editorController)
        return b("trix-".concat(t2), { onElement: this, attributes: e2 });
    }
    setInputElementValue(t2) {
      this.inputElement && (this.inputElement.value = t2);
    }
    connectedCallback() {
      this.hasAttribute("data-trix-internal") || (Tn(this), function(t2) {
        if (!t2.hasAttribute("role"))
          t2.setAttribute("role", "textbox");
      }(this), function(t2) {
        if (t2.hasAttribute("aria-label") || t2.hasAttribute("aria-labelledby"))
          return;
        const e2 = function() {
          const e3 = Array.from(t2.labels).map((e4) => {
            if (!e4.contains(t2))
              return e4.textContent;
          }).filter((t3) => t3), i2 = e3.join(" ");
          return i2 ? t2.setAttribute("aria-label", i2) : t2.removeAttribute("aria-label");
        };
        e2(), f("focus", { onElement: t2, withCallback: e2 });
      }(this), this.editorController || (b("trix-before-initialize", { onElement: this }), this.editorController = new Sn({ editorElement: this, html: this.defaultValue = this.value }), requestAnimationFrame(() => b("trix-initialize", { onElement: this }))), this.editorController.registerSelectionManager(), this.registerResetListener(), this.registerClickListener(), function(t2) {
        if (!document.querySelector(":focus") && t2.hasAttribute("autofocus") && document.querySelector("[autofocus]") === t2)
          t2.focus();
      }(this));
    }
    disconnectedCallback() {
      var t2;
      return null === (t2 = this.editorController) || void 0 === t2 || t2.unregisterSelectionManager(), this.unregisterResetListener(), this.unregisterClickListener();
    }
    registerResetListener() {
      return this.resetListener = this.resetBubbled.bind(this), window.addEventListener("reset", this.resetListener, false);
    }
    unregisterResetListener() {
      return window.removeEventListener("reset", this.resetListener, false);
    }
    registerClickListener() {
      return this.clickListener = this.clickBubbled.bind(this), window.addEventListener("click", this.clickListener, false);
    }
    unregisterClickListener() {
      return window.removeEventListener("click", this.clickListener, false);
    }
    resetBubbled(t2) {
      if (!t2.defaultPrevented && t2.target === this.form)
        return this.reset();
    }
    clickBubbled(t2) {
      if (t2.defaultPrevented)
        return;
      if (this.contains(t2.target))
        return;
      const e2 = A(t2.target, { matchingSelector: "label" });
      return e2 && Array.from(this.labels).includes(e2) ? this.focus() : void 0;
    }
    reset() {
      this.value = this.defaultValue;
    }
  };
  var On = { VERSION: t, config: V, core: ui, models: wi, views: Ti, controllers: En, observers: kn, operations: Ln, elements: Object.freeze({ __proto__: null, TrixEditorElement: Nn, TrixToolbarElement: Dn }), filters: Object.freeze({ __proto__: null, Filter: vi, attachmentGalleryFilter: Ai }) };
  Object.assign(On, wi), window.Trix = On, setTimeout(function() {
    customElements.get("trix-toolbar") || customElements.define("trix-toolbar", Dn), customElements.get("trix-editor") || customElements.define("trix-editor", Nn);
  }, 0);

  // app/javascript/controllers/mentions_controller.js
  var mentions_controller_default = class extends Controller {
    static targets = ["field"];
    connect() {
      this.initializeTribute();
    }
    disconnect() {
      this.tribute.detach(this.fieldTarget);
    }
    get editor() {
      return this.element.editor;
    }
    initializeTribute() {
      this.tribute = new import_tributejs.default({
        allowSpaces: true,
        lookup: "username",
        values: this.fetchUsers,
        menuItemTemplate(item) {
          return `<div class="mentionsListContainer">
                <div class="mentions-list-centered">
                  <div class="flex flex-row justify-around">
                    <img class="w-10 h-10 rounded-full" src="${item.original.profile_pic}" alt="${item.original.name}"/>
                    <div class="flex flex-col ml-2">
                      <h1 class="mentions-list-header">
                        ${item.original.name}
                      </h1>
                      <p class="text-gray-400 text-sm">${item.original.username}</p>
                    </div>
                  </div>
                </div>
              </div>`;
        }
      });
      this.tribute.attach(this.fieldTarget);
      this.tribute.range.pasteHtml = this._pasteHtml.bind(this);
      this.fieldTarget.addEventListener("tribute-replaced", this.replaced);
    }
    fetchUsers(text, callback) {
      fetch(`/mentions.json?query=${text}`).then((response) => response.json()).then((users) => callback(users)).catch((error2) => callback([]));
    }
    replaced(e2) {
      let mention = e2.detail.item.original;
      let attachment = new On.Attachment({
        sgid: mention.sgid,
        content: mention.content,
        contentType: "inline-element mention"
      });
      this.editor.insertAttachment(attachment);
      this.editor.insertString(" ");
    }
    _pasteHtml(_html, startPos, endPos) {
      let range = this.editor.getSelectedRange();
      let position = range[0];
      let length = endPos - startPos;
      this.editor.setSelectedRange([position - length, position]);
      this.editor.deleteInDirection("backward");
    }
  };

  // app/javascript/controllers/profile_following_controller.js
  var profile_following_controller_default = class extends Controller {
    static targets = ["follow", "profile"];
    connect() {
      this.index = 1;
    }
    unfollow() {
      this.index--;
      this.followTarget.classList.remove("primary");
      this.followTarget.classList.add("error");
      this.toggleTargets();
    }
    follow() {
      this.index++;
      this.followTarget.classList.remove("error");
      this.followTarget.classList.add("primary");
      this.toggleTargets();
    }
    toggleTargets() {
      this.followTarget.innerText = this.index == 1 ? "Following" : "Unfollow";
    }
    disconnect() {
    }
  };

  // app/javascript/controllers/profile_modal_controller.js
  var profile_modal_controller_default = class extends Controller {
    static targets = ["modal", "hideable"];
    connect() {
      console.log("modal connect ");
    }
    // hide modal
    // action: "profile-modal#hideModal"
    hideModal() {
      console.log("Hiding modal");
      this.hideableTargets.forEach((el) => {
        el.hidden = true;
      });
    }
    // hide modal on successful form submission
    // action: "turbo:submit-end->turbo-modal#submitEnd"
    submitEnd(e2) {
      if (e2.detail.success) {
        this.hideModal();
      }
    }
    // hide modal when clicking ESC
    // action: "keyup@window->turbo-modal#closeWithKeyboard"
    closeWithKeyboard(e2) {
      if (e2.code == "Escape") {
        this.hideModal();
      }
    }
    // hide modal when clicking outside of modal
    // action: "click@window->turbo-modal#closeBackground"
    closeBackground(e2) {
      if (e2 && this.modalTarget.contains(e2.target)) {
        return;
      }
      this.hideModal();
    }
  };

  // app/javascript/controllers/reset_form_controller.js
  var reset_form_controller_default = class extends Controller {
    reset() {
      this.element.reset();
    }
  };

  // app/javascript/controllers/search_controller.js
  var search_controller_default = class extends Controller {
    static targets = ["input", "suggestions", "search"];
    connect() {
      document.addEventListener("click", (event) => {
        if (!this.element.contains(event.target)) {
        }
      });
    }
    suggestions() {
      const query = this.inputTarget.value;
      const url = this.element.dataset.suggestionsUrl;
      clearTimeout(this.timeout);
      this.timeout = setTimeout(() => {
        this.requestSuggestions(query, url);
      }, 250);
    }
    requestSuggestions(query, url) {
      if (query.length === 0) {
        this.hideSuggestions();
      }
      this.showSuggestions();
      fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content
        },
        body: JSON.stringify({ query })
      }).then((response) => {
        response.text().then((html) => {
          document.body.insertAdjacentHTML("beforeend", html);
        });
      });
    }
    childClicked(event) {
      this.childWasClicked = this.element.contains(event.target);
    }
    showSuggestions() {
      this.suggestionsTarget.classList.remove("hidden");
    }
    hideSuggestions() {
      if (this.childWasClicked) {
        this.suggestionsTarget.classList.add("hidden");
      }
      this.childWasClicked = false;
    }
    search() {
      const hashtag = this.searchTarget.innerText.replace("#", "");
      const url = `/search?q=${hashtag}`;
      console.log(url);
      window.location.href = url;
    }
  };

  // app/javascript/controllers/show_churp_controller.js
  var show_churp_controller_default = class extends Controller {
    static values = {
      url: String
    };
    connect() {
      console.log("Connectting to data-controller='how-churp'");
    }
    showChurp() {
      console.log("show_churp");
      window.location.href = this.urlValue;
    }
  };

  // node_modules/@rails/actioncable/app/assets/javascripts/actioncable.esm.js
  var adapters = {
    logger: self.console,
    WebSocket: self.WebSocket
  };
  var logger = {
    log(...messages) {
      if (this.enabled) {
        messages.push(Date.now());
        adapters.logger.log("[ActionCable]", ...messages);
      }
    }
  };
  var now2 = () => (/* @__PURE__ */ new Date()).getTime();
  var secondsSince2 = (time) => (now2() - time) / 1e3;
  var ConnectionMonitor2 = class {
    constructor(connection) {
      this.visibilityDidChange = this.visibilityDidChange.bind(this);
      this.connection = connection;
      this.reconnectAttempts = 0;
    }
    start() {
      if (!this.isRunning()) {
        this.startedAt = now2();
        delete this.stoppedAt;
        this.startPolling();
        addEventListener("visibilitychange", this.visibilityDidChange);
        logger.log(`ConnectionMonitor started. stale threshold = ${this.constructor.staleThreshold} s`);
      }
    }
    stop() {
      if (this.isRunning()) {
        this.stoppedAt = now2();
        this.stopPolling();
        removeEventListener("visibilitychange", this.visibilityDidChange);
        logger.log("ConnectionMonitor stopped");
      }
    }
    isRunning() {
      return this.startedAt && !this.stoppedAt;
    }
    recordPing() {
      this.pingedAt = now2();
    }
    recordConnect() {
      this.reconnectAttempts = 0;
      this.recordPing();
      delete this.disconnectedAt;
      logger.log("ConnectionMonitor recorded connect");
    }
    recordDisconnect() {
      this.disconnectedAt = now2();
      logger.log("ConnectionMonitor recorded disconnect");
    }
    startPolling() {
      this.stopPolling();
      this.poll();
    }
    stopPolling() {
      clearTimeout(this.pollTimeout);
    }
    poll() {
      this.pollTimeout = setTimeout(() => {
        this.reconnectIfStale();
        this.poll();
      }, this.getPollInterval());
    }
    getPollInterval() {
      const { staleThreshold, reconnectionBackoffRate } = this.constructor;
      const backoff = Math.pow(1 + reconnectionBackoffRate, Math.min(this.reconnectAttempts, 10));
      const jitterMax = this.reconnectAttempts === 0 ? 1 : reconnectionBackoffRate;
      const jitter = jitterMax * Math.random();
      return staleThreshold * 1e3 * backoff * (1 + jitter);
    }
    reconnectIfStale() {
      if (this.connectionIsStale()) {
        logger.log(`ConnectionMonitor detected stale connection. reconnectAttempts = ${this.reconnectAttempts}, time stale = ${secondsSince2(this.refreshedAt)} s, stale threshold = ${this.constructor.staleThreshold} s`);
        this.reconnectAttempts++;
        if (this.disconnectedRecently()) {
          logger.log(`ConnectionMonitor skipping reopening recent disconnect. time disconnected = ${secondsSince2(this.disconnectedAt)} s`);
        } else {
          logger.log("ConnectionMonitor reopening");
          this.connection.reopen();
        }
      }
    }
    get refreshedAt() {
      return this.pingedAt ? this.pingedAt : this.startedAt;
    }
    connectionIsStale() {
      return secondsSince2(this.refreshedAt) > this.constructor.staleThreshold;
    }
    disconnectedRecently() {
      return this.disconnectedAt && secondsSince2(this.disconnectedAt) < this.constructor.staleThreshold;
    }
    visibilityDidChange() {
      if (document.visibilityState === "visible") {
        setTimeout(() => {
          if (this.connectionIsStale() || !this.connection.isOpen()) {
            logger.log(`ConnectionMonitor reopening stale connection on visibilitychange. visibilityState = ${document.visibilityState}`);
            this.connection.reopen();
          }
        }, 200);
      }
    }
  };
  ConnectionMonitor2.staleThreshold = 6;
  ConnectionMonitor2.reconnectionBackoffRate = 0.15;
  var INTERNAL = {
    message_types: {
      welcome: "welcome",
      disconnect: "disconnect",
      ping: "ping",
      confirmation: "confirm_subscription",
      rejection: "reject_subscription"
    },
    disconnect_reasons: {
      unauthorized: "unauthorized",
      invalid_request: "invalid_request",
      server_restart: "server_restart",
      remote: "remote"
    },
    default_mount_path: "/cable",
    protocols: ["actioncable-v1-json", "actioncable-unsupported"]
  };
  var { message_types: message_types2, protocols: protocols2 } = INTERNAL;
  var supportedProtocols2 = protocols2.slice(0, protocols2.length - 1);
  var indexOf2 = [].indexOf;
  var Connection2 = class {
    constructor(consumer2) {
      this.open = this.open.bind(this);
      this.consumer = consumer2;
      this.subscriptions = this.consumer.subscriptions;
      this.monitor = new ConnectionMonitor2(this);
      this.disconnected = true;
    }
    send(data) {
      if (this.isOpen()) {
        this.webSocket.send(JSON.stringify(data));
        return true;
      } else {
        return false;
      }
    }
    open() {
      if (this.isActive()) {
        logger.log(`Attempted to open WebSocket, but existing socket is ${this.getState()}`);
        return false;
      } else {
        const socketProtocols = [...protocols2, ...this.consumer.subprotocols || []];
        logger.log(`Opening WebSocket, current state is ${this.getState()}, subprotocols: ${socketProtocols}`);
        if (this.webSocket) {
          this.uninstallEventHandlers();
        }
        this.webSocket = new adapters.WebSocket(this.consumer.url, socketProtocols);
        this.installEventHandlers();
        this.monitor.start();
        return true;
      }
    }
    close({ allowReconnect } = {
      allowReconnect: true
    }) {
      if (!allowReconnect) {
        this.monitor.stop();
      }
      if (this.isOpen()) {
        return this.webSocket.close();
      }
    }
    reopen() {
      logger.log(`Reopening WebSocket, current state is ${this.getState()}`);
      if (this.isActive()) {
        try {
          return this.close();
        } catch (error2) {
          logger.log("Failed to reopen WebSocket", error2);
        } finally {
          logger.log(`Reopening WebSocket in ${this.constructor.reopenDelay}ms`);
          setTimeout(this.open, this.constructor.reopenDelay);
        }
      } else {
        return this.open();
      }
    }
    getProtocol() {
      if (this.webSocket) {
        return this.webSocket.protocol;
      }
    }
    isOpen() {
      return this.isState("open");
    }
    isActive() {
      return this.isState("open", "connecting");
    }
    triedToReconnect() {
      return this.monitor.reconnectAttempts > 0;
    }
    isProtocolSupported() {
      return indexOf2.call(supportedProtocols2, this.getProtocol()) >= 0;
    }
    isState(...states) {
      return indexOf2.call(states, this.getState()) >= 0;
    }
    getState() {
      if (this.webSocket) {
        for (let state in adapters.WebSocket) {
          if (adapters.WebSocket[state] === this.webSocket.readyState) {
            return state.toLowerCase();
          }
        }
      }
      return null;
    }
    installEventHandlers() {
      for (let eventName in this.events) {
        const handler = this.events[eventName].bind(this);
        this.webSocket[`on${eventName}`] = handler;
      }
    }
    uninstallEventHandlers() {
      for (let eventName in this.events) {
        this.webSocket[`on${eventName}`] = function() {
        };
      }
    }
  };
  Connection2.reopenDelay = 500;
  Connection2.prototype.events = {
    message(event) {
      if (!this.isProtocolSupported()) {
        return;
      }
      const { identifier, message, reason, reconnect, type } = JSON.parse(event.data);
      switch (type) {
        case message_types2.welcome:
          if (this.triedToReconnect()) {
            this.reconnectAttempted = true;
          }
          this.monitor.recordConnect();
          return this.subscriptions.reload();
        case message_types2.disconnect:
          logger.log(`Disconnecting. Reason: ${reason}`);
          return this.close({
            allowReconnect: reconnect
          });
        case message_types2.ping:
          return this.monitor.recordPing();
        case message_types2.confirmation:
          this.subscriptions.confirmSubscription(identifier);
          if (this.reconnectAttempted) {
            this.reconnectAttempted = false;
            return this.subscriptions.notify(identifier, "connected", {
              reconnected: true
            });
          } else {
            return this.subscriptions.notify(identifier, "connected", {
              reconnected: false
            });
          }
        case message_types2.rejection:
          return this.subscriptions.reject(identifier);
        default:
          return this.subscriptions.notify(identifier, "received", message);
      }
    },
    open() {
      logger.log(`WebSocket onopen event, using '${this.getProtocol()}' subprotocol`);
      this.disconnected = false;
      if (!this.isProtocolSupported()) {
        logger.log("Protocol is unsupported. Stopping monitor and disconnecting.");
        return this.close({
          allowReconnect: false
        });
      }
    },
    close(event) {
      logger.log("WebSocket onclose event");
      if (this.disconnected) {
        return;
      }
      this.disconnected = true;
      this.monitor.recordDisconnect();
      return this.subscriptions.notifyAll("disconnected", {
        willAttemptReconnect: this.monitor.isRunning()
      });
    },
    error() {
      logger.log("WebSocket onerror event");
    }
  };
  var extend3 = function(object, properties) {
    if (properties != null) {
      for (let key in properties) {
        const value = properties[key];
        object[key] = value;
      }
    }
    return object;
  };
  var Subscription2 = class {
    constructor(consumer2, params = {}, mixin) {
      this.consumer = consumer2;
      this.identifier = JSON.stringify(params);
      extend3(this, mixin);
    }
    perform(action, data = {}) {
      data.action = action;
      return this.send(data);
    }
    send(data) {
      return this.consumer.send({
        command: "message",
        identifier: this.identifier,
        data: JSON.stringify(data)
      });
    }
    unsubscribe() {
      return this.consumer.subscriptions.remove(this);
    }
  };
  var SubscriptionGuarantor2 = class {
    constructor(subscriptions) {
      this.subscriptions = subscriptions;
      this.pendingSubscriptions = [];
    }
    guarantee(subscription) {
      if (this.pendingSubscriptions.indexOf(subscription) == -1) {
        logger.log(`SubscriptionGuarantor guaranteeing ${subscription.identifier}`);
        this.pendingSubscriptions.push(subscription);
      } else {
        logger.log(`SubscriptionGuarantor already guaranteeing ${subscription.identifier}`);
      }
      this.startGuaranteeing();
    }
    forget(subscription) {
      logger.log(`SubscriptionGuarantor forgetting ${subscription.identifier}`);
      this.pendingSubscriptions = this.pendingSubscriptions.filter((s2) => s2 !== subscription);
    }
    startGuaranteeing() {
      this.stopGuaranteeing();
      this.retrySubscribing();
    }
    stopGuaranteeing() {
      clearTimeout(this.retryTimeout);
    }
    retrySubscribing() {
      this.retryTimeout = setTimeout(() => {
        if (this.subscriptions && typeof this.subscriptions.subscribe === "function") {
          this.pendingSubscriptions.map((subscription) => {
            logger.log(`SubscriptionGuarantor resubscribing ${subscription.identifier}`);
            this.subscriptions.subscribe(subscription);
          });
        }
      }, 500);
    }
  };
  var Subscriptions2 = class {
    constructor(consumer2) {
      this.consumer = consumer2;
      this.guarantor = new SubscriptionGuarantor2(this);
      this.subscriptions = [];
    }
    create(channelName, mixin) {
      const channel = channelName;
      const params = typeof channel === "object" ? channel : {
        channel
      };
      const subscription = new Subscription2(this.consumer, params, mixin);
      return this.add(subscription);
    }
    add(subscription) {
      this.subscriptions.push(subscription);
      this.consumer.ensureActiveConnection();
      this.notify(subscription, "initialized");
      this.subscribe(subscription);
      return subscription;
    }
    remove(subscription) {
      this.forget(subscription);
      if (!this.findAll(subscription.identifier).length) {
        this.sendCommand(subscription, "unsubscribe");
      }
      return subscription;
    }
    reject(identifier) {
      return this.findAll(identifier).map((subscription) => {
        this.forget(subscription);
        this.notify(subscription, "rejected");
        return subscription;
      });
    }
    forget(subscription) {
      this.guarantor.forget(subscription);
      this.subscriptions = this.subscriptions.filter((s2) => s2 !== subscription);
      return subscription;
    }
    findAll(identifier) {
      return this.subscriptions.filter((s2) => s2.identifier === identifier);
    }
    reload() {
      return this.subscriptions.map((subscription) => this.subscribe(subscription));
    }
    notifyAll(callbackName, ...args) {
      return this.subscriptions.map((subscription) => this.notify(subscription, callbackName, ...args));
    }
    notify(subscription, callbackName, ...args) {
      let subscriptions;
      if (typeof subscription === "string") {
        subscriptions = this.findAll(subscription);
      } else {
        subscriptions = [subscription];
      }
      return subscriptions.map((subscription2) => typeof subscription2[callbackName] === "function" ? subscription2[callbackName](...args) : void 0);
    }
    subscribe(subscription) {
      if (this.sendCommand(subscription, "subscribe")) {
        this.guarantor.guarantee(subscription);
      }
    }
    confirmSubscription(identifier) {
      logger.log(`Subscription confirmed ${identifier}`);
      this.findAll(identifier).map((subscription) => this.guarantor.forget(subscription));
    }
    sendCommand(subscription, command) {
      const { identifier } = subscription;
      return this.consumer.send({
        command,
        identifier
      });
    }
  };
  var Consumer2 = class {
    constructor(url) {
      this._url = url;
      this.subscriptions = new Subscriptions2(this);
      this.connection = new Connection2(this);
      this.subprotocols = [];
    }
    get url() {
      return createWebSocketURL2(this._url);
    }
    send(data) {
      return this.connection.send(data);
    }
    connect() {
      return this.connection.open();
    }
    disconnect() {
      return this.connection.close({
        allowReconnect: false
      });
    }
    ensureActiveConnection() {
      if (!this.connection.isActive()) {
        return this.connection.open();
      }
    }
    addSubProtocol(subprotocol) {
      this.subprotocols = [...this.subprotocols, subprotocol];
    }
  };
  function createWebSocketURL2(url) {
    if (typeof url === "function") {
      url = url();
    }
    if (url && !/^wss?:/i.test(url)) {
      const a2 = document.createElement("a");
      a2.href = url;
      a2.href = a2.href;
      a2.protocol = a2.protocol.replace("http", "ws");
      return a2.href;
    } else {
      return url;
    }
  }
  function createConsumer3(url = getConfig2("url") || INTERNAL.default_mount_path) {
    return new Consumer2(url);
  }
  function getConfig2(name) {
    const element = document.head.querySelector(`meta[name='action-cable-${name}']`);
    if (element) {
      return element.getAttribute("content");
    }
  }

  // app/javascript/channels/consumer.js
  var consumer_default = createConsumer3();

  // app/javascript/controllers/view_churps_controller.js
  var view_churps_controller_default = class extends Controller {
    static targets = ["count"];
    connect() {
      let churpId = this.element.dataset.churpId;
      this.sub = this.showViewChurps(churpId, this.countTarget);
    }
    showViewChurps(churpId, element) {
      return consumer_default.subscriptions.create(
        // room_#{params[:room_id]}_channel
        { channel: "ViewChurpsChannel", churp_id: churpId },
        {
          connected() {
            this.perform("churp_data");
          },
          disconnected() {
          },
          received(data) {
            element.innerHTML = data.churp.view_count;
          }
        }
      );
    }
  };

  // app/javascript/controllers/index.js
  application.register("broadcast-churps", broadcast_churps_controller_default);
  application.register("emoji-picker", emoji_picker_controller_default);
  application.register("hello", hello_controller_default);
  application.register("mentions", mentions_controller_default);
  application.register("profile-following", profile_following_controller_default);
  application.register("profile-modal", profile_modal_controller_default);
  application.register("reset-form", reset_form_controller_default);
  application.register("search", search_controller_default);
  application.register("show-churp", show_churp_controller_default);
  application.register("view-churps", view_churps_controller_default);

  // app/javascript/channels/churps_channel.js
  consumer_default.subscriptions.create("ChurpsChannel", {
    connected() {
    },
    disconnected() {
    },
    received(data) {
      const event = new CustomEvent("newChurp", { detail: data });
      window.dispatchEvent(event);
    }
  });

  // node_modules/@rails/actiontext/app/assets/javascripts/actiontext.js
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
  var activestorage = { exports: {} };
  (function(module, exports) {
    (function(global2, factory) {
      factory(exports);
    })(commonjsGlobal, function(exports2) {
      var sparkMd5 = {
        exports: {}
      };
      (function(module2, exports3) {
        (function(factory) {
          {
            module2.exports = factory();
          }
        })(function(undefined$1) {
          var hex_chr = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"];
          function md5cycle(x2, k2) {
            var a2 = x2[0], b2 = x2[1], c2 = x2[2], d2 = x2[3];
            a2 += (b2 & c2 | ~b2 & d2) + k2[0] - 680876936 | 0;
            a2 = (a2 << 7 | a2 >>> 25) + b2 | 0;
            d2 += (a2 & b2 | ~a2 & c2) + k2[1] - 389564586 | 0;
            d2 = (d2 << 12 | d2 >>> 20) + a2 | 0;
            c2 += (d2 & a2 | ~d2 & b2) + k2[2] + 606105819 | 0;
            c2 = (c2 << 17 | c2 >>> 15) + d2 | 0;
            b2 += (c2 & d2 | ~c2 & a2) + k2[3] - 1044525330 | 0;
            b2 = (b2 << 22 | b2 >>> 10) + c2 | 0;
            a2 += (b2 & c2 | ~b2 & d2) + k2[4] - 176418897 | 0;
            a2 = (a2 << 7 | a2 >>> 25) + b2 | 0;
            d2 += (a2 & b2 | ~a2 & c2) + k2[5] + 1200080426 | 0;
            d2 = (d2 << 12 | d2 >>> 20) + a2 | 0;
            c2 += (d2 & a2 | ~d2 & b2) + k2[6] - 1473231341 | 0;
            c2 = (c2 << 17 | c2 >>> 15) + d2 | 0;
            b2 += (c2 & d2 | ~c2 & a2) + k2[7] - 45705983 | 0;
            b2 = (b2 << 22 | b2 >>> 10) + c2 | 0;
            a2 += (b2 & c2 | ~b2 & d2) + k2[8] + 1770035416 | 0;
            a2 = (a2 << 7 | a2 >>> 25) + b2 | 0;
            d2 += (a2 & b2 | ~a2 & c2) + k2[9] - 1958414417 | 0;
            d2 = (d2 << 12 | d2 >>> 20) + a2 | 0;
            c2 += (d2 & a2 | ~d2 & b2) + k2[10] - 42063 | 0;
            c2 = (c2 << 17 | c2 >>> 15) + d2 | 0;
            b2 += (c2 & d2 | ~c2 & a2) + k2[11] - 1990404162 | 0;
            b2 = (b2 << 22 | b2 >>> 10) + c2 | 0;
            a2 += (b2 & c2 | ~b2 & d2) + k2[12] + 1804603682 | 0;
            a2 = (a2 << 7 | a2 >>> 25) + b2 | 0;
            d2 += (a2 & b2 | ~a2 & c2) + k2[13] - 40341101 | 0;
            d2 = (d2 << 12 | d2 >>> 20) + a2 | 0;
            c2 += (d2 & a2 | ~d2 & b2) + k2[14] - 1502002290 | 0;
            c2 = (c2 << 17 | c2 >>> 15) + d2 | 0;
            b2 += (c2 & d2 | ~c2 & a2) + k2[15] + 1236535329 | 0;
            b2 = (b2 << 22 | b2 >>> 10) + c2 | 0;
            a2 += (b2 & d2 | c2 & ~d2) + k2[1] - 165796510 | 0;
            a2 = (a2 << 5 | a2 >>> 27) + b2 | 0;
            d2 += (a2 & c2 | b2 & ~c2) + k2[6] - 1069501632 | 0;
            d2 = (d2 << 9 | d2 >>> 23) + a2 | 0;
            c2 += (d2 & b2 | a2 & ~b2) + k2[11] + 643717713 | 0;
            c2 = (c2 << 14 | c2 >>> 18) + d2 | 0;
            b2 += (c2 & a2 | d2 & ~a2) + k2[0] - 373897302 | 0;
            b2 = (b2 << 20 | b2 >>> 12) + c2 | 0;
            a2 += (b2 & d2 | c2 & ~d2) + k2[5] - 701558691 | 0;
            a2 = (a2 << 5 | a2 >>> 27) + b2 | 0;
            d2 += (a2 & c2 | b2 & ~c2) + k2[10] + 38016083 | 0;
            d2 = (d2 << 9 | d2 >>> 23) + a2 | 0;
            c2 += (d2 & b2 | a2 & ~b2) + k2[15] - 660478335 | 0;
            c2 = (c2 << 14 | c2 >>> 18) + d2 | 0;
            b2 += (c2 & a2 | d2 & ~a2) + k2[4] - 405537848 | 0;
            b2 = (b2 << 20 | b2 >>> 12) + c2 | 0;
            a2 += (b2 & d2 | c2 & ~d2) + k2[9] + 568446438 | 0;
            a2 = (a2 << 5 | a2 >>> 27) + b2 | 0;
            d2 += (a2 & c2 | b2 & ~c2) + k2[14] - 1019803690 | 0;
            d2 = (d2 << 9 | d2 >>> 23) + a2 | 0;
            c2 += (d2 & b2 | a2 & ~b2) + k2[3] - 187363961 | 0;
            c2 = (c2 << 14 | c2 >>> 18) + d2 | 0;
            b2 += (c2 & a2 | d2 & ~a2) + k2[8] + 1163531501 | 0;
            b2 = (b2 << 20 | b2 >>> 12) + c2 | 0;
            a2 += (b2 & d2 | c2 & ~d2) + k2[13] - 1444681467 | 0;
            a2 = (a2 << 5 | a2 >>> 27) + b2 | 0;
            d2 += (a2 & c2 | b2 & ~c2) + k2[2] - 51403784 | 0;
            d2 = (d2 << 9 | d2 >>> 23) + a2 | 0;
            c2 += (d2 & b2 | a2 & ~b2) + k2[7] + 1735328473 | 0;
            c2 = (c2 << 14 | c2 >>> 18) + d2 | 0;
            b2 += (c2 & a2 | d2 & ~a2) + k2[12] - 1926607734 | 0;
            b2 = (b2 << 20 | b2 >>> 12) + c2 | 0;
            a2 += (b2 ^ c2 ^ d2) + k2[5] - 378558 | 0;
            a2 = (a2 << 4 | a2 >>> 28) + b2 | 0;
            d2 += (a2 ^ b2 ^ c2) + k2[8] - 2022574463 | 0;
            d2 = (d2 << 11 | d2 >>> 21) + a2 | 0;
            c2 += (d2 ^ a2 ^ b2) + k2[11] + 1839030562 | 0;
            c2 = (c2 << 16 | c2 >>> 16) + d2 | 0;
            b2 += (c2 ^ d2 ^ a2) + k2[14] - 35309556 | 0;
            b2 = (b2 << 23 | b2 >>> 9) + c2 | 0;
            a2 += (b2 ^ c2 ^ d2) + k2[1] - 1530992060 | 0;
            a2 = (a2 << 4 | a2 >>> 28) + b2 | 0;
            d2 += (a2 ^ b2 ^ c2) + k2[4] + 1272893353 | 0;
            d2 = (d2 << 11 | d2 >>> 21) + a2 | 0;
            c2 += (d2 ^ a2 ^ b2) + k2[7] - 155497632 | 0;
            c2 = (c2 << 16 | c2 >>> 16) + d2 | 0;
            b2 += (c2 ^ d2 ^ a2) + k2[10] - 1094730640 | 0;
            b2 = (b2 << 23 | b2 >>> 9) + c2 | 0;
            a2 += (b2 ^ c2 ^ d2) + k2[13] + 681279174 | 0;
            a2 = (a2 << 4 | a2 >>> 28) + b2 | 0;
            d2 += (a2 ^ b2 ^ c2) + k2[0] - 358537222 | 0;
            d2 = (d2 << 11 | d2 >>> 21) + a2 | 0;
            c2 += (d2 ^ a2 ^ b2) + k2[3] - 722521979 | 0;
            c2 = (c2 << 16 | c2 >>> 16) + d2 | 0;
            b2 += (c2 ^ d2 ^ a2) + k2[6] + 76029189 | 0;
            b2 = (b2 << 23 | b2 >>> 9) + c2 | 0;
            a2 += (b2 ^ c2 ^ d2) + k2[9] - 640364487 | 0;
            a2 = (a2 << 4 | a2 >>> 28) + b2 | 0;
            d2 += (a2 ^ b2 ^ c2) + k2[12] - 421815835 | 0;
            d2 = (d2 << 11 | d2 >>> 21) + a2 | 0;
            c2 += (d2 ^ a2 ^ b2) + k2[15] + 530742520 | 0;
            c2 = (c2 << 16 | c2 >>> 16) + d2 | 0;
            b2 += (c2 ^ d2 ^ a2) + k2[2] - 995338651 | 0;
            b2 = (b2 << 23 | b2 >>> 9) + c2 | 0;
            a2 += (c2 ^ (b2 | ~d2)) + k2[0] - 198630844 | 0;
            a2 = (a2 << 6 | a2 >>> 26) + b2 | 0;
            d2 += (b2 ^ (a2 | ~c2)) + k2[7] + 1126891415 | 0;
            d2 = (d2 << 10 | d2 >>> 22) + a2 | 0;
            c2 += (a2 ^ (d2 | ~b2)) + k2[14] - 1416354905 | 0;
            c2 = (c2 << 15 | c2 >>> 17) + d2 | 0;
            b2 += (d2 ^ (c2 | ~a2)) + k2[5] - 57434055 | 0;
            b2 = (b2 << 21 | b2 >>> 11) + c2 | 0;
            a2 += (c2 ^ (b2 | ~d2)) + k2[12] + 1700485571 | 0;
            a2 = (a2 << 6 | a2 >>> 26) + b2 | 0;
            d2 += (b2 ^ (a2 | ~c2)) + k2[3] - 1894986606 | 0;
            d2 = (d2 << 10 | d2 >>> 22) + a2 | 0;
            c2 += (a2 ^ (d2 | ~b2)) + k2[10] - 1051523 | 0;
            c2 = (c2 << 15 | c2 >>> 17) + d2 | 0;
            b2 += (d2 ^ (c2 | ~a2)) + k2[1] - 2054922799 | 0;
            b2 = (b2 << 21 | b2 >>> 11) + c2 | 0;
            a2 += (c2 ^ (b2 | ~d2)) + k2[8] + 1873313359 | 0;
            a2 = (a2 << 6 | a2 >>> 26) + b2 | 0;
            d2 += (b2 ^ (a2 | ~c2)) + k2[15] - 30611744 | 0;
            d2 = (d2 << 10 | d2 >>> 22) + a2 | 0;
            c2 += (a2 ^ (d2 | ~b2)) + k2[6] - 1560198380 | 0;
            c2 = (c2 << 15 | c2 >>> 17) + d2 | 0;
            b2 += (d2 ^ (c2 | ~a2)) + k2[13] + 1309151649 | 0;
            b2 = (b2 << 21 | b2 >>> 11) + c2 | 0;
            a2 += (c2 ^ (b2 | ~d2)) + k2[4] - 145523070 | 0;
            a2 = (a2 << 6 | a2 >>> 26) + b2 | 0;
            d2 += (b2 ^ (a2 | ~c2)) + k2[11] - 1120210379 | 0;
            d2 = (d2 << 10 | d2 >>> 22) + a2 | 0;
            c2 += (a2 ^ (d2 | ~b2)) + k2[2] + 718787259 | 0;
            c2 = (c2 << 15 | c2 >>> 17) + d2 | 0;
            b2 += (d2 ^ (c2 | ~a2)) + k2[9] - 343485551 | 0;
            b2 = (b2 << 21 | b2 >>> 11) + c2 | 0;
            x2[0] = a2 + x2[0] | 0;
            x2[1] = b2 + x2[1] | 0;
            x2[2] = c2 + x2[2] | 0;
            x2[3] = d2 + x2[3] | 0;
          }
          function md5blk(s2) {
            var md5blks = [], i2;
            for (i2 = 0; i2 < 64; i2 += 4) {
              md5blks[i2 >> 2] = s2.charCodeAt(i2) + (s2.charCodeAt(i2 + 1) << 8) + (s2.charCodeAt(i2 + 2) << 16) + (s2.charCodeAt(i2 + 3) << 24);
            }
            return md5blks;
          }
          function md5blk_array(a2) {
            var md5blks = [], i2;
            for (i2 = 0; i2 < 64; i2 += 4) {
              md5blks[i2 >> 2] = a2[i2] + (a2[i2 + 1] << 8) + (a2[i2 + 2] << 16) + (a2[i2 + 3] << 24);
            }
            return md5blks;
          }
          function md51(s2) {
            var n2 = s2.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi2;
            for (i2 = 64; i2 <= n2; i2 += 64) {
              md5cycle(state, md5blk(s2.substring(i2 - 64, i2)));
            }
            s2 = s2.substring(i2 - 64);
            length = s2.length;
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (i2 = 0; i2 < length; i2 += 1) {
              tail[i2 >> 2] |= s2.charCodeAt(i2) << (i2 % 4 << 3);
            }
            tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
            if (i2 > 55) {
              md5cycle(state, tail);
              for (i2 = 0; i2 < 16; i2 += 1) {
                tail[i2] = 0;
              }
            }
            tmp = n2 * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = parseInt(tmp[2], 16);
            hi2 = parseInt(tmp[1], 16) || 0;
            tail[14] = lo;
            tail[15] = hi2;
            md5cycle(state, tail);
            return state;
          }
          function md51_array(a2) {
            var n2 = a2.length, state = [1732584193, -271733879, -1732584194, 271733878], i2, length, tail, tmp, lo, hi2;
            for (i2 = 64; i2 <= n2; i2 += 64) {
              md5cycle(state, md5blk_array(a2.subarray(i2 - 64, i2)));
            }
            a2 = i2 - 64 < n2 ? a2.subarray(i2 - 64) : new Uint8Array(0);
            length = a2.length;
            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            for (i2 = 0; i2 < length; i2 += 1) {
              tail[i2 >> 2] |= a2[i2] << (i2 % 4 << 3);
            }
            tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
            if (i2 > 55) {
              md5cycle(state, tail);
              for (i2 = 0; i2 < 16; i2 += 1) {
                tail[i2] = 0;
              }
            }
            tmp = n2 * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = parseInt(tmp[2], 16);
            hi2 = parseInt(tmp[1], 16) || 0;
            tail[14] = lo;
            tail[15] = hi2;
            md5cycle(state, tail);
            return state;
          }
          function rhex(n2) {
            var s2 = "", j2;
            for (j2 = 0; j2 < 4; j2 += 1) {
              s2 += hex_chr[n2 >> j2 * 8 + 4 & 15] + hex_chr[n2 >> j2 * 8 & 15];
            }
            return s2;
          }
          function hex(x2) {
            var i2;
            for (i2 = 0; i2 < x2.length; i2 += 1) {
              x2[i2] = rhex(x2[i2]);
            }
            return x2.join("");
          }
          if (hex(md51("hello")) !== "5d41402abc4b2a76b9719d911017c592")
            ;
          if (typeof ArrayBuffer !== "undefined" && !ArrayBuffer.prototype.slice) {
            (function() {
              function clamp(val, length) {
                val = val | 0 || 0;
                if (val < 0) {
                  return Math.max(val + length, 0);
                }
                return Math.min(val, length);
              }
              ArrayBuffer.prototype.slice = function(from, to) {
                var length = this.byteLength, begin = clamp(from, length), end = length, num, target, targetArray, sourceArray;
                if (to !== undefined$1) {
                  end = clamp(to, length);
                }
                if (begin > end) {
                  return new ArrayBuffer(0);
                }
                num = end - begin;
                target = new ArrayBuffer(num);
                targetArray = new Uint8Array(target);
                sourceArray = new Uint8Array(this, begin, num);
                targetArray.set(sourceArray);
                return target;
              };
            })();
          }
          function toUtf8(str) {
            if (/[\u0080-\uFFFF]/.test(str)) {
              str = unescape(encodeURIComponent(str));
            }
            return str;
          }
          function utf8Str2ArrayBuffer(str, returnUInt8Array) {
            var length = str.length, buff = new ArrayBuffer(length), arr = new Uint8Array(buff), i2;
            for (i2 = 0; i2 < length; i2 += 1) {
              arr[i2] = str.charCodeAt(i2);
            }
            return returnUInt8Array ? arr : buff;
          }
          function arrayBuffer2Utf8Str(buff) {
            return String.fromCharCode.apply(null, new Uint8Array(buff));
          }
          function concatenateArrayBuffers(first, second, returnUInt8Array) {
            var result = new Uint8Array(first.byteLength + second.byteLength);
            result.set(new Uint8Array(first));
            result.set(new Uint8Array(second), first.byteLength);
            return returnUInt8Array ? result : result.buffer;
          }
          function hexToBinaryString(hex2) {
            var bytes = [], length = hex2.length, x2;
            for (x2 = 0; x2 < length - 1; x2 += 2) {
              bytes.push(parseInt(hex2.substr(x2, 2), 16));
            }
            return String.fromCharCode.apply(String, bytes);
          }
          function SparkMD52() {
            this.reset();
          }
          SparkMD52.prototype.append = function(str) {
            this.appendBinary(toUtf8(str));
            return this;
          };
          SparkMD52.prototype.appendBinary = function(contents) {
            this._buff += contents;
            this._length += contents.length;
            var length = this._buff.length, i2;
            for (i2 = 64; i2 <= length; i2 += 64) {
              md5cycle(this._hash, md5blk(this._buff.substring(i2 - 64, i2)));
            }
            this._buff = this._buff.substring(i2 - 64);
            return this;
          };
          SparkMD52.prototype.end = function(raw) {
            var buff = this._buff, length = buff.length, i2, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ret;
            for (i2 = 0; i2 < length; i2 += 1) {
              tail[i2 >> 2] |= buff.charCodeAt(i2) << (i2 % 4 << 3);
            }
            this._finish(tail, length);
            ret = hex(this._hash);
            if (raw) {
              ret = hexToBinaryString(ret);
            }
            this.reset();
            return ret;
          };
          SparkMD52.prototype.reset = function() {
            this._buff = "";
            this._length = 0;
            this._hash = [1732584193, -271733879, -1732584194, 271733878];
            return this;
          };
          SparkMD52.prototype.getState = function() {
            return {
              buff: this._buff,
              length: this._length,
              hash: this._hash.slice()
            };
          };
          SparkMD52.prototype.setState = function(state) {
            this._buff = state.buff;
            this._length = state.length;
            this._hash = state.hash;
            return this;
          };
          SparkMD52.prototype.destroy = function() {
            delete this._hash;
            delete this._buff;
            delete this._length;
          };
          SparkMD52.prototype._finish = function(tail, length) {
            var i2 = length, tmp, lo, hi2;
            tail[i2 >> 2] |= 128 << (i2 % 4 << 3);
            if (i2 > 55) {
              md5cycle(this._hash, tail);
              for (i2 = 0; i2 < 16; i2 += 1) {
                tail[i2] = 0;
              }
            }
            tmp = this._length * 8;
            tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);
            lo = parseInt(tmp[2], 16);
            hi2 = parseInt(tmp[1], 16) || 0;
            tail[14] = lo;
            tail[15] = hi2;
            md5cycle(this._hash, tail);
          };
          SparkMD52.hash = function(str, raw) {
            return SparkMD52.hashBinary(toUtf8(str), raw);
          };
          SparkMD52.hashBinary = function(content, raw) {
            var hash = md51(content), ret = hex(hash);
            return raw ? hexToBinaryString(ret) : ret;
          };
          SparkMD52.ArrayBuffer = function() {
            this.reset();
          };
          SparkMD52.ArrayBuffer.prototype.append = function(arr) {
            var buff = concatenateArrayBuffers(this._buff.buffer, arr, true), length = buff.length, i2;
            this._length += arr.byteLength;
            for (i2 = 64; i2 <= length; i2 += 64) {
              md5cycle(this._hash, md5blk_array(buff.subarray(i2 - 64, i2)));
            }
            this._buff = i2 - 64 < length ? new Uint8Array(buff.buffer.slice(i2 - 64)) : new Uint8Array(0);
            return this;
          };
          SparkMD52.ArrayBuffer.prototype.end = function(raw) {
            var buff = this._buff, length = buff.length, tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i2, ret;
            for (i2 = 0; i2 < length; i2 += 1) {
              tail[i2 >> 2] |= buff[i2] << (i2 % 4 << 3);
            }
            this._finish(tail, length);
            ret = hex(this._hash);
            if (raw) {
              ret = hexToBinaryString(ret);
            }
            this.reset();
            return ret;
          };
          SparkMD52.ArrayBuffer.prototype.reset = function() {
            this._buff = new Uint8Array(0);
            this._length = 0;
            this._hash = [1732584193, -271733879, -1732584194, 271733878];
            return this;
          };
          SparkMD52.ArrayBuffer.prototype.getState = function() {
            var state = SparkMD52.prototype.getState.call(this);
            state.buff = arrayBuffer2Utf8Str(state.buff);
            return state;
          };
          SparkMD52.ArrayBuffer.prototype.setState = function(state) {
            state.buff = utf8Str2ArrayBuffer(state.buff, true);
            return SparkMD52.prototype.setState.call(this, state);
          };
          SparkMD52.ArrayBuffer.prototype.destroy = SparkMD52.prototype.destroy;
          SparkMD52.ArrayBuffer.prototype._finish = SparkMD52.prototype._finish;
          SparkMD52.ArrayBuffer.hash = function(arr, raw) {
            var hash = md51_array(new Uint8Array(arr)), ret = hex(hash);
            return raw ? hexToBinaryString(ret) : ret;
          };
          return SparkMD52;
        });
      })(sparkMd5);
      var SparkMD5 = sparkMd5.exports;
      const fileSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;
      class FileChecksum {
        static create(file, callback) {
          const instance = new FileChecksum(file);
          instance.create(callback);
        }
        constructor(file) {
          this.file = file;
          this.chunkSize = 2097152;
          this.chunkCount = Math.ceil(this.file.size / this.chunkSize);
          this.chunkIndex = 0;
        }
        create(callback) {
          this.callback = callback;
          this.md5Buffer = new SparkMD5.ArrayBuffer();
          this.fileReader = new FileReader();
          this.fileReader.addEventListener("load", (event) => this.fileReaderDidLoad(event));
          this.fileReader.addEventListener("error", (event) => this.fileReaderDidError(event));
          this.readNextChunk();
        }
        fileReaderDidLoad(event) {
          this.md5Buffer.append(event.target.result);
          if (!this.readNextChunk()) {
            const binaryDigest = this.md5Buffer.end(true);
            const base64digest = btoa(binaryDigest);
            this.callback(null, base64digest);
          }
        }
        fileReaderDidError(event) {
          this.callback(`Error reading ${this.file.name}`);
        }
        readNextChunk() {
          if (this.chunkIndex < this.chunkCount || this.chunkIndex == 0 && this.chunkCount == 0) {
            const start3 = this.chunkIndex * this.chunkSize;
            const end = Math.min(start3 + this.chunkSize, this.file.size);
            const bytes = fileSlice.call(this.file, start3, end);
            this.fileReader.readAsArrayBuffer(bytes);
            this.chunkIndex++;
            return true;
          } else {
            return false;
          }
        }
      }
      function getMetaValue(name) {
        const element = findElement(document.head, `meta[name="${name}"]`);
        if (element) {
          return element.getAttribute("content");
        }
      }
      function findElements(root, selector) {
        if (typeof root == "string") {
          selector = root;
          root = document;
        }
        const elements = root.querySelectorAll(selector);
        return toArray(elements);
      }
      function findElement(root, selector) {
        if (typeof root == "string") {
          selector = root;
          root = document;
        }
        return root.querySelector(selector);
      }
      function dispatchEvent2(element, type, eventInit = {}) {
        const { disabled } = element;
        const { bubbles, cancelable, detail } = eventInit;
        const event = document.createEvent("Event");
        event.initEvent(type, bubbles || true, cancelable || true);
        event.detail = detail || {};
        try {
          element.disabled = false;
          element.dispatchEvent(event);
        } finally {
          element.disabled = disabled;
        }
        return event;
      }
      function toArray(value) {
        if (Array.isArray(value)) {
          return value;
        } else if (Array.from) {
          return Array.from(value);
        } else {
          return [].slice.call(value);
        }
      }
      class BlobRecord {
        constructor(file, checksum, url) {
          this.file = file;
          this.attributes = {
            filename: file.name,
            content_type: file.type || "application/octet-stream",
            byte_size: file.size,
            checksum
          };
          this.xhr = new XMLHttpRequest();
          this.xhr.open("POST", url, true);
          this.xhr.responseType = "json";
          this.xhr.setRequestHeader("Content-Type", "application/json");
          this.xhr.setRequestHeader("Accept", "application/json");
          this.xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
          const csrfToken = getMetaValue("csrf-token");
          if (csrfToken != void 0) {
            this.xhr.setRequestHeader("X-CSRF-Token", csrfToken);
          }
          this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
          this.xhr.addEventListener("error", (event) => this.requestDidError(event));
        }
        get status() {
          return this.xhr.status;
        }
        get response() {
          const { responseType, response } = this.xhr;
          if (responseType == "json") {
            return response;
          } else {
            return JSON.parse(response);
          }
        }
        create(callback) {
          this.callback = callback;
          this.xhr.send(JSON.stringify({
            blob: this.attributes
          }));
        }
        requestDidLoad(event) {
          if (this.status >= 200 && this.status < 300) {
            const { response } = this;
            const { direct_upload } = response;
            delete response.direct_upload;
            this.attributes = response;
            this.directUploadData = direct_upload;
            this.callback(null, this.toJSON());
          } else {
            this.requestDidError(event);
          }
        }
        requestDidError(event) {
          this.callback(`Error creating Blob for "${this.file.name}". Status: ${this.status}`);
        }
        toJSON() {
          const result = {};
          for (const key in this.attributes) {
            result[key] = this.attributes[key];
          }
          return result;
        }
      }
      class BlobUpload {
        constructor(blob) {
          this.blob = blob;
          this.file = blob.file;
          const { url, headers } = blob.directUploadData;
          this.xhr = new XMLHttpRequest();
          this.xhr.open("PUT", url, true);
          this.xhr.responseType = "text";
          for (const key in headers) {
            this.xhr.setRequestHeader(key, headers[key]);
          }
          this.xhr.addEventListener("load", (event) => this.requestDidLoad(event));
          this.xhr.addEventListener("error", (event) => this.requestDidError(event));
        }
        create(callback) {
          this.callback = callback;
          this.xhr.send(this.file.slice());
        }
        requestDidLoad(event) {
          const { status, response } = this.xhr;
          if (status >= 200 && status < 300) {
            this.callback(null, response);
          } else {
            this.requestDidError(event);
          }
        }
        requestDidError(event) {
          this.callback(`Error storing "${this.file.name}". Status: ${this.xhr.status}`);
        }
      }
      let id = 0;
      class DirectUpload {
        constructor(file, url, delegate) {
          this.id = ++id;
          this.file = file;
          this.url = url;
          this.delegate = delegate;
        }
        create(callback) {
          FileChecksum.create(this.file, (error2, checksum) => {
            if (error2) {
              callback(error2);
              return;
            }
            const blob = new BlobRecord(this.file, checksum, this.url);
            notify(this.delegate, "directUploadWillCreateBlobWithXHR", blob.xhr);
            blob.create((error3) => {
              if (error3) {
                callback(error3);
              } else {
                const upload = new BlobUpload(blob);
                notify(this.delegate, "directUploadWillStoreFileWithXHR", upload.xhr);
                upload.create((error4) => {
                  if (error4) {
                    callback(error4);
                  } else {
                    callback(null, blob.toJSON());
                  }
                });
              }
            });
          });
        }
      }
      function notify(object, methodName, ...messages) {
        if (object && typeof object[methodName] == "function") {
          return object[methodName](...messages);
        }
      }
      class DirectUploadController {
        constructor(input, file) {
          this.input = input;
          this.file = file;
          this.directUpload = new DirectUpload(this.file, this.url, this);
          this.dispatch("initialize");
        }
        start(callback) {
          const hiddenInput = document.createElement("input");
          hiddenInput.type = "hidden";
          hiddenInput.name = this.input.name;
          this.input.insertAdjacentElement("beforebegin", hiddenInput);
          this.dispatch("start");
          this.directUpload.create((error2, attributes) => {
            if (error2) {
              hiddenInput.parentNode.removeChild(hiddenInput);
              this.dispatchError(error2);
            } else {
              hiddenInput.value = attributes.signed_id;
            }
            this.dispatch("end");
            callback(error2);
          });
        }
        uploadRequestDidProgress(event) {
          const progress = event.loaded / event.total * 100;
          if (progress) {
            this.dispatch("progress", {
              progress
            });
          }
        }
        get url() {
          return this.input.getAttribute("data-direct-upload-url");
        }
        dispatch(name, detail = {}) {
          detail.file = this.file;
          detail.id = this.directUpload.id;
          return dispatchEvent2(this.input, `direct-upload:${name}`, {
            detail
          });
        }
        dispatchError(error2) {
          const event = this.dispatch("error", {
            error: error2
          });
          if (!event.defaultPrevented) {
            alert(error2);
          }
        }
        directUploadWillCreateBlobWithXHR(xhr) {
          this.dispatch("before-blob-request", {
            xhr
          });
        }
        directUploadWillStoreFileWithXHR(xhr) {
          this.dispatch("before-storage-request", {
            xhr
          });
          xhr.upload.addEventListener("progress", (event) => this.uploadRequestDidProgress(event));
        }
      }
      const inputSelector = "input[type=file][data-direct-upload-url]:not([disabled])";
      class DirectUploadsController {
        constructor(form) {
          this.form = form;
          this.inputs = findElements(form, inputSelector).filter((input) => input.files.length);
        }
        start(callback) {
          const controllers = this.createDirectUploadControllers();
          const startNextController = () => {
            const controller = controllers.shift();
            if (controller) {
              controller.start((error2) => {
                if (error2) {
                  callback(error2);
                  this.dispatch("end");
                } else {
                  startNextController();
                }
              });
            } else {
              callback();
              this.dispatch("end");
            }
          };
          this.dispatch("start");
          startNextController();
        }
        createDirectUploadControllers() {
          const controllers = [];
          this.inputs.forEach((input) => {
            toArray(input.files).forEach((file) => {
              const controller = new DirectUploadController(input, file);
              controllers.push(controller);
            });
          });
          return controllers;
        }
        dispatch(name, detail = {}) {
          return dispatchEvent2(this.form, `direct-uploads:${name}`, {
            detail
          });
        }
      }
      const processingAttribute = "data-direct-uploads-processing";
      const submitButtonsByForm = /* @__PURE__ */ new WeakMap();
      let started = false;
      function start2() {
        if (!started) {
          started = true;
          document.addEventListener("click", didClick, true);
          document.addEventListener("submit", didSubmitForm, true);
          document.addEventListener("ajax:before", didSubmitRemoteElement);
        }
      }
      function didClick(event) {
        const { target } = event;
        if ((target.tagName == "INPUT" || target.tagName == "BUTTON") && target.type == "submit" && target.form) {
          submitButtonsByForm.set(target.form, target);
        }
      }
      function didSubmitForm(event) {
        handleFormSubmissionEvent(event);
      }
      function didSubmitRemoteElement(event) {
        if (event.target.tagName == "FORM") {
          handleFormSubmissionEvent(event);
        }
      }
      function handleFormSubmissionEvent(event) {
        const form = event.target;
        if (form.hasAttribute(processingAttribute)) {
          event.preventDefault();
          return;
        }
        const controller = new DirectUploadsController(form);
        const { inputs } = controller;
        if (inputs.length) {
          event.preventDefault();
          form.setAttribute(processingAttribute, "");
          inputs.forEach(disable);
          controller.start((error2) => {
            form.removeAttribute(processingAttribute);
            if (error2) {
              inputs.forEach(enable);
            } else {
              submitForm(form);
            }
          });
        }
      }
      function submitForm(form) {
        let button = submitButtonsByForm.get(form) || findElement(form, "input[type=submit], button[type=submit]");
        if (button) {
          const { disabled } = button;
          button.disabled = false;
          button.focus();
          button.click();
          button.disabled = disabled;
        } else {
          button = document.createElement("input");
          button.type = "submit";
          button.style.display = "none";
          form.appendChild(button);
          button.click();
          form.removeChild(button);
        }
        submitButtonsByForm.delete(form);
      }
      function disable(input) {
        input.disabled = true;
      }
      function enable(input) {
        input.disabled = false;
      }
      function autostart() {
        if (window.ActiveStorage) {
          start2();
        }
      }
      setTimeout(autostart, 1);
      exports2.DirectUpload = DirectUpload;
      exports2.start = start2;
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
    });
  })(activestorage, activestorage.exports);
  var AttachmentUpload = class {
    constructor(attachment, element) {
      this.attachment = attachment;
      this.element = element;
      this.directUpload = new activestorage.exports.DirectUpload(attachment.file, this.directUploadUrl, this);
    }
    start() {
      this.directUpload.create(this.directUploadDidComplete.bind(this));
    }
    directUploadWillStoreFileWithXHR(xhr) {
      xhr.upload.addEventListener("progress", (event) => {
        const progress = event.loaded / event.total * 100;
        this.attachment.setUploadProgress(progress);
      });
    }
    directUploadDidComplete(error2, attributes) {
      if (error2) {
        throw new Error(`Direct upload failed: ${error2}`);
      }
      this.attachment.setAttributes({
        sgid: attributes.attachable_sgid,
        url: this.createBlobUrl(attributes.signed_id, attributes.filename)
      });
    }
    createBlobUrl(signedId, filename) {
      return this.blobUrlTemplate.replace(":signed_id", signedId).replace(":filename", encodeURIComponent(filename));
    }
    get directUploadUrl() {
      return this.element.dataset.directUploadUrl;
    }
    get blobUrlTemplate() {
      return this.element.dataset.blobUrlTemplate;
    }
  };
  addEventListener("trix-attachment-add", (event) => {
    const { attachment, target } = event;
    if (attachment.file) {
      const upload = new AttachmentUpload(attachment, target);
      upload.start();
    }
  });
})();
//# sourceMappingURL=/assets/application.js.map


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/assets/config/manifest.js ===
//= link actiontext.css
//= link_tree ../images
//= link_tree ../builds
//= link_tree ../../../public/images
//= link_tree ../../../public/images/letter_avatars


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/channels/application_cable/channel.rb ===
# frozen_string_literal: true

module ApplicationCable
  class Channel < ActionCable::Channel::Base
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/channels/application_cable/connection.rb ===
# frozen_string_literal: true

module ApplicationCable
  class Connection < ActionCable::Connection::Base
    identified_by :current_user

    def connect
      self.current_user = find_verified_user
    end

    private

    def find_verified_user
      # if verified_user = User.find_by(id: cookies.signed[:user_id])
      if (verified_user = env["warden"].user)
        verified_user
      else
        reject_unauthorized_connection
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/channels/churps_channel.rb ===
# frozen_string_literal: true

class ChurpsChannel < ApplicationCable::Channel
  def subscribed
    stream_from "churps_channel"
  end

  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end

  def receive(data)
    ActionCable.server.broadcast("churps_channel", data)
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/channels/profile_following_channel.rb ===
# frozen_string_literal: true

class ProfileFollowingChannel < ApplicationCable::Channel
  def subscribed
    stream_from "profile_following_channel"
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/channels/view_churps_channel.rb ===
# frozen_string_literal: true

class ViewChurpsChannel < ApplicationCable::Channel
  def subscribed
    # stream_from 'view_churps_channel'
    stream_from "view_#{params[:churp_id]}_channel"
  end

  def unsubscribed
    # Any cleanup needed when channel is unsubscribed
  end

  def churp_data
    churp = Churp.find(params[:churp_id])
    user = current_user
    view_count = View.by_user(user, churp).all.count
    churp = {
      user_id: current_user.id,
      churp_id: churp.id,
      view_count:
    }

    ActionCable.server.broadcast "view_#{params[:churp_id]}_channel", { churp: }
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/churp_components/churp_box_component.html.erb ===
<div 
    data-controller="show-churp"
    data-show-churp-url-value="<%#= show_churp_path(@churp.user, @churp) %>"
    class="z-0 churp-block border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out pb-4 border-l border-r">
    
    <%= render 'churps/shared/user_link', churp: @churp %>

    <div class="pl-16">
      <p data-action="click->show-churp#showChurp" 
         class="my-4 text-base width-auto font-medium text-gray-800 dark:text-white flex-shrink">
        <%= @churp.content %>
      </p>

      <% if @churp.churp_pic.attached? %>
        <img class="rounded-2xl" src=<%= url_for(@churp.churp_pic) %>/>
      <% end %>

        <div class="z-0 flex items-center justify-center">
          <%# Comments Button %>
          <%= render 'churps/shared/comments', churp: @churp %>

          <%# Rechurp Button %>
          <%= render 'churps/shared/rechurp_button', churp: @churp %>
          
          <%# Like Button %>
          <%= render 'churps/shared/likes', churp: @churp %>

          <%# Number of views %>
          <%= render 'churps/shared/analytics', churp: @churp %>

          <%# Share Button %>
          <%= render 'churps/shared/share' %>
        </div>
    </div>
  </div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/churp_components/churp_box_component.rb ===
# frozen_string_literal: true

module ChurpComponents
  class ChurpBoxComponent < ViewComponent::Base
    def initialize(churp:)
      super
      @churp = churp
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/churp_components/user_link_component.html.erb ===
<div class="user-link flex flex-shrink-0 p-4 pb-0 z-50">
  <div class="flex items-top">
    <div class="user-pic">
      <%= image_tag(helpers.avatar_pic(churp.user.profile),
            class: 'inline-block h-9 w-9 rounded-full') %>
    </div>

    <div class="ml-3">
      <p class="flex items-center text-base leading-6 font-medium text-gray-800 dark:text-white">
        <%= link_to profile_path(churp.user), class: 'hover:underline' do %>
          <%= churp.user.profile&.name %>
        <% end %>

        <span class="ml-1 text-sm leading-5 font-medium text-gray-400 group-hover:text-gray-300 transition ease-in-out duration-150">
          <%= link_to profile_path(churp.user), class: 'hover:underline' do %>
            <%= "#{churp.user.username}" %>
          <% end %>
          .
          <%= time_created_at %>
        </span>
      </p>
    </div>

  </div>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/churp_components/user_link_component.rb ===
# frozen_string_literal: true

module ChurpComponents
  class UserLinkComponent < ViewComponent::Base
    attr_reader :churp

    def initialize(churp:)
      super
      @churp = churp
    end

    def time_created_at
      time = "#{distance_of_time_in_words(@churp.created_at.to_i - Time.now.to_i)} ago"

      time.gsub(/^about /, "")
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/followers/active_underline_component.html.erb ===
<hr class="border-2 rounded-md dark:border-vividSkyBlue mt-4">


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/followers/active_underline_component.rb ===
# frozen_string_literal: true

module Followers
  class ActiveUnderlineComponent < ViewComponent::Base
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/followers/header_component.html.erb ===
<div class="border-b border-l border-r dark:border-gray-700 mt-4">
  <div class="flex items-stretch justify-between text-white">

    <div class="w-full h-16 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out py-4 px-2">
      <div class="max-w-full text-sm flex justify-center align-middle">
        <%= link_to 'verified_followers', class: 'h-12 min-w-fit align-middle' do %>
          <span class="text-sm <%= @view == :verified_user ? 'font-bold' : '' %>">
            Verified User
          </span>
          <% if @view == :verified_user %>
            <%= render(Followers::ActiveUnderlineComponent.new) %>
          <% end %>
        <% end %>
      </div>
    </div>

    <div class="w-full h-16 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out py-4 px-2">
      <div class="max-w-full text-sm flex justify-center align-middle">
        <%= link_to 'followers_you_know', class: 'h-full min-w-fit align-middle' do %>
          <span class="text-sm <%= @view == :followers_you_know ? 'font-bold' : '' %>">
            Followers you know
          </span>
          <% if @view == :followers_you_know %>
            <%= render(Followers::ActiveUnderlineComponent.new) %>
          <% end %>
        <% end %>
      </div>
    </div>

    <div class="w-full h-16 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out py-4 px-2">
      <div class="max-w-full text-sm flex justify-center align-middle">
        <%= link_to 'followers', class: 'h-12 min-w-fit align-middle' do %>
          <span class="text-sm <%= @view == :followers ? 'font-bold' : '' %>">
            Followers
          </span>
          <% if @view == :followers %>
            <%= render(Followers::ActiveUnderlineComponent.new) %>
          <% end %>
        <% end %>
      </div>
    </div>

    <div class="w-full h-16 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out py-4 px-2">
      <div class="max-w-full text-sm flex justify-center align-middle">
        <%= link_to 'following', class: 'h-12 min-w-fit' do %>
          <span class="text-sm <%= @view == :following ? 'font-bold' : '' %>">
            Following
          </span>
          <% if @view == :following %>
            <%= render(Followers::ActiveUnderlineComponent.new) %>
          <% end %>
        <% end %>
      </div>
    </div>

  </div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/followers/header_component.rb ===
# frozen_string_literal: true

module Followers
  class HeaderComponent < ViewComponent::Base
    def initialize(view: nil, followers: nil, following: nil)
      super
      @view = view
      @followers = followers
      @following = following
    end

    def render?
      @view || @followers || @following
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/followers/link_block_component.html.erb ===
<div class="w-full h-12 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out px-2">
  <div class="max-w-full text-sm flex justify-center align-middle">
    <%= link_to @path.to_s, class: 'h-12 min-w-fit align-middle' do %>
      <span class="text-sm <%= view == 'verified_user' ? 'font-bold' : '' %>">
        Verified User
      </span>
      <%= render(Followers::ActiveUnderlineComponent.new()) %>
    <% end %>
  </div>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/followers/link_block_component.rb ===
# frozen_string_literal: true

module Followers
  class LinkBlockComponent < ViewComponent::Base
    def initialize(path:, name:)
      super
      @path = path
      @name = name
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/icons/back_arrow_component.html.erb ===
<svg class="m-2 h-6 w-6" fill="currentColor" viewBox="0 0 24 24">
  <g>
    <path d="M20 11H7.414l4.293-4.293c.39-.39.39-1.023 0-1.414s-1.023-.39-1.414 0l-6 6c-.39.39-.39 1.023 0 1.414l6 6c.195.195.45.293.707.293s.512-.098.707-.293c.39-.39.39-1.023 0-1.414L7.414 13H20c.553 0 1-.447 1-1s-.447-1-1-1z"></path>
  </g>
</svg>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/icons/back_arrow_component.rb ===
# frozen_string_literal: true

module Icons
  class BackArrowComponent < ViewComponent::Base
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/icons/notification_bell_component.html.erb ===
<svg fill="currentColor" viewBox="0 0 24 24" class="h-6 w-6">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21.697 16.468c-.02-.016-2.14-1.64-2.103-6.03.02-2.532-.812-4.782-2.347-6.335C15.872 2.71 14.01 1.94 12.005 1.93h-.013c-2.004.01-3.866.78-5.242 2.174-1.534 1.553-2.368 3.802-2.346 6.334.037 4.33-2.02 5.967-2.102 6.03-.26.193-.366.53-.265.838.102.308.39.515.712.515h4.92c.102 2.31 1.997 4.16 4.33 4.16s4.226-1.85 4.327-4.16h4.922c.322 0 .61-.206.71-.514.103-.307-.003-.645-.263-.838zM12 20.478c-1.505 0-2.73-1.177-2.828-2.658h5.656c-.1 1.48-1.323 2.66-2.828 2.66zM4.38 16.32c.74-1.132 1.548-3.028 1.524-5.896-.018-2.16.644-3.982 1.913-5.267C8.91 4.05 10.397 3.437 12 3.43c1.603.008 3.087.62 4.18 1.728 1.27 1.285 1.933 3.106 1.915 5.267-.024 2.868.785 4.765 1.525 5.896H4.38z"></path>
</svg>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/icons/notification_bell_component.rb ===
# frozen_string_literal: true

module Icons
  class NotificationBellComponent < ViewComponent::Base
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/nav/notifications_component.html.erb ===
<div>
  <a href="/notifications" class="flex items-center justify-center xl:justify-start text-gray-800 dark:text-white hover:text-vividSkyBlue dark:hover:text-vividSkyBlue mb-8 transition duration-350 ease-in-out">
    <div class="relative">
      <%= render Icons::NotificationBellComponent.new  %>
      <%= render Nav::NotificationsCounterComponent.new(user: @user, count: @user.unread_notifications.count) %>
    </div>
    <div>
      <span class="hidden xl:block ml-4 font-bold text-md">Notifications</span>
    </div>
  </a>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/nav/notifications_component.rb ===
# frozen_string_literal: true

module Nav
  class NotificationsComponent < ViewComponent::Base
    def initialize(user:)
      super
      @user = user
      @unread = @user.unread_notifications
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/nav/notifications_counter_component.html.erb ===
<div>
  <%= helpers.turbo_stream_from "notifications_count_#{@user.id}" %>
  <%= tag.turbo_frame "notifications_count_#{@user.id}" do %>
    <% if @count.positive? %>
      <div class="notificationCount">
        <%= counter %>
      </div>
    <% end %>
  <% end %>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/nav/notifications_counter_component.rb ===
# frozen_string_literal: true

module Nav
  class NotificationsCounterComponent < ViewComponent::Base
    def initialize(user:, count:)
      super
      @user = user
      @count = count
    end

    def counter
      return @count if @count <= 20

      "#{@count}+"
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/notifications/active_underline_component.html.erb ===
<hr class="border-2 rounded-md dark:border-vividSkyBlue mt-4">


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/notifications/active_underline_component.rb ===
# frozen_string_literal: true

module Notifications
  class ActiveUnderlineComponent < ViewComponent::Base
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/notifications/header_component.html.erb ===
<div class="border-b border-l border-r dark:border-gray-700 mt-4">
  <div class="flex items-stretch justify-between text-white">

    <div class="w-full h-16 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out py-4 px-2">
      <div class="max-w-full text-sm flex justify-center align-middle">
        <%= link_to 'verified_followers', class: 'h-12 min-w-fit align-middle' do %>
          <span class="text-sm font-bold">
            Mentions
          </span>
          <%= render Notifications::ActiveUnderlineComponent.new %>
        <% end %>
      </div>
    </div>

    <div class="w-full h-16 py-4 px-2">
      <div class="max-w-full text-sm flex justify-center align-middle">
        <%# spacers for futer views %>
      </div>
    </div>

    <div class="w-full h-16 py-4 px-2">
      <div class="max-w-full text-sm flex justify-center align-middle">
        <%# spacers for futer views %>
      </div>
    </div>

  </div>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/notifications/header_component.rb ===
# frozen_string_literal: true

module Notifications
  class HeaderComponent < ViewComponent::Base
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/notifications/mention_component.html.erb ===
  <div
    data-controller="show-churp"
    data-action="click->show-churp#showChurp"
    data-show-churp-url-value="<%= show_churp_path(@churp.user, @churp) %>"
    style="<%= @unread ? 'background-color:#16232E;' : ''%>"
    class="<%= new_notification? ? 'dark:bg-[#16232E]' : ''%> z-0 churp-block border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-[#16232E] cursor-pointer transition duration-350 ease-in-out pb-4 border-l border-r">
    <!-- link -->
    <%= render ChurpComponents::UserLinkComponent.new(churp: @churp) %>
    <%#= render 'churps/shared/user_link', churp: @churp %>

    <div class="pl-16 pr-12">

      <p class="curp-content my-4 text-base width-auto font-medium text-gray-800 dark:text-white flex-shrink">
        <%= helpers.link_wrapper(@churp.content) %>
      </p>

      <% if @churp.churp_pic.attached? %>
        <img class="rounded-2xl" src=<%= url_for(@churp.churp_pic) %>/>
      <% end %>

        <div class="flex items-center justify-center">

          <%# Comments %>
          <%= render 'churps/shared/comments', churp: @churp %>

          <%# Rechurp %>
          <%= render 'churps/shared/rechurp_button', churp: @churp %>

          <%= render 'churps/shared/likes', churp: @churp %>

          <%# Number of views %>
          <%= render 'churps/shared/analytics', churp: @churp %>

          <%# Share %>
          <%= render 'churps/shared/share' %>

        </div>

    </div>
  </div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/notifications/mention_component.rb ===
# frozen_string_literal: true

module Notifications
  class MentionComponent < ViewComponent::Base
    attr_reader :user, :churp, :unread, :read_at

    def initialize(user:, churp:, unread:, read_at: nil)
      super
      @user = user
      @churp = churp
      @unread = unread
      @read_at = read_at
    end

    def new_notification?
      read_at.nil? || read_at < 1.minute.ago
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/profile_components/buttons/edit_component.html.erb ===
<div class="flex flex-col text-right">
  <%= helpers.turbo_frame_tag "profile_modal" do %>
    <%= link_to "Edit Profile", edit_profile_path, class: helpers.edit_profile_class %>
  <% end %>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/profile_components/buttons/edit_component.rb ===
# frozen_string_literal: true

module ProfileComponents
  module Buttons
    class EditComponent < ViewComponent::Base
      def initialize(user:, profile:)
        super
        @user = user
        @profile = profile
      end

      def render?
        @user.id == @profile&.user&.id
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/profile_components/buttons/follow_component.html.erb ===
<% unless @user == @profile.user %>
  <%= helpers.turbo_frame_tag "profile_follow_#{@profile.id}" do %>
    <div class="inline-block" data-controller="profile-following">
      <% if @user.following?(@profile.user) %>
        <%= button_to 'Following', unfollow_profile_path(@profile.user), 
            data: {
              action: 'mouseover->profile-following#unfollowHover mouseleave->profile-following#followHover',
              profile_following_target: "follow",
              profile_following_target_profile: @profile.id,
            }, class: 'profile-following primary' %>
      <% else %>
        <%= button_to 'Follow', follow_profile_path(@profile.user), class: 'profile-following primary' %>
      <% end %>
    </div>
  <% end %>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/profile_components/buttons/follow_component.rb ===
# frozen_string_literal: true

module ProfileComponents
  module Buttons
    class FollowComponent < ViewComponent::Base
      def initialize(user:, profile:)
        super
        @user = user
        @profile = profile
      end

      def render?
        @user != @profile.user
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/profile_components/social_count_component.html.erb ===
<span id="<%= content %>" class="font-bold text-white pr-2">
  <%= number_to_human(@count, 
      precision: 1,
      round_mode: :down,
      significant: false,
      format: '%n%u',
      units: { thousand: 'K', million: 'M', billion: 'B' }) %>
  <span class="text-gray-600"><%= content %></span>
</span>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/profile_components/social_count_component.rb ===
# frozen_string_literal: true

module ProfileComponents
  class SocialCountComponent < ViewComponent::Base
    def initialize(count:)
      super
      @count = count
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/search/search_bar_component.html.erb ===
<%= form_with url: search_path, method: :get, local: true do |f| %>
  <div class="relative m-2">
    <div class="absolute text-gray-600 flex items-center pl-4 h-full cursor-pointer">
      <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-mail" width="18" height="18" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z"></path>
      </svg>
    </div>
    <%= f.text_field :q, 
      value: params[:q], 
      class: 'w-full px-3 bg-gray-200 dark:bg-dim-400 border-gray-200 dark:border-dim-400 text-gray-100 focus:bg-gray-100 dark:focus:bg-dim-900 focus:outline-none focus:border focus:ring-vividSkyBlue font-normal h-9 flex items-center pl-12 text-sm rounded-full border shadow', 
      placeholder: 'Search Churp' %>
  </div>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/search/search_bar_component.rb ===
# frozen_string_literal: true

module Search
  class SearchBarComponent < ViewComponent::Base
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/trending_topic_component.html.erb ===
<div class="trending-topic">
  <h2 data-controller="search"
      data-search-target="search"
      data-action="click->search#search"
      class="font-bold text-md text-gray-800 dark:text-white">
    <%= "##{@hashtag}"%>
  </h2>
  <p class="num-of-churps">
    <%= pluralize(@num_of_churps, 'post')%>
  </p>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/components/trending_topic_component.rb ===
# frozen_string_literal: true

class TrendingTopicComponent < ViewComponent::Base
  def initialize(hashtag:, num_of_churps:)
    super
    @hashtag = hashtag
    @num_of_churps = num_of_churps
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/application_controller.rb ===
# frozen_string_literal: true

class ApplicationController < ActionController::Base
  include Pagy::Backend
  include ActiveStorage::SetCurrent
  before_action :authenticate_user!

  layout :layout_by_resource

  before_action :configure_permitted_parameters, if: :devise_controller?
  before_action :set_hash_tags

  def layout_by_resource
    if devise_controller?
      "devise"
    else
      "application"
    end
  end

  def set_hash_tags
    @popular_hashtags = HashTag.top_three
  end

  def self.render_with_signed_in_user(user, *)
    ActionController::Renderer::RACK_KEY_TRANSLATION["warden"] ||= "warden"
    proxy = Warden::Proxy.new({}, Warden::Manager.new({})).tap { |i| i.set_user(user, scope: :user) }
    renderer = self.renderer.new("warden" => proxy)
    renderer.render(*)
  end

  def not_found_method
    render file: Rails.public_path.join("404.html"), status: 404, layout: false
  end

  protected

  def configure_permitted_parameters
    devise_parameter_sanitizer.permit(:sign_up) do |user_params|
      user_params.permit([:email, :username, :password, :password_confirmation, { profile_attributes: :name }])
    end

    # devise_parameter_sanitizer.permit(:sign_up, keys: [
    #   :username, profile_attributes: [ :name ]
    # ])

    # devise_parameter_sanitizer.permit(:sign_up, keys: [:name, :username])
    devise_parameter_sanitizer.permit(:account_update, keys: [:name])
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/churps_controller.rb ===
# frozen_string_literal: true

class ChurpsController < ApplicationController
  before_action :authenticate_user!
  before_action :set_churp, only: %i[show edit update destroy like rechurp]

  def index
    @pagy, @churps = pagy(Churp.order(created_at: :desc), items: 15)
    @churp = current_user.churps.new

    render "scrollable_list" if params[:page]
  end

  # GET /churps/1
  # GET /churps/1.json
  def show
    @user = User.friendly.find(params[:slug])
    @comment = current_user.comments.new
    @comments = @churp.comments.recent_comments
  end

  # GET /churps/new
  def new
    @churp = current_user.churps.build
  end

  # GET /churps/1/edit
  def edit
  end

  # POST /churps
  # POST /churps.json
  def create
    @churp = Churp.new(churp_params.merge(user: current_user))
    respond_to do |format|
      if @churp.save
        format.html { redirect_to root_path, notice: "churp was successfully created." }
        format.json { render :show, status: 201, location: @churp }
      else
        format.html { redirect_back fallback_location: @churp, alert: "Could not churp" }
        format.json { render json: @churp.errors, status: 422 }
      end
    end
  end

  # PATCH/PUT /churps/1
  # PATCH/PUT /churps/1.json
  def update
    respond_to do |format|
      if @churp.update(churp_params)
        format.html { redirect_to @churp, notice: "churp was successfully updated." }
        format.json { render :show, status: 200, location: @churp }
      else
        format.html { render :edit }
        format.json { render json: @churp.errors, status: 422 }
      end
    end
  end

  # DELETE /churps/1
  # DELETE /churps/1.json
  def destroy
    @churp.destroy
    respond_to do |format|
      format.html { redirect_to churps_url, notice: "churp was successfully destroyed." }
      format.json { head 204 }
    end
  end

  def like
    create_like_for_churp

    respond_to do |format|
      format.turbo_stream { render_turbo_like_partial }
      format.html { redirect_to churps_path }
    end
  end

  def rechurp
    @rechurp = current_user.churps.new(body: @churp.content, churp_id: @churp.id)
    increment_count = @rechurp.rechurp_count + 1
    @rechurp.update(rechurp_count: increment_count)

    respond_to do |format|
      if @rechurp.save
        format.html { redirect_to churps_path, notice: "Rechurp was successful" }
      else
        format.html { redirect_to churps_path, notice: "Could not rechurp" }
      end
    end
  end

  private

  def create_like_for_churp
    current_user.likes.create(likeable: @churp)
  end

  def render_turbo_like_partial
    render turbo_stream: turbo_stream.replace(
      "like_#{@churp.id}",
      partial: "churps/shared/likes",
      locals: {churp: @churp}
    )
  end

  # Use callbacks to share common setup or constraints between actions.
  def set_churp
    @churp = Churp.find(params[:id] || params[:churp_id])
  end

  # Never trust a big booty and a smile
  def churp_params
    params.require(:churp).permit(:content, :churp_id, :churp_pic)
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/comments_controller.rb ===
# frozen_string_literal: true

class CommentsController < ApplicationController
  before_action :set_comment, only: %i[show edit update destroy]

  # GET /comments or /comments.json
  def index
    @comments = Comment.all.order("created_at DESC")
  end

  # GET /comments/1 or /comments/1.json
  def show
  end

  # GET /comments/new
  def new
    @comment = current_user.comments.new
  end

  # GET /comments/1/edit
  def edit
  end

  # POST /comments or /comments.json
  def create
    @comment = Comment.new(comment_params.merge(user: current_user))

    respond_to do |format|
      if @comment.save
        format.html { redirect_to churp_path(params[:churp_id]), notice: "Comment was successfully created." }
      else
        format.html { redirect_to churp_path(params[:churp_id]), alert: "Could not comment" }
      end
    end
  end

  # PATCH/PUT /comments/1 or /comments/1.json
  def update
    respond_to do |format|
      if @comment.update(comment_params)
        format.html { redirect_to comment_url(@comment), notice: "Comment was successfully updated." }
        format.json { render :show, status: 200, location: @comment }
      else
        format.html { render :edit, status: 422 }
        format.json { render json: @comment.errors, status: 422 }
      end
    end
  end

  # DELETE /comments/1 or /comments/1.json
  def destroy
    @comment.destroy

    respond_to do |format|
      format.html { redirect_to churp_path(params[:churp_id]), notice: "Comment was successfully destroyed." }
      format.json { head 204 }
    end
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_comment
    @comment = Comment.find(params[:id])
  end

  # Only allow a list of trusted parameters through.
  def comment_params
    params
      .require(:comment)
      .permit(:content, :parent_id)
      .merge(churp_id: params[:churp_id])
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/errors_controller.rb ===
# frozen_string_literal: true

class ErrorsController < ApplicationController
  def not_found
    render status: 404
  end

  def internal_server_error
    render status: 500
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/likes_controller.rb ===
# frozen_string_literal: true

class LikesController < ApplicationController
  before_action :find_churp

  def create
    if already_liked?
      flash[:notice] = "You can't like more than once"
    else
      @churp.likes.create(user_id: current_user.id)
    end

    update_like_text
  end

  private

  def update_like_text
    render turbo_stream:
      turbo_stream.replace("like_#{@churp.id}",
        partial: "churps/likes",
        locals: { like: @churp.likes.count })
  end

  def find_churp
    @churp = churp.find(params[:id])
  end

  def already_liked?
    Like.exists?(
      user_id: current_user.id,
      churp_id: params[:id]
    )
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/mentions_controller.rb ===
# frozen_string_literal: true

class MentionsController < ApplicationController
  def index
    render json: { error: "query empty" }, status: 400 if params[:query].empty?

    @mentions = User.where("username ILIKe ?", "%#{params[:query]}%").limit(5)

    respond_to(&:json)
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/notifications_controller.rb ===
# frozen_string_literal: true

class NotificationsController < ApplicationController
  before_action :authenticate_user!

  def index
    return unless current_user

    @notifications = current_user.notifications.sort.reverse
    current_user.notifications.mark_as_read!
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/profiles_controller.rb ===
# frozen_string_literal: true

class ProfilesController < ApplicationController
  include ActiveStorage::SetCurrent
  before_action :set_profile, only: %i[show edit update follow unfollow]

  def show
    @user_churps = @profile.user.churps
  end

  # profile /profiles or /profiles.json
  def new
    @profile = current_user.build_profile
  end

  def edit
  end

  # profile /profiles or /profiles.json
  def create
    @profile = Profile.new(profile_params)

    respond_to do |format|
      if @profile.save
        format.html { redirect_to profile_url(current_user.id), notice: "profile was successfully created." }
        format.json { render :show, status: 201, location: @profile }
      else
        format.html { render :show, status: 422 }
        format.json { render json: @profile.errors, status: 422 }
      end
    end
  end

  # PATCH/PUT /profiles/1
  # PATCH/PUT /profiles/1.json
  def update
    respond_to do |format|
      if @profile.update(profile_params)
        format.html { redirect_to profile_url(current_user.id), notice: "profile was successfully created." }
        format.json { render :show, status: 201, location: @profile }
      else
        format.html { render :new, status: 422 }
        format.json { render json: @profile.errors, status: 422 }
      end
    end
  end

  def follow
    @user = User.friendly.find(params[:id].downcase.delete("@"))
    @user_churps = @profile.user.churps
    current_user.follow(@user)

    update_follow_card
  end

  def unfollow
    @user = @profile.user
    @user_churps = @profile.user.churps
    current_user.unfollow(@user)

    update_follow_card
  end

  private

  def update_follow_card
    render turbo_stream: turbo_stream.replace(
      "profile_follow_#{@profile.id}",
      partial: "profiles/follow_button",
      locals: { profile: @profile }
    )
  end

  def set_profile
    username = params[:id].downcase.delete("@")
    @profile = User.friendly.find(username).profile
  end

  # Never trust parameters from the scary internet, only allow the white list through.
  def profile_params
    params.require(:profile).permit(
      :name,
      :description,
      :website,
      :birth_date,
      :profile_bg,
      :profile_pic,
      :user_id
    )
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/relationships_controller.rb ===
# frozen_string_literal: true

class RelationshipsController < ApplicationController
  def create
    @user = User.find(params[:followed_id])
    current_user.follow(@user)

    update_follow_card
  end

  def destroy
    @user = Relationship.find(params[:id]).followed
    current_user.unfollow(@user)

    update_follow_card
  end

  private

  def update_follow_card
    render turbo_stream: turbo_stream.replace(
      "follow_card_#{@user.id}",
      partial: "users/follow",
      locals: { user: @user }
    )
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/search_controller.rb ===
# frozen_string_literal: true

class SearchController < ApplicationController
  protect_from_forgery with: :null_session

  def index
    if params[:q].start_with?("#")
      query = params[:q].delete("#")
      @churps = Churp.search_hashtags(query)
    else
      @churps = Churp.with_all_rich_text.where("body like ?", "%#{params[:q]}%")
    end
  end

  def search_hashtags
    @results = search_for_hashtags

    respond_to do |format|
      format.turbo_stream do
        render turbo_stream:
          turbo_stream.update("search",
            partial: "search/index",
            locals: { posts: @results })
      end
    end
  end

  def suggestions
    @results = search_for_hashtags

    respond_to do |format|
      format.turbo_stream do
        render turbo_stream:
          turbo_stream.update("suggestions",
            partial: "search/suggestions",
            locals: { results: @results })
      end
    end
  end

  private

  def search_for_hashtags
    if params[:query].blank?
      HashTag.all
    else
      results = HashTag.search(params[:query],
        fields: [:name],
        match: :word_start,
        boost_by_recency: { created_at: { scale: "7d", decay: 0.5 } },
        limit: 10)
      results.uniq { |r| r[:name] }
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/static_controller.rb ===
# frozen_string_literal: true

class StaticController < ApplicationController
  layout "static/tos"

  def terms_of_service
    @updated_at = TermsOfService.updated_at
  end

  def privacy_policy
    @updated_at = PrivacyPolicy.updated_at
  end

  def cookie_policy
  end

  def ads_info
  end

  def about
  end

  def status
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/users/registrations_controller.rb ===
# frozen_string_literal: true

module Users
  class RegistrationsController < Devise::RegistrationsController
    def account_update_params
      if params[@devise_mapping.name][:password_confirmation].blank?
        params[@devise_mapping.name].delete(:password)
        params[@devise_mapping.name].delete(:password_confirmation)
      end

      super
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/controllers/users_controller.rb ===
# frozen_string_literal: true

class UsersController < ApplicationController
  before_action :set_user, only: %i[following followers]

  def following
    @pagy, @following = pagy(@user.following, items: 15)
    @is_active = true

    render "users/scrollable_list" if params[:page]
  end

  def followers
    @pagy, @followers = pagy(@user.followers, items: 15)
    @is_active = true

    render "users/scrollable_list" if params[:page]
  end

  private

  def set_user
    @user = User.friendly.find(params[:id])
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/helpers/application_helper.rb ===
# frozen_string_literal: true

module ApplicationHelper
  include Pagy::Frontend

  def version
    ChurpSocial::Version.to_s
  end

  def link_wrapper(content)
    ChurpWrapperService.call(content).result
  end

  def header_links(controller, options = {})
    case controller
    when "users"
      render Followers::HeaderComponent.new(view: options[:view],
        followers: options[:followers],
        following: options[:following])
    when "notifications"
      render Notifications::HeaderComponent.new
    else
      ""
    end
  end

  def flash_classes(flash_type)
    flash_base = "px-2 py-4 mx-auto font-sans font-medium text-center text-white"
    {
      notice: "bg-indigo-600 #{flash_base}",
      error: "bg-red-600 #{flash_base}",
      alert: "bg-red-600 #{flash_base}"
    }.stringify_keys[flash_type.to_s] || flash_type.to_s
  end

  def nav_classes
    if ["devise/registrations", "devise/sessions", "devise/confirmations", "devise/passwords",
      "devise/unlocks"].include?(params[:controller])
      "hidden"
    end
  end

  def label_class(options = {})
    "block mb-1 font-normal leading-normal #{options[:extended_classes]}"
  end

  def input_class(options = {})
    "rounded border border-gray-300 block w-full focus:outline-none focus:border-gray-400 outline-none focus-within:outline-none focus:ring-2 focus:ring-gray-200 #{options[:extended_classes]}"
  end

  def checkbox_class(options = {})
    "rounded border-gray-300 border focus:ring-2 focus:ring-gray-200 text-blue-500 mr-1 #{options[:extended_classes]}"
  end

  def link_class(options = {})
    "text-gray-700 underline hover:no-underline hover:text-gray-800 block #{options[:extended_classes]}"
  end

  def button_class(options = {})
    variant = options[:variant]
    theme = options[:theme]

    style_button(variant, theme_button(theme))
  end

  def theme_button(theme)
    themes = {
      primary: "primary",
      secondary: "secondary",
      transparent: "transparent",
      dark: "dark"
    }

    case theme
    when themes[:primary]
      "bg-vividSkyBlue hover:bg-cyan-600 text-white"
    when themes[:secondary]
      "bg-teal-600 hover:bg-teal-700 text-white"
    when themes[:transparent]
      "bg-transparent hover:bg-gray-100 text-gray-700"
    when themes[:dark]
      "bg-gray-800 text-white shadow-sm hover:bg-gray-900"
    else
      "bg-white border border-gray-300 shadow-sm hover:bg-gray-100"
    end
  end

  def style_button(variant, theme)
    base = "rounded text-center font-sans font-normal outline-none leading-normal cursor-pointer transition ease-in-out duration-200 font-medium"

    case variant
    when "large"
      "px-5 py-4 text-lg #{base} #{theme}"
    when "small"
      "py-2 px-4 text-sm #{base} #{theme}"
    when "expanded"
      "p-3 w-full block #{base} #{theme}"
    else
      "px-5 py-2 text-base #{base} #{theme}"
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/helpers/churps_helper.rb ===
# frozen_string_literal: true

module ChurpsHelper
  def share_icon_class(options = {})
    "flex-1 flex items-center dark:text-white text-xs text-gray-400 hover:text-green-400 " \
      "dark:hover:text-green-400 transition duration-350 ease-in-out #{options[:extended_classes]}"
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/helpers/comments_helper.rb ===
# frozen_string_literal: true

module CommentsHelper
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/helpers/errors_helper.rb ===
# frozen_string_literal: true

module ErrorsHelper
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/helpers/likes_helper.rb ===
# frozen_string_literal: true

module LikesHelper
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/helpers/mentions_helper.rb ===
# frozen_string_literal: true

module MentionsHelper
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/helpers/notifications_helper.rb ===
# frozen_string_literal: true

module NotificationsHelper
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/helpers/profiles_helper.rb ===
# frozen_string_literal: true

module ProfilesHelper
  DEFAULT_BG = "/images/rod-long-bg.jpeg"

  def profile_background_image(profile_bg)
    return "background-image: url(#{DEFAULT_BG});" unless profile_bg&.attached?

    "background-image: url('#{profile_bg.url}');"
  end

  def form_profile_bg(profile_bg)
    return DEFAULT_BG unless profile_bg&.attached?

    profile_bg.url
  end

  def avatar_pic(profile)
    profile_pic = profile&.profile_pic
    return url_for_attachment(profile) if profile_pic&.attached?
    return letter_avatar(profile) unless profile_pic&.attached?

    "stanley-roper-profile.png"
  end

  def letter_avatar(profile)
    name = profile&.name || "Sage Doe"

    LetterAvatar.generate(name, 400).sub("public/", "")
  end

  def url_for_attachment(profile)
    return Rails.application.routes.url_helpers.url_for profile.profile_pic if Rails.env.test?

    profile.profile_pic.url
  end

  def churp_root_url
    Rails.application
      .default_url_options
      .values
      .first
  end

  def edit_profile_class
    'flex justify-center max-h-max whitespace-nowrap focus:outline-none focus:ring\
    max-w-max border bg-transparent border-vividSkyBlue text-vividSkyBlue hover:border-cyan-600\
    items-center hover:shadow-lg font-bold py-2 px-4 rounded-full mr-0 ml-auto'
  end

  def profile_button_class(error: nil)
    "flex justify-center max-h-max whitespace-nowrap focus:outline-none focus:ring\
    max-w-max border bg-transparent #{error ? error_colors : primary_colors}\
    items-center hover:shadow-lg font-bold py-2 px-4 rounded-full mr-0 ml-auto"
  end

  def primary_colors
    "border-vividSkyBlue text-vividSkyBlue hover:border-vividSkyBlue"
  end

  def error_colors
    "border-red-700 text-red-700 hover:border-red-700"
  end

  def profile_modal_class
    "mx-2 text-2xl font-medium rounded-full text-vividSkyBlue hover:bg-cyan-600 hover:text-blue-300 float-right"
  end

  def profile_form_input_class(options = {})
    "block shadow rounded-md border text-gray-800 border-gray-200 outline-none px-3 py-4 mt-2 w-full
    #{options[:extended_classes]}"
  end

  def profile_form_label_class(options = {})
    "absolute text-gray-400 dark:text-gray-500 duration-300 transform
    -translate-y-4 scale-75 top-4 z-10 origin-[0] left-2.5\
    peer-focus:text-blue-600 peer-focus:dark:text-blue-500\
    peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0
    peer-focus:scale-75 peer-focus:-translate-y-4 #{options[:extended_classes]}"
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/helpers/static_helper.rb ===
# frozen_string_literal: true

module StaticHelper
  def static_button_class
    'flex justify-center max-h-max whitespace-nowrap focus:outline-none focus:ring\
    max-w-max border bg-transparent border-vividSkyBlue text-vividSkyBlue hover:border-cyan-600\
    items-center hover:shadow-lg font-bold py-2 px-4 rounded-full mr-0 ml-auto'
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/application.js ===
// Entry point for the build script in your package.json
import "@hotwired/turbo-rails"
import "./controllers"
import "./channels"
import "trix"
import "@rails/actiontext"


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/channels/churps_channel.js ===
import consumer from "./consumer"

consumer.subscriptions.create("ChurpsChannel", {
  connected() {
    // Called when the subscription is ready for use on the server
  },

  disconnected() {
    // Called when the subscription has been terminated by the server
  },

  received(data) {
    // Called when there's incoming data on the websocket for this channel
    const event = new CustomEvent("newChurp", { detail: data });
    window.dispatchEvent(event);
  }
});


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/channels/consumer.js ===
// Action Cable provides the framework to deal with WebSockets in Rails.
// You can generate new channels where WebSocket features live using the `bin/rails generate channel` command.

import { createConsumer } from "@rails/actioncable"

export default createConsumer()


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/channels/index.js ===
// Import all the channels to be used by Action Cable
import "./churps_channel"
import "./view_churps_channel"


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/channels/profile_following_channel.js ===
import consumer from "./consumer"

consumer.subscriptions.create("ProfileFollowingChannel", {
  connected() {
    // Called when the subscription is ready for use on the server
  },

  disconnected() {
    // Called when the subscription has been terminated by the server
  },

  received(data) {
  }
});

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/channels/view_churps_channel.js ===



=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/application.js ===
import { Application } from "@hotwired/stimulus"
import NestedForm from 'stimulus-rails-nested-form'

const application = Application.start()
application.register('nested-form', NestedForm)
// const application = Application.start()

// Configure Stimulus development experience
application.debug = false
window.Stimulus   = application

export { application }


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/broadcast_churps_controller.js ===
import { Controller } from "@hotwired/stimulus";

// Connects to data-controller="new_churps"
export default class extends Controller {
  static targets = ["container", "notification", "notificationParent"];
  static classes = ["change"]

  connect() {
    this.newChurps = [];
    window.addEventListener("newChurp", (e) => {
      this.newChurps.push(e.detail);
      this.showNotification();
    });
  }

  disconnect() {
    window.removeEventListener("newChurp", this.showNotification);
  }

  showNotification() {
    this.toggle()
    this.notificationTarget.innerText = `Load ${this.newChurps.length} new Churps`;
  }

  loadNewChurps() {
    this.newChurps.forEach((churp) => {
      // Convert the HTML string into a node
      const parser = new DOMParser();
      const html = parser.parseFromString(churp, "text/html");
      const churpNode = html.body.firstChild;
      console.log({'churpNode': churpNode });

      // Prepend the churp to the container
      this.containerTarget.prepend(churpNode);
    });
      this.newChurps = [];
      this.toggle();
  }

  toggle() {
    this.notificationParentTargets.forEach((el) => {
      el.hidden = !el.hidden;
    });
  }
}

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/emoji_picker_controller.js ===
import { Controller } from "@hotwired/stimulus";
import { Picker } from 'emoji-mart'

// Connects to data-controller="emoji-picker"
export default class extends Controller {
  static targets = ["trixEditor", "pickerContainer"];

  connect() {
    const trigger = document.querySelector('.trix-button');

    const pickerOptions = {
      theme: 'dark',
      previewPosition: 'none',
      onEmojiSelect: (emoji) => {
        this.trixEditorTarget.editor.insertHTML(emoji.native);
        this.trixEditorTarget.editor.expandSelectionInDirection('forward');
        picker.remove()
      },
      onClickOutside: () => {
        picker.remove()
      },
      data: () => fetch('https://cdn.jsdelivr.net/npm/@emoji-mart/data')
                  .then(res => res.json()),
    }
    const picker = new Picker(pickerOptions)

    trigger.addEventListener("click", (e) => {
      this.pickerContainerTarget.appendChild(picker)
    });

  }

}


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/hello_controller.js ===
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  connect() {
    this.element.textContent = "Hello World!"
  }
}


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/index.js ===
// This file is auto-generated by ./bin/rails stimulus:manifest:update
// Run that command whenever you add a new controller or create them with
// ./bin/rails generate stimulus controllerName

import { application } from "./application"

import BroadcastChurpsController from "./broadcast_churps_controller"
application.register("broadcast-churps", BroadcastChurpsController)

import EmojiPickerController from "./emoji_picker_controller"
application.register("emoji-picker", EmojiPickerController)

import HelloController from "./hello_controller"
application.register("hello", HelloController)

import MentionsController from "./mentions_controller"
application.register("mentions", MentionsController)

import ProfileFollowingController from "./profile_following_controller"
application.register("profile-following", ProfileFollowingController)

import ProfileModalController from "./profile_modal_controller"
application.register("profile-modal", ProfileModalController)

import ResetFormController from "./reset_form_controller"
application.register("reset-form", ResetFormController)

import SearchController from "./search_controller"
application.register("search", SearchController)

import ShowChurpController from "./show_churp_controller"
application.register("show-churp", ShowChurpController)

import ViewChurpsController from "./view_churps_controller"
application.register("view-churps", ViewChurpsController)


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/mentions_controller.js ===
import { Controller } from "@hotwired/stimulus"
import Tribute from "tributejs"
import Trix from "trix"

export default class extends Controller {
  static targets = [ "field" ]

  connect() {
    this.initializeTribute()
  }

  disconnect() {
    this.tribute.detach(this.fieldTarget)
  }

  get editor() {
    return this.element.editor
  }

  initializeTribute() {
    this.tribute = new Tribute({
      allowSpaces: true,
      lookup: 'username',
      values: this.fetchUsers,
      menuItemTemplate(item) {
        return `<div class="mentionsListContainer">
                <div class="mentions-list-centered">
                  <div class="flex flex-row justify-around">
                    <img class="w-10 h-10 rounded-full" src="${item.original.profile_pic}" alt="${item.original.name}"/>
                    <div class="flex flex-col ml-2">
                      <h1 class="mentions-list-header">
                        ${item.original.name}
                      </h1>
                      <p class="text-gray-400 text-sm">${item.original.username}</p>
                    </div>
                  </div>
                </div>
              </div>`
      },
    })
    this.tribute.attach(this.fieldTarget)
    this.tribute.range.pasteHtml = this._pasteHtml.bind(this)
    this.fieldTarget.addEventListener("tribute-replaced", this.replaced)
  }

  fetchUsers(text, callback) {
    fetch(`/mentions.json?query=${text}`)
      .then(response => response.json())
      .then(users => callback(users))
      .catch(error => callback([]))
  }

  replaced(e) {
    let mention = e.detail.item.original
    let attachment = new Trix.Attachment({
      sgid: mention.sgid,
      content: mention.content,
      contentType : 'inline-element mention'
    })
    this.editor.insertAttachment(attachment)
    this.editor.insertString(" ")
  }

  _pasteHtml(_html, startPos, endPos) {
    let range = this.editor.getSelectedRange()
    let position = range[0]
    let length = endPos - startPos
    this.editor.setSelectedRange([position - length, position])
    this.editor.deleteInDirection("backward")
  }
}

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/profile_following_controller.js ===
import { Controller } from "@hotwired/stimulus"

// Connects to data-controller="following-button"
export default class extends Controller {
  static targets = ["follow", "profile"];

  connect() { 
    this.index = 1;
  }

  unfollow() {
    this.index--
    this.followTarget.classList.remove("primary")
    this.followTarget.classList.add("error")
    this.toggleTargets()
  }
  
  follow() {
    this.index++
    this.followTarget.classList.remove("error")
    this.followTarget.classList.add("primary")
    this.toggleTargets()

  }
  
  toggleTargets() {
    this.followTarget.innerText = this.index == 1 ? 'Following' : 'Unfollow';
  }

  
  disconnect() { 
    // this.channel.unsubscribe(); 
  } 
}


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/profile_modal_controller.js ===
import { Controller } from "@hotwired/stimulus"

export default class extends Controller {
  static targets = ["modal", "hideable"]
  connect(){
    console.log("modal connect ");
  }

  // hide modal
  // action: "profile-modal#hideModal"
  hideModal() {
    console.log("Hiding modal")

    this.hideableTargets.forEach(el => {
      el.hidden = true
    });
  }

  // hide modal on successful form submission
  // action: "turbo:submit-end->turbo-modal#submitEnd"
  submitEnd(e) {
    if (e.detail.success) {
      this.hideModal()
    }
  }

  // hide modal when clicking ESC
  // action: "keyup@window->turbo-modal#closeWithKeyboard"
  closeWithKeyboard(e) {
    if (e.code == "Escape") {
      this.hideModal()
    }
  }

  // hide modal when clicking outside of modal
  // action: "click@window->turbo-modal#closeBackground"
  closeBackground(e) {
    if (e && this.modalTarget.contains(e.target)) {
      return;
    }
    this.hideModal()
  }
}

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/reset_form_controller.js ===
import { Controller } from "@hotwired/stimulus"

// Connects to data-controller="reset-form"
export default class extends Controller {
  reset() {
    this.element.reset()
  }
}


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/search_controller.js ===
import { Controller } from "@hotwired/stimulus"

// Connects to data-controller="search"
export default class extends Controller {
  static targets = ["input", "suggestions", "search"];

  connect() {
    document.addEventListener("click", (event) => {
      if (!this.element.contains(event.target)) {
        // this.hideSuggestions();
        // console.log("targett:", this.suggestionsTarget)
      }
    });
  }

  suggestions() {
    const query = this.inputTarget.value;
    const url = this.element.dataset.suggestionsUrl;

    clearTimeout(this.timeout);
    this.timeout = setTimeout(() => {
      this.requestSuggestions(query, url);
    }, 250);
  }

  requestSuggestions(query, url) {
    if (query.length === 0) {
      this.hideSuggestions();
      // return;
    }
    this.showSuggestions();

    fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-CSRF-Token": document.querySelector("meta[name='csrf-token']")
          .content,
      },
      body: JSON.stringify({ query: query }),
    }).then((response) => {
      response.text().then((html) => {
        document.body.insertAdjacentHTML("beforeend", html);
      });
    });
  }

  childClicked(event) {
    this.childWasClicked = this.element.contains(event.target);
  }

  showSuggestions() {
    this.suggestionsTarget.classList.remove("hidden");
  }

  hideSuggestions() {
    if (this.childWasClicked) {
      this.suggestionsTarget.classList.add("hidden");
    }
    this.childWasClicked = false;
  }

  search() {
    const hashtag = this.searchTarget.innerText.replace("#", "");
    const url = `/search?q=${hashtag}` 
    console.log(url);
    window.location.href = url
  }
}


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/show_churp_controller.js ===
import { Controller } from "@hotwired/stimulus"
// import debounce from 'lodash/debounce'

// Connects to data-controller="show_churp
export default class extends Controller {
  static values = { 
    url: String 
  }
  connect() {
    console.log("Connectting to data-controller='how-churp'");
  }

  showChurp() {
    console.log("show_churp");
    window.location.href = this.urlValue
  }
}


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/javascript/controllers/view_churps_controller.js ===
import { Controller } from "@hotwired/stimulus"
import consumer from "../channels/consumer"

// Connects to data-controller="view-churps"
export default class extends Controller {
  static targets = ['count'];
  connect() {

    let churpId = this.element.dataset.churpId;
    this.sub = this.showViewChurps(churpId, this.countTarget);
    // console.log("Element", this.element.InnerText = 1)
    // console.log("sub", this.sub);
  }

  showViewChurps(churpId, element) {
    return consumer.subscriptions.create(
      // room_#{params[:room_id]}_channel
      { channel: "ViewChurpsChannel", churp_id: churpId },
      {
        connected() {
          // Called when the subscription is ready for use on the server
          this.perform("churp_data");
        },

        disconnected() {
          // Called when the subscription has been terminated by the server
        },

        received(data) {
          // Called when there's incoming data on the websocket for this channel
          // console.log("controllerJS data", data);
          // this.element.innerHTML = data.churp.view_count

          // console.log("target", this.countTarget.innerText)
          element.innerHTML = data.churp.view_count;
          // element.style.color = 'red';

          // console.log("countTarget", element)


        },
      }
    );
  }
}

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/jobs/application_job.rb ===
# frozen_string_literal: true

class ApplicationJob < ActiveJob::Base
  # Automatically retry jobs that encountered a deadlock
  # retry_on ActiveRecord::Deadlocked

  # Most jobs are safe to ignore if the underlying records are no longer available
  # discard_on ActiveJob::DeserializationError
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/lib/churp_extractor/extractor.rb ===
# frozen_string_literal: true

module ChurpExtractor
  class Extractor
    require "English"
    attr_reader :text

    # Extracts a list of all usernames mentioned in the Tweet <tt>text</tt>. If the
    # <tt>text</tt> is <tt>nil</tt> or contains no username mentions an empty array
    # will be returned.
    def extract_mentioned_screen_names(text)
      extract_mentioned_screen_names_with_indices(text).pluck(:screen_name)
    end

    # Extracts a list of all usernames mentioned in the Tweet <tt>text</tt>
    # along with the indices for where the mention ocurred.  If the
    # <tt>text</tt> is nil or contains no username mentions, an empty array
    # will be returned.
    #
    # If a block is given, then it will be called with each username, the start
    # index, and the end index in the <tt>text</tt>.
    def extract_mentioned_screen_names_with_indices(text) # :yields: username, start, end
      return [] unless text

      possible_screen_names = []
      extract_mentions_or_lists_with_indices(text) do |screen_name, start_position, end_position|
        possible_screen_names << {
          screen_name:,
          indices: [start_position, end_position]
        }
      end

      possible_screen_names
    end

    # Extracts a list of all usernames or lists mentioned in the Tweet <tt>text</tt>
    # along with the indices for where the mention ocurred.  If the
    # <tt>text</tt> is nil or contains no username or list mentions, an empty array
    # will be returned.
    #
    # If a block is given, then it will be called with each username, list slug, the start
    # index, and the end index in the <tt>text</tt>. The list_slug will be an empty stirng
    # if this is a username mention.
    def extract_mentions_or_lists_with_indices(text) # :yields: username, list_slug, start, end
      return [] unless text.match?(ChurpExtractor::Regex[:at_signs])

      possible_entries = []
      text.scan(ChurpExtractor::Regex[:valid_mention_or_list]) do |_before, _at, screen_name, list_slug|
        match_data = $LAST_MATCH_INFO
        after = ::Regexp.last_match.post_match

        possible_entries << entries(match_data, after, screen_name, list_slug)
      end

      possible_entries.each { |m| yield m[:screen_name], m[:indices].first, m[:indices].last } if block_given?

      possible_entries
    end

    def entries(match_data, after, screen_name, list_slug)
      return unless after.match?(ChurpExtractor::Regex[:end_mention_match])

      start_position = match_data.begin(3) - 1
      end_position = match_data.end(list_slug.nil? ? 3 : 4)
      {
        screen_name:,
        indices: [start_position, end_position]
      }
    end

    def sanitize(string)
      sanitized_str = ActionView::Base.full_sanitizer.sanitize(string)
      sanitized_str.strip
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/lib/churp_extractor/regex.rb ===
module ChurpExtractor
  class Regex
    require "yaml"

    REGEXEN = begin
      regexen = {}

      # UNICODE_SPACES...
      UNICODE_SPACES = [
        (0x0009..0x000D).to_a,
        0x0020, 0x0085, 0x00A0, 0x1680, 0x180E,
        (0x2000..0x200A).to_a, 0x2028, 0x2029,
        0x202F, 0x205F, 0x3000
      ].flatten.map { |c| [c].pack("U*") }.freeze

      regexen[:spaces] = /[#{UNICODE_SPACES.join}]/o

      # Directionals...
      DIRECTIONAL_CHARACTERS = [
        0x061C, 0x200E, 0x200F, 0x202A, 0x202B, 0x202C,
        0x202D, 0x202E, 0x2066, 0x2067, 0x2068, 0x2069
      ].map { |cp| [cp].pack("U") }.freeze

      regexen[:directional_characters] = /[#{DIRECTIONAL_CHARACTERS.join}]/o

      regexen[:valid_mention_preceding_chars] = /(?:[^a-z0-9_!#$%&*@＠]|^|(?:^|[^a-z0-9_+~.-])[rR][tT]:?)/io
      regexen[:at_signs] = /[@＠]/

      regexen[:valid_mention_or_list] = %r{
        (#{regexen[:valid_mention_preceding_chars]})
        (#{regexen[:at_signs]})
        ([a-z0-9_]{1,20})
        (/[a-z][a-zA-Z0-9_-]{0,24})?
      }iox

      regexen[:valid_reply] = /
        ^
        (?:
          [#{UNICODE_SPACES.join} #Unicodewhtspar#{DIRECTIONAL_CHARACTERS.join}]
        )*
        #{regexen[:at_signs]}
        ([a-z0-9_]{1,20})
      /xio

      regexen[:end_mention_match] = %r{\A(?:#{regexen[:at_signs]}|://)}io
      regexen[:list_name] = /[a-z][a-z0-9_\-\u0080-\u00ff]{0,24}/i

      regexen.each_value(&:freeze)
      regexen.freeze
    end

    def self.[](key)
      REGEXEN[key]
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/application_record.rb ===
# frozen_string_literal: true

class ApplicationRecord < ActiveRecord::Base
  primary_abstract_class
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/churp.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: churps
#
#  id            :bigint           not null, primary key
#  body          :text
#  rechurp_count :integer          default(0)
#  created_at    :datetime         not null
#  updated_at    :datetime         not null
#  churp_id      :integer
#  user_id       :bigint           not null
#
# Indexes
#
#  index_churps_on_user_id  (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (user_id => users.id)
#
class Churp < ApplicationRecord
  belongs_to :user

  belongs_to :churp, optional: true, dependent: :destroy
  has_many :likes, as: :likeable, dependent: :destroy
  has_many :comments, dependent: :destroy
  # TODO: This is for the analytics feature on a churp.
  #       The logic for this needs to be rewitten into a model
  #       insead of a tracking pixel. (stupid idea)
  # has_many :views
  has_many :churp_hash_tags, dependent: :destroy
  has_many :hash_tags, through: :churp_hash_tags, dependent: :destroy
  has_many :notifications, as: :recipient, dependent: :destroy

  has_rich_text :content
  has_one_attached :churp_pic

  validates :churp_pic, acceptable_image: true
  validates :content, presence: true
  validates :content, churp_length: true

  after_create :create_hash_tags
  after_create :broadcast_churp
  after_commit :broadcast_notifications

  scope :search_hashtags, ->(query) { joins(:hash_tags).where(hash_tags: { name: query }) }

  def churp_type
    if churp_id? && content?
      "rechurp"
    else
      "churp"
    end
  end

  def create_hash_tags
    extract_name_hash_tags.each do |name|
      hash_tags.create(name:)
    end
  end

  def extract_name_hash_tags
    content.to_s.scan(/#\w+/).map { |name| name.delete("#") }
  end

  private

  def broadcast_churp
    ActionCable.server.broadcast("churps_channel", rendered_churp)
  end

  def rendered_churp
    ApplicationController.renderer.render(
      partial: "churps/churp",
      locals: { churp: self }
    )
  end

  def broadcast_notifications
    BroadcastNotificationsService.call(self)
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/churp_hash_tag.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: churp_hash_tags
#
#  id          :bigint           not null, primary key
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  churp_id    :bigint
#  hash_tag_id :bigint
#
# Indexes
#
#  index_churp_hash_tags_on_churp_id     (churp_id)
#  index_churp_hash_tags_on_hash_tag_id  (hash_tag_id)
#
class ChurpHashTag < ApplicationRecord
  belongs_to :churp
  belongs_to :hash_tag
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/comment.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: comments
#
#  id         :bigint           not null, primary key
#  content    :text             not null
#  created_at :datetime         not null
#  updated_at :datetime         not null
#  churp_id   :bigint           not null
#  user_id    :bigint           not null
#
# Indexes
#
#  index_comments_on_churp_id  (churp_id)
#  index_comments_on_user_id   (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (churp_id => churps.id)
#  fk_rails_...  (user_id => users.id)
#
class Comment < ApplicationRecord
  belongs_to :churp
  belongs_to :user

  validates :content, length: { minimum: 1, maximum: 500 }, allow_blank: false

  scope :recent_comments, -> { order("created_at DESC") }
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/hash_tag.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: hash_tags
#
#  id         :bigint           not null, primary key
#  name       :string
#  created_at :datetime         not null
#  updated_at :datetime         not null
#
class HashTag < ApplicationRecord
  include ActionText::Attachable
  # searchkick word_middle: [:name]

  has_many :churp_hash_tags, dependent: :restrict_with_exception
  has_many :churps, through: :churp_hash_tags

  scope :group_hashes, lambda {
    select(:name)
      .group(:name)
      .having("count(*) > 1").size
  }

  def self.top_three
    most_popular.to_h.sort_by { |_k, v| -v }[0..3]
  end

  def self.most_popular
    metrics ||= group_hashes
    metrics.sort_by { |_key, value| value }.reverse.to_h
  end

  private

  # after_commit :reindex_hashtags
  def reindex_hashtags
    # reindex
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/like.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: likes
#
#  id            :bigint           not null, primary key
#  likeable_type :string           not null
#  created_at    :datetime         not null
#  updated_at    :datetime         not null
#  likeable_id   :bigint           not null
#  user_id       :bigint           not null
#
# Indexes
#
#  index_likes_on_likeable  (likeable_type,likeable_id)
#  index_likes_on_user_id   (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (user_id => users.id)
#
class Like < ApplicationRecord
  belongs_to :user, dependent: :destroy
  belongs_to :likeable, polymorphic: true
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/notification.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: notifications
#
#  id             :bigint           not null, primary key
#  params         :jsonb
#  read_at        :datetime
#  recipient_type :string           not null
#  type           :string           not null
#  created_at     :datetime         not null
#  updated_at     :datetime         not null
#  recipient_id   :bigint           not null
#
# Indexes
#
#  index_notifications_on_read_at    (read_at)
#  index_notifications_on_recipient  (recipient_type,recipient_id)
#
class Notification < ApplicationRecord
  # include Noticed::Model
  belongs_to :recipient, polymorphic: true

  def unread_notifications
    notifications.unread
  end

  def unread_notifications_count
    unread_notifications.count
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/privacy_policy.rb ===
# frozen_string_literal: true

class PrivacyPolicy < ApplicationRecord
  DEFAULT_UPDATED_AT = DateTime.new(2023, 10, 25).freeze

  def self.updated_at
    DEFAULT_UPDATED_AT.utc
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/profile.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: profiles
#
#  id          :bigint           not null, primary key
#  birth_date  :datetime
#  description :text
#  first_name  :string
#  last_name   :string
#  theme       :integer          default(0)
#  theme_color :integer          default(0)
#  website     :string
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  user_id     :bigint           not null
#
# Indexes
#
#  index_profiles_on_user_id  (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (user_id => users.id)
#
class Profile < ApplicationRecord
  include ActionText::Attachable
  has_person_name
  searchkick word_middle: %i[first_name last_name]

  has_one_attached :profile_pic do |attachable|
    attachable.variant :thumb, resize_to_limit: [200, 200]
  end
  has_one_attached :profile_bg

  belongs_to :user

  validates :name, presence: true, length: { minimum: 3 }
  validates :description, length: { maximum: 300 }
  validates :website, length: { maximum: 255 }

  validates :profile_pic, acceptable_image: true
  validates :profile_bg, acceptable_image: true

  private

  after_commit :reindex_profiles
  def reindex_profiles
    reindex
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/relationship.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: relationships
#
#  id          :bigint           not null, primary key
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  followed_id :integer
#  follower_id :integer
#
# Indexes
#
#  index_relationships_on_followed_id                  (followed_id)
#  index_relationships_on_follower_id                  (follower_id)
#  index_relationships_on_follower_id_and_followed_id  (follower_id,followed_id) UNIQUE
#
class Relationship < ApplicationRecord
  belongs_to :follower, class_name: "User"
  belongs_to :followed, class_name: "User"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/terms_of_service.rb ===
# frozen_string_literal: true

class TermsOfService < ApplicationRecord
  DEFAULT_UPDATED_AT = DateTime.new(2023, 10, 25).freeze

  def self.updated_at
    DEFAULT_UPDATED_AT.utc
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/user.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: users
#
#  id                     :bigint           not null, primary key
#  confirmation_sent_at   :datetime
#  confirmation_token     :string
#  confirmed_at           :datetime
#  current_sign_in_at     :datetime
#  current_sign_in_ip     :string
#  display_name           :string
#  email                  :string           default(""), not null
#  encrypted_password     :string           default(""), not null
#  failed_attempts        :integer          default(0), not null
#  last_sign_in_at        :datetime
#  last_sign_in_ip        :string
#  locked_at              :datetime
#  remember_created_at    :datetime
#  reset_password_sent_at :datetime
#  reset_password_token   :string
#  role                   :integer
#  sign_in_count          :integer          default(0), not null
#  slug                   :string
#  unconfirmed_email      :string
#  unlock_token           :string
#  username               :string
#  created_at             :datetime         not null
#  updated_at             :datetime         not null
#
# Indexes
#
#  index_users_on_confirmation_token    (confirmation_token) UNIQUE
#  index_users_on_display_name          (display_name)
#  index_users_on_email                 (email) UNIQUE
#  index_users_on_reset_password_token  (reset_password_token) UNIQUE
#  index_users_on_slug                  (slug) UNIQUE
#  index_users_on_unlock_token          (unlock_token) UNIQUE
#  index_users_on_username              (username) UNIQUE
#
class User < ApplicationRecord
  include ActionText::Attachable
  extend FriendlyId
  friendly_id :username, use: :slugged
  has_person_name

  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
    :recoverable, :rememberable, :validatable

  has_many :churps, dependent: :destroy
  has_many :likes, dependent: :destroy
  has_many :comments, dependent: :destroy
  has_many :notifications, as: :recipient, dependent: :destroy

  has_many :active_relationships, dependent: :destroy,
    class_name: "Relationship",
    foreign_key: "follower_id"

  has_many :passive_relationships, dependent: :destroy,
    class_name: "Relationship",
    foreign_key: "followed_id"

  has_many :following, through: :active_relationships, source: :followed
  has_many :followers, through: :passive_relationships, source: :follower
  has_one :profile, dependent: :destroy

  searchkick highlight: [:username], word_middle: [:username]

  accepts_nested_attributes_for :profile

  validates :username, :email, :password, presence: true
  validates :username, uniqueness: true
  validates :email, uniqueness: true
  validate :password_complexity

  before_commit on: :create do
    self.username = "@#{username.downcase}" unless username.start_with?("@")
  end

  def normalize_friendly_id(value)
    value.to_s.downcase
  end

  # Follows a user.
  def follow(other_user)
    active_relationships.create(followed_id: other_user.id)
  end

  # Unfollows a user.
  def unfollow(other_user)
    active_relationships.find_by(followed_id: other_user.id).destroy
  end

  # Returns true if the current user is following the other user.
  def following?(other_user)
    following.include?(other_user)
  end

  def unread_notifications
    notifications.unread
  end

  private

  after_commit :reindex_users
  def reindex_users
    reindex
  end

  def password_complexity
    message = <<-TEXT.gsub(/\s+/, " ").strip
    Complexity requirement not met. Length should be 8-128 characters and
    include: 1 uppercase, 1 lowercase, 1 digit and 1 special character
    TEXT

    # Regexp extracted from https://stackoverflow.com/questions/19605150/regex-for-password-must-contain-at-least-eight-characters-at-least-one-number-a
    return if password.blank? || password =~ /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,70}$/

    errors.add :password, message
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/models/view.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: views
#
#  id         :bigint           not null, primary key
#  city       :string
#  ip_address :string
#  state      :string
#  user_agent :string
#  created_at :datetime         not null
#  updated_at :datetime         not null
#  churp_id   :bigint           not null
#  user_id    :bigint           not null
#
# Indexes
#
#  index_views_on_churp_id  (churp_id)
#  index_views_on_user_id   (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (churp_id => churps.id)
#  fk_rails_...  (user_id => users.id)
#
class View < ApplicationRecord
  belongs_to :user
  belongs_to :churp
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/notifications/mention_notification.rb ===
# frozen_string_literal: true

# To deliver this notification:
#
# MentionNotification.with(post: @post).deliver_later(current_user)
# MentionNotification.with(post: @post).deliver(current_user)

class MentionNotification < Noticed::Base
  deliver_by :database
  deliver_by :action_cable
  # Add your delivery methods
  #
  # deliver_by :database
  # deliver_by :email, mailer: "UserMailer"
  # deliver_by :slack
  # deliver_by :custom, class: "MyDeliveryMethod"

  # Define helper methods to make rendering easier.
  #
  def churp
    params[:message]
  end

  def creator
    churp.user
  end

  def mention
    churp.content
  end

  def url
    churp_path(params[:churp])
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/services/application_service.rb ===
# frozen_string_literal: true

class ApplicationService
  class Failure < StandardError; end

  class ServiceFailed < StandardError
    def initialize(msg = nil)
      super
    end
  end

  include ActiveModel::Validations

  attr_reader :result, :success
  alias_method :success?, :success

  # Class method to create an instance of the service and call its `call` method.
  #
  # @param args [Array] Arguments passed to the service's initializer.
  # @return [Utils::Result] The result of the service call.
  def self.call(*, &)
    new(*, &).call
  end

  # Class method to create an instance of the service, call its `call` method, and raise an exception if the service fails.
  #
  # @param args [Array] Arguments passed to the service's initializer.
  # @return [Utils::Result] The result of the service call if successful.
  # @raise [ServiceFailed] If the service encounters errors.
  def self.call!(**args)
    response = new(**args).call
    if response.success?
      response
    else
      error_message = Array(response.error).join(", ")
      raise ServiceFailed, error_message
    end
  end

  def call
    if errors.empty? && valid?
      @result = execute!
      @success = errors.none?
    else
      @success = false
    end

    self
  rescue Failure
    self
  end

  private

  def execute!
    raise NotImplementedError
  end

  def fail!
    @success = false
    raise Failure
  end

  def log_error(message)
    Rails.logger.error(message)
  end

  def map_errors(result_error_object:, current_error:)
    current_error.each_key do |error_key|
      result_error_object.add(error_key, current_error[error_key].to_sentence)
    end
    result_error_object
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/services/broadcast_notifications_service.rb ===
# frozen_string_literal: true

class BroadcastNotificationsService < ApplicationService
  include ActionView::RecordIdentifier

  attr_reader :churp

  def initialize(churp)
    @churp = churp
  end

  def execute!
    usernames = extract_usernames(text)
    return false unless usernames

    send_notifications(usernames)
  end

  private

  def extract_usernames(text)
    usernames = ChurpExtractor::Extractor.new.extract_mentioned_screen_names(text)

    usernames&.detect { |username| usernames.count(username) >= 1 }&.split
  end

  def send_notifications(usernames)
    usernames.each do |username|
      user = User.friendly.find(username)
      MentionNotification.with(message: churp).deliver_later(user)
      broadcast(user)
    end
  end

  def broadcast(user)
    count = user.unread_notifications.count
    Turbo::StreamsChannel.broadcast_update_later_to "notifications_count_#{user.id}",
      target: "notifications_count_#{user.id}",
      partial: "mentions/notification_count",
      locals: { user:, count: }
  end

  def text
    churp.content.body.to_s
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/services/churp_wrapper_service.rb ===
# frozen_string_literal: true

class ChurpWrapperService < ApplicationService
  URL_PATTERN = %r{((https?|ftp|file)://)?([\da-z.-]+)\.([a-z.]{2,6})([/\w .-]*)*/?}

  attr_reader :content

  def initialize(content)
    @content = content
  end

  def execute!
    link_wrapper
  end

  private

  def link_wrapper
    text = content_to_s(content)

    href_wrapper(hashtag_wrapper(text)).html_safe
  end

  def href_wrapper(text)
    text.strip.gsub(URL_PATTERN, html_wrapper(search: false))
  end

  def hashtag_wrapper(text)
    text.gsub(/#\w+/, html_wrapper(search: true))
  end

  def html_wrapper(search: false)
    search_str = search ? '/search?q=\\0 ' : '\\0 '

    "<a href=#{search_str} class='hover:underline' rel='noopener noreferrer nofollow' target='_blank'>\\0</a>"
  end

  def shorten_url(url)
    URI(url).host
  end

  def content_to_s(content)
    content.body.to_s
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/services/mentions_query_service.rb ===
# frozen_string_literal: true

class MentionsQueryService < ApplicationService
  SEARCH_MODELS = %w[HashTag User Profile].freeze
  LIMIT = 10

  attr_accessor :query

  def initialize(query)
    @query = query
  end

  def execute!
    mentions ||= multi_search
    if mentions.all?(&:empty?)
      errors.add(:base, "query is empty")
    else
      mentions
    end
  end

  private

  def multi_search
    return [] if query.blank?

    search_array = SEARCH_MODELS.map do |model|
      mention_query(model)
    end

    Searchkick.multi_search(search_array)
  end

  def mention_query(model)
    model.safe_constantize.search(query, fields: fields(model),
      match:,
      limit:)
  end

  def boost_by_recency
    {
      created_at: {
        scale: "7d",
        decay: 0.5
      }
    }
  end

  def match
    :word_middle
  end

  def fields(model)
    case model.downcase.to_sym
    when :user
      %i[username]
    when :profile
      %i[first_name last_name]
    when :hashtag
      %i[name]
    else
      []
    end
  end

  def limit
    LIMIT
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/validators/acceptable_image_validator.rb ===
# frozen_string_literal: true

class AcceptableImageValidator < ActiveModel::EachValidator
  def validate_each(record, attribute, value)
    return unless value.attached?

    return record.errors.add(attribute, "File is too big") unless
      value.blob.byte_size <= 10.megabyte

    acceptable_types = ["image/jpeg", "image/jpg", "image/png"]

    record.errors.add(attribute, "File must be a JPEG, JPG or PNG") unless
      acceptable_types.include?(value.content_type)
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/validators/churp_length_validator.rb ===
# frozen_string_literal: true

class ChurpLengthValidator < ActiveModel::EachValidator
  MAX_CHARS = 331

  def validate_each(record, attribute, _value)
    # return unless record.content.body.empty?

    record.errors.add(attribute, I18n.t("churps.under_character_limit", min: 1)) if too_short?(record)
    record.errors.add(attribute, I18n.t("churps.over_character_limit", max: MAX_CHARS)) if too_long?(record)
  end

  private

  def too_short?(record)
    ChurpExtractor::Extractor.new.sanitize(record.content.body.to_s).length <= 0
  end

  def too_long?(record)
    ChurpExtractor::Extractor.new.sanitize(record.content.body.to_s).length > MAX_CHARS
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/active_storage/blobs/_blob.html.erb ===
<figure class="attachment attachment--<%= blob.representable? ? "preview" : "file" %> attachment--<%= blob.filename.extension %>">
  <% if blob.representable? %>
    <%= image_tag blob.representation(resize_to_limit: local_assigns[:in_gallery] ? [ 800, 600 ] : [ 1024, 768 ]) %>
  <% end %>

  <figcaption class="attachment__caption">
    <% if caption = blob.try(:caption) %>
      <%= caption %>
    <% else %>
      <span class="attachment__name"><%= blob.filename %></span>
      <span class="attachment__size"><%= number_to_human_size blob.byte_size %></span>
    <% end %>
  </figcaption>
</figure>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/_churp.html.erb ===
  <div 
    data-controller="show-churp"
    data-show-churp-url-value="<%= show_churp_path(churp.user, churp) %>"
    class="z-0 churp-block border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-[#16232E] cursor-pointer transition duration-350 ease-in-out pb-4 border-l border-r">
    <!-- link -->
    <%= render 'churps/shared/user_link', churp: churp %>

    <div class="pl-16 pr-12">

      <p
        data-action="click->show-churp#showChurp" 
        class="curp-content my-4 text-base width-auto font-medium text-gray-800 dark:text-white flex-shrink">
        <%= link_wrapper(churp.content) %>
      </p>

      <% if churp.churp_pic.attached? &&
            churp.churp_pic.attachment.blob.present? &&
            churp.churp_pic.attachment.blob.persisted?  %>
        <img class="rounded-2xl" src=<%= url_for(churp.churp_pic) %>/>
      <% end %>

        <div class="flex items-center justify-center">

          <%# Comments %>
          <%= render 'churps/shared/comments', churp: churp %>

          <%# Rechurp %>
          <%= render 'churps/shared/rechurp_button', churp: churp %>

          <%= render 'churps/shared/likes', churp: churp %>

          <%# Number of views %>
          <%= render 'churps/shared/analytics', churp: churp %>

          <%# Share %>
          <%= render 'churps/shared/share' %>

        </div>

    </div>
  </div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/_new_churp.html.erb ===
<%= form_with(model: Churp.new, local: true) do |f| %>
  <div class="border-b border-gray-200 dark:border-dim-200 pb-0 border-l border-r">
    <div class="flex flex-shrink-0 p-4 pb-0">
      <div class="w-12 flex items-top">
        <%= image_tag(avatar_pic(current_user.profile),
              class: 'inline-block h-10 w-10 rounded-full') %>
      </div>
      <div class="w-full p-2">
        <div id="blank-toolbar" hidden></div>
        <%# <trix-editor toolbar="blank-toolbar" style=""></trix-editor> %>

        <%= f.rich_text_area :content,
                             data: {
                                     controller: "mentions",
                                     mentions_target: "field",
                                   },
                            class: "newChurpText",
                            placeholder: "What's happening?",
                            label: false %>
      </div>
    </div>

    <div class="w-full flex items-top p-2 text-white pl-14 mb-2">
      <%# picture upload  %>
      <%= f.label :churp_pic, class: 'text-vividSkyBlue hover:bg-cyan-600 dark:hover:bg-dim-800 rounded-full p-2', title: 'pic' do %>
        <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
          <g>
            <path d="M19.75 2H4.25C3.01 2 2 3.01 2 4.25v15.5C2 20.99 3.01 22 4.25 22h15.5c1.24 0 2.25-1.01 2.25-2.25V4.25C22 3.01 20.99 2 19.75 2zM4.25 3.5h15.5c.413 0 .75.337.75.75v9.676l-3.858-3.858c-.14-.14-.33-.22-.53-.22h-.003c-.2 0-.393.08-.532.224l-4.317 4.384-1.813-1.806c-.14-.14-.33-.22-.53-.22-.193-.03-.395.08-.535.227L3.5 17.642V4.25c0-.413.337-.75.75-.75zm-.744 16.28l5.418-5.534 6.282 6.254H4.25c-.402 0-.727-.322-.744-.72zm16.244.72h-2.42l-5.007-4.987 3.792-3.85 4.385 4.384v3.703c0 .413-.337.75-.75.75z"></path>
            <circle cx="8.868" cy="8.309" r="1.542"></circle>
          </g>
        </svg>
        <%#= f.file_field :churp_pic, as: :file, label: false, input_html: { style: "display: none" }%>
      <% end %>

      <%# attach gif %>
      <a href="#" class="text-vividSkyBlue hover:bg-cyan-600 dark:hover:bg-dim-800 rounded-full p-2" title="gif">
        <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
          <g>
            <path d="M19 10.5V8.8h-4.4v6.4h1.7v-2h2v-1.7h-2v-1H19zm-7.3-1.7h1.7v6.4h-1.7V8.8zm-3.6 1.6c.4 0 .9.2 1.2.5l1.2-1C9.9 9.2 9 8.8 8.1 8.8c-1.8 0-3.2 1.4-3.2 3.2s1.4 3.2 3.2 3.2c1 0 1.8-.4 2.4-1.1v-2.5H7.7v1.2h1.2v.6c-.2.1-.5.2-.8.2-.9 0-1.6-.7-1.6-1.6 0-.8.7-1.6 1.6-1.6z"></path>
            <path d="M20.5 2.02h-17c-1.24 0-2.25 1.007-2.25 2.247v15.507c0 1.238 1.01 2.246 2.25 2.246h17c1.24 0 2.25-1.008 2.25-2.246V4.267c0-1.24-1.01-2.247-2.25-2.247zm.75 17.754c0 .41-.336.746-.75.746h-17c-.414 0-.75-.336-.75-.746V4.267c0-.412.336-.747.75-.747h17c.414 0 .75.335.75.747v15.507z"></path>
          </g>
        </svg>
      </a>

      <%# polls ?
        #
        # TODO: we will get back to this later
        #
        <a href="#" class="text-vividSkyBlue hover:bg-cyan-600 dark:hover:bg-dim-800 rounded-full p-2">
          <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
            <g>
              <path d="M20.222 9.16h-1.334c.015-.09.028-.182.028-.277V6.57c0-.98-.797-1.777-1.778-1.777H3.5V3.358c0-.414-.336-.75-.75-.75s-.75.336-.75.75V20.83c0 .415.336.75.75.75s.75-.335.75-.75v-1.434h10.556c.98 0 1.778-.797 1.778-1.777v-2.313c0-.095-.014-.187-.028-.278h4.417c.98 0 1.778-.798 1.778-1.778v-2.31c0-.983-.797-1.78-1.778-1.78zM17.14 6.293c.152 0 .277.124.277.277v2.31c0 .154-.125.28-.278.28H3.5V6.29h13.64zm-2.807 9.014v2.312c0 .153-.125.277-.278.277H3.5v-2.868h10.556c.153 0 .277.126.277.28zM20.5 13.25c0 .153-.125.277-.278.277H3.5V10.66h16.722c.153 0 .278.124.278.277v2.313z"></path>
            </g>
          </svg>
        </a>
      %>

      <%# emoji-picker %>
      <div class="relative">
        <%= content_tag(:div, "", class:"pickerContainer absolute h-16", data: {
            emoji_picker_target: "pickerContainer"
          }) %>
        <%= button_tag(
          type: 'button',
          id: "emoji-picker",
          data: { trix_action: "popupPicker" },
          class: "trix-button text-vividSkyBlue hover:bg-cyan-600 dark:hover:bg-dim-800 rounded-full p-2",
          title: "emoji",
          tabindex: "1") do %>
          <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
            <g>
              <path d="M12 22.75C6.072 22.75 1.25 17.928 1.25 12S6.072 1.25 12 1.25 22.75 6.072 22.75 12 17.928 22.75 12 22.75zm0-20C6.9 2.75 2.75 6.9 2.75 12S6.9 21.25 12 21.25s9.25-4.15 9.25-9.25S17.1 2.75 12 2.75z"></path>
              <path d="M12 17.115c-1.892 0-3.633-.95-4.656-2.544-.224-.348-.123-.81.226-1.035.348-.226.812-.124 1.036.226.747 1.162 2.016 1.855 3.395 1.855s2.648-.693 3.396-1.854c.224-.35.688-.45 1.036-.225.35.224.45.688.226 1.036-1.025 1.594-2.766 2.545-4.658 2.545z"></path>
              <circle cx="14.738" cy="9.458" r="1.478"></circle>
              <circle cx="9.262" cy="9.458" r="1.478"></circle>
            </g>
          </svg>
        <% end %>
      </div>

      <%# schedule churps ?
        #
        # TODO: we will get back to this later
        #
        <a href="#" class="text-vividSkyBlue hover:bg-cyan-600 dark:hover:bg-dim-800 rounded-full p-2">
          <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
            <g>
              <path d="M-37.9 18c-.1-.1-.1-.1-.1-.2.1 0 .1.1.1.2z"></path>
              <path d="M-37.9 18c-.1-.1-.1-.1-.1-.2.1 0 .1.1.1.2zM18 2.2h-1.3v-.3c0-.4-.3-.8-.8-.8-.4 0-.8.3-.8.8v.3H7.7v-.3c0-.4-.3-.8-.8-.8-.4 0-.8.3-.8.8v.3H4.8c-1.4 0-2.5 1.1-2.5 2.5v13.1c0 1.4 1.1 2.5 2.5 2.5h2.9c.4 0 .8-.3.8-.8 0-.4-.3-.8-.8-.8H4.8c-.6 0-1-.5-1-1V7.9c0-.3.4-.7 1-.7H18c.6 0 1 .4 1 .7v1.8c0 .4.3.8.8.8.4 0 .8-.3.8-.8v-5c-.1-1.4-1.2-2.5-2.6-2.5zm1 3.7c-.3-.1-.7-.2-1-.2H4.8c-.4 0-.7.1-1 .2V4.7c0-.6.5-1 1-1h1.3v.5c0 .4.3.8.8.8.4 0 .8-.3.8-.8v-.5h7.5v.5c0 .4.3.8.8.8.4 0 .8-.3.8-.8v-.5H18c.6 0 1 .5 1 1v1.2z"></path>
              <path d="M15.5 10.4c-3.4 0-6.2 2.8-6.2 6.2 0 3.4 2.8 6.2 6.2 6.2 3.4 0 6.2-2.8 6.2-6.2 0-3.4-2.8-6.2-6.2-6.2zm0 11c-2.6 0-4.7-2.1-4.7-4.7s2.1-4.7 4.7-4.7 4.7 2.1 4.7 4.7c0 2.5-2.1 4.7-4.7 4.7z"></path>
              <path d="M18.9 18.7c-.1.2-.4.4-.6.4-.1 0-.3 0-.4-.1l-3.1-2v-3c0-.4.3-.8.8-.8.4 0 .8.3.8.8v2.2l2.4 1.5c.2.2.3.6.1 1z"></path>
            </g>
          </svg>
        </a>
      %>

      <%= f.button :submit, value: "churp", class: "bg-vividSkyBlue hover:bg-cyan-600 text-white rounded-full py-1 px-4 ml-auto mr-1" %>

    </div>
  </div>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/_notify_new_churps.html.erb ===
<div data-broadcast-churps-target="notificationParent" hidden>
  <div class=" border-gray-200 dark:border-dim-200 py-2 border-b border-l border-r hover:bg-gray-50 dark:hover:bg-dim-300 cursor-pointer">
    <div class="flex flex-shrink-0 items-center justify-center py-4 bg-white dark:bg-dim-900 border-gray-200 dark:border-dim-200 hover:bg-gray-50 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out text-blue-400 text-sm">
      <button
        data-broadcast-churps-target="notification"
        data-action="click->broadcast-churps#loadNewChurps"></button>
    </div>
  </div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/_post_comment.html.erb ===
<!-- Post comment -->
<%= simple_form_for(:comment, url: churp_comments_path(churp), method: :post) do |f| %>
<div class="border-b border-gray-200 dark:border-dim-200 pb-4 border-l border-r">
  <div class="flex flex-shrink-0 p-4 pb-0">
    <div class="w-12 flex items-top">
      <%= image_tag(avatar_pic(current_user.profile), 
            class: 'inline-block h-10 w-10 rounded-full') %>
    </div>
    <div class="w-full p-2">
      <%= f.input :content,
                  input_html: {rows: 4, class: "dark:text-white text-gray-900 placeholder-gray-400 w-full bg-transparent border-0 focus:outline-none focus:ring-vividSkyBlue resize-none"},
                  placeholder: "Post your reply",
                  label: false %>
    </div>
  </div>

  <div class="w-full flex items-top p-2 text-white pl-14">
    <%# file upload  %>
    <%= f.label :churp_pic,class: 'text-vividSkyBlue hover:text-vividSkyBlue dark:hover:bg-dim-800 rounded-full p-2' do %>
      <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
        <g>
          <path d="M19.75 2H4.25C3.01 2 2 3.01 2 4.25v15.5C2 20.99 3.01 22 4.25 22h15.5c1.24 0 2.25-1.01 2.25-2.25V4.25C22 3.01 20.99 2 19.75 2zM4.25 3.5h15.5c.413 0 .75.337.75.75v9.676l-3.858-3.858c-.14-.14-.33-.22-.53-.22h-.003c-.2 0-.393.08-.532.224l-4.317 4.384-1.813-1.806c-.14-.14-.33-.22-.53-.22-.193-.03-.395.08-.535.227L3.5 17.642V4.25c0-.413.337-.75.75-.75zm-.744 16.28l5.418-5.534 6.282 6.254H4.25c-.402 0-.727-.322-.744-.72zm16.244.72h-2.42l-5.007-4.987 3.792-3.85 4.385 4.384v3.703c0 .413-.337.75-.75.75z"></path>
          <circle cx="8.868" cy="8.309" r="1.542"></circle>
        </g>
      </svg>
      <%= f.input :churp_pic, as: :file, label: false, input_html: { style: "display: none" }%>
    <% end %>

    <a href="#" class="text-vividSkyBlue hover:bg-blue-50 dark:hover:bg-dim-800 rounded-full p-2">
      <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
        <g>
          <path d="M19 10.5V8.8h-4.4v6.4h1.7v-2h2v-1.7h-2v-1H19zm-7.3-1.7h1.7v6.4h-1.7V8.8zm-3.6 1.6c.4 0 .9.2 1.2.5l1.2-1C9.9 9.2 9 8.8 8.1 8.8c-1.8 0-3.2 1.4-3.2 3.2s1.4 3.2 3.2 3.2c1 0 1.8-.4 2.4-1.1v-2.5H7.7v1.2h1.2v.6c-.2.1-.5.2-.8.2-.9 0-1.6-.7-1.6-1.6 0-.8.7-1.6 1.6-1.6z"></path>
          <path d="M20.5 2.02h-17c-1.24 0-2.25 1.007-2.25 2.247v15.507c0 1.238 1.01 2.246 2.25 2.246h17c1.24 0 2.25-1.008 2.25-2.246V4.267c0-1.24-1.01-2.247-2.25-2.247zm.75 17.754c0 .41-.336.746-.75.746h-17c-.414 0-.75-.336-.75-.746V4.267c0-.412.336-.747.75-.747h17c.414 0 .75.335.75.747v15.507z"></path>
        </g>
      </svg>
    </a>

    <a href="#" class="text-vividSkyBlue hover:bg-blue-50 dark:hover:bg-dim-800 rounded-full p-2">
      <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
        <g>
          <path d="M20.222 9.16h-1.334c.015-.09.028-.182.028-.277V6.57c0-.98-.797-1.777-1.778-1.777H3.5V3.358c0-.414-.336-.75-.75-.75s-.75.336-.75.75V20.83c0 .415.336.75.75.75s.75-.335.75-.75v-1.434h10.556c.98 0 1.778-.797 1.778-1.777v-2.313c0-.095-.014-.187-.028-.278h4.417c.98 0 1.778-.798 1.778-1.778v-2.31c0-.983-.797-1.78-1.778-1.78zM17.14 6.293c.152 0 .277.124.277.277v2.31c0 .154-.125.28-.278.28H3.5V6.29h13.64zm-2.807 9.014v2.312c0 .153-.125.277-.278.277H3.5v-2.868h10.556c.153 0 .277.126.277.28zM20.5 13.25c0 .153-.125.277-.278.277H3.5V10.66h16.722c.153 0 .278.124.278.277v2.313z"></path>
        </g>
      </svg>
    </a>

    <a href="#" class="text-vividSkyBlue hover:bg-blue-50 dark:hover:bg-dim-800 rounded-full p-2">
      <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
        <g>
          <path d="M12 22.75C6.072 22.75 1.25 17.928 1.25 12S6.072 1.25 12 1.25 22.75 6.072 22.75 12 17.928 22.75 12 22.75zm0-20C6.9 2.75 2.75 6.9 2.75 12S6.9 21.25 12 21.25s9.25-4.15 9.25-9.25S17.1 2.75 12 2.75z"></path>
          <path d="M12 17.115c-1.892 0-3.633-.95-4.656-2.544-.224-.348-.123-.81.226-1.035.348-.226.812-.124 1.036.226.747 1.162 2.016 1.855 3.395 1.855s2.648-.693 3.396-1.854c.224-.35.688-.45 1.036-.225.35.224.45.688.226 1.036-1.025 1.594-2.766 2.545-4.658 2.545z"></path>
          <circle cx="14.738" cy="9.458" r="1.478"></circle>
          <circle cx="9.262" cy="9.458" r="1.478"></circle>
        </g>
      </svg>
    </a>

    <a href="#" class="text-vividSkyBlue  hover:bg-blue-50 dark:hover:bg-dim-800 rounded-full p-2">
      <svg viewBox="0 0 24 24" class="w-5 h-5" fill="currentColor">
        <g>
          <path d="M-37.9 18c-.1-.1-.1-.1-.1-.2.1 0 .1.1.1.2z"></path>
          <path d="M-37.9 18c-.1-.1-.1-.1-.1-.2.1 0 .1.1.1.2zM18 2.2h-1.3v-.3c0-.4-.3-.8-.8-.8-.4 0-.8.3-.8.8v.3H7.7v-.3c0-.4-.3-.8-.8-.8-.4 0-.8.3-.8.8v.3H4.8c-1.4 0-2.5 1.1-2.5 2.5v13.1c0 1.4 1.1 2.5 2.5 2.5h2.9c.4 0 .8-.3.8-.8 0-.4-.3-.8-.8-.8H4.8c-.6 0-1-.5-1-1V7.9c0-.3.4-.7 1-.7H18c.6 0 1 .4 1 .7v1.8c0 .4.3.8.8.8.4 0 .8-.3.8-.8v-5c-.1-1.4-1.2-2.5-2.6-2.5zm1 3.7c-.3-.1-.7-.2-1-.2H4.8c-.4 0-.7.1-1 .2V4.7c0-.6.5-1 1-1h1.3v.5c0 .4.3.8.8.8.4 0 .8-.3.8-.8v-.5h7.5v.5c0 .4.3.8.8.8.4 0 .8-.3.8-.8v-.5H18c.6 0 1 .5 1 1v1.2z"></path>
          <path d="M15.5 10.4c-3.4 0-6.2 2.8-6.2 6.2 0 3.4 2.8 6.2 6.2 6.2 3.4 0 6.2-2.8 6.2-6.2 0-3.4-2.8-6.2-6.2-6.2zm0 11c-2.6 0-4.7-2.1-4.7-4.7s2.1-4.7 4.7-4.7 4.7 2.1 4.7 4.7c0 2.5-2.1 4.7-4.7 4.7z"></path>
          <path d="M18.9 18.7c-.1.2-.4.4-.6.4-.1 0-.3 0-.4-.1l-3.1-2v-3c0-.4.3-.8.8-.8.4 0 .8.3.8.8v2.2l2.4 1.5c.2.2.3.6.1 1z"></path>
        </g>
      </svg>
    </a>
    <%= f.button :submit, value: "Reply", class: "bg-vividSkyBlue hover:bg-cyan-600 text-white rounded-full py-1 px-4 ml-auto mr-1" %>
    
  </div>
</div>
<% end %>
<!-- /Post Comment -->

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/_rechurp.html.erb ===
  <div 
    id="<%= dom_id churp %>"
    data-controller="show_churp"
    data-show_churp-url-value="<%= show_churp_path(churp.user, churp) %>"
    class="z-0 churp-block border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out pb-4 border-l border-r">
    <div class="flex items-center mb-3 space-x-2 p-2 text-gray-800 dark:text-white">
      <svg viewBox="0 0 24 24" aria-hidden="true" class="w-4 h-4 fill-current">
        <g>
          <path d="M23.77 15.67c-.292-.293-.767-.293-1.06 0l-2.22 2.22V7.65c0-2.068-1.683-3.75-3.75-3.75h-5.85c-.414 0-.75.336-.75.75s.336.75.75.75h5.85c1.24 0 2.25 1.01 2.25 2.25v10.24l-2.22-2.22c-.293-.293-.768-.293-1.06 0s-.294.768 0 1.06l3.5 3.5c.145.147.337.22.53.22s.383-.072.53-.22l3.5-3.5c.294-.292.294-.767 0-1.06zm-10.66 3.28H7.26c-1.24 0-2.25-1.01-2.25-2.25V6.46l2.22 2.22c.148.147.34.22.532.22s.384-.073.53-.22c.293-.293.293-.768 0-1.06l-3.5-3.5c-.293-.294-.768-.294-1.06 0l-3.5 3.5c-.294.292-.294.767 0 1.06s.767.293 1.06 0l2.22-2.22V16.7c0 2.068 1.683 3.75 3.75 3.75h5.85c.414 0 .75-.336.75-.75s-.337-.75-.75-.75z"></path>
        </g>
      </svg>
      <p class="text-sm font-medium">Rechurped by 
        <%= link_to profile_path(churp.user), class: 'hover:underline' do %>
          <%= churp.user.username %>
        <% end %>
      </p>
    </div>
    <!-- link -->
    <%= render 'churps/shared/user_link', churp: churp %>

    <div class="pl-16">

      <p
        data-action="click->show_churp#show" 
        class="my-8 text-base width-auto font-medium text-gray-800 dark:text-white flex-shrink">
        <%= churp.content %>
      </p>

      <% if churp.churp_pic.attached? %>
        <img class="rounded-2xl" src=<%= url_for(churp.churp_pic) %>/>
      <% end %>

        <div class="z-0 flex items-center justify-center">

          <%# Comments %>
          <%= render 'churps/shared/comments', churp: churp %>

          <%# Rechurp %>
          <%= render 'churps/shared/rechurp_button', churp: churp %>

          <%= render 'churps/shared/likes', churp: churp %>

          <%# Share %>
          <%= render 'churps/shared/share' %>

        </div>

    </div>

  </div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/_show_churp.html.erb ===
  <div class="z-0 churp-block border-b border-gray-200 dark:border-dim-200 pb-4 border-l border-r">
    <!-- link -->
    <%= render 'churps/shared/user_link', churp: churp %>

    <div class="pl-16">

      <p class="my-8 text-base width-auto font-medium text-gray-800 dark:text-white flex-shrink">
        <%= churp.content %>
      </p>

      <% if churp.churp_pic.attached? %>
        <img class="rounded-2xl" src=<%= url_for(churp.churp_pic) %>/>
      <% end %>

      <%= render 'churps/shared/share_icons', churp: churp %>

    </div>

    <%= image_tag "/assets/view_pixel.png?user=#{current_user.slug}&churp=#{churp.id}" %>
  </div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/_timeline_notication.html.erb ===
<div lass="border-b border-gray-200 dark:border-dim-200 bg-gray-50 dark:bg-dim-300 py-2 border-l border-r">
  <div class="flex flex-col items-center justify-center text-center p-6 bg-white dark:bg-dim-900 border-b border-t border-gray-200 dark:border-dim-200 hover:bg-gray-50 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out text-blue-400 text-sm">
    <h1 class="dark:text-white text-gray-900 text-2xl font-bold mb-2">
      Customize your view
    </h1>
    <p class="text-gray-500 mb-5">
      Manage your font size, color and background. These settings
      affect all the Twitter accounts on this browser.
    </p>
    <a href="javascript:void(0)" onclick="document.querySelector('html').classList.toggle('dark')" class="mx-auto w-11 h-11 xl:w-48 flex items-center justify-center bg-blue-400 hover:bg-blue-500 py-3 rounded-full text-white font-bold font-sm transition duration-350 ease-in-out">
      <svg fill="currentColor" viewBox="0 0 24 24" class="block xl:hidden h-6 w-6">
        <g>
          <path d="M15.692 11.205l6.383-7.216c.45-.45.45-1.18 0-1.628-.45-.45-1.178-.45-1.627 0l-7.232 6.402s.782.106 1.595.93c.548.558.882 1.51.882 1.51z"></path>
          <path d="M17.45 22.28H3.673c-1.148 0-2.083-.946-2.083-2.11V7.926c0-1.165.934-2.112 2.082-2.112h5.836c.414 0 .75.336.75.75s-.336.75-.75.75H3.672c-.32 0-.583.274-.583.612V20.17c0 .336.26.61.582.61h13.78c.32 0 .583-.273.583-.61v-6.28c0-.415.336-.75.75-.75s.75.335.75.75v6.28c0 1.163-.934 2.11-2.084 2.11z"></path>
        </g>
      </svg>
      <span class="hidden xl:block font-bold text-md">Toggle Dark Mode</span>
    </a>
  </div>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/index.html.erb ===
<div class="w-full sm:w-600 h-screen scrollbar-hide">
  
  <%= render 'shared/header',
              view: nil,
              name: 'Home',
              followers: nil,
              following: nil,
              is_active: nil %>

  <%= render 'new_churp', churp: @churp %>

  <div data-controller="broadcast-churps" class="border-l border-r border-gray-200 dark:border-dim-200">
    <%= render 'notify_new_churps' %>
    <div data-broadcast-churps-target="container">
      <% @churps.each do |c| %>
        <%= render partial: "churps/#{c.churp_type}", locals: { churp: c } %>
      <% end %>
    </div>
  </div>
    <%= render 'churps/shared/next_page' %>

    <%= render 'timeline_notication' %>

</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/rechurp.turbo_stream.erb ===
<%= turbo_stream.prepend "churps" do %>
  <%= render "churp/rechurp", churp: @churp %>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/scrollable_list.html.erb ===
<%= turbo_frame_tag "churps-page-#{@pagy.page}" do %>
  <%= render partial: "churp", collection: @churps %>
  <%= render partial: "churps/shared/next_page" %>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/shared/_analytics.html.erb ===
<div class="flex-1 flex items-center dark:text-white text-xs text-gray-400 hover:text-red-600 dark:hover:text-red-600 transition duration-350 ease-in-out">
  
  <%= turbo_frame_tag "churp"  do %>
      <div class="flex flex-row items-center">
        <svg width="24px" height="24px" viewBox="0 0 24 24" fill="currentColor" class="fill-white">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M5.5 18C5.5 17.7239 5.72386 17.5 6 17.5H18C18.2761 17.5 18.5 17.7239 18.5 18C18.5 18.2761 18.2761 18.5 18 18.5H6C5.72386 18.5 5.5 18.2761 5.5 18Z" fill="#fff"/>
          <rect x="6.5" y="11.5" width="3" height="7" rx="0.5" fill="#fff"/>
          <rect x="10.5" y="5.5" width="3" height="13" rx="0.5" fill="#fff"/>
          <rect x="14.5" y="8.5" width="3" height="10" rx="0.5" fill="#fff"/>
        </svg>
          <div id="<%= dom_id churp %>">
            <%= content_tag(:div, "", data: {
                controller: "",
                churp_id: churp.id,
                churp_id_value: churp.id,
                view_churps_target: 'count'
            }) %>
            <%#= turbo_stream_from churp, :analytics, channel: ViewChurpsChannel %>
          </div>
      </div>
  <% end %>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/shared/_comments.html.erb ===
<div class="flex-1 flex items-center dark:text-white text-xs text-gray-400 hover:text-vividSkyBlueblue dark:hover:text-vividSkyBlue transition duration-350 ease-in-out">
  <svg viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mr-2">
    <g>
      <path d="M14.046 2.242l-4.148-.01h-.002c-4.374 0-7.8 3.427-7.8 7.802 0 4.098 3.186 7.206 7.465 7.37v3.828c0 .108.044.286.12.403.142.225.384.347.632.347.138 0 .277-.038.402-.118.264-.168 6.473-4.14 8.088-5.506 1.902-1.61 3.04-3.97 3.043-6.312v-.017c-.006-4.367-3.43-7.787-7.8-7.788zm3.787 12.972c-1.134.96-4.862 3.405-6.772 4.643V16.67c0-.414-.335-.75-.75-.75h-.396c-3.66 0-6.318-2.476-6.318-5.886 0-3.534 2.768-6.302 6.3-6.302l4.147.01h.002c3.532 0 6.3 2.766 6.302 6.296-.003 1.91-.942 3.844-2.514 5.176z"></path>
    </g>
  </svg>
  <%= number_to_human(churp.comments.count, 
      precision: 1,
      round_mode: :down,
      significant: false,
      format: '%n%u',
      units: { thousand: 'K', million: 'M', billion: 'B' }) %>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/shared/_likes.html.erb ===
<div class="flex-1 flex items-center dark:text-white text-xs text-gray-400 hover:text-red-600 dark:hover:text-red-600 transition duration-350 ease-in-out">
  <%#= turbo_stream_from churp, :likes %>
  <%= turbo_frame_tag "like_#{churp.id}"  do %>
    <%= link_to churp_like_path(churp),
        data: {turbo_method: :post},
        class: 'z-0' do %>
      <div class="flex flex-row items-center">
        <svg viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mr-2">
          <g>
            <path d="M12 21.638h-.014C9.403 21.59 1.95 14.856 1.95 8.478c0-3.064 2.525-5.754 5.403-5.754 2.29 0 3.83 1.58 4.646 2.73.814-1.148 2.354-2.73 4.645-2.73 2.88 0 5.404 2.69 5.404 5.755 0 6.376-7.454 13.11-10.037 13.157H12zM7.354 4.225c-2.08 0-3.903 1.988-3.903 4.255 0 5.74 7.034 11.596 8.55 11.658 1.518-.062 8.55-5.917 8.55-11.658 0-2.267-1.823-4.255-3.903-4.255-2.528 0-3.94 2.936-3.952 2.965-.23.562-1.156.562-1.387 0-.014-.03-1.425-2.965-3.954-2.965z"></path>
          </g>
        </svg>
        <%= pluralize(churp.likes.count, 'like') %>
      </div>
    <% end %>
  <% end %>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/shared/_next_page.html.erb ===
<%= turbo_frame_tag(
      "churps-page-#{@pagy.next}",
      # autoscroll: true,
      loading: :lazy,
      src: pagy_url_for(@pagy, @pagy.next),
      target: "_top"
    ) do %>
  <%= render 'churps/shared/spinner' %>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/shared/_rechurp_button.html.erb ===
<div class="<%= share_icon_class %>">
  <%#= turbo_stream_from "churp", :rechurp %>
    <%= button_to rechurp_churp_path(churp), method: :post, class: 'flex-1 flex items-center' do  %>
      <svg viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mr-2">
        <g>
          <path d="M23.77 15.67c-.292-.293-.767-.293-1.06 0l-2.22 2.22V7.65c0-2.068-1.683-3.75-3.75-3.75h-5.85c-.414 0-.75.336-.75.75s.336.75.75.75h5.85c1.24 0 2.25 1.01 2.25 2.25v10.24l-2.22-2.22c-.293-.293-.768-.293-1.06 0s-.294.768 0 1.06l3.5 3.5c.145.147.337.22.53.22s.383-.072.53-.22l3.5-3.5c.294-.292.294-.767 0-1.06zm-10.66 3.28H7.26c-1.24 0-2.25-1.01-2.25-2.25V6.46l2.22 2.22c.148.147.34.22.532.22s.384-.073.53-.22c.293-.293.293-.768 0-1.06l-3.5-3.5c-.293-.294-.768-.294-1.06 0l-3.5 3.5c-.294.292-.294.767 0 1.06s.767.293 1.06 0l2.22-2.22V16.7c0 2.068 1.683 3.75 3.75 3.75h5.85c.414 0 .75-.336.75-.75s-.337-.75-.75-.75z"></path>
        </g>
      </svg>
      <%= churp.rechurp_count %>
    <% end %>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/shared/_share.html.erb ===
<div class="flex-1 flex items-center dark:text-white text-xs text-gray-400 hover:text-vividSkyBlue dark:hover:text-vividSkyBlue transition duration-350 ease-in-out">
  <svg viewBox="0 0 24 24" fill="currentColor" class="w-5 h-5 mr-2">
    <g>
      <path d="M17.53 7.47l-5-5c-.293-.293-.768-.293-1.06 0l-5 5c-.294.293-.294.768 0 1.06s.767.294 1.06 0l3.72-3.72V15c0 .414.336.75.75.75s.75-.336.75-.75V4.81l3.72 3.72c.146.147.338.22.53.22s.384-.072.53-.22c.293-.293.293-.767 0-1.06z"></path>
      <path d="M19.708 21.944H4.292C3.028 21.944 2 20.916 2 19.652V14c0-.414.336-.75.75-.75s.75.336.75.75v5.652c0 .437.355.792.792.792h15.416c.437 0 .792-.355.792-.792V14c0-.414.336-.75.75-.75s.75.336.75.75v5.652c0 1.264-1.028 2.292-2.292 2.292z"></path>
    </g>
  </svg>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/shared/_share_icons.html.erb ===
<div class="z-0 flex items-center justify-center">

  <%# Comments %>
  <%= render 'churps/shared/comments', churp: churp %>

  <%# Rechurp %>
  <%= render 'churps/shared/rechurp_button', churp: churp %>

  <%= render 'churps/shared/likes', churp: churp %>

  <%# Share %>
  <%= render 'churps/shared/share' %>

</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/shared/_spinner.html.erb ===
<!-- Spinner -->
<%# <div class="flex items-center justify-center p-4 border-b border-l border-r border-gray-200 dark:border-gray-700">
  <svg class="w-8 h-8 animate-spin-fast">
    <circle cx="16" cy="16" fill="none" r="14" stroke-width="4" style="stroke: rgb(29, 161, 242); opacity: 0.2"></circle>
    <circle cx="16" cy="16" fill="none" r="14" stroke-width="4" style=" stroke: rgb(29, 161, 242); stroke-dasharray: 80; stroke-dashoffset: 60;"></circle>
  </svg>
</div> %>
<!-- /Spinner -->

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/shared/_user_link.html.erb ===
<div class="user-link flex flex-shrink-0 p-4 pb-0 z-50">
  <div class="flex items-top">
    <div class="user-pic">
      <%= image_tag(avatar_pic(churp.user.profile), class: 'inline-block h-9 w-9 rounded-full') %>
    </div>

    <div class="ml-3">
      <p class="flex items-center text-base leading-6 font-medium text-gray-800 dark:text-white">
        <%= link_to profile_path(churp.user), class: 'hover:underline' do %>
          <%= churp.user.profile&.name %>
        <% end %>

        <span class="ml-1 text-sm leading-5 font-medium text-gray-400 group-hover:text-gray-300 transition ease-in-out duration-150">
          <%= link_to profile_path(churp.user), class: 'hover:underline' do %>
            <%= "#{churp.user.username}" %> 
          <% end %>
          . 
          <%= "#{churp.created_at.strftime("%b  %-d")}" %>
        </span>
      </p>
    </div>

  </div>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/churps/show.html.erb ===
<div class="w-full sm:w-600 h-screen scrollbar-hide">

  <%= render 'shared/header',
              view: :show,
              name: 'Post',
              followers: nil,
              following: nil,
              is_active: nil %>

  <%= render 'show_churp', churp: @churp %>

  <%= render 'post_comment', comment: @comment, churp: @churp %>

  <% @comments.each do |comment| %>
    <%= render 'comments/comment', comment: comment, churp: @churp %>
  <% end %>

</div>



=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/comments/_comment.html.erb ===
<div id="<%= dom_id comment %>"class="z-0 churp-block border-b border-gray-200 dark:border-dim-200 pb-4 border-l border-r">
    <!-- link -->
    <%= render 'churps/shared/user_link', churp: churp %>

    <div class="pl-16">

      <p class="my-8 text-base width-auto font-medium text-gray-800 dark:text-white flex-shrink">
        <%= comment.content %>
      </p>

      <% if churp.churp_pic.attached? %>
        <img class="rounded-2xl" src=<%= url_for(churp.churp_pic) %>/>
      <% end %>

      <%= render 'churps/shared/share_icons', churp: churp %>
    </div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/comments/_form.html.erb ===

<%= simple_form_for(@comment) do |f| %>
  <%= f.error_notification %>
  <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

  <div class="form-inputs">
  </div>

  <div class="form-actions">
    <%= f.button :submit %>
  </div>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/comments/edit.html.erb ===
<div class="max-w-3xl mx-auto px-4">
  <div class="flex items-center justify-between mb-6 flex-wrap">
    <h1 class="font-bold text-3xl mb-6">Edit comment</h1>
    <% if @comment.persisted? %>
    <%= button_to 'Destroy', @comment, method: :delete, class: "text-red-700 underline", data: { turbo_confirm: 'Are you sure?' } %>
    <% end %>
  </div>

  <%= render 'form', comment: @comment %>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/comments/index.html.erb ===



<div class="container mx-auto px-4">
  <div class="flex items-center justify-between flex-wrap mb-6">
    <h1 class="text-3xl font-bold">Comments</h1>

    <%= link_to new_comment_path, class: button_class(theme: "primary") do %>
    Add New Comment
    <% end %>
  </div>

  <table class="table-auto border-collapse border-slate-400 w-full">
    <thead class="bg-slate-50 dark:bg-slate-700">
      <tr>
        <th class="border border-slate-300 dark:border-slate-600 font-semibold p-4 text-slate-900 dark:text-slate-200 text-left"></th>
      </tr>
    </thead>
    <tbody>
      <% @comments.each do |comment| %>
        <%= content_tag :tr, id: dom_id(comment), class: dom_class(comment) do %>
          <td class="border border-slate-300 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400">
            <%= link_to 'Show', comment %>
          </td>
        <% end %>
      <% end %>
    </tbody>
  </table>
</div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/comments/new.html.erb ===
<div class="max-w-3xl mx-auto px-4">
  <h1 class="font-bold text-3xl mb-6">New comment</h1>

  <%= render 'form', comment: @comment %>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/comments/show.html.erb ===
<div class="max-w-3xl mx-auto px-4">
  <div class="flex items-center justify-between">
    <h1 class="flex-1 font-bold text-3xl">Comment</h1>

    <div class="flex-wrap lg:flex items-center lg:space-x-3">
      <%= link_to comments_path, class: button_class(theme: "transparent") do %>
      All Comments
      <% end %>
      <%= link_to edit_comment_path(@comment), class: button_class(theme:"primary") do %>
      Edit
      <% end %>
    </div>
  </div>

  <ul class="text-slate-700">
  </ul>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/_auth_layout.html.erb ===
<%
  subtitle ||= ""
  title ||= "" %>
<div class="items-start justify-center block h-full grid-cols-1 gap-4 lg:grid lg:items-center lg:grid-cols-2">
  <div class="relative flex items-center justify-center h-32 overflow-hidden lg:h-screen bg-gradient-to-tr from-vividSkyBlue to-gray-800">
    <div class="inset-auto z-30 flex items-center justify-center flex-1 w-full h-auto font-sans text-center text-white shadow lg:flex lg:h-screen lg:absolute xl:text-5xl">
      <%= image_tag '/images/logo/churp.png', width: "300", height: "300" %>
    </div>
  </div>
  <div>
    <div class="relative z-20 px-6 mx-auto lg:px-12 max-w-lg">
      <div class="mb-4 xl:mt-8">

        <% unless title.blank? %>
          <h2 class="pt-6 font-sans text-3xl font-black leading-tight"><%= title %></h2>
        <% end %>

        <% unless subtitle.blank? %>
          <p class="text-gray-600 mt-3"><%= subtitle %></p>
        <% end %>
      </div>

      <%= yield %>
      <%= render "devise/shared/links" %>
    </div>
  </div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/confirmations/new.html.erb ===
<%= render layout: "auth_layout", locals: { title: "Resend confirmation instructions" }  do %>
  <%= form_for(resource, as: resource_name, url: confirmation_path(resource_name), html: { method: :post }, data: { turbo: false }) do |f| %>
    <%= render "devise/shared/error_messages", resource: resource %>

    <div class="mb-6">
      <%= f.label :email, class: label_class %>
      <%= f.email_field :email, autofocus: true, autocomplete: "email", value: (resource.pending_reconfirmation? ? resource.unconfirmed_email : resource.email), class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.submit "Resend instructions", class: button_class(theme: "primary", variant: "expanded") %>
    </div>
  <% end %>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/mailer/confirmation_instructions.html.erb ===
<p>Welcome <%= @email %>!</p>

<p>You can confirm your account email through the link below:</p>

<p><%= link_to 'Confirm my account', confirmation_url(@resource, confirmation_token: @token) %></p>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/mailer/email_changed.html.erb ===
<p>Hello <%= @email %>!</p>

<% if @resource.try(:unconfirmed_email?) %>
  <p>We're contacting you to notify you that your email is being changed to <%= @resource.unconfirmed_email %>.</p>
<% else %>
  <p>We're contacting you to notify you that your email has been changed to <%= @resource.email %>.</p>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/mailer/password_change.html.erb ===
<p>Hello <%= @resource.email %>!</p>

<p>We're contacting you to notify you that your password has been changed.</p>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/mailer/reset_password_instructions.html.erb ===
<p>Hello <%= @resource.email %>!</p>

<p>Someone has requested a link to change your password. You can do this through the link below.</p>

<p><%= link_to 'Change my password', edit_password_url(@resource, reset_password_token: @token) %></p>

<p>If you didn't request this, please ignore this email.</p>
<p>Your password won't change until you access the link above and create a new one.</p>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/mailer/unlock_instructions.html.erb ===
<p>Hello <%= @resource.email %>!</p>

<p>Your account has been locked due to an excessive number of unsuccessful sign in attempts.</p>

<p>Click the link below to unlock your account:</p>

<p><%= link_to 'Unlock my account', unlock_url(@resource, unlock_token: @token) %></p>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/passwords/edit.html.erb ===
<%= render layout: "auth_layout", locals: { title: "Change your password" }  do %>
  <%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :put }, data: { turbo: false }) do |f| %>
    <%= render "devise/shared/error_messages", resource: resource %>
    <%= f.hidden_field :reset_password_token %>

    <div class="mb-6">
      <div class="flex">
        <%= f.label :password, "New password", class: label_class %>
        <% if @minimum_password_length %>
          <em>(<%= @minimum_password_length %> characters minimum)</em>
        <% end %>
      </div>
      <%= f.password_field :password, autofocus: true, autocomplete: "new-password", class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.label :password_confirmation, "Confirm new password", class: label_class %>
      <%= f.password_field :password_confirmation, autocomplete: "off", class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.submit "Change my password", class: button_class(theme: "primary", variant: "expanded") %>
    </div>
  <% end %>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/passwords/new.html.erb ===
<%= render layout: "auth_layout", locals: { title: "Forgot password", subtitle: "If your email is in our database we'll send you password reset instructions." }  do %>

  <%= form_for(resource, as: resource_name, url: password_path(resource_name), html: { method: :post }, data: { turbo: false }) do |f| %>
    <%= render "devise/shared/error_messages", resource: resource %>

    <div class="mb-6">
      <%= f.label :email, class: label_class %>
      <%= f.email_field :email, autofocus: true, autocomplete: "email", class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.submit "Send password reset instructions", class: button_class(variant: "expanded", theme: "primary") %>
    </div>
  <% end %>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/registrations/edit.html.erb ===
<%= render layout: "auth_layout", locals: { title: "Edit account" }  do %>
  <%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }, data: { turbo: false }) do |f| %>

    <%= render "devise/shared/error_messages", resource: resource %>

    <div class="mb-6">
      <%= f.label :name, class: label_class %>
      <%= f.text_field :name, class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.label :email, class: label_class %>
      <%= f.email_field :email, autocomplete: "email", class: input_class %>
    </div>

    <div class="mb-6">
      <% if devise_mapping.confirmable? && resource.pending_reconfirmation? %>
        <p>Currently waiting confirmation for: <%= resource.unconfirmed_email %></p>
      <% end %>
    </div>

    <div class="mb-6">
      <%= f.label :password, class: label_class %>
      <%= f.password_field :password, autocomplete: "new-password", class: input_class %>
      <p class="pt-1 text-xs italic text-gray-500"> <% if @minimum_password_length %>
          <%= @minimum_password_length %> characters minimum <% end %> (leave blank if you don't want to change it)</p>
    </div>

    <div class="mb-6">
      <%= f.label :password_confirmation, class: label_class %>
      <%= f.password_field :password_confirmation, autocomplete: "new-password", class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.label :current_password, class: label_class %>
      <%= f.password_field :current_password, autocomplete: "current-password", class: input_class %>
      <p class="pt-2 text-sm italic text-grey-dark">(we need your current password to confirm your changes)</p>
    </div>

    <div class="mb-6">
      <%= f.submit "Update", class: button_class(theme: "primary", variant: "expanded") %>
    </div>
  <% end %>

  <div class="mb-6">
    <hr class="mb-6" />
    <%= button_to "Cancel my account", registration_path(resource_name), data: { confirm: "Are you sure?" }, method: :delete, class: button_class(variant: "small", additional_classes: "border") %>
  </div>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/registrations/new.html.erb ===
<%= render layout: "auth_layout", locals: { title: "Sign up" }  do %>
  <%= form_for(resource, as: resource_name, url: registration_path(resource_name), data: { controller: 'nested-form', nested_form_wrapper_selector_value: '.nested-form-wrapper' }) do |f| %>
    <%= render "devise/shared/error_messages", resource: resource %>

    <div class="mb-6">
      <%= f.label :username, class: label_class %>
      <%= f.text_field :username, class: input_class %>
    </div>

      <%= f.fields_for :profile, Profile.new, child_index: 'NEW_RECORD' do |profile| %>
        <div class="mb-6">
          <%= profile.label :name, class: label_class %>
          <%= profile.text_field :name, class: input_class %>
        </div>
      <% end %>
    

    <%= f.fields_for :profile do |profile| %>
      <div class="mb-6">
        <div class="field_with_errors">
        <%= profile.label "Full Name", class: label_class, required: true %>
        <%= profile.text_field :name, class: input_class %>
        </div>
      </div> 
    <% end %>

    <div class="mb-6">
      <%= f.label :email, class: label_class %>
      <%= f.email_field :email, autocomplete: "email", class: input_class %>
    </div>

    <div class="mb-6">
      <div class="flex">
        <%= f.label :password, class: label_class %>
        <% if @minimum_password_length %>
          <span class="pl-1 text-xs text-gray-600 mt-1"><em>(<%= @minimum_password_length %> characters minimum)</em></span>
        <% end %>
      </div>
      <%= f.password_field :password, autocomplete: "new-password", class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.label :password_confirmation, class: label_class %>
      <%= f.password_field :password_confirmation, autocomplete: "new-password", class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.submit "Sign up", class: button_class(variant: "expanded", theme: "primary") %>
    </div>
  <% end %>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/sessions/new.html.erb ===
<%= render layout: "auth_layout", locals: { title: "Sign in" }  do %>
  <%= form_for(resource, as: resource_name, url: session_path(resource_name), data: { turbo: false }) do |f| %>

    <div class="mb-6">
      <%= f.label :email, class: label_class %>
      <%= f.email_field :email, autofocus: true, autocomplete: "email", class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.label :password, class: label_class %>
      <%= f.password_field :password, autocomplete: "current-password", class: input_class %>
    </div>

    <div class="mb-6">
      <% if devise_mapping.rememberable? %>
        <%= f.check_box :remember_me, class: checkbox_class %>
        <%= f.label :remember_me %>
      <% end %>
    </div>

    <div class="mb-6">
      <%= f.submit "Sign in", class: button_class(theme: "primary", variant: "expanded") %>
    </div>
  <% end %>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/shared/_error_messages.html.erb ===
<% if resource.errors.any? %>
  <div id="error_explanation" class="text-red-500">
    <h2 class="font-semibold text-lg">
      <%= I18n.t("errors.messages.not_saved",
                 count: resource.errors.count,
                 resource: resource.class.model_name.human.downcase)
       %>
    </h2>
    <ul class="list-none p-0">
      <% resource.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
    </ul>
  </div>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/shared/_links.html.erb ===
<%- if controller_name != 'sessions' %>
  <div class="flex flex-wrap"><%= link_to "Sign in", new_session_path(resource_name), class: link_class(extended_classes: "mb-2") %></div>
<% end -%>

<%- if devise_mapping.registerable? && controller_name != 'registrations' %>
  <%= link_to "Sign up", new_registration_path(resource_name), class: link_class(extended_classes: "mb-2") %>
<% end -%>

<%- if devise_mapping.recoverable? && controller_name != 'passwords' && controller_name != 'registrations' %>
  <%= link_to "Forgot your password?", new_password_path(resource_name), class: link_class(extended_classes: "mb-2") %>
<% end -%>

<%- if devise_mapping.confirmable? && controller_name != 'confirmations' %>
  <%= link_to "Didn't receive confirmation instructions?", new_confirmation_path(resource_name), class: link_class(extended_classes: "mb-2") %>
<% end -%>

<%- if devise_mapping.lockable? && resource_class.unlock_strategy_enabled?(:email) && controller_name != 'unlocks' %>
  <%= link_to "Didn't receive unlock instructions?", new_unlock_path(resource_name), class: link_class(extended_classes: "mb-2") %>
<% end -%>

<%- if devise_mapping.omniauthable? %>
  <%- resource_class.omniauth_providers.each do |provider| %>
    <%= link_to "Sign in with #{OmniAuth::Utils.camelize(provider)}", omniauth_authorize_path(resource_name, provider), class: btn_class %>
  <% end -%>
<% end -%>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/devise/unlocks/new.html.erb ===
<%= render layout: "auth_layout", locals: { title: "Resend unlock instructions" }  do %>
  <%= form_for(resource, as: resource_name, url: unlock_path(resource_name), html: { method: :post }, data: { turbo: false }) do |f| %>
    <%= render "devise/shared/error_messages", resource: resource %>

    <div class="mb-6">
      <%= f.label :email, class: label_class %>
      <%= f.email_field :email, autofocus: true, autocomplete: "email", class: input_class %>
    </div>

    <div class="mb-6">
      <%= f.submit "Resend instructions", class: button_class(theme: "primary", variant: "expanded") %>
    </div>
  <% end %>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/errors/internal_server_error.html.erb ===
<div class="w-full h-screen flex flex-col items-center justify-center">
  <svg class="w-1/2 md:w-1/3 lg:w-1/4 text-blue-600" xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="0 0 1119.60911 699" xmlns:xlink="http://www.w3.org/1999/xlink">
    <circle cx="292.60911" cy="213" r="213" fill="#f2f2f2"></circle>
    <path d="M31.39089,151.64237c0,77.49789,48.6181,140.20819,108.70073,140.20819" transform="translate(-31.39089 -100.5)" fill="#2f2e41"></path>
    <path d="M140.09162,291.85056c0-78.36865,54.255-141.78356,121.30372-141.78356" transform="translate(-31.39089 -100.5)" fill="#1CCEED"></path>
    <path d="M70.77521,158.66768c0,73.61476,31.00285,133.18288,69.31641,133.18288" transform="translate(-31.39089 -100.5)" fill="#1CCEED"></path>
    <path d="M140.09162,291.85056c0-100.13772,62.7103-181.16788,140.20819-181.16788" transform="translate(-31.39089 -100.5)" fill="#2f2e41"></path>
    <path d="M117.22379,292.83905s15.41555-.47479,20.06141-3.783,23.713-7.2585,24.86553-1.95278,23.16671,26.38821,5.76263,26.5286-40.43935-2.711-45.07627-5.53549S117.22379,292.83905,117.22379,292.83905Z" transform="translate(-31.39089 -100.5)" fill="#a8a8a8"></path>
    <path d="M168.224,311.78489c-17.40408.14042-40.43933-2.71094-45.07626-5.53548-3.53126-2.151-4.93843-9.86945-5.40926-13.43043-.32607.014-.51463.02-.51463.02s.97638,12.43276,5.61331,15.2573,27.67217,5.67589,45.07626,5.53547c5.02386-.04052,6.7592-1.82793,6.66391-4.47526C173.87935,310.756,171.96329,311.75474,168.224,311.78489Z" transform="translate(-31.39089 -100.5)" opacity="0.2"></path>
    <ellipse cx="198.60911" cy="424.5" rx="187" ry="25.43993" fill="#3f3d56"></ellipse>
    <ellipse cx="198.60911" cy="424.5" rx="157" ry="21.35866" opacity="0.1"></ellipse>
    <ellipse cx="836.60911" cy="660.5" rx="283" ry="38.5" fill="#3f3d56"></ellipse>
    <ellipse cx="310.60911" cy="645.5" rx="170" ry="23.12721" fill="#3f3d56"></ellipse>
    <path d="M494,726.5c90,23,263-30,282-90" transform="translate(-31.39089 -100.5)" fill="none" stroke="#2f2e41" stroke-miterlimit="10" stroke-width="2"></path>
    <path d="M341,359.5s130-36,138,80-107,149-17,172" transform="translate(-31.39089 -100.5)" fill="none" stroke="#2f2e41" stroke-miterlimit="10" stroke-width="2"></path>
    <path d="M215.40233,637.78332s39.0723-10.82,41.47675,24.04449-32.15951,44.78287-5.10946,51.69566" transform="translate(-31.39089 -100.5)" fill="none" stroke="#2f2e41" stroke-miterlimit="10" stroke-width="2"></path>
    <path d="M810.09554,663.73988,802.218,714.03505s-38.78182,20.60284-11.51335,21.20881,155.73324,0,155.73324,0,24.84461,0-14.54318-21.81478l-7.87756-52.719Z" transform="translate(-31.39089 -100.5)" fill="#2f2e41"></path>
    <path d="M785.21906,734.69812c6.193-5.51039,16.9989-11.252,16.9989-11.252l7.87756-50.2952,113.9216.10717,7.87756,49.582c9.185,5.08711,14.8749,8.987,18.20362,11.97818,5.05882-1.15422,10.58716-5.44353-18.20362-21.38921l-7.87756-52.719-113.9216,3.02983L802.218,714.03506S769.62985,731.34968,785.21906,734.69812Z" transform="translate(-31.39089 -100.5)" opacity="0.1"></path>
    <rect x="578.43291" y="212.68859" width="513.25314" height="357.51989" rx="18.04568" fill="#2f2e41"></rect>
    <rect x="595.70294" y="231.77652" width="478.71308" height="267.83694" fill="#3f3d56"></rect>
    <circle cx="835.05948" cy="223.29299" r="3.02983" fill="#f2f2f2"></circle>
    <path d="M1123.07694,621.32226V652.6628a18.04341,18.04341,0,0,1-18.04568,18.04568H627.86949A18.04341,18.04341,0,0,1,609.8238,652.6628V621.32226Z" transform="translate(-31.39089 -100.5)" fill="#2f2e41"></path>
    <polygon points="968.978 667.466 968.978 673.526 642.968 673.526 642.968 668.678 643.417 667.466 651.452 645.651 962.312 645.651 968.978 667.466" fill="#2f2e41"></polygon>
    <path d="M1125.828,762.03359c-.59383,2.539-2.83591,5.21743-7.90178,7.75032-18.179,9.08949-55.1429-2.42386-55.1429-2.42386s-28.4804-4.84773-28.4804-17.573a22.72457,22.72457,0,0,1,2.49658-1.48459c7.64294-4.04351,32.98449-14.02122,77.9177.42248a18.73921,18.73921,0,0,1,8.54106,5.59715C1125.07908,756.45353,1126.50669,759.15715,1125.828,762.03359Z" transform="translate(-31.39089 -100.5)" fill="#2f2e41"></path>
    <path d="M1125.828,762.03359c-22.251,8.526-42.0843,9.1622-62.43871-4.975-10.26507-7.12617-19.59089-8.88955-26.58979-8.75618,7.64294-4.04351,32.98449-14.02122,77.9177.42248a18.73921,18.73921,0,0,1,8.54106,5.59715C1125.07908,756.45353,1126.50669,759.15715,1125.828,762.03359Z" transform="translate(-31.39089 -100.5)" opacity="0.1"></path>
    <ellipse cx="1066.53846" cy="654.13477" rx="7.87756" ry="2.42386" fill="#f2f2f2"></ellipse>
    <circle cx="835.05948" cy="545.66686" r="11.51335" fill="#f2f2f2"></circle>
    <polygon points="968.978 667.466 968.978 673.526 642.968 673.526 642.968 668.678 643.417 667.466 968.978 667.466" opacity="0.1"></polygon>
    <rect x="108.60911" y="159" width="208" height="242" fill="#2f2e41"></rect>
    <rect x="87.60911" y="135" width="250" height="86" fill="#3f3d56"></rect>
    <rect x="87.60911" y="237" width="250" height="86" fill="#3f3d56"></rect>
    <rect x="87.60911" y="339" width="250" height="86" fill="#3f3d56"></rect>
    <rect x="271.60911" y="150" width="16" height="16" fill="#1CCEED" opacity="0.4"></rect>
    <rect x="294.60911" y="150" width="16" height="16" fill="#1CCEED" opacity="0.8"></rect>
    <rect x="317.60911" y="150" width="16" height="16" fill="#1CCEED"></rect>
    <rect x="271.60911" y="251" width="16" height="16" fill="#1CCEED" opacity="0.4"></rect>
    <rect x="294.60911" y="251" width="16" height="16" fill="#1CCEED" opacity="0.8"></rect>
    <rect x="317.60911" y="251" width="16" height="16" fill="#1CCEED"></rect>
    <rect x="271.60911" y="352" width="16" height="16" fill="#1CCEED" opacity="0.4"></rect>
    <rect x="294.60911" y="352" width="16" height="16" fill="#1CCEED" opacity="0.8"></rect>
    <rect x="317.60911" y="352" width="16" height="16" fill="#1CCEED"></rect>
    <circle cx="316.60911" cy="538" r="79" fill="#2f2e41"></circle>
    <rect x="280.60911" y="600" width="24" height="43" fill="#2f2e41"></rect>
    <rect x="328.60911" y="600" width="24" height="43" fill="#2f2e41"></rect>
    <ellipse cx="300.60911" cy="643.5" rx="20" ry="7.5" fill="#2f2e41"></ellipse>
    <ellipse cx="348.60911" cy="642.5" rx="20" ry="7.5" fill="#2f2e41"></ellipse>
    <circle cx="318.60911" cy="518" r="27" fill="#fff"></circle>
    <circle cx="318.60911" cy="518" r="9" fill="#3f3d56"></circle>
    <path d="M271.36733,565.03228c-6.37889-28.56758,14.01185-57.43392,45.544-64.47477s62.2651,10.41,68.644,38.9776-14.51861,39.10379-46.05075,46.14464S277.74622,593.59986,271.36733,565.03228Z" transform="translate(-31.39089 -100.5)" fill="#1CCEED"></path>
    <ellipse cx="417.21511" cy="611.34365" rx="39.5" ry="12.40027" transform="translate(-238.28665 112.98044) rotate(-23.17116)" fill="#2f2e41"></ellipse>
    <ellipse cx="269.21511" cy="664.34365" rx="39.5" ry="12.40027" transform="translate(-271.07969 59.02084) rotate(-23.17116)" fill="#2f2e41"></ellipse>
    <path d="M394,661.5c0,7.732-19.90861,23-42,23s-43-14.268-43-22,20.90861-6,43-6S394,653.768,394,661.5Z" transform="translate(-31.39089 -100.5)" fill="#fff"></path>
  </svg>

  <div class="flex flex-col items-center justify-center">
      <p class="text-5xl md:text-6xl lg:text-7xl font-bold tracking-wider text-gray-600 mt-8">500</p>
      <p class="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-600 mt-2">Server Error</p>
      <p class="md:text-lg xl:text-xl text-gray-500 mt-4">Whoops, something went wrong on our servers.</p>
  </div>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/errors/not_found.html.erb ===
<%# component  %>
<div class="w-full h-screen flex flex-col lg:flex-row items-center justify-center space-y-16 lg:space-y-0 space-x-8 2xl:space-x-0">
  <div class="w-full lg:w-1/2 flex flex-col items-center justify-center lg:px-2 xl:px-0 text-center">
    <p class="text-7xl md:text-8xl lg:text-9xl font-bold tracking-wider text-gray-300">404</p>
    <p class="text-4xl md:text-5xl lg:text-6xl font-bold tracking-wider text-gray-300 mt-2">Page Not Found</p>
    <p class="text-lg md:text-xl lg:text-2xl text-gray-500 my-12">Sorry, the page you are looking for could not be found.</p>
    <a href="#" class="flex items-center px-4 py-2 text-lg space-x-2cursor-pointer font-medium text-center text-vividSkyBlue hover:text-cyan-600 hover:border-cyan-600 rounded-full border-2 border-vividSkyBlue" title="Return Home">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M9.707 14.707a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 1.414L7.414 9H15a1 1 0 110 2H7.414l2.293 2.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
      </svg>
      <span>Return Home</span>
    </a>
  </div>
  <div class="w-1/2 lg:h-full flex lg:items-end justify-center p-4">
    <svg class="w-full text-blue-600" 
         xmlns="http://www.w3.org/2000/svg" 
         data-name="Layer 1" 
         viewBox="0 0 1120.59226 777.91584" 
         xmlns:xlink="http://www.w3.org/1999/xlink">
      <title>not found</title>
      <circle cx="212.59226" cy="103" r="64" fill="#ED1C7A"></circle>
      <path d="M563.68016,404.16381c0,151.01141-89.77389,203.73895-200.51559,203.73895S162.649,555.17522,162.649,404.16381,363.16457,61.04208,363.16457,61.04208,563.68016,253.1524,563.68016,404.16381Z" transform="translate(-39.70387 -61.04208)" fill="#cbd5e1"></path>
      <polygon points="316.156 523.761 318.21 397.378 403.674 241.024 318.532 377.552 319.455 320.725 378.357 207.605 319.699 305.687 319.699 305.687 321.359 203.481 384.433 113.423 321.621 187.409 322.658 0 316.138 248.096 316.674 237.861 252.547 139.704 315.646 257.508 309.671 371.654 309.493 368.625 235.565 265.329 309.269 379.328 308.522 393.603 308.388 393.818 308.449 394.99 293.29 684.589 313.544 684.589 315.974 535.005 389.496 421.285 316.156 523.761" fill="#3f3d56"></polygon>
      <path d="M1160.29613,466.01367c0,123.61-73.4842,166.77-164.13156,166.77s-164.13156-43.16-164.13156-166.77S996.16457,185.15218,996.16457,185.15218,1160.29613,342.40364,1160.29613,466.01367Z" transform="translate(-39.70387 -61.04208)" fill="#cbd5e1"></path>
      <polygon points="950.482 552.833 952.162 449.383 1022.119 321.4 952.426 433.154 953.182 386.639 1001.396 294.044 953.382 374.329 953.382 374.329 954.741 290.669 1006.369 216.952 954.954 277.514 955.804 124.11 950.467 327.188 950.906 318.811 898.414 238.464 950.064 334.893 945.173 428.327 945.027 425.847 884.514 341.294 944.844 434.608 944.232 446.293 944.123 446.469 944.173 447.428 931.764 684.478 948.343 684.478 950.332 562.037 1010.514 468.952 950.482 552.833" fill="#3f3d56"></polygon>
      <ellipse cx="554.59226" cy="680.47903" rx="554.59226" ry="28.03433" fill="#3f3d56"></ellipse>
      <ellipse cx="892.44491" cy="726.79663" rx="94.98858" ry="4.80162" fill="#3f3d56"></ellipse>
      <ellipse cx="548.71959" cy="773.11422" rx="94.98858" ry="4.80162" fill="#3f3d56"></ellipse>
      <ellipse cx="287.94432" cy="734.27887" rx="217.01436" ry="10.96996" fill="#3f3d56"></ellipse>
      <circle cx="97.08375" cy="566.26982" r="79" fill="#2f2e41"></circle>
      <rect x="99.80546" y="689.02332" width="24" height="43" transform="translate(-31.32451 -62.31008) rotate(0.67509)" fill="#2f2e41"></rect>
      <rect x="147.80213" y="689.58887" width="24" height="43" transform="translate(-31.31452 -62.87555) rotate(0.67509)" fill="#2f2e41"></rect>
      <ellipse cx="119.54569" cy="732.61606" rx="7.5" ry="20" transform="translate(-654.1319 782.47948) rotate(-89.32491)" fill="#2f2e41"></ellipse>
      <ellipse cx="167.55414" cy="732.18168" rx="7.5" ry="20" transform="translate(-606.25475 830.05533) rotate(-89.32491)" fill="#2f2e41"></ellipse>
      <circle cx="99.31925" cy="546.29477" r="27" fill="#fff"></circle>
      <circle cx="99.31925" cy="546.29477" r="9" fill="#3f3d56"></circle>
      <path d="M61.02588,552.94636c-6.04185-28.64075,14.68758-57.26483,46.30049-63.93367s62.13813,11.14292,68.18,39.78367-14.97834,38.93-46.59124,45.59886S67.06774,581.58712,61.02588,552.94636Z" transform="translate(-39.70387 -61.04208)" fill="#1CCEED"></path>
      <path d="M257.29613,671.38411c0,55.07585-32.73985,74.3063-73.13,74.3063q-1.40351,0-2.80255-.0312c-1.87139-.04011-3.72494-.1292-5.55619-.254-36.45135-2.57979-64.77127-22.79937-64.77127-74.02113,0-53.00843,67.73872-119.89612,72.827-124.84633l.00892-.00889c.19608-.19159.29409-.28516.29409-.28516S257.29613,616.30827,257.29613,671.38411Z" transform="translate(-39.70387 -61.04208)" fill="#1CCEED"></path>
      <path d="M181.50168,737.26482l26.747-37.37367-26.81386,41.4773-.07125,4.29076c-1.87139-.04011-3.72494-.1292-5.55619-.254l2.88282-55.10258-.0223-.42775.049-.0802.27179-5.20415-26.88076-41.5798,26.96539,37.67668.06244,1.105,2.17874-41.63324-23.0132-42.96551,23.29391,35.6583,2.26789-86.31419.00892-.294v.28516l-.37871,68.064,22.91079-26.98321-23.00435,32.84678-.60595,37.27566L204.18523,621.958l-21.4805,41.259-.33863,20.723,31.05561-49.79149-31.17146,57.023Z" transform="translate(-39.70387 -61.04208)" fill="#3f3d56"></path>
      <circle cx="712.48505" cy="565.41532" r="79" fill="#2f2e41"></circle>
      <rect x="741.77716" y="691.82355" width="24" height="43" transform="translate(-215.99457 191.86399) rotate(-17.08345)" fill="#2f2e41"></rect>
      <rect x="787.6593" y="677.72286" width="24" height="43" transform="matrix(0.95588, -0.29376, 0.29376, 0.95588, -209.82788, 204.72037)" fill="#2f2e41"></rect>
      <ellipse cx="767.887" cy="732.00275" rx="20" ry="7.5" transform="translate(-220.8593 196.83312) rotate(-17.08345)" fill="#2f2e41"></ellipse>
      <ellipse cx="813.47537" cy="716.94619" rx="20" ry="7.5" transform="translate(-214.42477 209.56103) rotate(-17.08345)" fill="#2f2e41"></ellipse>
      <circle cx="708.52153" cy="545.71023" r="27" fill="#fff"></circle>
      <circle cx="708.52153" cy="545.71023" r="9" fill="#3f3d56"></circle>
      <path d="M657.35526,578.74316c-14.48957-25.43323-3.47841-59.016,24.59412-75.0092s62.57592-8.34055,77.06549,17.09268-2.39072,41.6435-30.46325,57.63671S671.84483,604.17639,657.35526,578.74316Z" transform="translate(-39.70387 -61.04208)" fill="#1CCEED"></path>
      <path d="M611.29613,661.29875c0,50.55711-30.05368,68.20979-67.13,68.20979q-1.28835,0-2.57261-.02864c-1.71785-.03682-3.41933-.1186-5.10033-.23313-33.46068-2.36813-59.45707-20.92878-59.45707-67.948,0-48.65932,62.18106-110.05916,66.85186-114.60322l.00819-.00817c.18-.17587.27-.26177.27-.26177S611.29613,610.74164,611.29613,661.29875Z" transform="translate(-39.70387 -61.04208)" fill="#1CCEED"></path>
      <path d="M541.72029,721.77424l24.55253-34.30732-24.6139,38.07426-.0654,3.93872c-1.71785-.03682-3.41933-.1186-5.10033-.23313l2.6463-50.58165-.02047-.39266.045-.07361.24949-4.77718-24.67531-38.16836,24.753,34.58547.05731,1.01433,2-38.21741-21.12507-39.44039L541.80616,625.928l2.08182-79.23247.00819-.26994v.26177l-.34764,62.47962,21.031-24.76934-21.11693,30.15184-.55624,34.21735,19.63634-32.839-19.71812,37.87389-.31085,19.0228,28.50763-45.70631-28.614,52.34448Z" transform="translate(-39.70387 -61.04208)" fill="#3f3d56"></path>
      <path d="M875.29613,682.38411c0,55.07585-32.73985,74.3063-73.13,74.3063q-1.4035,0-2.80255-.0312c-1.87139-.04011-3.72494-.1292-5.55619-.254-36.45135-2.57979-64.77127-22.79937-64.77127-74.02113,0-53.00843,67.73872-119.89612,72.827-124.84633l.00892-.00889c.19608-.19159.29409-.28516.29409-.28516S875.29613,627.30827,875.29613,682.38411Z" transform="translate(-39.70387 -61.04208)" fill="#1CCEED"></path>
      <path d="M799.50168,748.26482l26.747-37.37367-26.81386,41.4773-.07125,4.29076c-1.87139-.04011-3.72494-.1292-5.55619-.254l2.88282-55.10258-.0223-.42775.049-.0802.27179-5.20415L770.108,654.01076l26.96539,37.67668.06244,1.105,2.17874-41.63324-23.0132-42.96551,23.29391,35.6583,2.26789-86.31419.00892-.294v.28516l-.37871,68.064,22.91079-26.98321-23.00435,32.84678-.606,37.27566L822.18523,632.958l-21.4805,41.259-.33863,20.723,31.05561-49.79149-31.17146,57.023Z" transform="translate(-39.70387 -61.04208)" fill="#3f3d56"></path>
      <ellipse cx="721.51694" cy="656.82212" rx="12.40027" ry="39.5" transform="translate(-220.83517 966.22323) rotate(-64.62574)" fill="#2f2e41"></ellipse>
      <ellipse cx="112.51694" cy="651.82212" rx="12.40027" ry="39.5" transform="translate(-574.07936 452.71367) rotate(-68.15829)" fill="#2f2e41"></ellipse>
    </svg>
  </div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/home/index.html.erb ===
<div class="max-w-5xl mx-auto mt-4 lg:p-12 p-4 grid grid-cols-1 lg:grid-cols-12 gap-x-12 gap-y-4 relative z-20">
  <div class="lg:col-span-12 text-center">
    <div class="flex justify-center mb-6">
      <svg fill="none" class="w-16 h-16" height="512" viewBox="0 0 512 512" width="512" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="56" x2="463" y1="46" y2="465"><stop offset="0" stop-color="#8038ed"/><stop offset="1" stop-color="#3a0092"/></linearGradient><path d="m0 0h512v512h-512z" fill="#fff"/><rect fill="url(#a)" height="512" rx="110" width="512"/><g stroke="#fff"><circle cx="190" cy="302" r="79.5" stroke-opacity=".9" stroke-width="25"/><circle cx="254" cy="377" r="34" stroke-opacity=".8" stroke-width="10"/><circle cx="282" cy="227" r="106" stroke-width="50"/></g></svg>
    </div>
    <h1 class="mb-4 text-2xl font-semibold text-gray-800 text-center mt-3"><span class="sr-only">Kickoff Tailwind</span><svg class="lg:h-12 h-auto lg:w-auto w-full inline" fill="none" height="68" viewBox="0 0 611 68" width="611" xmlns="http://www.w3.org/2000/svg"><g class="fill-current"><path d="m67.3 56.1-1.4-1.3-2.8 2.6-8.1-13c-2.9-4.7-6.7-8.3-11.6-11 5.5-4.7 10.9-8.9 16.4-12.8l-10.3-11.5c-4.9 4.9-10.3 9.4-16.2 13.5 0-7.9 1.9-15.4 5.8-22.6h-1.7c-4 6.7-6 13.9-6 21.4v18.1c0 6.3-1.9 10.9-5.8 14-.3.3-4.8 2.7-13.3 7.3l-1.1-.8c5.8-4.9 9.2-8 10.3-9.1 3.3-3.7 5-7.7 5-12v-20c0-5.5 1.8-11.6 5.3-18.099998v-.7000033c-3.6 1.3000013-6.2 1.9000013-7.9 1.9000013-.8 0-2.5-.3-5.1-.8-2.6-.600002-4.7-.899998-6.3-.899998-7 0-11.2 4.399998-12.5 13.199998l.3.1c2.3-3.6 5.4-5.4 9.2-5.4l7.3.5c2.1.1 5.9-1.4 11.2-4.7l.2.4c-4.1 3.1-7 6-8.7 8.7-2.1 3.3-3.1 7.3-3.1 11.8-1.9-.9-3.8-1.3-5.8-1.3-3.5 0-6 2-7.5 5.9 2.4-.7 4.1-1 5.1-1l1.8.2c2.6.3 4.5 1.8 5.8 4.6 1 2.2 1.5 4.8 1.5 7.7-2-1.1-4.1-1.6-6.4-1.6-3.1 0-4.9 1.7-5.6 5.2 1.5-.7 2.8-1.1 3.9-1.1 2 0 3.4 1.1 4.1 3.4l.3 2.7c0 3-1.3 6-3.9 8.9-3.1 3.2-5.4 5.6-6.9 7.1l1.2 1.5c4.1-1.3 7.3-2.2 9.7-2.8 3.1-.7 5.8-1.1 8.1-1.1 4.7 0 10.2 1.3 16.7 3.9l10.6-12.1c1.7 3 3 5.1 3.9 6.4 1.5 2.1 2.9 4 4.3 5.6zm-18.2-29.9c-2.8 2.1-5.3 4.1-7.4 5.9l-7.1 6-1.3-.1v-13l9-6.6zm-1.1 26.7-4.4 5c-4.7-2.1-9.9-3.1-15.7-3.1l-1.3-.2c3.8-3.5 6-8 6.7-13.6l.3-.1c3.3 0 6.2 1.3 8.7 3.8 1.5 1.5 3.4 4.3 5.7 8.2z"/><path d="m85.3219 4.5h-7.4l-2.4 10.2h1.3zm2.6 54.5-1-.9-1.8 1.2c-1.6-.8-2.5-1.9-2.8-3.2v-27.7l2.5-2.8-7.7-6.4-7.4 6.1 2.9 3.1v26.1l-.1 1.8c-.3 4.3 1.8 7.7 6.3 10.1z"/><path d="m117.609 57.2-1-1.1-4.3 3.2-8.8-4.4v-28.4l9 5.1 4.3-6.1-10.1-6.3c-3.7 3.3-7.8004 6-12.3004 7.9v25.5c0 3.1-.9 5.5-2.7 7.1 4.3.9 8.9004 3 13.8004 6.4 4-2.9 8-5.9 12.1-8.9z"/><path d="m162.282 59-1.2-1.3-1.9 1c-1.1-1.5-2-3.8-2.6-6.8-.8-3.7-1.4-6.2-1.9-7.3-1.1-2.9-3-5.3-5.6-7.2 4.2-4.2 7.3-7 9.2-8.5l-9.1-9.6-13 11.4v-18.7c0-4.1 1.6-7.1 4.7-9-3.5 0-6.7 1.6-9.7 4.9l-1.4.1c-1.9-1.5-4.1-2.5-6.5-3.1 2.3 2.3 3.5 4.6 3.5 6.8v8.9h-5.1v5h5.1v27c0 3.1-.8 5.5-2.5 7.2 4 1.2 8.8 3.4 14.5 6.6l9.6-10.1c.7 4.7 2.3 8 4.8 9.8zm-12.1-25.7-14.1 12.1v-11.5l7.9-7.2zm-2.3 20.2-5.8 6-6-3.1v-8.3l5.9-4.7c3.4 2.9 5.4 6.2 5.9 10.1z"/><path d="m198.618 58.8v-32.6c-4.3-.6-9.6-2.9-15.9-7-4.1 3.8-8.8 6.5-14.2 8v23.7c0 3.7-.9 6.2-2.7 7.7 6.7 1.4 12.7 4 18 7.9 3.9-3.3 8.8-5.9 14.8-7.7zm-9.4-.2c-1.1-.3-2.6-.8-4.4-1.5-2.5-.9-4.9-1.9-7.1-2.8v-27.6l11.5 4.4z"/><path d="m231.59 57.3-1.1-1.2-3.4 2.8-7.2-4.6v-28.6h6.8l.7-5.1h-7.5v-10.2l8.6 1.8 2-6.9-9.6-2.3c-3.9 3.5-7.5 5.9-10.9 7.4v10.2h-4.4l-.9 5.1h5.1v25.7c0 3.1-.8 5.5-2.5 7.2 5.9 2.3 10.7 4.8 14.4 7.6z"/><path d="m261.863 57.3-1.1-1.2-3.4 2.8-7.2-4.6v-28.6h6.8l.7-5.1h-7.5v-10.2l8.6 1.8 2-6.9-9.6-2.3c-3.9 3.5-7.5 5.9-10.9 7.4v10.2h-4.4l-.9 5.1h5.1v25.7c0 3.1-.8 5.5-2.5 7.2 5.9 2.3 10.7 4.8 14.4 7.6z"/><path d="m359.463.0999987-.6-.0999987c-2.1 3.5-5.3 5.3-9.7 5.3-2.1 0-4.7-.4-7.8-1.3s-5.6-1.6-7.5-2.1c-3.6-.900001-7.7-1.300002-12.2-1.300002-14.1 0-22.1 6.100002-24.1 18.400002h.4c2.5-3.5 4.9-6 7.2-7.3 2.6-1.4 5.4-2 8.4-1.9l6.1.3c-4.5 3.5-8 6.6-10.3 9.5-3.1 3.7-5.2 7.8-6.4 12.4-.7 2.7-1.1 5.3-1.1 7.6 0 5.6 1.6 10.7 4.9 15.3 5.7 8 14.2 12 25.4 12 2.7 0 5.5-.3 8.2-1 9.1-2.3 15.4-9.3 18.7-21l-.5-.3c-4.4 6.7-10.1 11.1-17.1 13.3v-44l1.2.1c4.5.4 8.4-.6 11.7-3 3.4-2.5 5.1-6.1 5.1-10.9000013zm-20.2 58.2000013-1.3.3c-6.3 0-11.7-1.7-16.1-5 4-3.7 6.7-6.7 8.1-9.1 1.9-3.2 2.8-7.1 2.8-11.6v-20.4l6.5 1.3zm-16.3-14.4c0 3.4-1.1 6.1-3.3 8.2-5.5-5.3-8.2-11.5-8.2-18.5 0-8.4 3.3-16.1 10-23.2l1.5.4z"/><path d="m399.191 59-1.1-.9-1.8.9c-1.3-.4-2.3-1.4-2.8-3.1v-26.2c.7-2.7 1.8-5.2 3.4-7.7l-.2-.4-2.8 2.2-14.2-4.7c-3.1 2.9-6.6 4.2-10.3 3.9l-1.3-.1 4.8 12.5c-6.6 5.9-9.9 11.9-9.9 18.1 0 4.1 2.4 8.4 7.1 12.8h.5l13.6-10.9c0 4.9 2.1 8.5 6.4 10.8zm-15-18.8-10.3-5-4.2-11.4 14.5 5.4zm.1 12.6-7.5 6.4c-3.9-3.9-5.8-8.1-5.8-12.6 0-3.1 1-6.4 2.9-9.8l10.4 5.2z"/><path d="m417.939 4.5h-7.4l-2.4 10.2h1.3zm2.6 54.5-1-.9-1.8 1.2c-1.6-.8-2.5-1.9-2.8-3.2v-27.7l2.5-2.8-7.7-6.4-7.4 6.1 2.9 3.1v26.1l-.1 1.8c-.3 4.3 1.8 7.7 6.3 10.1z"/><path d="m447.526 58.4-1.2-1.3-2.4 1.8-7.3-4.6v-42.1c0-3.7 1.6-6.7 4.9-9.1-3.7.5-7.2 2.2-10.3 5.1l-1.1.1c-1.9-1.5-4.1-2.6-6.6-3.2 2.2 2.3 3.3 4.4 3.3 6.4v39.9c0 2.9-.9 5.3-2.6 7.2 6.3 2.3 11 4.8 14.2 7.6z"/><path d="m504.786 58.8v-28.8c0-3.3-2.3-6.9-6.8-10.8l-13.6 10.5c-.3-3.9-2.5-7.3-6.5-10.4l-13.5 10.1c0-2.8-1.2-5.9-3.7-9.2-2.4-3.4-3.6-5.5-3.6-6.2 0-2 1.3-4.2 4-6.6l-.5-.8c-6.6 3.5-9.9 7.4-9.9 11.7 0 2.7 1.5 5.8 4.4 9.3v23.3c0 3.4-.9 6-2.8 7.7 7.1 1.9 12.9 4.5 17.5 7.9 3.1-2.5 6.1-3.8 9.2-3.8 2.7 0 6.6 1.3 11.7 3.8 4.3-3.7 9-6.3 14.1-7.7zm-8.5.3c-2.1-.6-3.6-1-4.5-1.2-2.7-.7-5.1-1.5-7.3-2.3v-23.3l8-5.9c.9.9 1.5 1.5 1.9 2 1.3 1.3 1.9 2.6 1.9 3.7zm-21.1 0c-4.5-1.5-8.2-2.9-11-4.2v-22.6l7.4-5.9c1.8 2 2.8 3.1 2.9 3.4.5.7.7 1.5.7 2.3z"/><path d="m524.58 4.5h-7.4l-2.4 10.2h1.3zm2.6 54.5-1-.9-1.8 1.2c-1.6-.8-2.5-1.9-2.8-3.2v-27.7l2.5-2.8-7.7-6.4-7.4 6.1 2.9 3.1v26.1l-.1 1.8c-.3 4.3 1.8 7.7 6.3 10.1z"/><path d="m571.366 59.1-1-1-2.1 1.2c-1.3-.9-2.3-2-2.8-3.2v-26.3c1.4-2.3 2.9-4.4 4.4-6.3l-1-1.1-4.3 3.4-6.9-6.4c-2.9 2.7-7.2 6.2-12.8 10.3 0-4.5-2.1-8-6.3-10.5l-8.2 7.5 1 1.1 1.6-1.1c1.6 1.3 2.4 2.9 2.4 4.6v25.7l-2.8 3.1 7.6 6.4 7.2-6.4-2.7-3.4v-24.8l7.1-5.2 4.5 3.9v23.9c0 6 1.3 8.9 6.1 12z"/><path d="m609.502 25.9c0-1.5.3-2.9.8-4.3-1.7.7-3.1 1.8-4 3.3l-30.4-19.4v9.5l12.7 8.2c-3.7 1.9-6.7 3.2-9.1 3.8v23.9c0 3.5-.9 6-2.8 7.7 6.6 1.4 12.6 4 18 7.9 4.1-3.3 9-5.8 14.8-7.7zm-9.5 32.7-11.2-4v-27.3l3.3-2 7.9 5.3z"/></g></svg>
    </span></h1>
  <p class="leading-snug text-gray-700 text-lg max-w-3xl mx-auto pb-6">A free and simple starting point for Ruby on Rails applications.</p>
</div>
<div class="lg:col-span-6">
  <h3 class="font-semibold text-lg text-gray-700">What's under the hood?</h3>
  <ul class="list-disc leading-relaxed pl-4 pt-2">
    <li class="pb-1">Powered by <%= link_to "Ruby on Rails 7", "https://rubyonrails.org", target: :_blank, class: "text-indigo-600 hover:text-indigo-700 underline" %></li>
    <li class="pb-1"><%= link_to "Friendly ID", "https://github.com/norman/friendly_id", target: :_blank, class: "text-indigo-600 hover:text-indigo-700 underline" %> preconfigured for pretty URLs.</li>
    <li class="pb-1"><%= link_to "Devise", "https://github.com/heartcombo/devise", target: :_blank, class: "text-indigo-600 hover:text-indigo-700 underline" %> authentication strategies out of the box.</li>
    <li class="pb-1"><%= link_to "Stripe", "https://stripe.com", target: :_blank, class: "text-indigo-600 hover:text-indigo-700 underline" %> JS and the <%= link_to "Stripe gem", "https://rubygems.org/gems/stripe/", target: :_blank, class: "text-indigo-600 hover:text-indigo-700 underline" %> installed by default for modern payment solutions.</li>
    <li class="pb-1"><%= link_to "Tailwind CSS", "https://tailwindcss.com", target: :_blank, class: "text-indigo-600 hover:text-indigo-700 underline" %>.</li>
    <li class="pb-1">Customized and easily themeable Devise views.</li>
    <li class="pb-1">View helpers for quick form styling with Tailwind CSS.</li>
    <li class="pb-1">Custom scaffold templates.</li>
  </ul>

  <p class="text-xs text-gray-600 max-w-lg mt-6">*This template comes with support for Tailwind CSS only. You will need to adjust the markup to make use of other frameworks. <%= link_to "Read more", "https://github.com/rails/cssbundling-rails#installation", target: :_blank, class: "underline text-indigo-600 hover:text-indigo-700" %></p>

  <div class="mt-6">
    <a href="https://www.buymeacoffee.com/webcrunch" target="_blank"><img src="https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&amp;emoji=&amp;slug=webcrunch&amp;button_colour=f0f0f0&amp;font_colour=333333&amp;font_family=Cookie&amp;outline_colour=333333&amp;coffee_colour=555555"></a>
  </div>
</div>
<div class="lg:col-span-3">
  <h3 class="font-semibold text-gray-700">Useful links</h3>
  <ul class="list-disc leading-loose pl-4 mb-2 text-sm">
    <li>
      <%= link_to "View this on Github", "https://github.com/justalever/kickoff_tailwind", class: "underline text-indigo-600 hover:text-indigo-700" %>
    </li>
    <li>
      <%= link_to "Rails Guides", "https://guides.rubyonrails.org/", class: "underline text-indigo-600 hover:text-indigo-700" %>
    </li>
    <li>
      <%= link_to "Rails API Documentation", "https://api.rubyonrails.org/", class: "underline text-indigo-600 hover:text-indigo-700" %>
    </li>
    <li>
      <%= link_to "Rails Forum", "https://discuss.rubyonrails.org/", class: "underline text-indigo-600 hover:text-indigo-700" %>
    </li>
    <li>
      <%= link_to "Devise Docs", "https://github.com/heartcombo/devise", class: "underline text-indigo-600 hover:text-indigo-700" %>
    </li>
    <li>
      <%= link_to "Friendly ID Docs", "https://github.com/norman/friendly_id", class: "underline text-indigo-600 hover:text-indigo-700" %>
    </li>
    <li>
      <%= link_to "Tailwind CSS Docs", "https://tailwindcss.com/docs/installation", class: "underline text-indigo-600 hover:text-indigo-700" %>
    </li>
  </ul>
</div>
<div class="lg:col-span-3">
  <h3 class="font-semibold text-gray-700">Shameless plugs</h3>
  <ul class="list-disc leading-loose pl-4 mb-2 text-sm">

    <li><%= link_to "web-crunch.com", "https://web-crunch.com", target: :_blank, class: "underline text-indigo-600 hover:text-indigo-700" %></li>
    <li><%= link_to "hellorails.io", "https://hellorails.io", target: :_blank, class: "underline text-indigo-600 hover:text-indigo-700" %></li>
    <li><%= link_to "YouTube", "https://youtube.com/c/webcrunch", target: :_blank, class: "underline text-indigo-600 hover:text-indigo-700" %></li>
    <li>
      <%= link_to "Sponsor me", "https://github.com/sponsors/justalever", target: :_blank, class: "underline text-indigo-600 hover:text-indigo-700" %>
    </li>
  </ul>
</div>
</div>

<div class="lg:block hidden">
  <svg class="fixed bottom-0 left-0 right-0 z-10" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320"><path fill="#5000ca" fill-opacity="1" d="M0,288L60,282.7C120,277,240,267,360,224C480,181,600,107,720,96C840,85,960,139,1080,154.7C1200,171,1320,149,1380,138.7L1440,128L1440,320L1380,320C1320,320,1200,320,1080,320C960,320,840,320,720,320C600,320,480,320,360,320C240,320,120,320,60,320L0,320Z"></path></svg>

  <svg class="fixed bottom-5 left-0 right-0 z-0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320"><path fill="#f3f4f5" fill-opacity="1" d="M0,96L48,128C96,160,192,224,288,240C384,256,480,224,576,176C672,128,768,64,864,53.3C960,43,1056,85,1152,90.7C1248,96,1344,64,1392,48L1440,32L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"></path></svg>
</div>

<div class="w-full lg:absolute bottom-3 lg:right-3 pl-4 pb-3 lg:p-0 flex lg:justify-center justify-start z-50">
  <div class="w-full flex-1 flex lg:justify-center justify-start items-center">
    <img src="https://secure.gravatar.com/avatar/d1f5ca0d7e625f334c5186e112b77ebd?s=400" class="rounded-full w-8 h-8 border-2 border-opacity-30 border-gray-300 mr-2" />
    <p class="lg:text-white text-gray-600 text-sm">Made by <a href="https://twitter.com/justalever" target="_blank" class="underline opacity-75 hover:opacity-100">@justalever</a></p>
  </div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/layouts/action_text/contents/_content.html.erb ===
<div class="trix-content">
  <%= yield -%>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/layouts/application.html.erb ===
<!DOCTYPE html>
<html lang="en" class="dark antialiased">

  <%= render "shared/head" %>

  <body class="bg-white dark:bg-dim-900">
    <div class="container mx-auto h-screen">
      <div class="flex flex-row justify-center">
        
        <%= render "shared/left_side" %>

        <%= content_for?(:content) ? yield(:content) : yield %>

        <%= render "shared/right_side" %>
        
      </div>
    </div>
  </body>
</html>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/layouts/devise.html.erb ===
<!DOCTYPE html>
<html class="h-full antialiased">
  <%= render "shared/head" %>

  <body class="font-sans font-normal leading-normal text-gray-800 bg-white flex flex-col min-h-screen">

    <header>
      <%#= render "shared/flash_notice" %>
    </header>

    <main>
      <%= content_for?(:content) ? yield(:content) : yield %>
    </main>
  </body>
</html>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/layouts/errors.html.erb ===
<!DOCTYPE html>
<html lang="en" class="dark antialiased">
  <%= render "shared/head" %>
  <body>
    <%= content_for?(:content) ? yield(:content) : yield %>
  </body>
</html>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/layouts/mailer.html.erb ===
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <style>
      /* Email styles need to be inline */
    </style>
  </head>

  <body>
    <%= yield %>
  </body>
</html>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/layouts/mailer.text.erb ===
<%= yield %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/layouts/static/tos.html.erb ===
<!DOCTYPE html>
<html class="h-full antialiased">
  <%= render "shared/head" %>

  <body class="font-sans font-normal leading-normal text-gray-800 bg-white flex flex-col min-h-screen">

    <main>
      <%= content_for?(:content) ? yield(:content) : yield %>
    </main>
  </body>
</html>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/mentions/_mention.html.erb ===
<span class="mention">
  text
</span>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/mentions/_notification_count.html.erb ===
<div>
  <%= turbo_stream_from "notifications_count_#{user.id}" %>
  <%= turbo_frame_tag "notifications_count_#{user.id}" do %>
    <% if count.positive? %>
      <div class="notificationCount <%= count >= 20 ? 'w-[2rem] h-[1.5rem]' : 'w-[1.4rem] h-[1.4rem]' %>">
        <% if count >= 20 %>
          20<span class="text-md">+</span>
        <% else %>
          <%= count %>
        <% end %>
      </div>
    <% end %>
  <% end %>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/notifications/index.html.erb ===
<div class="w-full sm:w-600 h-screen scrollbar-hide">

  <%= render 'shared/header',
      view: :notifications,
      name: :notifications,
      followers: nil,
      following: nil,
      is_active: nil %>

    <% @notifications.each do |notification| %>
      <%= render Notifications::MentionComponent.new(
        user: notification.to_notification.creator,
        churp: notification.to_notification.churp,
        unread: notification.unread?),
        read_at: notification.read_at %>
    <% end %>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/profiles/_follow_button.html.erb ===
<% unless current_user == profile.user %>
  <%= turbo_frame_tag "profile_follow_#{profile.id}" do %>
    <div class="inline-block" data-controller="profile-following">
      <% if current_user.following?(profile.user) %>
        <%= button_to 'Following', unfollow_profile_path(profile.user), 
            data: {
              action: 'mouseover->profile-following#unfollow mouseleave->profile-following#follow',
              profile_following_target: "follow",
              profile_following_target_profile: profile.id,
            }, class: 'profile-following primary' %>
      <% else %>
        <%= button_to 'Follow', follow_profile_path(profile.user), class: 'profile-following primary' %>
      <% end %>
    </div>
  <% end %>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/profiles/_form.html.erb ===
<%= form_with(model: @profile, url: "/profiles/#{current_user.id}", method: :put, data: { turbo: false }) do |f| %>
  <div class="flow-root py-2 px-2 ">
    <div class="flex flex-row float-left">
      <div class="py-2 mx-2">
        <%= link_to "/profiles/#{current_user.id}", data: { turbo: false }, class: profile_modal_class do %>
          
          <svg viewBox="0 0 24 24" aria-hidden="true" class="h-6 w-6" style="color: rgb(239, 243, 244);">
            <g>
              <path d="M10.59 12L4.54 5.96l1.42-1.42L12 10.59l6.04-6.05 1.42 1.42L13.41 12l6.05 6.04-1.42 1.42L12 13.41l-6.04 6.05-1.42-1.42L10.59 12z"></path>
            </g>
          </svg>
          
        <% end %>
      </div>
    
      <div class="mx-0">
        <h2 class="my-2 text-xl font-bold text-white">Edit Profile</h2>
      </div>
    </div>
    
    <div class="float-right">
      <div class="flex flex-col text-right">
        <%= f.submit 'Save', class: edit_profile_class %>
        <%#= link_to "Save", create_profile_path, class: edit_profile_class %>
      </div>
    </div>
  </div>

  
  <div class="relative inside-block">
    <%#= image_tag form_profile_bg(profile&.profile_bg), class: "w-full h-full my-0 object-contain" %>
    <div class="w-full bg-cover bg-no-repeat bg-center" style="height: 200px; <%= profile_background_image(profile&.profile_bg) %>"></div>
      <%= f.label :profile_bg, class: 'inset-0 text-blue-400 hover:bg-blue-50 dark:hover:bg-dim-800 rounded-full' do %>
        <svg viewBox="0 0 24 24" aria-hidden="true" class="h-6 w-6 absolute top-1/2 left-1/2 fill-slate-300/50">
          <g>
            <path d="M9.697 3H11v2h-.697l-3 2H5c-.276 0-.5.224-.5.5v11c0 .276.224.5.5.5h14c.276 0 .5-.224.5-.5V10h2v8.5c0 1.381-1.119 2.5-2.5 2.5H5c-1.381 0-2.5-1.119-2.5-2.5v-11C2.5 6.119 3.619 5 5 5h1.697l3-2zM12 10.5c-1.105 0-2 .895-2 2s.895 2 2 2 2-.895 2-2-.895-2-2-2zm-4 2c0-2.209 1.791-4 4-4s4 1.791 4 4-1.791 4-4 4-4-1.791-4-4zM17 2c0 1.657-1.343 3-3 3v1c1.657 0 3 1.343 3 3h1c0-1.657 1.343-3 3-3V5c-1.657 0-3-1.343-3-3h-1z"></path>
          </g>
        </svg>
        <%= f.file_field :profile_bg, as: :file, label: false, class: "hidden" %>
      <% end %>
  </div>

  <div>
    <div class="p-4">
      <div class="relative flex w-full">
        <!-- Avatar -->
        <div class="flex flex-1">
          <div style="margin-top: -6rem;">
            <div style="height:9rem; width:9rem;" class="relative inside-block md rounded-full">
              <%= image_tag(avatar_pic(profile), class: 'md rounded-full relative border-4 border-gray-900', style: "height:9rem; width:9rem;") %>
              <%= f.label :profile_pic, class: 'inset-0 text-blue-400 hover:bg-blue-50 dark:hover:bg-dim-800 rounded-full' do %>
                <svg viewBox="0 0 24 24" aria-hidden="true" class="h-6 w-6 absolute top-1/2 left-1/2 fill-slate-300/50">
                  <g>
                    <path d="M9.697 3H11v2h-.697l-3 2H5c-.276 0-.5.224-.5.5v11c0 .276.224.5.5.5h14c.276 0 .5-.224.5-.5V10h2v8.5c0 1.381-1.119 2.5-2.5 2.5H5c-1.381 0-2.5-1.119-2.5-2.5v-11C2.5 6.119 3.619 5 5 5h1.697l3-2zM12 10.5c-1.105 0-2 .895-2 2s.895 2 2 2 2-.895 2-2-.895-2-2-2zm-4 2c0-2.209 1.791-4 4-4s4 1.791 4 4-1.791 4-4 4-4-1.791-4-4zM17 2c0 1.657-1.343 3-3 3v1c1.657 0 3 1.343 3 3h1c0-1.657 1.343-3 3-3V5c-1.657 0-3-1.343-3-3h-1z"></path>
                  </g>
                </svg>
                <%= f.file_field :profile_pic, as: :file, label: false, class: "hidden" %>
              <% end %>
            </div>
          </div>
        </div>
        
      </div>
  </div>

  <div class="px-4">
    <div class="relative">
      <%= f.text_field :name, class: profile_form_input_class %>
      <%= f.label :name, class: profile_form_label_class %>
    </div>
    
    <div class="relative">
      <%= f.text_field :description, rows: 6, class: profile_form_input_class %>
      <%= f.label :description, class: profile_form_label_class %>
    </div>
    
    <div class="relative">
      <%= f.text_field :website, class: profile_form_input_class %>
      <%= f.label :website, class: profile_form_label_class %>
    </div>
    <div class="relative">
      <%= f.text_field :birth_date, class: profile_form_input_class %>
      <%= f.label :birth_date, class: profile_form_label_class %>
    </div>

    <div class="inline">
      <%#= f.submit class: "rounded-lg py-3 px-5 bg-blue-600 text-white inline-block font-medium cursor-pointer" %>
    </div>

  </div>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/profiles/_profile.html.erb ===
<main role="main">
  <div class="flex" style="width: 990px;">
    <section class="w-3/5 border border-y-0 border-gray-800" style="max-width:600px;">
      <!--Content (Center)-->
      
      <!-- User card-->
        <div class="w-full bg-cover bg-no-repeat bg-center" style="height: 200px; <%= profile_background_image(profile&.profile_bg) %>"></div>
        <div class="p-4">
          <div class="relative flex w-full">
            <!-- Avatar -->
            <div class="flex flex-1">
              <div style="margin-top: -6rem;">
                <div style="height:9rem; width:9rem;" class="md rounded-full relative avatar">
                  <%= image_tag(avatar_pic(profile), class: 'md rounded-full relative border-4 border-gray-900', style: "height:9rem; width:9rem;") %>
                </div>
              </div>
            </div>
            <!-- Edit edit/follow/unfollow Button -->
            <%= render(ProfileComponents::Buttons::EditComponent.new(user: current_user, profile: profile)) %>
            <%= render 'follow_button', profile: profile %>
            
          </div>

          <!-- Profile info -->
          <div class="space-y-1 justify-center w-full mt-3 ml-3">
            <!-- User basic-->
            <div class="pb-4">
              <h2 class="text-xl leading-6 font-bold text-white"><%= profile&.name %></h2>
              <p class="text-sm leading-5 font-medium text-gray-600"><%= profile.user.username %></p>
            </div>
            <!-- Description and others -->
            <div class="mt-3">
              <p class="text-white leading-tight mb-2">
                <%= profile&.description %>
              </p>
              <div class="text-gray-600 flex">
                <span class="flex mr-2">
                  <svg viewBox="0 0 24 24" class="h-5 w-5 fill-white pr-2 paint-icon">
                    <g>
                      <path d="M11.96 14.945c-.067 0-.136-.01-.203-.027-1.13-.318-2.097-.986-2.795-1.932-.832-1.125-1.176-2.508-.968-3.893s.942-2.605 2.068-3.438l3.53-2.608c2.322-1.716 5.61-1.224 7.33 1.1.83 1.127 1.175 2.51.967 3.895s-.943 2.605-2.07 3.438l-1.48 1.094c-.333.246-.804.175-1.05-.158-.246-.334-.176-.804.158-1.05l1.48-1.095c.803-.592 1.327-1.463 1.476-2.45.148-.988-.098-1.975-.69-2.778-1.225-1.656-3.572-2.01-5.23-.784l-3.53 2.608c-.802.593-1.326 1.464-1.475 2.45-.15.99.097 1.975.69 2.778.498.675 1.187 1.15 1.992 1.377.4.114.633.528.52.928-.092.33-.394.547-.722.547z"></path>
                      <path d="M7.27 22.054c-1.61 0-3.197-.735-4.225-2.125-.832-1.127-1.176-2.51-.968-3.894s.943-2.605 2.07-3.438l1.478-1.094c.334-.245.805-.175 1.05.158s.177.804-.157 1.05l-1.48 1.095c-.803.593-1.326 1.464-1.475 2.45-.148.99.097 1.975.69 2.778 1.225 1.657 3.57 2.01 5.23.785l3.528-2.608c1.658-1.225 2.01-3.57.785-5.23-.498-.674-1.187-1.15-1.992-1.376-.4-.113-.633-.527-.52-.927.112-.4.528-.63.926-.522 1.13.318 2.096.986 2.794 1.932 1.717 2.324 1.224 5.612-1.1 7.33l-3.53 2.608c-.933.693-2.023 1.026-3.105 1.026z"></path>
                    </g>
                  </svg>
                  <a href="<%= profile&.website %>" target="#" class="leading-5 ml-1 text-blue-400 pr-4"><%= profile&.website %></a>
                </span>
                <span class="flex mr-2 text-white">
                  <svg viewBox="0 0 24 24" class="h-5 w-5 fill-white pr-2 paint-ico">
                    <g>
                      <path d="M19.708 2H4.292C3.028 2 2 3.028 2 4.292v15.416C2 20.972 3.028 22 4.292 22h15.416C20.972 22 22 20.972 22 19.708V4.292C22 3.028 20.972 2 19.708 2zm.792 17.708c0 .437-.355.792-.792.792H4.292c-.437 0-.792-.355-.792-.792V6.418c0-.437.354-.79.79-.792h15.42c.436 0 .79.355.79.79V19.71z"></path>
                      <circle cx="7.032" cy="8.75" r="1.285"></circle>
                      <circle cx="7.032" cy="13.156" r="1.285"></circle>
                      <circle cx="16.968" cy="8.75" r="1.285"></circle>
                      <circle cx="16.968" cy="13.156" r="1.285"></circle>
                      <circle cx="12" cy="8.75" r="1.285"></circle>
                      <circle cx="12" cy="13.156" r="1.285"></circle>
                      <circle cx="7.032" cy="17.486" r="1.285"></circle>
                      <circle cx="12" cy="17.486" r="1.285"></circle>
                    </g>
                  </svg>
                  <span class="leading-5 ml-1">Joined <%= profile.user.created_at.strftime("%b, %Y") %></span>
                </span>
              </div>
            </div>

            <div class="pt-3 flex justify-start items-start w-full divide-x divide-gray-800 divide-solid">
              <div class="text-center pr-3">
                <%= link_to following_user_path(profile.user), class: 'no-underline hover:underline decoration-white' do %>
                  <%= render(
                    ProfileComponents::SocialCountComponent.new(count: profile.user.following.count)
                                                           .with_content('Following')) %>
                <% end %>
              </div>
              <div class="text-center px-3">
                <%= link_to followers_user_path(profile.user), class: 'no-underline hover:underline decoration-white' do %>
                  <%= render(
                    ProfileComponents::SocialCountComponent.new(count: profile.user.followers.count)
                                                           .with_content('Followers')) %> 
                <% end %>
              </div>
            </div>
          </div>
        </div>
        <hr class="border-gray-800" />
    </section>

  </div>
</main>

<%= render @user_churps %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/profiles/_remote_modal.html.erb ===
<%= turbo_frame_tag "remote_modal" do %>

  <div class="modal fade" 
       id="shareRecipeModal" 
       tabindex="-1" 
       aria-labelledby="newItemRemoteModalLabel" 
       aria-hidden="true" 
       data-controller="remote-modal" 
       data-action="turbo:before-render@document->remote-modal#hideBeforeRender">
    <div class="modal-dialog modal-dialog-centered" role="document">
      <div class="modal-content" id="modal_content">
        <div class="modal-header">
          <h4 class="modal-title" id="newItemRemoteModalLabel"><%= title %></h4>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>

        <div class="modal-body remote_modal_body" id="remote_modal_body">
            <%= yield %>
        </div>
      </div>
    </div>
  </div>

<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/profiles/edit.html.erb ===
<%= turbo_frame_tag "profile_modal" do %>
  <div aria-labelledby="modal-title"
       aria-modal="true" 
       class="fixed inset-0 z-50 overflow-y-auto bg-black/80" role="dialog">
    <div class="h-screen w-full relative flex items-center justify-center">
      <div class="shadow-xl max-w-2xl bg-white m-1 pb-8 prose prose-indigo origin-bottom mx-auto dark:bg-slate-700 dark:text-slate-200 min-w-[600px] rounded-2xl animate-fade-in-up">

        <%= render "form", profile: @profile %>
      </div>
    </div>
  </div>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/profiles/index.html.erb ===
<div class="w-full sm:w-600 h-screen scrollbar-hide">
  <%= render 'shared/header', view: :show, name: @profile&.name || 'test name' %>
  <%= render 'profile', profile: @profile %>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/profiles/new.html.erb ===
<%= turbo_frame_tag "profile_modal" do %>
  <div aria-labelledby="modal-title"
       aria-modal="true" 
       class="fixed inset-0 z-50 overflow-y-auto bg-black/80" role="dialog">
    <div class="h-screen w-full relative flex items-center justify-center">
      <div class="shadow-xl max-w-2xl bg-white m-1 pb-8 prose prose-indigo origin-bottom mx-auto dark:bg-slate-700 dark:text-slate-200 min-w-[600px] rounded-2xl animate-fade-in-up">

        <%= render "form", profile: @profile %>
      </div>
    </div>
  </div>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/profiles/show.html.erb ===
<%#= render 'shared/left_side', churp: @churp %>

<!-- Middle -->
<div class="w-full sm:w-600 h-screen scrollbar-hide">
  <%= render 'shared/header',
    view: :show,
    name: @profile&.name,
    followers: @profile.user.followers,
    following: @profile.user.following %>
  <%= render 'profile', profile: @profile %>
</div>

<!-- /Middle -->

<%#= render 'shared/right_side' %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/search/_form.html.erb ===
<%= form_with(url: search_hashtags_path, method: :get, class: 'w-full', data: {
    controller: "search",
    action: "keyup->search#suggestions",
    suggestions_url: search_suggestions_path,
}) do |f| %>
  <div class="relative mx-2 w-full">
    <div class="absolute text-gray-600 flex items-center pl-4 h-full cursor-pointer">
      <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-mail" width="18" height="18" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
        <path d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z"></path>
      </svg>
    </div>
    <%= f.text_field :q, 
      value: "##{params[:q]}", 
      class: 'z-20 w-full py-4 px-3 bg-gray-200 dark:bg-dim-400 border-gray-200 dark:border-dim-400 text-gray-100 focus:bg-gray-100 dark:focus:bg-dim-900 focus:outline-none focus:border focus:ring-vividSkyBlue font-normal h-12 flex items-center pl-12 text-lg rounded-full border shadow',
      data: {
            search_target: "input",
            action: "blur->search#hideSuggestions",
        },
      placeholder: 'Search Churp', autocomplete: "off" %>
    <div id="suggestions" class="absolute w-full mt-2 bg-white rounded-lg shadow-lg"
        data-search-target="suggestions" data-action="click->search#search">
      <%= render partial: "search/suggestions", locals: { results: results } %>
    </div>
  </div>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/search/_suggestions.html.erb ===
<% if results.any? %>
  <div class="z-20 absolute w-full overflow-y-auto max-h-80 bg-dim-700  dark:text-white rounded-lg scrollbar-hide cursor-pointer transition duration-350 ease-in-out">
    <% results.each do |hashtag| %>
      <div id="suggestions"
           data-controller="search"
           data-search-target="search"
           data-action="click->search#search"
           class="flex flex-row items-center p-4 hover:bg-dim-300">
        <div class="p-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-mail" width="18" height="18" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z"></path>
          </svg>
        </div>
        <%= hashtag.name %>
      </div>
    <% end %>
  </div>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/search/index.html.erb ===
<div class="w-full sm:w-600 h-screen scrollbar-hide">
  
  <%= render 'shared/header', 
      view: :search, 
      name: nil,
      followers: nil,
      following: nil,
      is_active: false %>

    <% @churps.each do |churp| %>
      <%= render ChurpComponents::ChurpBoxComponent.new(churp: churp) %>
    <% end %>
    

    <%#= render 'churps/shared/next_page'%>

</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_flash_notice.html.erb ===
<% unless flash.empty? %>
  <% flash.each do |type, message| %>
    <div class="<%= flash_classes(type) %>">
      <%= message %>
      <%= alert %>
    </div>
  <% end %>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_follow_loader.html.erb ===
<div class="border-b border-gray-200 dark:border-dim-200 p-4 max-w-sm w-full mx-auto">
  <div class="animate-pulse flex space-x-4">
    <div class="rounded-full bg-gray-400 h-12 w-12"></div>
    <div class="flex-1 space-y-4 py-1">
      <div class="h-4 bg-gray-400 rounded w-3/4"></div>
      <div class="space-y-2">
        <div class="h-4 bg-gray-400 rounded"></div>
        <div class="h-4 bg-gray-400 rounded w-5/6"></div>
      </div>
    </div>
  </div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_footer.html.erb ===
<footer>
  <ul class="text-xs text-gray-500 my-4 mx-2">
    <li class="inline-block mx-2">
      <%= link_to 'Terms of Service', terms_of_service_path, class: 'hover:underline' %>
    </li>
    <li class="inline-block mx-2">
      <%= link_to 'Privacy Policy', privacy_policy_path, class: 'hover:underline' %>
    </li>
    <!-- TODO: finish pages
    <li class="inline-block mx-2">
      <a class="hover:underline" href="#">Cookie Policy</a>
    </li>
    <li class="inline-block mx-2">
      <a class="hover:underline" href="#">Ads info</a>
    </li>
    <li class="inline-block mx-2">
      <a class="hover:underline" href="#">More</a>
    </li>
    -->
    <p>
      <li class="inline-block mx-2">© <%= Time.zone.now.year %> Churp</li>
      <li class="inline-block mx-2 text-gray-400"><b><%= version %></li>
    </p>
  </ul>
</footer>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_head.html.erb ===
 <head>
  <title>
    <%= content_for?(:title) ? yield(:title) : "Churp" %>
  </title>

  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= action_cable_meta_tag %>

  <meta name="viewport" content="width=device-width, initial-scale=1">
  <%= stylesheet_link_tag  'application', 'data-turbolinks-track': 'reload' %>
  <%= stylesheet_link_tag "actiontext", "data-turbo-track": "reload" %>
  <%= javascript_include_tag "application", "data-turbo-track": "reload", defer: true %>
  <%#= javascript_include_tag 'https://js.stripe.com/v3/', 'data-turbolinks-track': 'reload' %>
</head>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_header.html.erb ===
<div class="flex flex-row justify-between items-center px-4 py-3 bg-white dark:bg-dim-900 border-l border-r border-b border-gray-200 dark:border-gray-700">
    <div class="w-full">
    <% if view == '' %>
      <%= link_to root_path do %>
        <div class="flex justify-start">
          <div class="mx-2 text-2xl font-medium rounded-full text-blue-400 hover:bg-gray-800 hover:text-blue-300 float-right">
              <%= render Icons::BackArrowComponent.new %>
          </div>
          <div class="py-2 mx-2">
            <h2 class=" text-xl font-bold text-white"><%= name %></h2>
          </div>
        </div>
      <% end %>
    <% elsif view == :search %>
        <div class="flex flex-row items-center justify-between space-x-1 w-full">
          <%= link_to root_path do %>
            <div class="mx-2 text-2xl font-medium rounded-full text-blue-400 hover:bg-gray-800 hover:text-blue-300 float-right">
              <%= render Icons::BackArrowComponent.new %>
            </div>
          <% end %>
          <div class="flex flex-row-reverse space-x-1 w-full">
            <%= render partial: "search/form", locals: { results: [] } %>
          </div>
        </div>
    <% else %>
      <h2 class="text-gray-800 dark:text-gray-100 font-bold font-sm">
        <%= name.capitalize %>
      </h2>   
    <% end %>
    </div>
</div>

<%= header_links(controller_name, view: view, followers: followers, following: following) %>



=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_left_side.html.erb ===
<!-- Left -->
<div class="w-68 xs:w-88 xl:w-275 h-screen">
  <div class="flex flex-col h-screen xl:pr-3 fixed w-68 xs:w-88 xl:w-275 scrollbar-hide">
    
    <%= render 'shared/logo' %>

    <%= render 'shared/navbar'%>

    <%= render 'shared/user_menu'%>

  </div>
</div>
<!-- /Left -->

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_logo.html.erb ===
<!-- Logo -->
<a class="flex my-2 justify-center xl:justify-start" href="/">
  <%= image_tag '/images/logo/churp.png', width: "50", height: "50" %>
</a>
<!-- /Logo -->

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_navbar.html.erb ===
<!-- Nav -->
<nav class="mt-5 scrollbar-hide">
  <a href="/" class="flex items-center justify-center xl:justify-start text-vividSkyBlue mb-8 transition duration-350 ease-in-out">
    <svg fill="currentColor" viewBox="0 0 24 24" class="h-6 w-6">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M22.58 7.35L12.475 1.897c-.297-.16-.654-.16-.95 0L1.425 7.35c-.486.264-.667.87-.405 1.356.18.335.525.525.88.525.16 0 .324-.038.475-.12l.734-.396 1.59 11.25c.216 1.214 1.31 2.062 2.66 2.062h9.282c1.35 0 2.444-.848 2.662-2.088l1.588-11.225.737.398c.485.263 1.092.082 1.354-.404.263-.486.08-1.093-.404-1.355zM12 15.435c-1.795 0-3.25-1.455-3.25-3.25s1.455-3.25 3.25-3.25 3.25 1.455 3.25 3.25-1.455 3.25-3.25 3.25z"></path>
    </svg>
    <span class="hidden xl:block ml-4 font-bold text-md">Home</span>
  </a>

  <a href="#" class="flex items-center justify-center xl:justify-start text-gray-800 dark:text-white hover:text-vividSkyBlue dark:hover:text-vividSkyBlue mb-8 transition duration-350 ease-in-out">
    <svg fill="currentColor" viewBox="0 0 24 24" class="h-6 w-6">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 7.337h-3.93l.372-4.272c.036-.412-.27-.775-.682-.812-.417-.03-.776.27-.812.683l-.383 4.4h-6.32l.37-4.27c.037-.413-.27-.776-.68-.813-.42-.03-.777.27-.813.683l-.382 4.4H3.782c-.414 0-.75.337-.75.75s.336.75.75.75H7.61l-.55 6.327H3c-.414 0-.75.336-.75.75s.336.75.75.75h3.93l-.372 4.272c-.036.412.27.775.682.812l.066.003c.385 0 .712-.295.746-.686l.383-4.4h6.32l-.37 4.27c-.036.413.27.776.682.813l.066.003c.385 0 .712-.295.746-.686l.382-4.4h3.957c.413 0 .75-.337.75-.75s-.337-.75-.75-.75H16.39l.55-6.327H21c.414 0 .75-.336.75-.75s-.336-.75-.75-.75zm-6.115 7.826h-6.32l.55-6.326h6.32l-.55 6.326z"></path>
    </svg>
    <span class="hidden xl:block ml-4 font-bold text-md">Explore</span>
  </a>

  <%= render 'shared/notificaions', user: current_user %>
  <%#= render Nav::NotificationsComponent.new(user: current_user) %>

  <a href="#" class="flex items-center justify-center xl:justify-start text-gray-800 dark:text-white hover:text-vividSkyBlue dark:hover:text-vividSkyBlue mb-8 transition duration-350 ease-in-out">
    <svg fill="currentColor" viewBox="0 0 24 24" class="h-6 w-6">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.25 3.018H4.75C3.233 3.018 2 4.252 2 5.77v12.495c0 1.518 1.233 2.753 2.75 2.753h14.5c1.517 0 2.75-1.235 2.75-2.753V5.77c0-1.518-1.233-2.752-2.75-2.752zm-14.5 1.5h14.5c.69 0 1.25.56 1.25 1.25v.714l-8.05 5.367c-.273.18-.626.182-.9-.002L3.5 6.482v-.714c0-.69.56-1.25 1.25-1.25zm14.5 14.998H4.75c-.69 0-1.25-.56-1.25-1.25V8.24l7.24 4.83c.383.256.822.384 1.26.384.44 0 .877-.128 1.26-.383l7.24-4.83v10.022c0 .69-.56 1.25-1.25 1.25z"></path>
    </svg>
    <span class="hidden xl:block ml-4 font-bold text-md">Messages</span>
  </a>

  <a href="#" class="flex items-center justify-center xl:justify-start text-gray-800 dark:text-white hover:text-vividSkyBlue dark:hover:text-vividSkyBlue mb-8 transition duration-350 ease-in-out">
    <svg fill="currentColor" viewBox="0 0 24 24" class="h-6 w-6">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.9 23.5c-.157 0-.312-.05-.442-.144L12 17.928l-7.458 5.43c-.228.164-.53.19-.782.06-.25-.127-.41-.385-.41-.667V5.6c0-1.24 1.01-2.25 2.25-2.25h12.798c1.24 0 2.25 1.01 2.25 2.25v17.15c0 .282-.158.54-.41.668-.106.055-.223.082-.34.082zM12 16.25c.155 0 .31.048.44.144l6.71 4.883V5.6c0-.412-.337-.75-.75-.75H5.6c-.413 0-.75.338-.75.75v15.677l6.71-4.883c.13-.096.285-.144.44-.144z"></path>
    </svg>
    <span class="hidden xl:block ml-4 font-bold text-md">Bookmarks</span>
  </a>
  <% if Flipper.enabled?(:lists_feature) %>
  <a href="#" class="flex items-center justify-center xl:justify-start text-gray-800 dark:text-white hover:text-vividSkyBlue dark:hover:text-vividSkyBlue mb-8 transition duration-350 ease-in-out">
    <svg fill="currentColor" viewBox="0 0 24 24" class="h-6 w-6">
      <g>
        <path d="M19.75 22H4.25C3.01 22 2 20.99 2 19.75V4.25C2 3.01 3.01 2 4.25 2h15.5C20.99 2 22 3.01 22 4.25v15.5c0 1.24-1.01 2.25-2.25 2.25zM4.25 3.5c-.414 0-.75.337-.75.75v15.5c0 .413.336.75.75.75h15.5c.414 0 .75-.337.75-.75V4.25c0-.413-.336-.75-.75-.75H4.25z"></path>
        <path d="M17 8.64H7c-.414 0-.75-.337-.75-.75s.336-.75.75-.75h10c.414 0 .75.335.75.75s-.336.75-.75.75zm0 4.11H7c-.414 0-.75-.336-.75-.75s.336-.75.75-.75h10c.414 0 .75.336.75.75s-.336.75-.75.75zm-5 4.11H7c-.414 0-.75-.335-.75-.75s.336-.75.75-.75h5c.414 0 .75.337.75.75s-.336.75-.75.75z"></path>
      </g>
    </svg>
    <span class="hidden xl:block ml-4 font-bold text-md">Lists</span>
  </a>
  <% end %>

  <%= link_to profile_path(current_user),
      class: "flex items-center justify-center xl:justify-start text-gray-800 dark:text-white hover:text-vividSkyBlue dark:hover:text-vividSkyBlue mb-8 transition duration-350 ease-in-out" do %>
    <svg fill="currentColor" viewBox="0 0 24 24" class="h-6 w-6">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 11.816c1.355 0 2.872-.15 3.84-1.256.814-.93 1.078-2.368.806-4.392-.38-2.825-2.117-4.512-4.646-4.512S7.734 3.343 7.354 6.17c-.272 2.022-.008 3.46.806 4.39.968 1.107 2.485 1.256 3.84 1.256zM8.84 6.368c.162-1.2.787-3.212 3.16-3.212s2.998 2.013 3.16 3.212c.207 1.55.057 2.627-.45 3.205-.455.52-1.266.743-2.71.743s-2.255-.223-2.71-.743c-.507-.578-.657-1.656-.45-3.205zm11.44 12.868c-.877-3.526-4.282-5.99-8.28-5.99s-7.403 2.464-8.28 5.99c-.172.692-.028 1.4.395 1.94.408.52 1.04.82 1.733.82h12.304c.693 0 1.325-.3 1.733-.82.424-.54.567-1.247.394-1.94zm-1.576 1.016c-.126.16-.316.246-.552.246H5.848c-.235 0-.426-.085-.552-.246-.137-.174-.18-.412-.12-.654.71-2.855 3.517-4.85 6.824-4.85s6.114 1.994 6.824 4.85c.06.242.017.48-.12.654z"></path>
    </svg>
    <span class="hidden xl:block ml-4 font-bold text-md">Profile</span>
  
  <% end %>

  <a href="#" class="flex items-center justify-center xl:justify-start text-gray-800 dark:text-white hover:text-vividSkyBlue dark:hover:text-vividSkyBlue mb-8 transition duration-350 ease-in-out">
    <svg fill="currentColor" viewBox="0 0 24 24" class="h-6 w-6">
      <g>
        <path d="M16.5 10.25c-.965 0-1.75.787-1.75 1.75s.784 1.75 1.75 1.75c.964 0 1.75-.786 1.75-1.75s-.786-1.75-1.75-1.75zm0 2.5c-.414 0-.75-.336-.75-.75 0-.413.337-.75.75-.75s.75.336.75.75c0 .413-.336.75-.75.75zm-4.5-2.5c-.966 0-1.75.787-1.75 1.75s.785 1.75 1.75 1.75 1.75-.786 1.75-1.75-.784-1.75-1.75-1.75zm0 2.5c-.414 0-.75-.336-.75-.75 0-.413.337-.75.75-.75s.75.336.75.75c0 .413-.336.75-.75.75zm-4.5-2.5c-.965 0-1.75.787-1.75 1.75s.785 1.75 1.75 1.75c.964 0 1.75-.786 1.75-1.75s-.787-1.75-1.75-1.75zm0 2.5c-.414 0-.75-.336-.75-.75 0-.413.337-.75.75-.75s.75.336.75.75c0 .413-.336.75-.75.75z"></path>
        <path d="M12 22.75C6.072 22.75 1.25 17.928 1.25 12S6.072 1.25 12 1.25 22.75 6.072 22.75 12 17.928 22.75 12 22.75zm0-20C6.9 2.75 2.75 6.9 2.75 12S6.9 21.25 12 21.25s9.25-4.15 9.25-9.25S17.1 2.75 12 2.75z"></path>
      </g>
    </svg>
    <span class="hidden xl:block ml-4 font-bold text-md">More</span>
  </a>

  <a href="#" class="mx-auto w-11 h-11 xl:w-auto flex items-center justify-center bg-vividSkyBlue hover:bg-cyan-600 py-3 rounded-full text-white font-bold font-sm transition duration-350 ease-in-out mb-10">
    <span class="hidden xl:block font-bold text-md">Churp</span>
  </a>
</nav>
<!-- /Nav -->

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_notificaions.html.erb ===
<div>
  <a href="/notifications" class="flex items-center justify-center xl:justify-start text-gray-800 dark:text-white hover:text-vividSkyBlue dark:hover:text-vividSkyBlue mb-8 transition duration-350 ease-in-out">
    <div class="relative">
      <svg fill="currentColor" viewBox="0 0 24 24" class="h-6 w-6">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21.697 16.468c-.02-.016-2.14-1.64-2.103-6.03.02-2.532-.812-4.782-2.347-6.335C15.872 2.71 14.01 1.94 12.005 1.93h-.013c-2.004.01-3.866.78-5.242 2.174-1.534 1.553-2.368 3.802-2.346 6.334.037 4.33-2.02 5.967-2.102 6.03-.26.193-.366.53-.265.838.102.308.39.515.712.515h4.92c.102 2.31 1.997 4.16 4.33 4.16s4.226-1.85 4.327-4.16h4.922c.322 0 .61-.206.71-.514.103-.307-.003-.645-.263-.838zM12 20.478c-1.505 0-2.73-1.177-2.828-2.658h5.656c-.1 1.48-1.323 2.66-2.828 2.66zM4.38 16.32c.74-1.132 1.548-3.028 1.524-5.896-.018-2.16.644-3.982 1.913-5.267C8.91 4.05 10.397 3.437 12 3.43c1.603.008 3.087.62 4.18 1.728 1.27 1.285 1.933 3.106 1.915 5.267-.024 2.868.785 4.765 1.525 5.896H4.38z"></path>
      </svg>
      <%= render 'mentions/notification_count', user: user, count: user.unread_notifications.count %>
    </div>
    <div>
      <span class="hidden xl:block ml-4 font-bold text-md">Notifications</span>
    </div>
  </a>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_right_side.html.erb ===
<div class="hidden md:block w-290 lg:w-350 h-screen">
  <div class="flex flex-col fixed overflow-y-auto scrollbar-hide w-290 lg:w-350 h-screen">
    
    <%= render Search::SearchBarComponent.new %>

    <%= render 'shared/whats_happening', popular_hashtags: @popular_hashtags %>

    <div class="bg-gray-50 dark:bg-dim-700 rounded-2xl m-2">
      <h1 class="text-gray-900 dark:text-white text-md font-bold p-3 border-b border-gray-200 dark:border-dim-200">
        Who to follow
      </h1>

      <div class="text-blue-400 text-sm font-normal p-3 border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        <div class="flex flex-row justify-between p-2">
          <div class="flex flex-row">
            <img class="w-10 h-10 rounded-full" src="/images/joe_biden.jpg" alt="Joe Biden"/>
            <div class="flex flex-col ml-2">
              <h1 class="text-gray-900 dark:text-white font-bold text-sm">
                Joe Biden
              </h1>
              <p class="text-gray-400 text-sm">@JoeBiden</p>
            </div>
          </div>
          <div class="">
            <div class="flex items-center h-full text-gray-800 dark:text-white">
              <a href="#" class="text-xs font-bold text-vividSkyBlue px-4 py-1 rounded-full border-2 border-vividSkyBlue">Follow</a>
            </div>
          </div>
        </div>
      </div>

      <div class="text-blue-400 text-sm font-normal p-3 border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        <div class="flex flex-row justify-between p-2">
          <div class="flex flex-row">
            <img class="w-10 h-10 rounded-full" src="/images/joe_biden.jpg" alt="Joe Biden"/>
            <div class="flex flex-col ml-2">
              <h1 class="text-gray-900 dark:text-white font-bold text-sm">
                Joe Biden
              </h1>
              <p class="text-gray-400 text-sm">@JoeBiden</p>
            </div>
          </div>
          <div class="">
            <div class="flex items-center h-full text-gray-800 dark:text-white">
              <a href="#" class="text-xs font-bold text-vividSkyBlue px-4 py-1 rounded-full border-2 border-vividSkyBlue">Follow</a>
            </div>
          </div>
        </div>
      </div>

      <%#= render 'shared/follow_loader' %>

      <div class="text-vividSkyBlue text-sm font-normal p-3 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        Show more
      </div>
    </div>

    <%= render 'shared/footer'%>
  </div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_user_menu.html.erb ===
<%= link_to destroy_user_session_path, 
    data: { "turbo-method": :delete },
    class: "w-14 xl:w-full mx-auto mt-auto flex flex-row justify-between mb-5 rounded-full hover:bg-blue-50 dark:hover:bg-dim-800 p-2 cursor-pointer transition duration-350 ease-in-out" do %>
  <div class="">
    <div class="flex flex-row">
      <%= image_tag(avatar_pic(current_user.profile), class: 'w-10 h-10 rounded-full') %>
      <div class="xl:block flex flex-col ml-2">
        <h1 class="text-gray-800 dark:text-white font-bold text-sm"> <%= current_user.profile&.name%> </h1>
        <p class="text-gray-400 text-sm"><%= current_user.username %></p>
      </div>
    </div>

    <div class="hidden xl:block">
      <div class="flex items-center h-full text-gray-800 dark:text-white">
        <svg viewBox="0 0 24 24" fill="currentColor" class="h-4 w-4 mr-2">
          <g>
            <path d="M20.207 8.147c-.39-.39-1.023-.39-1.414 0L12 14.94 5.207 8.147c-.39-.39-1.023-.39-1.414 0-.39.39-.39 1.023 0 1.414l7.5 7.5c.195.196.45.294.707.294s.512-.098.707-.293l7.5-7.5c.39-.39.39-1.022 0-1.413z"></path>
          </g>
        </svg>
      </div>
    </div>
  </div>
<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/_whats_happening.html.erb ===
<div class="bg-gray-50 dark:bg-dim-700 rounded-2xl m-2">
  <h1 class="text-gray-900 dark:text-white text-md font-bold p-3 border-b border-gray-200 dark:border-dim-200">
    What’s happening
  </h1>
  
  <% popular_hashtags.each do |k, v| %>
    <%= render TrendingTopicComponent.new(hashtag: k, num_of_churps: v) %>      
  <% end %>

  <div class="text-vividSkyBlue text-sm font-normal p-3 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
    Show more
  </div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/shared/timeline_notification.html.erb ===
<!-- Timeline Notification -->
<div lass="border-b border-gray-200 dark:border-dim-200 bg-gray-50 dark:bg-dim-300 py-2 border-l border-r">
  <div class="flex flex-col items-center justify-center text-center p-6 bg-white dark:bg-dim-900 border-b border-t border-gray-200 dark:border-dim-200 hover:bg-gray-50 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out text-blue-400 text-sm">
    <h1 class="dark:text-white text-gray-900 text-2xl font-bold mb-2">
      Customize your view
    </h1>
    <p class="text-gray-500 mb-5">
      Manage your font size, color and background. These settings
      affect all the Twitter accounts on this browser.
    </p>
    <a href="javascript:void(0)" onclick="document.querySelector('html').classList.toggle('dark')" class="mx-auto w-11 h-11 xl:w-48 flex items-center justify-center bg-blue-400 hover:bg-blue-500 py-3 rounded-full text-white font-bold font-sm transition duration-350 ease-in-out">
      <svg fill="currentColor" viewBox="0 0 24 24" class="block xl:hidden h-6 w-6">
        <g>
          <path d="M15.692 11.205l6.383-7.216c.45-.45.45-1.18 0-1.628-.45-.45-1.178-.45-1.627 0l-7.232 6.402s.782.106 1.595.93c.548.558.882 1.51.882 1.51z"></path>
          <path d="M17.45 22.28H3.673c-1.148 0-2.083-.946-2.083-2.11V7.926c0-1.165.934-2.112 2.082-2.112h5.836c.414 0 .75.336.75.75s-.336.75-.75.75H3.672c-.32 0-.583.274-.583.612V20.17c0 .336.26.61.582.61h13.78c.32 0 .583-.273.583-.61v-6.28c0-.415.336-.75.75-.75s.75.335.75.75v6.28c0 1.163-.934 2.11-2.084 2.11z"></path>
        </g>
      </svg>
      <span class="hidden xl:block font-bold text-md">Toggle Dark Mode</span>
    </a>
  </div>
</div>
<!-- /Timeline Notification -->

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/static/about.html.erb ===
<header class="bg-white">
  <nav class="mx-auto flex items-center justify-between p-6 lg:px-10" aria-label="Global">
    <div class="flex lg:flex-1 items-center">
      <%= image_tag '/images/logo/churp.png',class: 'mx-2', width: "25", height: "25" %>
      <span class="self-center text-2xl font-semibold whitespace-nowrap text-gray-800">About</span>
    </div>
    <div class="flex lg:hidden">
      <button type="button" class="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700">
        <span class="sr-only">Open main menu</span>
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
        </svg>
      </button>
    </div>

    <div class="hidden lg:flex lg:flex-1 lg:justify-end">
      <a href="#" class="<%= static_button_class%>">Log in <span aria-hidden="true">&rarr;</span></a>
    </div>
  </nav>
  <!-- Mobile menu, show/hide based on menu open state. -->
  <div class="lg:hidden" role="dialog" aria-modal="true">
    <!-- Background backdrop, show/hide based on slide-over state. -->
    <div class="fixed inset-0 z-10"></div>
    <div class="fixed inset-y-0 right-0 z-10 w-full overflow-y-auto bg-white px-6 py-6 sm:max-w-sm sm:ring-1 sm:ring-gray-900/10">
      <div class="flex items-center justify-between">
        <a href="#" class="-m-1.5 p-1.5">
          <span class="sr-only">About</span>
          <%= image_tag '/images/logo/churp.png',class: 'mx-2', width: "25", height: "25" %>
        </a>
        <button type="button" class="-m-2.5 rounded-md p-2.5 text-gray-700">
          <span class="sr-only">Close menu</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

    </div>
  </div>
</header>

<section class="bg-white dark:bg-gray-900">
  <div class="py-8 px-4 mx-auto max-w-screen-xl text-center lg:py-16 lg:px-12">
    <div class="flex justify-center">
      <%= image_tag '/images/logo/churp.png',class: 'mx-2 mb-4', width: "500", height: "500" %>
    </div>
  </div>
</section>


<footer class="bg-gray-900">
    <div class="mx-auto w-full max-w-screen-xl">
      <div class="grid grid-cols-2 gap-8 px-4 py-6 lg:py-8 md:grid-cols-4">
        <div>
            <h2 class="mb-6 text-sm font-semibold text-gray-200 uppercase">Company</h2>
            <ul class="text-gray-200 font-medium">
                <li class="mb-4">
                    <a href="#" class=" hover:underline">About</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Careers</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Brand Center</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Blog</a>
                </li>
            </ul>
        </div>
        <div>
            <h2 class="mb-6 text-sm font-semibold text-gray-200 uppercase">Help center</h2>
            <ul class="text-gray-200 font-medium">
                <li class="mb-4">
                    <a href="#" class="hover:underline">Discord Server</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Twitter</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Facebook</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Contact Us</a>
                </li>
            </ul>
        </div>
        <div>
            <h2 class="mb-6 text-sm font-semibold text-gray-200 uppercase">Legal</h2>
            <ul class="text-gray-200 font-medium">
                <li class="mb-4">
                    <a href="#" class="hover:underline">Privacy Policy</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Licensing</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Terms &amp; Conditions</a>
                </li>
            </ul>
        </div>
        <div>
            <h2 class="mb-6 text-sm font-semibold text-gray-200 uppercase">Download</h2>
            <ul class="text-gray-200 font-medium">
                <li class="mb-4">
                    <a href="#" class="hover:underline">iOS</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Android</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">Windows</a>
                </li>
                <li class="mb-4">
                    <a href="#" class="hover:underline">MacOS</a>
                </li>
            </ul>
        </div>
    </div>
    <div class="px-4 py-6 bg-gray-900 md:flex md:items-center md:justify-between">
        <span class="text-sm text-gray-200 sm:text-center">© <%= Time.zone.now.year %> <a href="/">ChurpSocial</a>. All Rights Reserved.
        </span>
        <div class="flex mt-4 space-x-5 sm:justify-center md:mt-0">
            <a href="#" class="text-gray-400 hover:text-gray-900 dark:hover:text-white">
                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 8 19">
                        <path fill-rule="evenodd" d="M6.135 3H8V0H6.135a4.147 4.147 0 0 0-4.142 4.142V6H0v3h2v9.938h3V9h2.021l.592-3H5V3.591A.6.6 0 0 1 5.592 3h.543Z" clip-rule="evenodd"/>
                    </svg>
                  <span class="sr-only">Facebook page</span>
              </a>
              <a href="#" class="text-gray-400 hover:text-gray-900 dark:hover:text-white">
                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 21 16">
                        <path d="M16.942 1.556a16.3 16.3 0 0 0-4.126-1.3 12.04 12.04 0 0 0-.529 1.1 15.175 15.175 0 0 0-4.573 0 11.585 11.585 0 0 0-.535-1.1 16.274 16.274 0 0 0-4.129 1.3A17.392 17.392 0 0 0 .182 13.218a15.785 15.785 0 0 0 4.963 2.521c.41-.564.773-1.16 1.084-1.785a10.63 10.63 0 0 1-1.706-.83c.143-.106.283-.217.418-.33a11.664 11.664 0 0 0 10.118 0c.137.113.277.224.418.33-.544.328-1.116.606-1.71.832a12.52 12.52 0 0 0 1.084 1.785 16.46 16.46 0 0 0 5.064-2.595 17.286 17.286 0 0 0-2.973-11.59ZM6.678 10.813a1.941 1.941 0 0 1-1.8-2.045 1.93 1.93 0 0 1 1.8-2.047 1.919 1.919 0 0 1 1.8 2.047 1.93 1.93 0 0 1-1.8 2.045Zm6.644 0a1.94 1.94 0 0 1-1.8-2.045 1.93 1.93 0 0 1 1.8-2.047 1.918 1.918 0 0 1 1.8 2.047 1.93 1.93 0 0 1-1.8 2.045Z"/>
                    </svg>
                  <span class="sr-only">Discord community</span>
              </a>
              <a href="#" class="text-gray-400 hover:text-gray-900 dark:hover:text-white">
                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 17">
                    <path fill-rule="evenodd" d="M20 1.892a8.178 8.178 0 0 1-2.355.635 4.074 4.074 0 0 0 1.8-2.235 8.344 8.344 0 0 1-2.605.98A4.13 4.13 0 0 0 13.85 0a4.068 4.068 0 0 0-4.1 4.038 4 4 0 0 0 .105.919A11.705 11.705 0 0 1 1.4.734a4.006 4.006 0 0 0 1.268 5.392 4.165 4.165 0 0 1-1.859-.5v.05A4.057 4.057 0 0 0 4.1 9.635a4.19 4.19 0 0 1-1.856.07 4.108 4.108 0 0 0 3.831 2.807A8.36 8.36 0 0 1 0 14.184 11.732 11.732 0 0 0 6.291 16 11.502 11.502 0 0 0 17.964 4.5c0-.177 0-.35-.012-.523A8.143 8.143 0 0 0 20 1.892Z" clip-rule="evenodd"/>
                </svg>
                  <span class="sr-only">Twitter page</span>
              </a>
              <a href="#" class="text-gray-400 hover:text-gray-900 dark:hover:text-white">
                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 .333A9.911 9.911 0 0 0 6.866 19.65c.5.092.678-.215.678-.477 0-.237-.01-1.017-.014-1.845-2.757.6-3.338-1.169-3.338-1.169a2.627 2.627 0 0 0-1.1-1.451c-.9-.615.07-.6.07-.6a2.084 2.084 0 0 1 1.518 1.021 2.11 2.11 0 0 0 2.884.823c.044-.503.268-.973.63-1.325-2.2-.25-4.516-1.1-4.516-4.9A3.832 3.832 0 0 1 4.7 7.068a3.56 3.56 0 0 1 .095-2.623s.832-.266 2.726 1.016a9.409 9.409 0 0 1 4.962 0c1.89-1.282 2.717-1.016 2.717-1.016.366.83.402 1.768.1 2.623a3.827 3.827 0 0 1 1.02 2.659c0 3.807-2.319 4.644-4.525 4.889a2.366 2.366 0 0 1 .673 1.834c0 1.326-.012 2.394-.012 2.72 0 .263.18.572.681.475A9.911 9.911 0 0 0 10 .333Z" clip-rule="evenodd"/>
                  </svg>
                  <span class="sr-only">GitHub account</span>
              </a>
              <a href="#" class="text-gray-400 hover:text-gray-900 dark:hover:text-white">
                  <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 0a10 10 0 1 0 10 10A10.009 10.009 0 0 0 10 0Zm6.613 4.614a8.523 8.523 0 0 1 1.93 5.32 20.094 20.094 0 0 0-5.949-.274c-.059-.149-.122-.292-.184-.441a23.879 23.879 0 0 0-.566-1.239 11.41 11.41 0 0 0 4.769-3.366ZM8 1.707a8.821 8.821 0 0 1 2-.238 8.5 8.5 0 0 1 5.664 2.152 9.608 9.608 0 0 1-4.476 3.087A45.758 45.758 0 0 0 8 1.707ZM1.642 8.262a8.57 8.57 0 0 1 4.73-5.981A53.998 53.998 0 0 1 9.54 7.222a32.078 32.078 0 0 1-7.9 1.04h.002Zm2.01 7.46a8.51 8.51 0 0 1-2.2-5.707v-.262a31.64 31.64 0 0 0 8.777-1.219c.243.477.477.964.692 1.449-.114.032-.227.067-.336.1a13.569 13.569 0 0 0-6.942 5.636l.009.003ZM10 18.556a8.508 8.508 0 0 1-5.243-1.8 11.717 11.717 0 0 1 6.7-5.332.509.509 0 0 1 .055-.02 35.65 35.65 0 0 1 1.819 6.476 8.476 8.476 0 0 1-3.331.676Zm4.772-1.462A37.232 37.232 0 0 0 13.113 11a12.513 12.513 0 0 1 5.321.364 8.56 8.56 0 0 1-3.66 5.73h-.002Z" clip-rule="evenodd"/>
                </svg>
                  <span class="sr-only">Dribbble account</span>
              </a>
        </div>
      </div>
    </div>
</footer>



=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/static/privacy_policy.html.erb ===

<nav class="bg-white border-gray-200 dark:bg-gray-900">
  <div class="flex flex-wrap items-center justify-between mx-auto p-4 px-8">
    <a href="/" class="flex items-center">
        <%= image_tag '/images/logo/churp.png',class: 'mx-2', width: "25", height: "25" %>
        <span class="self-center text-2xl font-semibold whitespace-nowrap text-gray-800">Terms of Service</span>
    </a>
    
    <div class="hidden w-full md:block md:w-auto" id="navbar-default"></div>
  </div>
</nav>

<div class="h-80 bg-tos-image bg-no-repeat bg-cover">
  <div class="h-full flex flex-col justify-between">
    <div class="px-8 py-2 sm:py-4 lg:py-6">
      <h1 class="text-9xl font-bold text-gray-900 py-8">Terms of Services</h1>
    </div>
    <div class="bg-black px-8 py-4 rounded w-full text-center flex flex-row justify-center">
      <h2 class="text-gray-100">Effective: <%= @updated_at.strftime("%B %-d, %Y") %></h2>
    </div>
  </div>
</div>

<section>
  <div class="container mx-auto">
    <div class="px-8 py-2 sm:py-4 lg:py-6">
      <h1 class="text-4xl font-bold text-gray-900 py-8">Summary of our Terms</h1>
    </div>

      <h2>
        Before you scroll, read this
      </h2>

      <p>
        It’s really hard to make everyone happy with a Privacy Policy. Most people who use ChurpSocial want something short and easy to understand. 
        While we wish we could fit everything you need to know into a post, our regulators ask us to meet our legal obligations by describing 
        them all in a lot of detail.
      </p>

      <p>
        With that in mind, we’ve written our Privacy Policy as simply as possible to empower you to make informed decisions when you use ChurpSocial by 
        making sure you understand and have control over the information we collect, how it’s used, and when it’s shared. 
      </p>

      <p>
        So if you skip reading every word of the Privacy Policy, at least know this:
      </p>
    <div class="my-8">
      <div class="border-b-2 border-gray-800"> </div>
    </div>
  </div>


</section>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/static/terms_of_service.html.erb ===

<nav class="bg-white border-gray-200 dark:bg-gray-900">
  <div class="flex flex-wrap items-center justify-between mx-auto p-4 px-8">
    <a href="/" class="flex items-center">
        <%= image_tag '/images/logo/churp.png',class: 'mx-2', width: "25", height: "25" %>
        <span class="self-center text-2xl font-semibold whitespace-nowrap text-gray-800">Terms of Service</span>
    </a>
    
    <div class="hidden w-full md:block md:w-auto" id="navbar-default"></div>
  </div>
</nav>

<div class="h-80 bg-tos-image bg-no-repeat bg-cover">
  <div class="h-full flex flex-col justify-between">
    <div class="px-8 py-2 sm:py-4 lg:py-6">
      <h1 class="text-9xl font-bold text-gray-900 py-8">Terms of Services</h1>
    </div>
    <div class="bg-black px-8 py-4 rounded w-full text-center flex flex-row justify-center">
      <h2 class="text-gray-100">Effective: <%= @updated_at.strftime("%B %-d, %Y") %></h2>
    </div>
  </div>
</div>

<section>
  <div class="container mx-auto">
    <div class="px-8 py-2 sm:py-4 lg:py-6">
      <h1 class="text-4xl font-bold text-gray-900 py-8">Summary of our Terms</h1>
    </div>

      <p>These Terms of Service (“Terms”) are part of the User Agreement– a legally binding contract governing your use of ChurpSocial. <b>You should read these Terms of Service (“Terms”) in full, but here are a few key things you should take away:</b></p>
      <div class="mx-8">
        <!-- #TODO: not yet ready for ads 
        <ul class='list-disc list-outside py-4'>
          <li>
            <p><b>You will see advertising on the platform:</b> In exchange for accessing the Services, ChurpSocial and our third-party providers and partners may display advertising to you.</p>
          </li>
        </ul>
        -->
        <ul class='list-disc list-outside py-4'>
          <li>
            <p>
              <b>When posting Content and otherwise using the Services, you must comply with this User Agreement and Applicable Law:</b> 
              You are responsible for your use of the Services and your Content. You must comply with this User Agreement, its incorporated policies, 
              and all applicable laws.
            </p>
          </li>
        </ul>
        <ul class='list-disc list-outside py-4'>
          <li>
            <p>
              <b>You must abide by the Services’ acceptable use terms:</b> You may not access the Services in any way other than through the currently 
              available, published interfaces that we provide. For example, this means that you cannot scrape the Services, try to work around any technical 
              limitations we impose, or otherwise attempt to disrupt the operation of the Services.&nbsp;</p>
          </li>
        </ul>
        <ul class='list-disc list-outside py-4'>
          <li>
            <p>
              <b>We have broad enforcement rights:</b> ChurpSocial reserves the right to take enforcement actions against you if you do violate these terms, 
              such as, for example, removing your Content, limiting visibility, discontinuing your access to ChurpSocial, or taking legal action. 
              We may also suspend or terminate your account for other reasons, such as prolonged inactivity, risk of legal exposure, or commercial inviability.&nbsp;
            </p>
          </li>
        </ul>
        <ul class='list-disc list-outside py-4'>
          <li>
            <p>
              <b>There are Intellectual Property Licenses in these Terms:</b> You retain ownership and rights to any of your Content you post or share, and you provide 
              us with a broad, royalty-free license to make your Content available to the rest of the world and to let others do the same. Conversely, we provide you a 
              license to use the software we provide as part of the Services, such as the ChurpSocial mobile application, solely for the purpose of enabling you to use 
              and enjoy the benefit of the Services.&nbsp;
            </p>
          </li>
        </ul>
        <ul class='list-disc list-outside py-4'>
          <li>
            <p>
              <b>Your use of the Services is at your own risk:</b> We provide the Services on an “AS IS” and “AS AVAILABLE” basis, and we disclaim all warranties, 
              responsibility, and liability to you or others to the extent permitted by law. You may be exposed to offensive or harmful content posted by other users. 
              The Services may change from time to time, and we may limit or terminate availability of the Services or particular features to you or other users at any 
              time.&nbsp;
            </p>
          </li>
        </ul>
        <ul class='list-disc list-outside py-4'>
          <li>
            <p>
              <b>You have remedies and redress mechanisms, but our liability is limited:</b> You have a right to terminate this agreement at any time by deactivating 
              your account and discontinuing use of the Services. Note that we will not be liable for certain types of damages as described in the agreement, and in any 
              event, our aggregate liability shall not exceed the greater of $100 USD or the amount you paid us, if any, in the past six months for the Services giving 
              rise to the claim. Further, if you believe that your Content has been copied in a way that constitutes copyright infringement, the reporting process is 
              detailed in these Terms.&nbsp;
            </p>
          </li>
        </ul>
      </div>

      <p>
        Please also note that these Terms incorporate our Privacy Policy (<%= link_to 'https://churpSocial.com/privacy'%>) as well as other terms applicable 
        to your use of the Services and your Content. Finally, these terms may vary depending on where you live, but in any case, you must be at least 13 years old to use ChurpSocial.
      </p>

    <div class="my-8">
      <div class="border-b-2 border-gray-800"> </div>
    </div>
  </div>


</section>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/static/test.html.erb ===
<%= form_with do |f| %>

  <%= f.rich_text_area :content,
                        data: {
                          controller: "mentions",
                          mentions_target: "field",
                        },
                      class: "",
                      placeholder: "What's happening?",
                      label: false %>

      <%= f.button :submit, value: "churp", class: "" %>

<% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/users/_follow.html.erb ===
<%= turbo_frame_tag "follow_card_#{user.id}" do %> 
  <div class="z-0 churp-block border-b border-gray-200 dark:border-dim-200 pb-4 border-l border-r">
    <!-- link -->
    <div class="text-blue-400 text-sm font-normal p-3 border-gray-200 dark:border-dim-200">
      <div class="flex flex-row justify-between p-2">
        <div class="flex flex-row">
          <%= image_tag(avatar_pic(user.profile), class: 'inline-block h-10 w-10 rounded-full') %>
          <div class="flex flex-col ml-2">
            <h1 class="text-gray-900 dark:text-white font-bold text-sm">
              <%= user.profile.name %>
            </h1>
            <p class="text-gray-400 text-sm"><%= user.username %></p>
          </div>
        </div>
        <div class="">
          <div class="flex items-center h-full text-gray-800 dark:text-white">
            <% unless current_user.following?(user) %>
              <%= form_for(current_user.active_relationships.build, remote: true) do |f| %>
                <div><%= hidden_field_tag :followed_id, user.id %></div>
                <%= f.submit "Follow", class: "font-bold text-white bg-vividSkyBlue hover:bg-cyan-600 px-6 py-1 rounded-full" %>
              <% end %>
            <% end %>
          </div>
        </div>
      </div>
    </div>

    <div class="px-6">
      <p class="my-2 text-base width-auto font-medium text-gray-800 dark:text-white flex-shrink">
        <%= user.profile.description %>
      </p>
    </div>
  </div>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/users/_user.html.erb ===
<span class="mention">
  <%= link_to profile_path(user.username), class: 'hover:underline' do %>
  <%= user.username.html_safe %>
  <% end %>
</span>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/users/followers.html.erb ===
<div class="w-full sm:w-600 h-screen scrollbar-hide">
  
  <%= render 'shared/header', 
      view: :followers, 
      name: @user.profile&.name,
      followers: @followers,
      following: nil,
      is_active: true
  %>
    <% @followers.each do |user| %>      
      <%= render "follow", user: %>
    <% end %>
    

    <%#= render 'churps/shared/next_page'%>

</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/users/following.html.erb ===
<div class="w-full sm:w-600 h-screen scrollbar-hide">
  
  <%= render 'shared/header', 
      view: :following, 
      name: @user.profile&.name,
      followers: nil,
      following: @following,
      is_active: true
  %>
    <% @following.each do |user| %> 
      <%= render "follow", user: %>
    <% end %>
    

    <%#= render 'churps/shared/next_page'%>

</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/users/scrollable_list.html.erb ===
<%= turbo_frame_tag "churps-page-#{@pagy.page}" do %>
  <%#= render partial: "churp", collection: @user.churps %>
  <%#= render partial: "churps/shared/next_page" %>
<% end %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/users/shared/_user_link.html.erb ===
<div class="user-link flex flex-shrink-0 p-4 pb-0">
  <div class="flex items-top">
    <div class="user-pic">
      <%= image_tag(avatar_pic(user.profile.profile_pic), 
            class: 'inline-block h-9 w-9 rounded-full') %>
    </div>

    <div class="ml-3">
      <p class="flex items-center text-base leading-6 font-medium text-gray-800 dark:text-white">
        <%= user.profile&.name %>

        <span class="ml-1 text-sm leading-5 font-medium text-gray-400 group-hover:text-gray-300 transition ease-in-out duration-150">
          <%= user.username %>
        </span>
      </p>
    </div>

  </div>
</div>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/users/show.html.erb ===
<!-- Middle -->
<div class="w-full sm:w-600 h-screen scrollbar-hide">
  
  <%= render 'shared/header'%>

  <%#= render 'form', churp: @churp %>

  <!-- Timeline -->

  <!-- New churps -->
  <div data-controller="churps">
    <div class="border-b border-gray-200 dark:border-dim-200 bg-gray-50 dark:bg-dim-300 py-2 border-l border-r">
      <div class="flex flex-shrink-0 items-center justify-center py-4 bg-white dark:bg-dim-900 border-b border-t border-gray-200 dark:border-dim-200 hover:bg-gray-50 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out text-blue-400 text-sm">
        <button class="hidden" 
          data-churps-target="notification" 
          data-action="click->churps#loadNewchurps"></button>
      </div>
    </div>
    <!-- /New churps -->
    <% @churps.each do |churp| %>
      <%= render 'churp', churp: churp %>
    <% end %>
  </div>

  <!-- Timeline Notification -->
  <div lass="border-b border-gray-200 dark:border-dim-200 bg-gray-50 dark:bg-dim-300 py-2 border-l border-r">
    <div class="flex flex-col items-center justify-center text-center p-6 bg-white dark:bg-dim-900 border-b border-t border-gray-200 dark:border-dim-200 hover:bg-gray-50 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out text-blue-400 text-sm">
      <h1 class="dark:text-white text-gray-900 text-2xl font-bold mb-2">
        Customize your view
      </h1>
      <p class="text-gray-500 mb-5">
        Manage your font size, color and background. These settings
        affect all the Twitter accounts on this browser.
      </p>
      <a href="javascript:void(0)" onclick="document.querySelector('html').classList.toggle('dark')" class="mx-auto w-11 h-11 xl:w-48 flex items-center justify-center bg-blue-400 hover:bg-blue-500 py-3 rounded-full text-white font-bold font-sm transition duration-350 ease-in-out">
        <svg fill="currentColor" viewBox="0 0 24 24" class="block xl:hidden h-6 w-6">
          <g>
            <path d="M15.692 11.205l6.383-7.216c.45-.45.45-1.18 0-1.628-.45-.45-1.178-.45-1.627 0l-7.232 6.402s.782.106 1.595.93c.548.558.882 1.51.882 1.51z"></path>
            <path d="M17.45 22.28H3.673c-1.148 0-2.083-.946-2.083-2.11V7.926c0-1.165.934-2.112 2.082-2.112h5.836c.414 0 .75.336.75.75s-.336.75-.75.75H3.672c-.32 0-.583.274-.583.612V20.17c0 .336.26.61.582.61h13.78c.32 0 .583-.273.583-.61v-6.28c0-.415.336-.75.75-.75s.75.335.75.75v6.28c0 1.163-.934 2.11-2.084 2.11z"></path>
          </g>
        </svg>
        <span class="hidden xl:block font-bold text-md">Toggle Dark Mode</span>
      </a>
    </div>
  </div>
  <!-- /Timeline Notification -->

  <!-- Spinner -->
  <%# <div class="flex items-center justify-center p-4 border-b border-l border-r border-gray-200 dark:border-gray-700">
    <svg class="w-8 h-8 animate-spin-fast">
      <circle cx="16" cy="16" fill="none" r="14" stroke-width="4" style="stroke: rgb(29, 161, 242); opacity: 0.2"></circle>
      <circle cx="16" cy="16" fill="none" r="14" stroke-width="4" style=" stroke: rgb(29, 161, 242); stroke-dasharray: 80; stroke-dashoffset: 60;"></circle>
    </svg>
  </div> %>
  <!-- /Spinner -->

  <!-- /Timeline -->
</div>
<!-- /Middle -->

<!-- Right -->
<div class="hidden md:block w-290 lg:w-350 h-screen">
  <div class="flex flex-col fixed overflow-y-auto w-290 lg:w-350 h-screen">
    
    <!-- Search -->
    <div class="relative m-2">
      <div class="absolute text-gray-600 flex items-center pl-4 h-full cursor-pointer">
        <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-mail" width="18" height="18" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
          <path d="M21.53 20.47l-3.66-3.66C19.195 15.24 20 13.214 20 11c0-4.97-4.03-9-9-9s-9 4.03-9 9 4.03 9 9 9c2.215 0 4.24-.804 5.808-2.13l3.66 3.66c.147.146.34.22.53.22s.385-.073.53-.22c.295-.293.295-.767.002-1.06zM3.5 11c0-4.135 3.365-7.5 7.5-7.5s7.5 3.365 7.5 7.5-3.365 7.5-7.5 7.5-7.5-3.365-7.5-7.5z"></path>
        </svg>
      </div>
      <input class="w-full bg-gray-200 dark:bg-dim-400 border-gray-200 dark:border-dim-400 text-gray-100 focus:bg-gray-100 dark:focus:bg-dim-900 focus:outline-none focus:border focus:border-blue-200 font-normal h-9 flex items-center pl-12 text-sm rounded-full border shadow" placeholder="Search Twitter"/>
    </div>
    <!-- /Search -->

    <!-- What’s happening -->
    <div class="bg-gray-50 dark:bg-dim-700 rounded-2xl m-2">
      <h1 class="text-gray-900 dark:text-white text-md font-bold p-3 border-b border-gray-200 dark:border-dim-200">
        What’s happening
      </h1>

      <!-- Trending Topic -->
      <div class="text-blue-400 text-sm font-normal p-3 border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        <h2 class="font-bold text-md text-gray-800 dark:text-white">
          #FreePS5Monday
        </h2>
        <p class="text-xs text-gray-400">29.7K churps</p>
      </div>
      <!-- /Trending Topic -->

      <!-- Trending Topic -->
      <div class="text-blue-400 text-sm font-normal p-3 border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        <h2 class="font-bold text-md text-gray-800 dark:text-white">
          #BTSonGMA
        </h2>
        <p class="text-xs text-gray-400">351K churps</p>
      </div>
      <!-- /Trending Topic -->

      <!-- Trending Topic -->
      <div class="text-blue-400 text-sm font-normal p-3 border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        <h2 class="font-bold text-md text-gray-800 dark:text-white">
          #AstraZeneca
        </h2>
        <p class="text-xs text-gray-400">52.7K churps</p>
      </div>
      <!-- /Trending Topic -->

      <div class="text-blue-400 text-sm font-normal p-3 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        Show more
      </div>
    </div>
    <!-- /What’s happening -->

    <!-- Who to follow -->
    <div class="bg-gray-50 dark:bg-dim-700 rounded-2xl m-2">
      <h1 class="text-gray-900 dark:text-white text-md font-bold p-3 border-b border-gray-200 dark:border-dim-200">
        Who to follow
      </h1>

      <!-- Twitter Account -->
      <div class="text-blue-400 text-sm font-normal p-3 border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        <div class="flex flex-row justify-between p-2">
          <div class="flex flex-row">
            <img class="w-10 h-10 rounded-full" src="/images/joe_biden.jpg" alt="Joe Biden"/>
            <div class="flex flex-col ml-2">
              <h1 class="text-gray-900 dark:text-white font-bold text-sm">
                Joe Biden
              </h1>
              <p class="text-gray-400 text-sm">@JoeBiden</p>
            </div>
          </div>
          <div class="">
            <div class="flex items-center h-full text-gray-800 dark:text-white">
              <a href="#" class="text-xs font-bold text-blue-400 px-4 py-1 rounded-full border-2 border-blue-400">Follow</a>
            </div>
          </div>
        </div>
      </div>
      <!-- /Twitter Account -->

      <!-- Twitter Account -->
      <div class="text-blue-400 text-sm font-normal p-3 border-b border-gray-200 dark:border-dim-200 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        <div class="flex flex-row justify-between p-2">
          <div class="flex flex-row">
            <img class="w-10 h-10 rounded-full" src="/images/joe_biden.jpg" alt="Joe Biden"/>
            <div class="flex flex-col ml-2">
              <h1 class="text-gray-900 dark:text-white font-bold text-sm">
                Joe Biden
              </h1>
              <p class="text-gray-400 text-sm">@JoeBiden</p>
            </div>
          </div>
          <div class="">
            <div class="flex items-center h-full text-gray-800 dark:text-white">
              <a href="#" class="text-xs font-bold text-blue-400 px-4 py-1 rounded-full border-2 border-blue-400">Follow</a>
            </div>
          </div>
        </div>
      </div>
      <!-- /Twitter Account -->

      <!-- Loader -->
      <div class="border-b border-gray-200 dark:border-dim-200 p-4 max-w-sm w-full mx-auto">
        <div class="animate-pulse flex space-x-4">
          <div class="rounded-full bg-gray-400 h-12 w-12"></div>
          <div class="flex-1 space-y-4 py-1">
            <div class="h-4 bg-gray-400 rounded w-3/4"></div>
            <div class="space-y-2">
              <div class="h-4 bg-gray-400 rounded"></div>
              <div class="h-4 bg-gray-400 rounded w-5/6"></div>
            </div>
          </div>
        </div>
      </div>
      <!-- /Loader -->

      <div class="text-blue-400 text-sm font-normal p-3 hover:bg-gray-100 dark:hover:bg-dim-300 cursor-pointer transition duration-350 ease-in-out">
        Show more
      </div>
    </div>
    <!-- /Who to follow -->

    <%= render 'shared/footer'%>
  </div>
</div>
<!-- /Right -->

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/app/views/views/_view.html.erb ===
<div class="z-0 flex-1 flex items-center dark:text-white text-xs text-gray-400 hover:text-red-600 dark:hover:text-red-600 transition duration-350 ease-in-out">
  
  <%= turbo_frame_tag "churp"  do %>
      <div class="flex flex-row items-center">
        <svg width="24px" height="24px" viewBox="0 0 24 24" fill="currentColor" class="fill-white">
          <path fill-rule="evenodd" clip-rule="evenodd" d="M5.5 18C5.5 17.7239 5.72386 17.5 6 17.5H18C18.2761 17.5 18.5 17.7239 18.5 18C18.5 18.2761 18.2761 18.5 18 18.5H6C5.72386 18.5 5.5 18.2761 5.5 18Z" fill="#fff"/>
          <rect x="6.5" y="11.5" width="3" height="7" rx="0.5" fill="#fff"/>
          <rect x="10.5" y="5.5" width="3" height="13" rx="0.5" fill="#fff"/>
          <rect x="14.5" y="8.5" width="3" height="10" rx="0.5" fill="#fff"/>
        </svg>
          <div id="<%= dom_id churp %>">
            <%= content_tag(:div, "", data: {
                controller: "",
                churp_id: churp.id,
                churp_id_value: churp.id,
                view_churps_target: 'count'
            }) %>
            <%#= turbo_stream_from churp, :analytics, channel: ViewChurpsChannel %>
          </div>
      </div>
  <% end %>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/application.rb ===
# frozen_string_literal: true

require_relative "boot"

require "rails/all"

# Require the gems listed in Gemfile, including any gems
# you've limited to :test, :development, or :production.
Bundler.require(*Rails.groups)

require_relative "../lib/churp/version"

module ChurpSocial
  class Application < Rails::Application
    # Initialize configuration defaults for originally generated Rails version.
    config.load_defaults 7.1

    config.exceptions_app = routes unless Rails.env.development?

    # Configuration for the application, engines, and railties goes here.
    #
    # These settings can be overridden in specific environments using the files
    # in config/environments, which are processed later.
    #
    # config.time_zone = "Central Time (US & Canada)"
    # config.eager_load_paths << Rails.root.join("extras")

    # Please, add to the `ignore` list any other `lib` subdirectories that do
    # not contain `.rb` files, or that should not be reloaded or eager loaded.
    # Common ones are `templates`, `generators`, or `middleware`, for example.
    config.autoload_lib(ignore: %w[assets tasks middleware])

    # Autoload and also eager load lib.
    config.autoload_paths << config.root.join("lib")
    # config.eager_load_paths << config.root.join('lib')

    # Enable rails to serve my assets
    config.serve_static_assets = true
    config.public_file_server.enabled = true
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/boot.rb ===
# frozen_string_literal: true

ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "bundler/setup" # Set up gems listed in the Gemfile.
require "bootsnap/setup" # Speed up boot time by caching expensive operations.


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/cable.yml ===
development:
  adapter: redis
  url:  "redis://localhost:6379/1"

test:
  adapter: test
  url: "redis://localhost:6379/1"

production:
  adapter: redis
  url: <%= ENV.fetch("REDIS_URL", "redis://redis:6379/0") %>
  channel_prefix: churp_production


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/database.yml ===
default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

development:
  <<: *default
  database: churp_development
  username: <%= ENV["POSTGRES_USER"] %>
  password: <%= ENV["POSTGRES_PASSWORD"] %>
  host: <%= ENV["DATABASE_HOST"] %>

test:
  <<: *default
  database: churp_test
  username: <%= ENV["POSTGRES_USER"] %>
  password: <%= ENV["POSTGRES_PASSWORD"] %>
  host: <%= ENV["DATABASE_HOST"] %>

production:
  <<: *default
  host: <%= ENV["DATABASE_URL"] %>
  database: <%= ENV["DATABASE_NAME"] %>
  username: <%= ENV["DATABASE_USER"] %>
  password: <%= ENV["DATABASE_PASSWORD"] %>

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/dockerfile.yml ===
# generated by dockerfile-rails

---
options:
  bin-cd: true
  label:
    fly_launch_runtime: rails
  redis: true
  sentry: true
  sudo: true


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/environment.rb ===
# frozen_string_literal: true

# Load the Rails application.
require_relative "application"

# Initialize the Rails application.
Rails.application.initialize!

# Rails.application.default_url_options = Rails.application.config.action_mailer.default_url_options


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/environments/development.rb ===
# frozen_string_literal: true

require "active_support/core_ext/integer/time"

Rails.application.configure do
  config.session_store :cache_store

  # Settings specified here will take precedence over those in config/application.rb.

  # In the development environment your application's code is reloaded any time
  # it changes. This slows down response time but is perfect for development
  # since you don't have to restart the web server when you make code changes.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing
  config.server_timing = true

  config.assets.debug = true

  # Enable/disable caching. By default caching is disabled.
  # Run rails dev:cache to toggle caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true

    config.cache_store = :memory_store
    config.public_file_server.headers = {
      "Cache-Control" => "public, max-age=#{2.days.to_i}"
    }
  else
    config.action_controller.perform_caching = false

    config.cache_store = :null_store
  end

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :amazon

  # Don't care if the mailer can't send.
  config.action_mailer.raise_delivery_errors = false

  config.action_mailer.perform_caching = false

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Highlight code that enqueued background job in logs.
  config.active_job.verbose_enqueue_logs = true

  # Suppress logger output for asset requests.
  config.assets.quiet = true

  config.action_mailer.default_url_options = { host: "localhost:3000" }
  Rails.application.routes.default_url_options[:host] = "localhost:3000"

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Uncomment if you wish to allow Action Cable access from any origin.
  # config.action_cable.disable_request_forgery_protection = true

  # Raise error when a before_action's only/except options reference missing actions
  config.action_controller.raise_on_missing_callback_actions = true
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/environments/production.rb ===
# frozen_string_literal: true

require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Code is not reloaded between requests.
  config.enable_reloading = false

  # Eager load code on boot. This eager loads most of Rails and
  # your application in memory, allowing both threaded web servers
  # and those relying on copy on write to perform better.
  # Rake tasks automatically ignore this option for performance.
  config.eager_load = true

  # Full error reports are disabled and caching is turned on.
  config.consider_all_requests_local = false
  config.action_controller.perform_caching = true

  # Ensures that a master key has been made available in ENV["RAILS_MASTER_KEY"], config/master.key, or an environment
  # key such as config/credentials/production.key. This key is used to decrypt credentials (and other encrypted files).
  # config.require_master_key = true

  # Enable static file serving from the `/public` folder (turn off if using NGINX/Apache for it).
  config.public_file_server.enabled = true

  # Compress CSS using a preprocessor.
  # config.assets.css_compressor = :sass

  # Do not fallback to assets pipeline if a precompiled asset is missed.
  config.assets.compile = false

  # Enable serving of images, stylesheets, and JavaScripts from an asset server.
  # config.asset_host = "http://assets.example.com"

  # Specifies the header that your server uses for sending files.
  # config.action_dispatch.x_sendfile_header = "X-Sendfile" # for Apache
  # config.action_dispatch.x_sendfile_header = "X-Accel-Redirect" # for NGINX

  # Store uploaded files on the local file system (see config/storage.yml for options).
  config.active_storage.service = :amazon

  # Mount Action Cable outside main process or domain.
  # config.action_cable.mount_path = nil
  # config.action_cable.url = "wss://example.com/cable"
  # config.action_cable.allowed_request_origins = [ "http://example.com", /http:\/\/example.*/ ]

  # Assume all access to the app is happening through a SSL-terminating reverse proxy.
  # Can be used together with config.force_ssl for Strict-Transport-Security and secure cookies.
  # config.assume_ssl = true

  # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
  config.force_ssl = true

  # Log to STDOUT by default
  config.logger = ActiveSupport::Logger.new($stdout)
    .tap { |logger| logger.formatter = Logger::Formatter.new }
    .then { |logger| ActiveSupport::TaggedLogging.new(logger) }

  # Prepend all log lines with the following tags.
  config.log_tags = [:request_id]

  # Info include generic and useful information about system operation, but avoids logging too much
  # information to avoid inadvertent exposure of personally identifiable information (PII). If you
  # want to log everything, set the level to "debug".
  config.log_level = ENV.fetch("RAILS_LOG_LEVEL", "info")

  config.action_mailer.default_url_options = { host: "https://churp-app.fly.dev/" }
  Rails.application.routes.default_url_options[:host] = "https://churp-app.fly.dev/"

  # Use a different cache store in production.
  # config.cache_store = :mem_cache_store

  # Use a real queuing backend for Active Job (and separate queues per environment).
  # config.active_job.queue_adapter     = :resque
  # config.active_job.queue_name_prefix = "churp_social_production"

  config.action_mailer.perform_caching = false

  # Ignore bad email addresses and do not raise email delivery errors.
  # Set this to true and configure the email server for immediate delivery to raise delivery errors.
  # config.action_mailer.raise_delivery_errors = false

  # Enable locale fallbacks for I18n (makes lookups for any locale fall back to
  # the I18n.default_locale when a translation cannot be found).
  config.i18n.fallbacks = true

  # Don't log any deprecations.
  config.active_support.report_deprecations = false

  # Do not dump schema after migrations.
  config.active_record.dump_schema_after_migration = false

  # Enable DNS rebinding protection and other `Host` header attacks.
  # config.hosts = [
  #   "example.com",     # Allow requests from example.com
  #   /.*\.example\.com/ # Allow requests from subdomains like `www.example.com`
  # ]
  # Skip DNS rebinding protection for the default health check endpoint.
  # config.host_authorization = { exclude: ->(request) { request.path == "/up" } }
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/environments/test.rb ===
# frozen_string_literal: true

require "active_support/core_ext/integer/time"

# The test environment is used exclusively to run your application's
# test suite. You never need to work with it otherwise. Remember that
# your test database is "scratch space" for the test suite and is wiped
# and recreated between test runs. Don't rely on the data there!

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # While tests run files are not watched, reloading is not necessary.
  config.enable_reloading = false

  # Eager loading loads your entire application. When running a single test locally,
  # this is usually not necessary, and can slow down your test suite. However, it's
  # recommended that you enable it in continuous integration systems to ensure eager
  # loading is working properly before deploying your code.
  config.eager_load = ENV["CI"].present?

  # Configure public file server for tests with Cache-Control for performance.
  config.public_file_server.enabled = true
  config.public_file_server.headers = {
    "Cache-Control" => "public, max-age=#{1.hour.to_i}"
  }

  # Show full error reports and disable caching.
  config.consider_all_requests_local = true
  config.action_controller.perform_caching = false
  config.cache_store = :null_store

  # Raise exceptions instead of rendering exception templates.
  config.action_dispatch.show_exceptions = :rescuable

  # Disable request forgery protection in test environment.
  config.action_controller.allow_forgery_protection = false

  # Store uploaded files on the local file system in a temporary directory.
  config.active_storage.service = :test

  config.action_mailer.perform_caching = false

  # Tell Action Mailer not to deliver emails to the real world.
  # The :test delivery method accumulates sent emails in the
  # ActionMailer::Base.deliveries array.
  config.action_mailer.delivery_method = :test
  # config.active_storage.url_options = { host: 'http://localhost:3000' }
  # config.action_mailer.default_url_options = { host: 'http://localhost:3000' }
  # Rails.application.routes.default_url_options[:host] = 'localhost:3000'

  # Print deprecation notices to the stderr.
  config.active_support.deprecation = :stderr

  # Raise exceptions for disallowed deprecations.
  config.active_support.disallowed_deprecation = :raise

  # Tell Active Support which deprecation messages to disallow.
  config.active_support.disallowed_deprecation_warnings = []

  # Raises error for missing translations.
  # config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  # config.action_view.annotate_rendered_view_with_filenames = true

  # Raise error when a before_action's only/except options reference missing actions
  config.action_controller.raise_on_missing_callback_actions = true
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/assets.rb ===
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.

# Version of your assets, change this if you want to expire all your assets.
Rails.application.config.assets.version = "1.0"

# Add additional assets to the asset load path.
# Rails.application.config.assets.paths << Emoji.images_path

# Precompile additional assets.
Rails.application.config.assets.paths << Rails.public_path
Rails.application.config.assets.paths << Rails.public_path.join("images", "letter_avatars")

# application.js, application.css, and all non-JS/CSS in the app/assets
# folder are already added.
# Rails.application.config.assets.precompile += %w( admin.js admin.css )


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/content_security_policy.rb ===
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.

# Define an application-wide content security policy.
# See the Securing Rails Applications Guide for more information:
# https://guides.rubyonrails.org/security.html#content-security-policy-header

# Rails.application.configure do
#   config.content_security_policy do |policy|
#     policy.default_src :self, :https
#     policy.font_src    :self, :https, :data
#     policy.img_src     :self, :https, :data
#     policy.object_src  :none
#     policy.script_src  :self, :https
#     policy.style_src   :self, :https
#     # Specify URI for violation reports
#     # policy.report_uri "/csp-violation-report-endpoint"
#   end
#
#   # Generate session nonces for permitted importmap, inline scripts, and inline styles.
#   config.content_security_policy_nonce_generator = ->(request) { request.session.id.to_s }
#   config.content_security_policy_nonce_directives = %w(script-src style-src)
#
#   # Report violations without enforcing the policy.
#   # config.content_security_policy_report_only = true
# end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/devise.rb ===
# frozen_string_literal: true

# Assuming you have not yet modified this file, each configuration option below
# is set to its default value. Note that some are commented out while others
# are not: uncommented lines are intended to protect your configuration from
# breaking changes in upgrades (i.e., in the event that future versions of
# Devise change the default values for those options).
#
# Use this hook to configure devise mailer, warden hooks and so forth.
# Many of these configuration options can be set straight in your model.
Devise.setup do |config|
  # The secret key used by Devise. Devise uses this key to generate
  # random tokens. Changing this key will render invalid all existing
  # confirmation, reset password and unlock tokens in the database.
  # Devise will use the `secret_key_base` as its `secret_key`
  # by default. You can change it below and use your own secret key.
  # config.secret_key = '644050de757298a6a299931d8173605dc1e1ba29e70da0efcfee26a2baddba0d8b0aec95857eb21d41568c1f0d82104ff44b6a943b5017713379ca426f7afead'

  # ==> Controller configuration
  # Configure the parent class to the devise controllers.
  # config.parent_controller = 'DeviseController'

  # ==> Mailer Configuration
  # Configure the e-mail address which will be shown in Devise::Mailer,
  # note that it will be overwritten if you use your own mailer class
  # with default "from" parameter.
  config.mailer_sender = "please-change-me-at-config-initializers-devise@example.com"

  # Configure the class responsible to send e-mails.
  # config.mailer = 'Devise::Mailer'

  # Configure the parent class responsible to send e-mails.
  # config.parent_mailer = 'ActionMailer::Base'

  # ==> ORM configuration
  # Load and configure the ORM. Supports :active_record (default) and
  # :mongoid (bson_ext recommended) by default. Other ORMs may be
  # available as additional gems.
  require "devise/orm/active_record"

  # ==> Configuration for any authentication mechanism
  # Configure which keys are used when authenticating a user. The default is
  # just :email. You can configure it to use [:username, :subdomain], so for
  # authenticating a user, both parameters are required. Remember that those
  # parameters are used only when authenticating and not when retrieving from
  # session. If you need permissions, you should implement that in a before filter.
  # You can also supply a hash where the value is a boolean determining whether
  # or not authentication should be aborted when the value is not present.
  config.authentication_keys = [:email]

  # Configure parameters from the request object used for authentication. Each entry
  # given should be a request method and it will automatically be passed to the
  # find_for_authentication method and considered in your model lookup. For instance,
  # if you set :request_keys to [:subdomain], :subdomain will be used on authentication.
  # The same considerations mentioned for authentication_keys also apply to request_keys.
  # config.request_keys = []

  # Configure which authentication keys should be case-insensitive.
  # These keys will be downcased upon creating or modifying a user and when used
  # to authenticate or find a user. Default is :email.
  config.case_insensitive_keys = [:email]

  # Configure which authentication keys should have whitespace stripped.
  # These keys will have whitespace before and after removed upon creating or
  # modifying a user and when used to authenticate or find a user. Default is :email.
  config.strip_whitespace_keys = [:email]

  # Tell if authentication through request.params is enabled. True by default.
  # It can be set to an array that will enable params authentication only for the
  # given strategies, for example, `config.params_authenticatable = [:database]` will
  # enable it only for database (email + password) authentication.
  # config.params_authenticatable = true

  # Tell if authentication through HTTP Auth is enabled. False by default.
  # It can be set to an array that will enable http authentication only for the
  # given strategies, for example, `config.http_authenticatable = [:database]` will
  # enable it only for database authentication.
  # For API-only applications to support authentication "out-of-the-box", you will likely want to
  # enable this with :database unless you are using a custom strategy.
  # The supported strategies are:
  # :database      = Support basic authentication with authentication key + password
  # config.http_authenticatable = false

  # If 401 status code should be returned for AJAX requests. True by default.
  # config.http_authenticatable_on_xhr = true

  # The realm used in Http Basic Authentication. 'Application' by default.
  # config.http_authentication_realm = 'Application'

  # It will change confirmation, password recovery and other workflows
  # to behave the same regardless if the e-mail provided was right or wrong.
  # Does not affect registerable.
  # config.paranoid = true

  # By default Devise will store the user in session. You can skip storage for
  # particular strategies by setting this option.
  # Notice that if you are skipping storage for all authentication paths, you
  # may want to disable generating routes to Devise's sessions controller by
  # passing skip: :sessions to `devise_for` in your config/routes.rb
  config.skip_session_storage = [:http_auth]

  # By default, Devise cleans up the CSRF token on authentication to
  # avoid CSRF token fixation attacks. This means that, when using AJAX
  # requests for sign in and sign up, you need to get a new CSRF token
  # from the server. You can disable this option at your own risk.
  # config.clean_up_csrf_token_on_authentication = true

  # When false, Devise will not attempt to reload routes on eager load.
  # This can reduce the time taken to boot the app but if your application
  # requires the Devise mappings to be loaded during boot time the application
  # won't boot properly.
  # config.reload_routes = true

  # ==> Configuration for :database_authenticatable
  # For bcrypt, this is the cost for hashing the password and defaults to 12. If
  # using other algorithms, it sets how many times you want the password to be hashed.
  # The number of stretches used for generating the hashed password are stored
  # with the hashed password. This allows you to change the stretches without
  # invalidating existing passwords.
  #
  # Limiting the stretches to just one in testing will increase the performance of
  # your test suite dramatically. However, it is STRONGLY RECOMMENDED to not use
  # a value less than 10 in other environments. Note that, for bcrypt (the default
  # algorithm), the cost increases exponentially with the number of stretches (e.g.
  # a value of 20 is already extremely slow: approx. 60 seconds for 1 calculation).
  config.stretches = Rails.env.test? ? 1 : 12

  # Set up a pepper to generate the hashed password.
  # config.pepper = 'e68d60dc52e3bf34ac7bc50bc7c629095047a432e86f469c0e1f93036a766215069f4aa59d6c7c8f89576ba2c2608f35e6747ca4d3ecca99a3029b69106596fc'

  # Send a notification to the original email when the user's email is changed.
  # config.send_email_changed_notification = false

  # Send a notification email when the user's password is changed.
  # config.send_password_change_notification = false

  # ==> Configuration for :confirmable
  # A period that the user is allowed to access the website even without
  # confirming their account. For instance, if set to 2.days, the user will be
  # able to access the website for two days without confirming their account,
  # access will be blocked just in the third day.
  # You can also set it to nil, which will allow the user to access the website
  # without confirming their account.
  # Default is 0.days, meaning the user cannot access the website without
  # confirming their account.
  # config.allow_unconfirmed_access_for = 2.days

  # A period that the user is allowed to confirm their account before their
  # token becomes invalid. For example, if set to 3.days, the user can confirm
  # their account within 3 days after the mail was sent, but on the fourth day
  # their account can't be confirmed with the token any more.
  # Default is nil, meaning there is no restriction on how long a user can take
  # before confirming their account.
  # config.confirm_within = 3.days

  # If true, requires any email changes to be confirmed (exactly the same way as
  # initial account confirmation) to be applied. Requires additional unconfirmed_email
  # db field (see migrations). Until confirmed, new email is stored in
  # unconfirmed_email column, and copied to email column on successful confirmation.
  config.reconfirmable = true

  # Defines which key will be used when confirming an account
  # config.confirmation_keys = [:email]

  # ==> Configuration for :rememberable
  # The time the user will be remembered without asking for credentials again.
  # config.remember_for = 2.weeks

  # Invalidates all the remember me tokens when the user signs out.
  config.expire_all_remember_me_on_sign_out = true

  # If true, extends the user's remember period when remembered via cookie.
  # config.extend_remember_period = false

  # Options to be passed to the created cookie. For instance, you can set
  # secure: true in order to force SSL only cookies.
  # config.rememberable_options = {}

  # ==> Configuration for :validatable
  # Range for password length.
  config.password_length = 10..128

  # Email regex used to validate email formats. It simply asserts that
  # one (and only one) @ exists in the given string. This is mainly
  # to give user feedback and not to assert the e-mail validity.
  config.email_regexp = /\A[^@\s]+@[^@\s]+\z/

  # ==> Configuration for :timeoutable
  # The time you want to timeout the user session without activity. After this
  # time the user will be asked for credentials again. Default is 30 minutes.
  # config.timeout_in = 30.minutes

  # ==> Configuration for :lockable
  # Defines which strategy will be used to lock an account.
  # :failed_attempts = Locks an account after a number of failed attempts to sign in.
  # :none            = No lock strategy. You should handle locking by yourself.
  # config.lock_strategy = :failed_attempts

  # Defines which key will be used when locking and unlocking an account
  # config.unlock_keys = [:email]

  # Defines which strategy will be used to unlock an account.
  # :email = Sends an unlock link to the user email
  # :time  = Re-enables login after a certain amount of time (see :unlock_in below)
  # :both  = Enables both strategies
  # :none  = No unlock strategy. You should handle unlocking by yourself.
  # config.unlock_strategy = :both

  # Number of authentication tries before locking an account if lock_strategy
  # is failed attempts.
  # config.maximum_attempts = 20

  # Time interval to unlock the account if :time is enabled as unlock_strategy.
  # config.unlock_in = 1.hour

  # Warn on the last attempt before the account is locked.
  # config.last_attempt_warning = true

  # ==> Configuration for :recoverable
  #
  # Defines which key will be used when recovering the password for an account
  # config.reset_password_keys = [:email]

  # Time interval you can reset your password with a reset password key.
  # Don't put a too small interval or your users won't have the time to
  # change their passwords.
  config.reset_password_within = 6.hours

  # When set to false, does not sign a user in automatically after their password is
  # reset. Defaults to true, so a user is signed in automatically after a reset.
  # config.sign_in_after_reset_password = true

  # ==> Configuration for :encryptable
  # Allow you to use another hashing or encryption algorithm besides bcrypt (default).
  # You can use :sha1, :sha512 or algorithms from others authentication tools as
  # :clearance_sha1, :authlogic_sha512 (then you should set stretches above to 20
  # for default behavior) and :restful_authentication_sha1 (then you should set
  # stretches to 10, and copy REST_AUTH_SITE_KEY to pepper).
  #
  # Require the `devise-encryptable` gem when using anything other than bcrypt
  # config.encryptor = :sha512

  # ==> Scopes configuration
  # Turn scoped views on. Before rendering "sessions/new", it will first check for
  # "users/sessions/new". It's turned off by default because it's slower if you
  # are using only default views.
  # config.scoped_views = false

  # Configure the default scope given to Warden. By default it's the first
  # devise role declared in your routes (usually :user).
  # config.default_scope = :user

  # Set this configuration to false if you want /users/sign_out to sign out
  # only the current scope. By default, Devise signs out all scopes.
  # config.sign_out_all_scopes = true

  # ==> Navigation configuration
  # Lists the formats that should be treated as navigational. Formats like
  # :html should redirect to the sign in page when the user does not have
  # access, but formats like :xml or :json, should return 401.
  #
  # If you have any extra navigational formats, like :iphone or :mobile, you
  # should add them to the navigational formats lists.
  #
  # The "*/*" below is required to match Internet Explorer requests.
  # config.navigational_formats = ['*/*', :html, :turbo_stream]

  # The default HTTP method used to sign out a resource. Default is :delete.
  config.sign_out_via = :delete

  # ==> OmniAuth
  # Add a new OmniAuth provider. Check the wiki for more information on setting
  # up on your models and hooks.
  # config.omniauth :github, 'APP_ID', 'APP_SECRET', scope: 'user,public_repo'

  # ==> Warden configuration
  # If you want to use other strategies, that are not supported by Devise, or
  # change the failure app, you can configure them inside the config.warden block.
  #
  # config.warden do |manager|
  #   manager.intercept_401 = false
  #   manager.default_strategies(scope: :user).unshift :some_external_strategy
  # end

  # ==> Mountable engine configurations
  # When using Devise inside an engine, let's call it `MyEngine`, and this engine
  # is mountable, there are some extra configurations to be taken into account.
  # The following options are available, assuming the engine is mounted as:
  #
  #     mount MyEngine, at: '/my_engine'
  #
  # The router that invoked `devise_for`, in the example above, would be:
  # config.router_name = :my_engine
  #
  # When using OmniAuth, Devise cannot automatically set OmniAuth path,
  # so you need to do it manually. For the users scope, it would be:
  # config.omniauth_path_prefix = '/my_engine/users/auth'

  # ==> Hotwire/Turbo configuration
  # When using Devise with Hotwire/Turbo, the http status for error responses
  # and some redirects must match the following. The default in Devise for existing
  # apps is `200 OK` and `302 Found respectively`, but new apps are generated with
  # these new defaults that match Hotwire/Turbo behavior.
  # Note: These might become the new default in future versions of Devise.
  config.responder.error_status = :unprocessable_entity
  config.responder.redirect_status = :see_other

  # ==> Configuration for :registerable

  # When set to false, does not sign a user in automatically after their password is
  # changed. Defaults to true, so a user is signed in automatically after changing a password.
  # config.sign_in_after_change_password = true
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/elasticsearch.rb ===
# frozen_string_literal: true

ENV["ELASTICSEARCH_URL"] = "http://213.188.195.143:9200" if Rails.env.production?


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/filter_parameter_logging.rb ===
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.

# Configure parameters to be partially matched (e.g. passw matches password) and filtered from the log file.
# Use this to limit dissemination of sensitive information.
# See the ActiveSupport::ParameterFilter documentation for supported notations and behaviors.
Rails.application.config.filter_parameters += %i[
  passw secret token _key crypt salt certificate otp ssn
]


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/flipper.rb ===
# frozen_string_literal: true

# admin_user policy block
Flipper.register(:admin_user) do |actor, _context|
  actor.respond_to?(:admin?) && actor.admin?
end

# patron policy block
Flipper.register(:patron) do |actor, _context|
  actor.respond_to?(:patron?) && actor.patron?
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/friendly_id.rb ===
# frozen_string_literal: true

# FriendlyId Global Configuration
#
# Use this to set up shared configuration options for your entire application.
# Any of the configuration options shown here can also be applied to single
# models by passing arguments to the `friendly_id` class method or defining
# methods in your model.
#
# To learn more, check out the guide:
#
# http://norman.github.io/friendly_id/file.Guide.html

FriendlyId.defaults do |config|
  # ## Reserved Words
  #
  # Some words could conflict with Rails's routes when used as slugs, or are
  # undesirable to allow as slugs. Edit this list as needed for your app.
  config.use :reserved

  config.reserved_words = %w[new edit index session login logout users admin
    stylesheets assets javascripts images]

  # This adds an option to treat reserved words as conflicts rather than exceptions.
  # When there is no good candidate, a UUID will be appended, matching the existing
  # conflict behavior.

  # config.treat_reserved_as_conflict = true

  #  ## Friendly Finders
  #
  # Uncomment this to use friendly finders in all models. By default, if
  # you wish to find a record by its friendly id, you must do:
  #
  #    MyModel.friendly.find('foo')
  #
  # If you uncomment this, you can do:
  #
  #    MyModel.find('foo')
  #
  # This is significantly more convenient but may not be appropriate for
  # all applications, so you must explicitly opt-in to this behavior. You can
  # always also configure it on a per-model basis if you prefer.
  #
  # Something else to consider is that using the :finders addon boosts
  # performance because it will avoid Rails-internal code that makes runtime
  # calls to `Module.extend`.
  #
  # config.use :finders
  #
  # ## Slugs
  #
  # Most applications will use the :slugged module everywhere. If you wish
  # to do so, uncomment the following line.
  #
  # config.use :slugged
  #
  # By default, FriendlyId's :slugged addon expects the slug column to be named
  # 'slug', but you can change it if you wish.
  #
  # config.slug_column = 'slug'
  #
  # By default, slug has no size limit, but you can change it if you wish.
  #
  # config.slug_limit = 255
  #
  # When FriendlyId can not generate a unique ID from your base method, it appends
  # a UUID, separated by a single dash. You can configure the character used as the
  # separator. If you're upgrading from FriendlyId 4, you may wish to replace this
  # with two dashes.
  #
  # config.sequence_separator = '-'
  #
  # Note that you must use the :slugged addon **prior** to the line which
  # configures the sequence separator, or else FriendlyId will raise an undefined
  # method error.
  #
  #  ## Tips and Tricks
  #
  #  ### Controlling when slugs are generated
  #
  # As of FriendlyId 5.0, new slugs are generated only when the slug field is
  # nil, but if you're using a column as your base method can change this
  # behavior by overriding the `should_generate_new_friendly_id?` method that
  # FriendlyId adds to your model. The change below makes FriendlyId 5.0 behave
  # more like 4.0.
  # Note: Use(include) Slugged module in the config if using the anonymous module.
  # If you have `friendly_id :name, use: slugged` in the model, Slugged module
  # is included after the anonymous module defined in the initializer, so it
  # overrides the `should_generate_new_friendly_id?` method from the anonymous module.
  #
  # config.use :slugged
  # config.use Module.new {
  #   def should_generate_new_friendly_id?
  #     slug.blank? || <your_column_name_here>_changed?
  #   end
  # }
  #
  # FriendlyId uses Rails's `parameterize` method to generate slugs, but for
  # languages that don't use the Roman alphabet, that's not usually sufficient.
  # Here we use the Babosa library to transliterate Russian Cyrillic slugs to
  # ASCII. If you use this, don't forget to add "babosa" to your Gemfile.
  #
  # config.use Module.new {
  #   def normalize_friendly_id(text)
  #     text.to_slug.normalize! :transliterations => [:russian, :latin]
  #   end
  # }
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/inflections.rb ===
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.

# Add new inflection rules using the following format. Inflections
# are locale specific, and you may define rules for as many different
# locales as you wish. All of these examples are active by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.plural /^(ox)$/i, "\\1en"
#   inflect.singular /^(ox)en/i, "\\1"
#   inflect.irregular "person", "people"
#   inflect.uncountable %w( fish sheep )
# end

# These inflection rules are supported but not enabled by default:
# ActiveSupport::Inflector.inflections(:en) do |inflect|
#   inflect.acronym "RESTful"
# end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/letter_avatar.rb ===
# frozen_string_literal: true

LetterAvatar.setup do |config|
  config.fill_color = "rgba(255, 255, 255, 1)"
  config.cache_base_path = "public/images"
  config.colors_palette = :iwanthue
  config.weight = 600
  config.annotate_position = "-0+10"
  config.letters_count = 2
  config.pointsize = 220
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/new_framework_defaults_7_0.rb ===
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.
#
# This file eases your Rails 7.0 framework defaults upgrade.
#
# Uncomment each configuration one by one to switch to the new default.
# Once your application is ready to run with all new defaults, you can remove
# this file and set the `config.load_defaults` to `7.0`.
#
# Read the Guide for Upgrading Ruby on Rails for more info on each option.
# https://guides.rubyonrails.org/upgrading_ruby_on_rails.html

# `button_to` view helper will render `<button>` element, regardless of whether
# or not the content is passed as the first argument or as a block.
# Rails.application.config.action_view.button_to_generates_button_tag = true

# `stylesheet_link_tag` view helper will not render the media attribute by default.
# Rails.application.config.action_view.apply_stylesheet_media_default = false

# Change the digest class for the key generators to `OpenSSL::Digest::SHA256`.
# Changing this default means invalidate all encrypted messages generated by
# your application and, all the encrypted cookies. Only change this after you
# rotated all the messages using the key rotator.
#
# See upgrading guide for more information on how to build a rotator.
# https://guides.rubyonrails.org/v7.0/upgrading_ruby_on_rails.html
# Rails.application.config.active_support.key_generator_hash_digest_class = OpenSSL::Digest::SHA256

# Change the digest class for ActiveSupport::Digest.
# Changing this default means that for example Etags change and
# various cache keys leading to cache invalidation.
# Rails.application.config.active_support.hash_digest_class = OpenSSL::Digest::SHA256

# Don't override ActiveSupport::TimeWithZone.name and use the default Ruby
# implementation.
# Rails.application.config.active_support.remove_deprecated_time_with_zone_name = true

# Calls `Rails.application.executor.wrap` around test cases.
# This makes test cases behave closer to an actual request or job.
# Several features that are normally disabled in test, such as Active Record query cache
# and asynchronous queries will then be enabled.
# Rails.application.config.active_support.executor_around_test_case = true

# Set both the `:open_timeout` and `:read_timeout` values for `:smtp` delivery method.
# Rails.application.config.action_mailer.smtp_timeout = 5

# The ActiveStorage video previewer will now use scene change detection to generate
# better preview images (rather than the previous default of using the first frame
# of the video).
# Rails.application.config.active_storage.video_preview_arguments =
#   "-vf 'select=eq(n\\,0)+eq(key\\,1)+gt(scene\\,0.015),loop=loop=-1:size=2,trim=start_frame=1' -frames:v 1 -f image2"

# Automatically infer `inverse_of` for associations with a scope.
# Rails.application.config.active_record.automatic_scope_inversing = true

# Raise when running tests if fixtures contained foreign key violations
# Rails.application.config.active_record.verify_foreign_keys_for_fixtures = true

# Disable partial inserts.
# This default means that all columns will be referenced in INSERT queries
# regardless of whether they have a default or not.
# Rails.application.config.active_record.partial_inserts = false

# Protect from open redirect attacks in `redirect_back_or_to` and `redirect_to`.
# Rails.application.config.action_controller.raise_on_open_redirects = true

# Change the variant processor for Active Storage.
# Changing this default means updating all places in your code that
# generate variants to use image processing macros and ruby-vips
# operations. See the upgrading guide for detail on the changes required.
# The `:mini_magick` option is not deprecated; it's fine to keep using it.
# Rails.application.config.active_storage.variant_processor = :vips

# Enable parameter wrapping for JSON.
# Previously this was set in an initializer. It's fine to keep using that initializer if you've customized it.
# To disable parameter wrapping entirely, set this config to `false`.
# Rails.application.config.action_controller.wrap_parameters_by_default = true

# Specifies whether generated namespaced UUIDs follow the RFC 4122 standard for namespace IDs provided as a
# `String` to `Digest::UUID.uuid_v3` or `Digest::UUID.uuid_v5` method calls.
#
# See https://guides.rubyonrails.org/configuring.html#config-active-support-use-rfc4122-namespaced-uuids for
# more information.
# Rails.application.config.active_support.use_rfc4122_namespaced_uuids = true

# Change the default headers to disable browsers' flawed legacy XSS protection.
# Rails.application.config.action_dispatch.default_headers = {
#   "X-Frame-Options" => "SAMEORIGIN",
#   "X-XSS-Protection" => "0",
#   "X-Content-Type-Options" => "nosniff",
#   "X-Download-Options" => "noopen",
#   "X-Permitted-Cross-Domain-Policies" => "none",
#   "Referrer-Policy" => "strict-origin-when-cross-origin"
# }

# ** Please read carefully, this must be configured in config/application.rb **
# Change the format of the cache entry.
# Changing this default means that all new cache entries added to the cache
# will have a different format that is not supported by Rails 6.1 applications.
# Only change this value after your application is fully deployed to Rails 7.0
# and you have no plans to rollback.
# When you're ready to change format, add this to `config/application.rb` (NOT this file):
#  config.active_support.cache_format_version = 7.0

# Cookie serializer: 2 options
#
# If you're upgrading and haven't set `cookies_serializer` previously, your cookie serializer
# is `:marshal`. The default for new apps is `:json`.
#
# Rails.application.config.action_dispatch.cookies_serializer = :json
#
#
# To migrate an existing application to the `:json` serializer, use the `:hybrid` option.
#
# Rails transparently deserializes existing (Marshal-serialized) cookies on read and
# re-writes them in the JSON format.
#
# It is fine to use `:hybrid` long term; you should do that until you're confident *all* your cookies
# have been converted to JSON. To keep using `:hybrid` long term, move this config to its own
# initializer or to `config/application.rb`.
#
# Rails.application.config.action_dispatch.cookies_serializer = :hybrid
#
#
# If your cookies can't yet be serialized to JSON, keep using `:marshal` for backward-compatibility.
#
# If you have configured the serializer elsewhere, you can remove this section of the file.
#
# See https://guides.rubyonrails.org/action_controller_overview.html#cookies for more information.

# Change the return value of `ActionDispatch::Request#content_type` to the Content-Type header without modification.
# Rails.application.config.action_dispatch.return_only_request_media_type_on_content_type = false

# Active Storage `has_many_attached` relationships will default to replacing the current collection instead of appending to it.
# Thus, to support submitting an empty collection, the `file_field` helper will render an hidden field `include_hidden` by default when `multiple_file_field_include_hidden` is set to `true`.
# See https://guides.rubyonrails.org/configuring.html#config-active-storage-multiple-file-field-include-hidden for more information.
# Rails.application.config.active_storage.multiple_file_field_include_hidden = true

# ** Please read carefully, this must be configured in config/application.rb (NOT this file) **
# Disables the deprecated #to_s override in some Ruby core classes
# See https://guides.rubyonrails.org/configuring.html#config-active-support-disable-to-s-conversion for more information.
# config.active_support.disable_to_s_conversion = true


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/new_framework_defaults_7_1.rb ===
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.
#
# This file eases your Rails 7.1 framework defaults upgrade.
#
# Uncomment each configuration one by one to switch to the new default.
# Once your application is ready to run with all new defaults, you can remove
# this file and set the `config.load_defaults` to `7.1`.
#
# Read the Guide for Upgrading Ruby on Rails for more info on each option.
# https://guides.rubyonrails.org/upgrading_ruby_on_rails.html

# No longer add autoloaded paths into `$LOAD_PATH`. This means that you won't be able
# to manually require files that are managed by the autoloader, which you shouldn't do anyway.
# This will reduce the size of the load path, making `require` faster if you don't use bootsnap, or reduce the size
# of the bootsnap cache if you use it.
# Rails.application.config.add_autoload_paths_to_load_path = false

# Remove the default X-Download-Options headers since it is used only by Internet Explorer.
# If you need to support Internet Explorer, add back `"X-Download-Options" => "noopen"`.
# Rails.application.config.action_dispatch.default_headers = {
#   "X-Frame-Options" => "SAMEORIGIN",
#   "X-XSS-Protection" => "0",
#   "X-Content-Type-Options" => "nosniff",
#   "X-Permitted-Cross-Domain-Policies" => "none",
#   "Referrer-Policy" => "strict-origin-when-cross-origin"
# }

# Do not treat an `ActionController::Parameters` instance
# as equal to an equivalent `Hash` by default.
# Rails.application.config.action_controller.allow_deprecated_parameters_hash_equality = false

# Active Record Encryption now uses SHA-256 as its hash digest algorithm. Important: If you have
# data encrypted with previous Rails versions, there are two scenarios to consider:
#
# 1. If you have +config.active_support.key_generator_hash_digest_class+ configured as SHA1 (the default
# before Rails 7.0), you need to configure SHA-1 for Active Record Encryption too:
# Rails.application.config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA1
# 2. If you have +config.active_support.key_generator_hash_digest_class+ configured as SHA256 (the new default
# in 7.0), then you need to configure SHA-256 for Active Record Encryption:
# Rails.application.config.active_record.encryption.hash_digest_class = OpenSSL::Digest::SHA256
#
# If you don't currently have data encrypted with Active Record encryption, you can disable this setting to
# configure the default behavior starting 7.1+:
# Rails.application.config.active_record.encryption.support_sha1_for_non_deterministic_encryption = false

# No longer run after_commit callbacks on the first of multiple Active Record
# instances to save changes to the same database row within a transaction.
# Instead, run these callbacks on the instance most likely to have internal
# state which matches what was committed to the database, typically the last
# instance to save.
# Rails.application.config.active_record.run_commit_callbacks_on_first_saved_instances_in_transaction = false

# Configures SQLite with a strict strings mode, which disables double-quoted string literals.
#
# SQLite has some quirks around double-quoted string literals.
# It first tries to consider double-quoted strings as identifier names, but if they don't exist
# it then considers them as string literals. Because of this, typos can silently go unnoticed.
# For example, it is possible to create an index for a non existing column.
# See https://www.sqlite.org/quirks.html#double_quoted_string_literals_are_accepted for more details.
# Rails.application.config.active_record.sqlite3_adapter_strict_strings_by_default = true

# Disable deprecated singular associations names
# Rails.application.config.active_record.allow_deprecated_singular_associations_name = false

# Enable the Active Job `BigDecimal` argument serializer, which guarantees
# roundtripping. Without this serializer, some queue adapters may serialize
# `BigDecimal` arguments as simple (non-roundtrippable) strings.
#
# When deploying an application with multiple replicas, old (pre-Rails 7.1)
# replicas will not be able to deserialize `BigDecimal` arguments from this
# serializer. Therefore, this setting should only be enabled after all replicas
# have been successfully upgraded to Rails 7.1.
# Rails.application.config.active_job.use_big_decimal_serializer = true

# Specify if an `ArgumentError` should be raised if `Rails.cache` `fetch` or
# `write` are given an invalid `expires_at` or `expires_in` time.
# Options are `true`, and `false`. If `false`, the exception will be reported
# as `handled` and logged instead.
# Rails.application.config.active_support.raise_on_invalid_cache_expiration_time = true

# Specify whether Query Logs will format tags using the SQLCommenter format
# (https://open-telemetry.github.io/opentelemetry-sqlcommenter/), or using the legacy format.
# Options are `:legacy` and `:sqlcommenter`.
# Rails.application.config.active_record.query_log_tags_format = :sqlcommenter

# Specify the default serializer used by `MessageEncryptor` and `MessageVerifier`
# instances.
#
# The legacy default is `:marshal`, which is a potential vector for
# deserialization attacks in cases where a message signing secret has been
# leaked.
#
# In Rails 7.1, the new default is `:json_allow_marshal` which serializes and
# deserializes with `ActiveSupport::JSON`, but can fall back to deserializing
# with `Marshal` so that legacy messages can still be read.
#
# In Rails 7.2, the default will become `:json` which serializes and
# deserializes with `ActiveSupport::JSON` only.
#
# Alternatively, you can choose `:message_pack` or `:message_pack_allow_marshal`,
# which serialize with `ActiveSupport::MessagePack`. `ActiveSupport::MessagePack`
# can roundtrip some Ruby types that are not supported by JSON, and may provide
# improved performance, but it requires the `msgpack` gem.
#
# For more information, see
# https://guides.rubyonrails.org/v7.1/configuring.html#config-active-support-message-serializer
#
# If you are performing a rolling deploy of a Rails 7.1 upgrade, wherein servers
# that have not yet been upgraded must be able to read messages from upgraded
# servers, first deploy without changing the serializer, then set the serializer
# in a subsequent deploy.
# Rails.application.config.active_support.message_serializer = :json_allow_marshal

# Enable a performance optimization that serializes message data and metadata
# together. This changes the message format, so messages serialized this way
# cannot be read by older versions of Rails. However, messages that use the old
# format can still be read, regardless of whether this optimization is enabled.
#
# To perform a rolling deploy of a Rails 7.1 upgrade, wherein servers that have
# not yet been upgraded must be able to read messages from upgraded servers,
# leave this optimization off on the first deploy, then enable it on a
# subsequent deploy.
# Rails.application.config.active_support.use_message_serializer_for_metadata = true

# Set the maximum size for Rails log files.
#
# `config.load_defaults 7.1` does not set this value for environments other than
# development and test.
#
# if Rails.env.local?
#   Rails.application.config.log_file_size = 100 * 1024 * 1024
# end

# Enable raising on assignment to attr_readonly attributes. The previous
# behavior would allow assignment but silently not persist changes to the
# database.
# Rails.application.config.active_record.raise_on_assign_to_attr_readonly = true

# Enable validating only parent-related columns for presence when the parent is mandatory.
# The previous behavior was to validate the presence of the parent record, which performed an extra query
# to get the parent every time the child record was updated, even when parent has not changed.
# Rails.application.config.active_record.belongs_to_required_validates_foreign_key = false

# Enable precompilation of `config.filter_parameters`. Precompilation can
# improve filtering performance, depending on the quantity and types of filters.
# Rails.application.config.precompile_filter_parameters = true

# Enable before_committed! callbacks on all enrolled records in a transaction.
# The previous behavior was to only run the callbacks on the first copy of a record
# if there were multiple copies of the same record enrolled in the transaction.
# Rails.application.config.active_record.before_committed_on_all_records = true

# Disable automatic column serialization into YAML.
# To keep the historic behavior, you can set it to `YAML`, however it is
# recommended to explicitly define the serialization method for each column
# rather than to rely on a global default.
# Rails.application.config.active_record.default_column_serializer = nil

# Enable a performance optimization that serializes Active Record models
# in a faster and more compact way.
#
# To perform a rolling deploy of a Rails 7.1 upgrade, wherein servers that have
# not yet been upgraded must be able to read caches from upgraded servers,
# leave this optimization off on the first deploy, then enable it on a
# subsequent deploy.
# Rails.application.config.active_record.marshalling_format_version = 7.1

# Run `after_commit` and `after_*_commit` callbacks in the order they are defined in a model.
# This matches the behaviour of all other callbacks.
# In previous versions of Rails, they ran in the inverse order.
# Rails.application.config.active_record.run_after_transaction_callbacks_in_order_defined = true

# Whether a `transaction` block is committed or rolled back when exited via `return`, `break` or `throw`.
#
# Rails.application.config.active_record.commit_transaction_on_non_local_return = true

# Controls when to generate a value for <tt>has_secure_token</tt> declarations.
#
# Rails.application.config.active_record.generate_secure_token_on = :initialize

# ** Please read carefully, this must be configured in config/application.rb **
# Change the format of the cache entry.
# Changing this default means that all new cache entries added to the cache
# will have a different format that is not supported by Rails 7.0
# applications.
# Only change this value after your application is fully deployed to Rails 7.1
# and you have no plans to rollback.
# When you're ready to change format, add this to `config/application.rb` (NOT
# this file):
#   config.active_support.cache_format_version = 7.1

# Configure Action View to use HTML5 standards-compliant sanitizers when they are supported on your
# platform.
#
# `Rails::HTML::Sanitizer.best_supported_vendor` will cause Action View to use HTML5-compliant
# sanitizers if they are supported, else fall back to HTML4 sanitizers.
#
# In previous versions of Rails, Action View always used `Rails::HTML4::Sanitizer` as its vendor.
#
# Rails.application.config.action_view.sanitizer_vendor = Rails::HTML::Sanitizer.best_supported_vendor

# Configure Action Text to use an HTML5 standards-compliant sanitizer when it is supported on your
# platform.
#
# `Rails::HTML::Sanitizer.best_supported_vendor` will cause Action Text to use HTML5-compliant
# sanitizers if they are supported, else fall back to HTML4 sanitizers.
#
# In previous versions of Rails, Action Text always used `Rails::HTML4::Sanitizer` as its vendor.
#
# Rails.application.config.action_text.sanitizer_vendor = Rails::HTML::Sanitizer.best_supported_vendor

# Configure the log level used by the DebugExceptions middleware when logging
# uncaught exceptions during requests
# Rails.application.config.action_dispatch.debug_exception_log_level = :error

# Configure the test helpers in Action View, Action Dispatch, and rails-dom-testing to use HTML5
# parsers.
#
# Nokogiri::HTML5 isn't supported on JRuby, so JRuby applications must set this to :html4.
#
# In previous versions of Rails, these test helpers always used an HTML4 parser.
#
# Rails.application.config.dom_testing_default_html_version = :html5


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/pagy.rb ===
# frozen_string_literal: true

require "pagy/extras/countless"


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/permissions_policy.rb ===
# frozen_string_literal: true

# Be sure to restart your server when you modify this file.

# Define an application-wide HTTP permissions policy. For further
# information see: https://developers.google.com/web/updates/2018/06/feature-policy

# Rails.application.config.permissions_policy do |policy|
#   policy.camera      :none
#   policy.gyroscope   :none
#   policy.microphone  :none
#   policy.usb         :none
#   policy.fullscreen  :self
#   policy.payment     :self, "https://secure.example.com"
# end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/sentry.rb ===
# frozen_string_literal: true

if ENV["SENTRY_DSN"]

  Sentry.init do |config|
    config.dsn = ENV["SENTRY_DSN"]
    config.breadcrumbs_logger = %i[active_support_logger http_logger]

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    config.traces_sample_rate = 1.0
    # or
    config.traces_sampler = lambda do |_context|
      true
    end
  end

end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/initializers/simple_form.rb ===
# frozen_string_literal: true

#
# Uncomment this and change the path if necessary to include your own
# components.
# See https://github.com/heartcombo/simple_form#custom-components to know
# more about custom components.
# Dir[Rails.root.join('lib/components/**/*.rb')].each { |f| require f }
#
# Use this setup block to configure all options available in SimpleForm.
SimpleForm.setup do |config|
  # Wrappers are used by the form builder to generate a
  # complete input. You can remove any component from the
  # wrapper, change the order or even add your own to the
  # stack. The options given below are used to wrap the
  # whole input.
  config.wrappers :default, class: :input,
    hint_class: :field_with_hint, error_class: :field_with_errors, valid_class: :field_without_errors do |b|
    ## Extensions enabled by default
    # Any of these extensions can be disabled for a
    # given input by passing: `f.input EXTENSION_NAME => false`.
    # You can make any of these extensions optional by
    # renaming `b.use` to `b.optional`.

    # Determines whether to use HTML5 (:email, :url, ...)
    # and required attributes
    b.use :html5

    # Calculates placeholders automatically from I18n
    # You can also pass a string as f.input placeholder: "Placeholder"
    b.use :placeholder

    ## Optional extensions
    # They are disabled unless you pass `f.input EXTENSION_NAME => true`
    # to the input. If so, they will retrieve the values from the model
    # if any exists. If you want to enable any of those
    # extensions by default, you can change `b.optional` to `b.use`.

    # Calculates maxlength from length validations for string inputs
    # and/or database column lengths
    b.optional :maxlength

    # Calculate minlength from length validations for string inputs
    b.optional :minlength

    # Calculates pattern from format validations for string inputs
    b.optional :pattern

    # Calculates min and max from length validations for numeric inputs
    b.optional :min_max

    # Calculates readonly automatically from readonly attributes
    b.optional :readonly

    ## Inputs
    # b.use :input, class: 'input', error_class: 'is-invalid', valid_class: 'is-valid'
    b.use :label_input
    b.use :hint, wrap_with: { tag: :span, class: :hint }
    b.use :error, wrap_with: { tag: :span, class: :error }

    ## full_messages_for
    # If you want to display the full error message for the attribute, you can
    # use the component :full_error, like:
    #
    # b.use :full_error, wrap_with: { tag: :span, class: :error }
  end

  # The default wrapper to be used by the FormBuilder.
  config.default_wrapper = :default

  # Define the way to render check boxes / radio buttons with labels.
  # Defaults to :nested for bootstrap config.
  #   inline: input + label
  #   nested: label > input
  config.boolean_style = :nested

  # Default class for buttons
  config.button_class = "btn"

  # Method used to tidy up errors. Specify any Rails Array method.
  # :first lists the first message for each field.
  # Use :to_sentence to list all errors for each field.
  # config.error_method = :first

  # Default tag used for error notification helper.
  config.error_notification_tag = :div

  # CSS class to add for error notification helper.
  config.error_notification_class = "error_notification"

  # Series of attempts to detect a default label method for collection.
  # config.collection_label_methods = [ :to_label, :name, :title, :to_s ]

  # Series of attempts to detect a default value method for collection.
  # config.collection_value_methods = [ :id, :to_s ]

  # You can wrap a collection of radio/check boxes in a pre-defined tag, defaulting to none.
  # config.collection_wrapper_tag = nil

  # You can define the class to use on all collection wrappers. Defaulting to none.
  # config.collection_wrapper_class = nil

  # You can wrap each item in a collection of radio/check boxes with a tag,
  # defaulting to :span.
  # config.item_wrapper_tag = :span

  # You can define a class to use in all item wrappers. Defaulting to none.
  # config.item_wrapper_class = nil

  # How the label text should be generated altogether with the required text.
  # config.label_text = lambda { |label, required, explicit_label| "#{required} #{label}" }

  # You can define the class to use on all labels. Default is nil.
  # config.label_class = nil

  # You can define the default class to be used on forms. Can be overridden
  # with `html: { :class }`. Defaulting to none.
  # config.default_form_class = nil

  # You can define which elements should obtain additional classes
  # config.generate_additional_classes_for = [:wrapper, :label, :input]

  # Whether attributes are required by default (or not). Default is true.
  # config.required_by_default = true

  # Tell browsers whether to use the native HTML5 validations (novalidate form option).
  # These validations are enabled in SimpleForm's internal config but disabled by default
  # in this configuration, which is recommended due to some quirks from different browsers.
  # To stop SimpleForm from generating the novalidate option, enabling the HTML5 validations,
  # change this configuration to true.
  config.browser_validations = false

  # Custom mappings for input types. This should be a hash containing a regexp
  # to match as key, and the input type that will be used when the field name
  # matches the regexp as value.
  # config.input_mappings = { /count/ => :integer }

  # Custom wrappers for input types. This should be a hash containing an input
  # type as key and the wrapper that will be used for all inputs with specified type.
  # config.wrapper_mappings = { string: :prepend }

  # Namespaces where SimpleForm should look for custom input classes that
  # override default inputs.
  # config.custom_inputs_namespaces << "CustomInputs"

  # Default priority for time_zone inputs.
  # config.time_zone_priority = nil

  # Default priority for country inputs.
  # config.country_priority = nil

  # When false, do not use translations for labels.
  # config.translate_labels = true

  # Automatically discover new inputs in Rails' autoload path.
  # config.inputs_discovery = true

  # Cache SimpleForm inputs discovery
  # config.cache_discovery = !Rails.env.development?

  # Default class for inputs
  # config.input_class = nil

  # Define the default class of the input wrapper of the boolean input.
  config.boolean_label_class = "checkbox"

  # Defines if the default input wrapper class should be included in radio
  # collection wrappers.
  # config.include_default_input_wrapper_class = true

  # Defines which i18n scope will be used in Simple Form.
  # config.i18n_scope = 'simple_form'

  # Defines validation classes to the input_field. By default it's nil.
  # config.input_field_valid_class = 'is-valid'
  # config.input_field_error_class = 'is-invalid'
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/locales/devise.en.yml ===
# Additional translations at https://github.com/heartcombo/devise/wiki/I18n

en:
  devise:
    confirmations:
      confirmed: "Your email address has been successfully confirmed."
      send_instructions: "You will receive an email with instructions for how to confirm your email address in a few minutes."
      send_paranoid_instructions: "If your email address exists in our database, you will receive an email with instructions for how to confirm your email address in a few minutes."
    failure:
      already_authenticated: "You are already signed in."
      inactive: "Your account is not activated yet."
      invalid: "Invalid %{authentication_keys} or password."
      locked: "Your account is locked."
      last_attempt: "You have one more attempt before your account is locked."
      not_found_in_database: "Invalid %{authentication_keys} or password."
      timeout: "Your session expired. Please sign in again to continue."
      unauthenticated: "You need to sign in or sign up before continuing."
      unconfirmed: "You have to confirm your email address before continuing."
    mailer:
      confirmation_instructions:
        subject: "Confirmation instructions"
      reset_password_instructions:
        subject: "Reset password instructions"
      unlock_instructions:
        subject: "Unlock instructions"
      email_changed:
        subject: "Email Changed"
      password_change:
        subject: "Password Changed"
    omniauth_callbacks:
      failure: "Could not authenticate you from %{kind} because \"%{reason}\"."
      success: "Successfully authenticated from %{kind} account."
    passwords:
      no_token: "You can't access this page without coming from a password reset email. If you do come from a password reset email, please make sure you used the full URL provided."
      send_instructions: "You will receive an email with instructions on how to reset your password in a few minutes."
      send_paranoid_instructions: "If your email address exists in our database, you will receive a password recovery link at your email address in a few minutes."
      updated: "Your password has been changed successfully. You are now signed in."
      updated_not_active: "Your password has been changed successfully."
    registrations:
      destroyed: "Bye! Your account has been successfully cancelled. We hope to see you again soon."
      signed_up: "Welcome! You have signed up successfully."
      signed_up_but_inactive: "You have signed up successfully. However, we could not sign you in because your account is not yet activated."
      signed_up_but_locked: "You have signed up successfully. However, we could not sign you in because your account is locked."
      signed_up_but_unconfirmed: "A message with a confirmation link has been sent to your email address. Please follow the link to activate your account."
      update_needs_confirmation: "You updated your account successfully, but we need to verify your new email address. Please check your email and follow the confirmation link to confirm your new email address."
      updated: "Your account has been updated successfully."
      updated_but_not_signed_in: "Your account has been updated successfully, but since your password was changed, you need to sign in again."
    sessions:
      signed_in: "Signed in successfully."
      signed_out: "Signed out successfully."
      already_signed_out: "Signed out successfully."
    unlocks:
      send_instructions: "You will receive an email with instructions for how to unlock your account in a few minutes."
      send_paranoid_instructions: "If your account exists, you will receive an email with instructions for how to unlock it in a few minutes."
      unlocked: "Your account has been unlocked successfully. Please sign in to continue."
  errors:
    messages:
      already_confirmed: "was already confirmed, please try signing in"
      confirmation_period_expired: "needs to be confirmed within %{period}, please request a new one"
      expired: "has expired, please request a new one"
      not_found: "not found"
      not_locked: "was not locked"
      not_saved:
        one: "1 error prohibited this %{resource} from being saved:"
        other: "%{count} errors prohibited this %{resource} from being saved:"


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/locales/en.yml ===
# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t "hello"
#
# In views, this is aliased to just `t`:
#
#     <%= t("hello") %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# The following keys must be escaped otherwise they will not be retrieved by
# the default I18n backend:
#
# true, false, on, off, yes, no
#
# Instead, surround them with single quotes.
#
# en:
#   "true": "foo"
#
# To learn more, please read the Rails Internationalization guide
# available at https://guides.rubyonrails.org/i18n.html.

en:
  hello: "Hello world"
  activerecord:
    errors:
      format: "%{message} for %{attribute}"
      churp:
        attributes:
          content:
            blank: 'too short'
            too_short: "Content is too short (minimum is 2 characters)"
            too_long: "Content is too long (maximum is 331 characters)"
      messages:
        content_type_invalid: "The image has an invalid content type"
        file_size_out_of_range: "size %{file_size} is not between required range"
  pundit:
    default: 'You cannot perform this action.'
    post_policy:
      update?: 'You cannot edit this post!'
      create?: 'You cannot create posts!'
  churps:
    under_character_limit: content is too short (minimum is %{min} characters)
    over_character_limit: content is too long (maximum is %{max} characters)

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/locales/simple_form.en.yml ===
en:
  simple_form:
    "yes": 'Yes'
    "no": 'No'
    required:
      text: 'required'
      mark: '*'
      # You can uncomment the line below if you need to overwrite the whole required html.
      # When using html, text and mark won't be used.
      # html: '<abbr title="required">*</abbr>'
    error_notification:
      default_message: "Please review the problems below:"
    # Examples
    # labels:
    #   defaults:
    #     password: 'Password'
    #   user:
    #     new:
    #       email: 'E-mail to sign in.'
    #     edit:
    #       email: 'E-mail.'
    # hints:
    #   defaults:
    #     username: 'User name to sign in.'
    #     password: 'No special characters, please.'
    # include_blanks:
    #   defaults:
    #     age: 'Rather not say'
    # prompts:
    #   defaults:
    #     age: 'Select your age'


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/puma.rb ===
# frozen_string_literal: true

# Puma can serve each request in a thread from an internal thread pool.
# The `threads` method setting takes two numbers: a minimum and maximum.
# Any libraries that use thread pools should be configured to match
# the maximum value specified for Puma. Default is set to 5 threads for minimum
# and maximum; this matches the default thread size of Active Record.
#
max_threads_count = ENV.fetch("RAILS_MAX_THREADS", 5)
min_threads_count = ENV.fetch("RAILS_MIN_THREADS") { max_threads_count }
threads min_threads_count, max_threads_count

# Specifies the `worker_timeout` threshold that Puma will use to wait before
# terminating a worker in development environments.
#
worker_timeout 3600 if ENV.fetch("RAILS_ENV", "development") == "development"

# Specifies the `port` that Puma will listen on to receive requests; default is 3000.
#
port ENV.fetch("PORT", 3000)

# Specifies the `environment` that Puma will run in.
#
environment ENV.fetch("RAILS_ENV", "development")

# Specifies the `pidfile` that Puma will use.
pidfile ENV.fetch("PIDFILE", "tmp/pids/server.pid")

# Specifies the number of `workers` to boot in clustered mode.
# Workers are forked web server processes. If using threads and workers together
# the concurrency of the application would be max `threads` * `workers`.
# Workers do not work on JRuby or Windows (both of which do not support
# processes).
#
# workers ENV.fetch("WEB_CONCURRENCY") { 2 }

# Use the `preload_app!` method when specifying a `workers` number.
# This directive tells Puma to first boot the application and load code
# before forking the application. This takes advantage of Copy On Write
# process behavior so workers use less memory.
#
# preload_app!

# Allow puma to be restarted by `bin/rails restart` command.
plugin :tmp_restart


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/routes.rb ===
# frozen_string_literal: true

require "sidekiq/web"

Rails.application.routes.draw do
  mount Flipper::UI.app(Flipper) => "/flipper"

  devise_for :users
  devise_scope :user do
    authenticated :user do
      root to: "churps#index"
    end
    unauthenticated :user do
      root to: "devise/registrations#new", as: :unauthenticated_root
    end
  end
  resources :users, only: %i[index show] do
    member do
      get :following, :followers, :verified_followers, :followers_you_know
    end
  end

  # authenticate :user, ->(u) { u.admin? } do
  #   mount Sidekiq::Web => '/sidekiq'
  # end

  get ":slug/status/:churp_id", to: "churps#show", as: "show_churp"
  resources :churps do
    resources :comments, only: %i[create destroy]
    member do
      post :rechurp
    end
    post "like", to: "churps#like" # /churps/:id/like
  end

  resources :profiles do
    member do
      post :follow, :unfollow
    end
  end
  resources :relationships, only: %i[create destroy]

  resources :mentions, only: %i[index]
  resources :notifications, only: %i[index]

  get "search", to: "search#index"
  get "search/hashtags", to: "search#search_hashtags"
  post "search/suggestions", to: "search#suggestions", as: "search_suggestions"

  get "/tos", to: "static#terms_of_service", as: :terms_of_service
  get "/terms_of_service", to: redirect("/terms_of_service")

  get "/privacy", to: "static#privacy_policy", as: :privacy_policy
  get "/privacy-policy", to: redirect("/privacy-policy")

  get "/cookies", to: "static#cookie_policy", as: :cookie_policy
  get "/cookie_policy", to: redirect("/cookie-policy")

  get "/ads", to: "static#ads_info", as: :ads_info
  get "/ads_info", to: redirect("/ads-info")

  get "/about", to: "static#about", as: :about

  get "/test", to: "static#test", as: :test

  # Reveal health status on /up that returns 200 if the app boots with no exceptions, otherwise 500.
  # Can be used by load balancers and uptime monitors to verify that the app is live.
  get "up", to: "rails/health#show", as: :rails_health_check

  # unless Rails.env.development?
  #   get 'errors/not_found'
  #   get 'errors/internal_server_error'

  #   match '/404', to: 'errors#not_found', via: :all
  #   match '/500', to: 'errors#internal_server_error', via: :all
  # end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/config/storage.yml ===
test:
  service: Disk
  root: <%= Rails.root.join("tmp/storage") %>
  url_options:
    protocol: 'http'
    host: 'localhost'
    port: '3000'

local:
  service: Disk
  root: <%= Rails.root.join("storage") %>

# Use bin/rails credentials:edit to set the AWS secrets (as aws:access_key_id|secret_access_key)
amazon:
  service: S3
  access_key_id: <%= Rails.application.credentials.dig(:aws, :access_key_id) %>
  secret_access_key: <%= Rails.application.credentials.dig(:aws, :secret_access_key) %>
  region: us-east-1
  http_read_timeout: 5
  retry_limit: 2
  bucket: <%= Rails.application.credentials.dig(:aws, :bucket) %>


# Remember not to checkin your GCS keyfile to a repository
# google:
#   service: GCS
#   project: your_project
#   credentials: <%= Rails.root.join("path/to/gcs.keyfile") %>
#   bucket: your_own_bucket-<%= Rails.env %>

# Use bin/rails credentials:edit to set the Azure Storage secret (as azure_storage:storage_access_key)
# microsoft:
#   service: AzureStorage
#   storage_account_name: your_account_name
#   storage_access_key: <%= Rails.application.credentials.dig(:azure_storage, :storage_access_key) %>
#   container: your_container_name-<%= Rails.env %>

# mirror:
#   service: Mirror
#   primary: local
#   mirrors: [ amazon, google, microsoft ]


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/coverage/assets/0.12.3/application.js ===
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(T,e){"use strict";function g(e,t,n){var r,a,i=(n=n||le).createElement("script");if(i.text=e,t)for(r in Se)(a=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,a);n.head.appendChild(i).parentNode.removeChild(i)}function m(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?pe[ge.call(e)]||"object":typeof e}function s(e){var t=!!e&&"length"in e&&e.length,n=m(e);return!we(e)&&!xe(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}function u(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function t(e,n,r){return we(n)?Te.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?Te.grep(e,function(e){return e===n!==r}):"string"!=typeof n?Te.grep(e,function(e){return-1<he.call(n,e)!==r}):Te.filter(n,e,r)}function n(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function c(e){var n={};return Te.each(e.match(Fe)||[],function(e,t){n[t]=!0}),n}function f(e){return e}function d(e){throw e}function l(e,t,n,r){var a;try{e&&we(a=e.promise)?a.call(e).done(t).fail(n):e&&we(a=e.then)?a.call(e,t,n):t.apply(undefined,[e].slice(r))}catch(e){n.apply(undefined,[e])}}function r(){le.removeEventListener("DOMContentLoaded",r),T.removeEventListener("load",r),Te.ready()}function a(e,t){return t.toUpperCase()}function h(e){return e.replace(Oe,"ms-").replace(qe,a)}function i(){this.expando=Te.expando+i.uid++}function o(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Ue.test(e)?JSON.parse(e):e)}function p(e,t,n){var r;if(n===undefined&&1===e.nodeType)if(r="data-"+t.replace(ze,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=o(n)}catch(a){}$e.set(e,t,n)}else n=undefined;return n}function v(e,t,n,r){var a,i,o=20,s=r?function(){return r.cur()}:function(){return Te.css(e,t,"")},l=s(),u=n&&n[3]||(Te.cssNumber[t]?"":"px"),c=e.nodeType&&(Te.cssNumber[t]||"px"!==u&&+l)&&Ve.exec(Te.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;o--;)Te.style(e,t,c+u),(1-i)*(1-(i=s()/l||.5))<=0&&(o=0),c/=i;c*=2,Te.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,a=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=a)),a}function y(e){var t,n=e.ownerDocument,r=e.nodeName,a=et[r];return a||(t=n.body.appendChild(n.createElement(r)),a=Te.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),et[r]=a)}function b(e,t){for(var n,r,a=[],i=0,o=e.length;i<o;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(a[i]=Be.get(r,"display")||null,a[i]||(r.style.display="")),""===r.style.display&&Ke(r)&&(a[i]=y(r))):"none"!==n&&(a[i]="none",Be.set(r,"display",n)));for(i=0;i<o;i++)null!=a[i]&&(e[i].style.display=a[i]);return e}function w(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],t===undefined||t&&u(e,t)?Te.merge([e],n):n}function x(e,t){for(var n=0,r=e.length;n<r;n++)Be.set(e[n],"globalEval",!t||Be.get(t[n],"globalEval"))}function S(e,t,n,r,a){for(var i,o,s,l,u,c,f=t.createDocumentFragment(),d=[],h=0,p=e.length;h<p;h++)if((i=e[h])||0===i)if("object"===m(i))Te.merge(d,i.nodeType?[i]:i);else if(st.test(i)){for(o=o||f.appendChild(t.createElement("div")),s=(nt.exec(i)||["",""])[1].toLowerCase(),l=at[s]||at._default,o.innerHTML=l[1]+Te.htmlPrefilter(i)+l[2],c=l[0];c--;)o=o.lastChild;Te.merge(d,o.childNodes),(o=f.firstChild).textContent=""}else d.push(t.createTextNode(i));for(f.textContent="",h=0;i=d[h++];)if(r&&-1<Te.inArray(i,r))a&&a.push(i);else if(u=Ye(i),o=w(f.appendChild(i),"script"),u&&x(o),n)for(c=0;i=o[c++];)rt.test(i.type||"")&&n.push(i);return f}function D(){return!0}function C(){return!1}function _(e,t){return e===A()==("focus"===t)}function A(){try{return le.activeElement}catch(e){}}function N(e,t,n,r,a,i){var o,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=undefined),t)N(e,s,n,r,t[s],i);return e}if(null==r&&null==a?(a=n,r=n=undefined):null==a&&("string"==typeof n?(a=r,r=undefined):(a=r,r=n,n=undefined)),!1===a)a=C;else if(!a)return e;return 1===i&&(o=a,(a=function(e){return Te().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=Te.guid++)),e.each(function(){Te.event.add(this,t,a,r,n)})}function k(e,a,i){i?(Be.set(e,a,!1),Te.event.add(e,a,{namespace:!1,handler:function(e){var t,n,r=Be.get(this,a);if(1&e.isTrigger&&this[a]){if(r.length)(Te.event.special[a]||{}).delegateType&&e.stopPropagation();else if(r=ce.call(arguments),Be.set(this,a,r),t=i(this,a),this[a](),r!==(n=Be.get(this,a))||t?Be.set(this,a,!1):n={},r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else r.length&&(Be.set(this,a,{value:Te.event.trigger(Te.extend(r[0],Te.Event.prototype),r.slice(1),this)}),e.stopImmediatePropagation())}})):Be.get(e,a)===undefined&&Te.event.add(e,a,D)}function I(e,t){return u(e,"table")&&u(11!==t.nodeType?t:t.firstChild,"tr")&&Te(e).children("tbody")[0]||e}function j(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function L(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function E(e,t){var n,r,a,i,o,s,l,u;if(1===t.nodeType){if(Be.hasData(e)&&(i=Be.access(e),o=Be.set(t,i),u=i.events))for(a in delete o.handle,o.events={},u)for(n=0,r=u[a].length;n<r;n++)Te.event.add(t,a,u[a][n]);$e.hasData(e)&&(s=$e.access(e),l=Te.extend({},s),$e.set(t,l))}}function R(e,t){var n=t.nodeName.toLowerCase();"input"===n&&tt.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function F(n,r,a,i){r=fe.apply([],r);var e,t,o,s,l,u,c=0,f=n.length,d=f-1,h=r[0],p=we(h);if(p||1<f&&"string"==typeof h&&!be.checkClone&&ht.test(h))return n.each(function(e){var t=n.eq(e);p&&(r[0]=h.call(this,e,t.html())),F(t,r,a,i)});if(f&&(t=(e=S(r,n[0].ownerDocument,!1,n,i)).firstChild,1===e.childNodes.length&&(e=t),t||i)){for(s=(o=Te.map(w(e,"script"),j)).length;c<f;c++)l=e,c!==d&&(l=Te.clone(l,!0,!0),s&&Te.merge(o,w(l,"script"))),a.call(n[c],l,c);if(s)for(u=o[o.length-1].ownerDocument,Te.map(o,L),c=0;c<s;c++)l=o[c],rt.test(l.type||"")&&!Be.access(l,"globalEval")&&Te.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?Te._evalUrl&&!l.noModule&&Te._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):g(l.textContent.replace(pt,""),l,u))}return n}function P(e,t,n){for(var r,a=t?Te.filter(t,e):e,i=0;null!=(r=a[i]);i++)n||1!==r.nodeType||Te.cleanData(w(r)),r.parentNode&&(n&&Ye(r)&&x(w(r,"script")),r.parentNode.removeChild(r));return e}function H(e,t,n){var r,a,i,o,s=e.style;return(n=n||mt(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||Ye(e)||(o=Te.style(e,t)),!be.pixelBoxStyles()&&gt.test(o)&&vt.test(t)&&(r=s.width,a=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=o,o=n.width,s.width=r,s.minWidth=a,s.maxWidth=i)),o!==undefined?o+"":o}function M(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function O(e){for(var t=e[0].toUpperCase()+e.slice(1),n=yt.length;n--;)if((e=yt[n]+t)in bt)return e}function q(e){var t=Te.cssProps[e]||wt[e];return t||(e in bt?e:wt[e]=O(e)||e)}function W(e,t,n){var r=Ve.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function B(e,t,n,r,a,i){var o="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=Te.css(e,n+Ge[o],!0,a)),r?("content"===n&&(l-=Te.css(e,"padding"+Ge[o],!0,a)),"margin"!==n&&(l-=Te.css(e,"border"+Ge[o]+"Width",!0,a))):(l+=Te.css(e,"padding"+Ge[o],!0,a),"padding"!==n?l+=Te.css(e,"border"+Ge[o]+"Width",!0,a):s+=Te.css(e,"border"+Ge[o]+"Width",!0,a));return!r&&0<=i&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-s-.5))||0),l}function $(e,t,n){var r=mt(e),a=(!be.boxSizingReliable()||n)&&"border-box"===Te.css(e,"boxSizing",!1,r),i=a,o=H(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(gt.test(o)){if(!n)return o;o="auto"}return(!be.boxSizingReliable()&&a||"auto"===o||!parseFloat(o)&&"inline"===Te.css(e,"display",!1,r))&&e.getClientRects().length&&(a="border-box"===Te.css(e,"boxSizing",!1,r),(i=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+B(e,t,n||(a?"border":"content"),i,r,o)+"px"}function U(e,t,n,r,a){return new U.prototype.init(e,t,n,r,a)}function z(){_t&&(!1===le.hidden&&T.requestAnimationFrame?T.requestAnimationFrame(z):T.setTimeout(z,Te.fx.interval),Te.fx.tick())}function X(){return T.setTimeout(function(){Ct=undefined}),Ct=Date.now()}function V(e,t){var n,r=0,a={height:e};for(t=t?1:0;r<4;r+=2-t)a["margin"+(n=Ge[r])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function G(e,t,n){for(var r,a=(Z.tweeners[t]||[]).concat(Z.tweeners["*"]),i=0,o=a.length;i<o;i++)if(r=a[i].call(n,t,e))return r}function J(e,t,n){var r,a,i,o,s,l,u,c,f="width"in t||"height"in t,d=this,h={},p=e.style,g=e.nodeType&&Ke(e),m=Be.get(e,"fxshow");for(r in n.queue||(null==(o=Te._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,d.always(function(){d.always(function(){o.unqueued--,Te.queue(e,"fx").length||o.empty.fire()})})),t)if(a=t[r],kt.test(a)){if(delete t[r],i=i||"toggle"===a,a===(g?"hide":"show")){if("show"!==a||!m||m[r]===undefined)continue;g=!0}h[r]=m&&m[r]||Te.style(e,r)}if((l=!Te.isEmptyObject(t))||!Te.isEmptyObject(h))for(r in f&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=m&&m.display)&&(u=Be.get(e,"display")),"none"===(c=Te.css(e,"display"))&&(u?c=u:(b([e],!0),u=e.style.display||u,c=Te.css(e,"display"),b([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===Te.css(e,"float")&&(l||(d.done(function(){p.display=u}),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,h)l||(m?"hidden"in m&&(g=m.hidden):m=Be.access(e,"fxshow",{display:u}),i&&(m.hidden=!g),g&&b([e],!0),d.done(function(){for(r in g||b([e]),Be.remove(e,"fxshow"),h)Te.style(e,r,h[r])})),l=G(g?m[r]:0,r,d),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}function Y(e,t){var n,r,a,i,o;for(n in e)if(a=t[r=h(n)],i=e[n],Array.isArray(i)&&(a=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(o=Te.cssHooks[r])&&"expand"in o)for(n in i=o.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=a);else t[r]=a}function Z(i,e,t){var n,o,r=0,a=Z.prefilters.length,s=Te.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=Ct||X(),t=Math.max(0,u.startTime+u.duration-e),n=1-(t/u.duration||0),r=0,a=u.tweens.length;r<a;r++)u.tweens[r].run(n);return s.notifyWith(i,[u,n,t]),n<1&&a?t:(a||s.notifyWith(i,[u,1,0]),s.resolveWith(i,[u]),!1)},u=s.promise({elem:i,props:Te.extend({},e),opts:Te.extend(!0,{specialEasing:{},easing:Te.easing._default},t),originalProperties:e,originalOptions:t,startTime:Ct||X(),duration:t.duration,tweens:[],createTween:function(e,t){var n=Te.Tween(i,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var t=0,n=e?u.tweens.length:0;if(o)return this;for(o=!0;t<n;t++)u.tweens[t].run(1);return e?(s.notifyWith(i,[u,1,0]),s.resolveWith(i,[u,e])):s.rejectWith(i,[u,e]),this}}),c=u.props;for(Y(c,u.opts.specialEasing);r<a;r++)if(n=Z.prefilters[r].call(u,i,c,u.opts))return we(n.stop)&&(Te._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return Te.map(c,G,u),we(u.opts.start)&&u.opts.start.call(i,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),Te.fx.timer(Te.extend(l,{elem:i,anim:u,queue:u.opts.queue})),u}function K(e){return(e.match(Fe)||[]).join(" ")}function Q(e){return e.getAttribute&&e.getAttribute("class")||""}function ee(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Fe)||[]}function te(n,e,r,a){var t;if(Array.isArray(e))Te.each(e,function(e,t){r||Wt.test(n)?a(n,t):te(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,a)});else if(r||"object"!==m(e))a(n,e);else for(t in e)te(n+"["+t+"]",e[t],r,a)}function ne(i){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,a=e.toLowerCase().match(Fe)||[];if(we(t))for(;n=a[r++];)"+"===n[0]?(n=n.slice(1)||"*",(i[n]=i[n]||[]).unshift(t)):(i[n]=i[n]||[]).push(t)}}function re(t,a,i,o){function s(e){var r;return l[e]=!0,Te.each(t[e]||[],function(e,t){var n=t(a,i,o);return"string"!=typeof n||u||l[n]?u?!(r=n):void 0:(a.dataTypes.unshift(n),s(n),!1)}),r}var l={},u=t===Qt;return s(a.dataTypes[0])||!l["*"]&&s("*")}function ae(e,t){var n,r,a=Te.ajaxSettings.flatOptions||{};for(n in t)t[n]!==undefined&&((a[n]?e:r||(r={}))[n]=t[n]);return r&&Te.extend(!0,e,r),e}function ie(e,t,n){for(var r,a,i,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),r===undefined&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){l.unshift(a);break}if(l[0]in n)i=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){i=a;break}o||(o=a)}i=i||o}if(i)return i!==l[0]&&l.unshift(i),n[i]}function oe(e,t,n,r){var a,i,o,s,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=c.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(o=u[l+" "+i]||u["* "+i]))for(a in u)if((s=a.split(" "))[1]===i&&(o=u[l+" "+s[0]]||u["* "+s[0]])){!0===o?o=u[a]:!0!==u[a]&&(i=s[0],c.unshift(s[1]));break}if(!0!==o)if(o&&e["throws"])t=o(t);else try{t=o(t)}catch(f){return{state:"parsererror",error:o?f:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}var se=[],le=T.document,ue=Object.getPrototypeOf,ce=se.slice,fe=se.concat,de=se.push,he=se.indexOf,pe={},ge=pe.toString,me=pe.hasOwnProperty,ve=me.toString,ye=ve.call(Object),be={},we=function we(e){return"function"==typeof e&&"number"!=typeof e.nodeType},xe=function xe(e){return null!=e&&e===e.window},Se={type:!0,src:!0,nonce:!0,noModule:!0},De="3.4.1",Te=function(e,t){return new Te.fn.init(e,t)},Ce=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;Te.fn=Te.prototype={jquery:De,constructor:Te,length:0,toArray:function(){return ce.call(this)},get:function(e){return null==e?ce.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=Te.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return Te.each(this,e)},map:function(n){return this.pushStack(Te.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(ce.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:de,sort:se.sort,splice:se.splice},Te.extend=Te.fn.extend=function(e){var t,n,r,a,i,o,s=e||{},l=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[l]||{},l++),"object"==typeof s||we(s)||(s={}),l===u&&(s=this,l--);l<u;l++)if(null!=(t=arguments[l]))for(n in t)a=t[n],"__proto__"!==n&&s!==a&&(c&&a&&(Te.isPlainObject(a)||(i=Array.isArray(a)))?(r=s[n],o=i&&!Array.isArray(r)?[]:i||Te.isPlainObject(r)?r:{},i=!1,s[n]=Te.extend(c,o,a)):a!==undefined&&(s[n]=a));return s},Te.extend({expando:"jQuery"+(De+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==ge.call(e))&&(!(t=ue(e))||"function"==typeof(n=me.call(t,"constructor")&&t.constructor)&&ve.call(n)===ye)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){g(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(s(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(Ce,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(s(Object(e))?Te.merge(n,"string"==typeof e?[e]:e):de.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:he.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,a=e.length;r<n;r++)e[a++]=t[r];return e.length=a,e},grep:function(e,t,n){for(var r=[],a=0,i=e.length,o=!n;a<i;a++)!t(e[a],a)!==o&&r.push(e[a]);return r},map:function(e,t,n){var r,a,i=0,o=[];if(s(e))for(r=e.length;i<r;i++)null!=(a=t(e[i],i,n))&&o.push(a);else for(i in e)null!=(a=t(e[i],i,n))&&o.push(a);return fe.apply([],o)},guid:1,support:be}),"function"==typeof Symbol&&(Te.fn[Symbol.iterator]=se[Symbol.iterator]),Te.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){pe["[object "+t+"]"]=t.toLowerCase()});var _e=function(n){function w(e,t,n,r){var a,i,o,s,l,u,c,f=t&&t.ownerDocument,d=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==d&&9!==d&&11!==d)return n;if(!r&&((t?t.ownerDocument||t:W)!==E&&L(t),t=t||E,F)){if(11!==d&&(l=be.exec(e)))if(a=l[1]){if(9===d){if(!(o=t.getElementById(a)))return n;if(o.id===a)return n.push(o),n}else if(f&&(o=f.getElementById(a))&&O(t,o)&&o.id===a)return n.push(o),n}else{if(l[2])return Q.apply(n,t.getElementsByTagName(e)),n;if((a=l[3])&&S.getElementsByClassName&&t.getElementsByClassName)return Q.apply(n,t.getElementsByClassName(a)),n}if(S.qsa&&!V[e+" "]&&(!P||!P.test(e))&&(1!==d||"object"!==t.nodeName.toLowerCase())){if(c=e,f=t,1===d&&fe.test(e)){for((s=t.getAttribute("id"))?s=s.replace(De,Te):t.setAttribute("id",s=q),i=(u=_(e)).length;i--;)u[i]="#"+s+" "+g(u[i]);c=u.join(","),f=we.test(e)&&p(t.parentNode)||t}try{return Q.apply(n,f.querySelectorAll(c)),n}catch(h){V(e,!0)}finally{s===q&&t.removeAttribute("id")}}}return N(e.replace(le,"$1"),t,n,r)}function e(){function n(e,t){return r.push(e+" ")>D.cacheLength&&delete n[r.shift()],n[e+" "]=t}var r=[];return n}function l(e){return e[q]=!0,e}function a(e){var t=E.createElement("fieldset");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function t(e,t){for(var n=e.split("|"),r=n.length;r--;)D.attrHandle[n[r]]=t}function u(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function r(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function i(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}function o(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&_e(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function s(o){return l(function(i){return i=+i,l(function(e,t){for(var n,r=o([],e.length,i),a=r.length;a--;)e[n=r[a]]&&(e[n]=!(t[n]=e[n]))})})}function p(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function c(){}function g(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function f(s,e,t){var l=e.dir,u=e.next,c=u||l,f=t&&"parentNode"===c,d=$++;return e.first?function(e,t,n){for(;e=e[l];)if(1===e.nodeType||f)return s(e,t,n);return!1}:function(e,t,n){var r,a,i,o=[B,d];if(n){for(;e=e[l];)if((1===e.nodeType||f)&&s(e,t,n))return!0}else for(;e=e[l];)if(1===e.nodeType||f)if(a=(i=e[q]||(e[q]={}))[e.uniqueID]||(i[e.uniqueID]={}),u&&u===e.nodeName.toLowerCase())e=e[l]||e;else{if((r=a[c])&&r[0]===B&&r[1]===d)return o[2]=r[2];if((a[c]=o)[2]=s(e,t,n))return!0}return!1}}function d(a){return 1<a.length?function(e,t,n){for(var r=a.length;r--;)if(!a[r](e,t,n))return!1;return!0}:a[0]}function y(e,t,n){for(var r=0,a=t.length;r<a;r++)w(e,t[r],n);return n}function x(e,t,n,r,a){for(var i,o=[],s=0,l=e.length,u=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,a)||(o.push(i),u&&t.push(s)));return o}function b(h,p,g,m,v,e){return m&&!m[q]&&(m=b(m)),v&&!v[q]&&(v=b(v,e)),l(function(e,t,n,r){var a,i,o,s=[],l=[],u=t.length,c=e||y(p||"*",n.nodeType?[n]:n,[]),f=!h||!e&&p?c:x(c,s,h,n,r),d=g?v||(e?h:u||m)?[]:t:f;if(g&&g(f,d,n,r),m)for(a=x(d,l),m(a,[],n,r),i=a.length;i--;)(o=a[i])&&(d[l[i]]=!(f[l[i]]=o));if(e){if(v||h){if(v){for(a=[],i=d.length;i--;)(o=d[i])&&a.push(f[i]=o);v(null,d=[],a,r)}for(i=d.length;i--;)(o=d[i])&&-1<(a=v?te(e,o):s[i])&&(e[a]=!(t[a]=o))}}else d=x(d===t?d.splice(u,d.length):d),v?v(null,t,d,r):Q.apply(t,d)})}function h(e){for(var a,t,n,r=e.length,i=D.relative[e[0].type],o=i||D.relative[" "],s=i?1:0,l=f(function(e){return e===a},o,!0),u=f(function(e){return-1<te(a,e)},o,!0),c=[function(e,t,n){var r=!i&&(n||t!==k)||((a=t).nodeType?l(e,t,n):u(e,t,n));return a=null,r}];s<r;s++)if(t=D.relative[e[s].type])c=[f(d(c),t)];else{if((t=D.filter[e[s].type].apply(null,e[s].matches))[q]){for(n=++s;n<r&&!D.relative[e[n].type];n++);return b(1<s&&d(c),1<s&&g(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(le,"$1"),t,s<n&&h(e.slice(s,n)),n<r&&h(e=e.slice(n)),n<r&&g(e))}c.push(t)}return d(c)}function m(m,v){var y=0<v.length,b=0<m.length,e=function(e,t,n,r,a){var i,o,s,l=0,u="0",c=e&&[],f=[],d=k,h=e||b&&D.find.TAG("*",a),p=B+=null==d?1:Math.random()||.1,g=h.length;for(a&&(k=t===E||t||a);u!==g&&null!=(i=h[u]);u++){if(b&&i){for(o=0,t||i.ownerDocument===E||(L(i),n=!F);s=m[o++];)if(s(i,t||E,n)){r.push(i);break}a&&(B=p)}y&&((i=!s&&i)&&l--,e&&c.push(i))}if(l+=u,y&&u!==l){for(o=0;s=v[o++];)s(c,f,t,n);if(e){if(0<l)for(;u--;)c[u]||f[u]||(f[u]=Z.call(r));f=x(f)}Q.apply(r,f),a&&!e&&0<f.length&&1<l+v.length&&w.uniqueSort(r)}return a&&(B=p,k=d),c};return y?l(e):e}var v,S,D,T,C,_,A,N,k,I,j,L,E,R,F,P,H,M,O,q="sizzle"+1*new Date,W=n.document,B=0,$=0,U=e(),z=e(),X=e(),V=e(),G=function(e,t){return e===t&&(j=!0),0},J={}.hasOwnProperty,Y=[],Z=Y.pop,K=Y.push,Q=Y.push,ee=Y.slice,te=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},ne="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",re="[\\x20\\t\\r\\n\\f]",ae="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",ie="\\["+re+"*("+ae+")(?:"+re+"*([*^$|!~]?=)"+re+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ae+"))|)"+re+"*\\]",oe=":("+ae+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+ie+")*)|.*)\\)|)",se=new RegExp(re+"+","g"),le=new RegExp("^"+re+"+|((?:^|[^\\\\])(?:\\\\.)*)"+re+"+$","g"),ue=new RegExp("^"+re+"*,"+re+"*"),ce=new RegExp("^"+re+"*([>+~]|"+re+")"+re+"*"),fe=new RegExp(re+"|>"),de=new RegExp(oe),he=new RegExp("^"+ae+"$"),pe={ID:new RegExp("^#("+ae+")"),CLASS:new RegExp("^\\.("+ae+")"),TAG:new RegExp("^("+ae+"|[*])"),ATTR:new RegExp("^"+ie),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+re+"*(even|odd|(([+-]|)(\\d*)n|)"+re+"*(?:([+-]|)"+re+"*(\\d+)|))"+re+"*\\)|)","i"),bool:new RegExp("^(?:"+ne+")$","i"),needsContext:new RegExp("^"+re+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+re+"*((?:-\\d)?\\d*)"+re+"*\\)|)(?=[^-]|$)","i")},ge=/HTML$/i,me=/^(?:input|select|textarea|button)$/i,ve=/^h\d$/i,ye=/^[^{]+\{\s*\[native \w/,be=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,we=/[+~]/,xe=new RegExp("\\\\([\\da-f]{1,6}"+re+"?|("+re+")|.)","ig"),Se=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},De=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Te=function(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Ce=function(){L()},_e=f(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{Q.apply(Y=ee.call(W.childNodes),W.childNodes),Y[W.childNodes.length].nodeType}catch(Ae){Q={apply:Y.length?function(e,t){K.apply(e,ee.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}for(v in S=w.support={},C=w.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!ge.test(t||n&&n.nodeName||"HTML")},L=w.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:W;return r!==E&&9===r.nodeType&&r.documentElement&&(R=(E=r).documentElement,F=!C(E),W!==E&&(n=E.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),S.attributes=a(function(e){return e.className="i",!e.getAttribute("className")}),S.getElementsByTagName=a(function(e){return e.appendChild(E.createComment("")),!e.getElementsByTagName("*").length}),S.getElementsByClassName=ye.test(E.getElementsByClassName),S.getById=a(function(e){return R.appendChild(e).id=q,!E.getElementsByName||!E.getElementsByName(q).length}),S.getById?(D.filter.ID=function(e){var t=e.replace(xe,Se);return function(e){return e.getAttribute("id")===t}},D.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&F){var n=t.getElementById(e);return n?[n]:[]}}):(D.filter.ID=function(e){var n=e.replace(xe,Se);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},D.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&F){var n,r,a,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(a=t.getElementsByName(e),r=0;i=a[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),D.find.TAG=S.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):S.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],a=0,i=t.getElementsByTagName(e);if("*"!==e)return i;for(;n=i[a++];)1===n.nodeType&&r.push(n);return r},D.find.CLASS=S.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&F)return t.getElementsByClassName(e)},H=[],P=[],(S.qsa=ye.test(E.querySelectorAll))&&(a(function(e){R.appendChild(e).innerHTML="<a id='"+q+"'></a><select id='"+q+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&P.push("[*^$]="+re+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||P.push("\\["+re+"*(?:value|"+ne+")"),e.querySelectorAll("[id~="+q+"-]").length||P.push("~="),e.querySelectorAll(":checked").length||P.push(":checked"),e.querySelectorAll("a#"+q+"+*").length||P.push(".#.+[+~]")}),a(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=E.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&P.push("name"+re+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&P.push(":enabled",":disabled"),R.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&P.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),P.push(",.*:")})),(S.matchesSelector=ye.test(M=R.matches||R.webkitMatchesSelector||R.mozMatchesSelector||R.oMatchesSelector||R.msMatchesSelector))&&a(function(e){S.disconnectedMatch=M.call(e,"*"),M.call(e,"[s!='']:x"),H.push("!=",oe)}),P=P.length&&new RegExp(P.join("|")),H=H.length&&new RegExp(H.join("|")),t=ye.test(R.compareDocumentPosition),O=t||ye.test(R.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},G=t?function(e,t){if(e===t)return j=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!S.sortDetached&&t.compareDocumentPosition(e)===n?e===E||e.ownerDocument===W&&O(W,e)?-1:t===E||t.ownerDocument===W&&O(W,t)?1:I?te(I,e)-te(I,t):0:4&n?-1:1)}:function(e,t){if(e===t)return j=!0,0;var n,r=0,a=e.parentNode,i=t.parentNode,o=[e],s=[t];if(!a||!i)return e===E?-1:t===E?1:a?-1:i?1:I?te(I,e)-te(I,t):0;if(a===i)return u(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;o[r]===s[r];)r++;return r?u(o[r],s[r]):o[r]===W?-1:s[r]===W?1:0}),E},w.matches=function(e,t){return w(e,null,null,t)},w.matchesSelector=function(e,t){if((e.ownerDocument||e)!==E&&L(e),S.matchesSelector&&F&&!V[t+" "]&&(!H||!H.test(t))&&(!P||!P.test(t)))try{var n=M.call(e,t);if(n||S.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(Ae){V(t,!0)}return 0<w(t,E,null,[e]).length},w.contains=function(e,t){return(e.ownerDocument||e)!==E&&L(e),O(e,t)},w.attr=function(e,t){(e.ownerDocument||e)!==E&&L(e);var n=D.attrHandle[t.toLowerCase()],r=n&&J.call(D.attrHandle,t.toLowerCase())?n(e,t,!F):undefined;return r!==undefined?r:S.attributes||!F?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},w.escape=function(e){return(e+"").replace(De,Te)},w.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},w.uniqueSort=function(e){var t,n=[],r=0,a=0;if(j=!S.detectDuplicates,I=!S.sortStable&&e.slice(0),e.sort(G),j){for(;t=e[a++];)t===e[a]&&(r=n.push(a));for(;r--;)e.splice(n[r],1)}return I=null,e},T=w.getText=function(e){var t,n="",r=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=T(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[r++];)n+=T(t);return n},(D=w.selectors={cacheLength:50,createPseudo:l,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(xe,Se),e[3]=(e[3]||e[4]||e[5]||"").replace(xe,Se),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||w.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&w.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&de.test(n)&&(t=_(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(xe,Se).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=U[e+" "];return t||(t=new RegExp("(^|"+re+")"+e+"("+re+"|$)"))&&U(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,a){return function(e){var t=w.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===a:"!="===r?t!==a:"^="===r?a&&0===t.indexOf(a):"*="===r?a&&-1<t.indexOf(a):"$="===r?a&&t.slice(-a.length)===a:"~="===r?-1<(" "+t.replace(se," ")+" ").indexOf(a):"|="===r&&(t===a||t.slice(0,a.length+1)===a+"-"))}},CHILD:function(p,e,t,g,m){var v="nth"!==p.slice(0,3),y="last"!==p.slice(-4),b="of-type"===e;return 1===g&&0===m?function(e){return!!e.parentNode}:function(e,t,n){var r,a,i,o,s,l,u=v!==y?"nextSibling":"previousSibling",c=e.parentNode,f=b&&e.nodeName.toLowerCase(),d=!n&&!b,h=!1;if(c){if(v){for(;u;){for(o=e;o=o[u];)if(b?o.nodeName.toLowerCase()===f:1===o.nodeType)return!1;l=u="only"===p&&!l&&"nextSibling"}return!0}if(l=[y?c.firstChild:c.lastChild],y&&d){for(h=(s=(r=(a=(i=(o=c)[q]||(o[q]={}))[o.uniqueID]||(i[o.uniqueID]={}))[p]||[])[0]===B&&r[1])&&r[2],o=s&&c.childNodes[s];o=++s&&o&&o[u]||(h=s=0)||l.pop();)if(1===o.nodeType&&++h&&o===e){a[p]=[B,s,h];break}}else if(d&&(h=s=(r=(a=(i=(o=e)[q]||(o[q]={}))[o.uniqueID]||(i[o.uniqueID]={}))[p]||[])[0]===B&&r[1]),!1===h)for(;(o=++s&&o&&o[u]||(h=s=0)||l.pop())&&((b?o.nodeName.toLowerCase()!==f:1!==o.nodeType)||!++h||(d&&((a=(i=o[q]||(o[q]={}))[o.uniqueID]||(i[o.uniqueID]={}))[p]=[B,h]),o!==e)););return(h-=m)===g||h%g==0&&0<=h/g}}},PSEUDO:function(e,i){var t,o=D.pseudos[e]||D.setFilters[e.toLowerCase()]||w.error("unsupported pseudo: "+e);return o[q]?o(i):1<o.length?(t=[e,e,"",i],D.setFilters.hasOwnProperty(e.toLowerCase())?l(function(e,t){for(var n,r=o(e,i),a=r.length;a--;)e[n=te(e,r[a])]=!(t[n]=r[a])}):function(e){return o(e,0,t)}):o}},pseudos:{not:l(function(e){var r=[],a=[],s=A(e.replace(le,"$1"));return s[q]?l(function(e,t,n,r){for(var a,i=s(e,null,r,[]),o=e.length;o--;)(a=i[o])&&(e[o]=!(t[o]=a))}):function(e,t,n){return r[0]=e,s(r,null,n,a),r[0]=null,!a.pop()}}),has:l(function(t){return function(e){return 0<w(t,e).length}}),contains:l(function(t){return t=t.replace(xe,Se),function(e){return-1<(e.textContent||T(e)).indexOf(t)}}),lang:l(function(n){return he.test(n||"")||w.error("unsupported lang: "+n),n=n.replace(xe,Se).toLowerCase(),function(e){var t;do{if(t=F?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash
;return t&&t.slice(1)===e.id},root:function(e){return e===R},focus:function(e){return e===E.activeElement&&(!E.hasFocus||E.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:o(!1),disabled:o(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!D.pseudos.empty(e)},header:function(e){return ve.test(e.nodeName)},input:function(e){return me.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:s(function(){return[0]}),last:s(function(e,t){return[t-1]}),eq:s(function(e,t,n){return[n<0?n+t:n]}),even:s(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:s(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:s(function(e,t,n){for(var r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:s(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=D.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})D.pseudos[v]=r(v);for(v in{submit:!0,reset:!0})D.pseudos[v]=i(v);return c.prototype=D.filters=D.pseudos,D.setFilters=new c,_=w.tokenize=function(e,t){var n,r,a,i,o,s,l,u=z[e+" "];if(u)return t?0:u.slice(0);for(o=e,s=[],l=D.preFilter;o;){for(i in n&&!(r=ue.exec(o))||(r&&(o=o.slice(r[0].length)||o),s.push(a=[])),n=!1,(r=ce.exec(o))&&(n=r.shift(),a.push({value:n,type:r[0].replace(le," ")}),o=o.slice(n.length)),D.filter)!(r=pe[i].exec(o))||l[i]&&!(r=l[i](r))||(n=r.shift(),a.push({value:n,type:i,matches:r}),o=o.slice(n.length));if(!n)break}return t?o.length:o?w.error(e):z(e,s).slice(0)},A=w.compile=function(e,t){var n,r=[],a=[],i=X[e+" "];if(!i){for(t||(t=_(e)),n=t.length;n--;)(i=h(t[n]))[q]?r.push(i):a.push(i);(i=X(e,m(a,r))).selector=e}return i},N=w.select=function(e,t,n,r){var a,i,o,s,l,u="function"==typeof e&&e,c=!r&&_(e=u.selector||e);if(n=n||[],1===c.length){if(2<(i=c[0]=c[0].slice(0)).length&&"ID"===(o=i[0]).type&&9===t.nodeType&&F&&D.relative[i[1].type]){if(!(t=(D.find.ID(o.matches[0].replace(xe,Se),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(a=pe.needsContext.test(e)?0:i.length;a--&&(o=i[a],!D.relative[s=o.type]);)if((l=D.find[s])&&(r=l(o.matches[0].replace(xe,Se),we.test(i[0].type)&&p(t.parentNode)||t))){if(i.splice(a,1),!(e=r.length&&g(i)))return Q.apply(n,r),n;break}}return(u||A(e,c))(r,t,!F,n,!t||we.test(e)&&p(t.parentNode)||t),n},S.sortStable=q.split("").sort(G).join("")===q,S.detectDuplicates=!!j,L(),S.sortDetached=a(function(e){return 1&e.compareDocumentPosition(E.createElement("fieldset"))}),a(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||t("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),S.attributes&&a(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||t("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),a(function(e){return null==e.getAttribute("disabled")})||t(ne,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),w}(T);Te.find=_e,Te.expr=_e.selectors,Te.expr[":"]=Te.expr.pseudos,Te.uniqueSort=Te.unique=_e.uniqueSort,Te.text=_e.getText,Te.isXMLDoc=_e.isXML,Te.contains=_e.contains,Te.escapeSelector=_e.escape;var Ae=function(e,t,n){for(var r=[],a=n!==undefined;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&Te(e).is(n))break;r.push(e)}return r},Ne=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},ke=Te.expr.match.needsContext,Ie=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;Te.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?Te.find.matchesSelector(r,e)?[r]:[]:Te.find.matches(e,Te.grep(t,function(e){return 1===e.nodeType}))},Te.fn.extend({find:function(e){var t,n,r=this.length,a=this;if("string"!=typeof e)return this.pushStack(Te(e).filter(function(){for(t=0;t<r;t++)if(Te.contains(a[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)Te.find(e,a[t],n);return 1<r?Te.uniqueSort(n):n},filter:function(e){return this.pushStack(t(this,e||[],!1))},not:function(e){return this.pushStack(t(this,e||[],!0))},is:function(e){return!!t(this,"string"==typeof e&&ke.test(e)?Te(e):e||[],!1).length}});var je,Le=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(Te.fn.init=function(e,t,n){var r,a;if(!e)return this;if(n=n||je,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):we(e)?n.ready!==undefined?n.ready(e):e(Te):Te.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:Le.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof Te?t[0]:t,Te.merge(this,Te.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:le,!0)),Ie.test(r[1])&&Te.isPlainObject(t))for(r in t)we(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=le.getElementById(r[2]))&&(this[0]=a,this.length=1),this}).prototype=Te.fn,je=Te(le);var Ee=/^(?:parents|prev(?:Until|All))/,Re={children:!0,contents:!0,next:!0,prev:!0};Te.fn.extend({has:function(e){var t=Te(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(Te.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,a=this.length,i=[],o="string"!=typeof e&&Te(e);if(!ke.test(e))for(;r<a;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?-1<o.index(n):1===n.nodeType&&Te.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(1<i.length?Te.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?he.call(Te(e),this[0]):he.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(Te.uniqueSort(Te.merge(this.get(),Te(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),Te.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Ae(e,"parentNode")},parentsUntil:function(e,t,n){return Ae(e,"parentNode",n)},next:function(e){return n(e,"nextSibling")},prev:function(e){return n(e,"previousSibling")},nextAll:function(e){return Ae(e,"nextSibling")},prevAll:function(e){return Ae(e,"previousSibling")},nextUntil:function(e,t,n){return Ae(e,"nextSibling",n)},prevUntil:function(e,t,n){return Ae(e,"previousSibling",n)},siblings:function(e){return Ne((e.parentNode||{}).firstChild,e)},children:function(e){return Ne(e.firstChild)},contents:function(e){return"undefined"!=typeof e.contentDocument?e.contentDocument:(u(e,"template")&&(e=e.content||e),Te.merge([],e.childNodes))}},function(r,a){Te.fn[r]=function(e,t){var n=Te.map(this,a,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=Te.filter(t,n)),1<this.length&&(Re[r]||Te.uniqueSort(n),Ee.test(r)&&n.reverse()),this.pushStack(n)}});var Fe=/[^\x20\t\r\n\f]+/g;Te.Callbacks=function(r){r="string"==typeof r?c(r):Te.extend({},r);var a,e,t,n,i=[],o=[],s=-1,l=function(){for(n=n||r.once,t=a=!0;o.length;s=-1)for(e=o.shift();++s<i.length;)!1===i[s].apply(e[0],e[1])&&r.stopOnFalse&&(s=i.length,e=!1);r.memory||(e=!1),a=!1,n&&(i=e?[]:"")},u={add:function(){return i&&(e&&!a&&(s=i.length-1,o.push(e)),function n(e){Te.each(e,function(e,t){we(t)?r.unique&&u.has(t)||i.push(t):t&&t.length&&"string"!==m(t)&&n(t)})}(arguments),e&&!a&&l()),this},remove:function(){return Te.each(arguments,function(e,t){for(var n;-1<(n=Te.inArray(t,i,n));)i.splice(n,1),n<=s&&s--}),this},has:function(e){return e?-1<Te.inArray(e,i):0<i.length},empty:function(){return i&&(i=[]),this},disable:function(){return n=o=[],i=e="",this},disabled:function(){return!i},lock:function(){return n=o=[],e||a||(i=e=""),this},locked:function(){return!!n},fireWith:function(e,t){return n||(t=[e,(t=t||[]).slice?t.slice():t],o.push(t),a||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!t}};return u},Te.extend({Deferred:function(e){var i=[["notify","progress",Te.Callbacks("memory"),Te.Callbacks("memory"),2],["resolve","done",Te.Callbacks("once memory"),Te.Callbacks("once memory"),0,"resolved"],["reject","fail",Te.Callbacks("once memory"),Te.Callbacks("once memory"),1,"rejected"]],a="pending",o={state:function(){return a},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return o.then(null,e)},pipe:function(){var a=arguments;return Te.Deferred(function(r){Te.each(i,function(e,t){var n=we(a[t[4]])&&a[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&we(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),a=null}).promise()},then:function(t,n,r){function u(i,o,s,l){return function(){var n=this,r=arguments,t=function(){var e,t;if(!(i<c)){if((e=s.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,we(t)?l?t.call(e,u(c,o,f,l),u(c,o,d,l)):(c++,t.call(e,u(c,o,f,l),u(c,o,d,l),u(c,o,f,o.notifyWith))):(s!==f&&(n=undefined,r=[e]),(l||o.resolveWith)(n,r))}},a=l?t:function(){try{t()}catch(e){Te.Deferred.exceptionHook&&Te.Deferred.exceptionHook(e,a.stackTrace),c<=i+1&&(s!==d&&(n=undefined,r=[e]),o.rejectWith(n,r))}};i?a():(Te.Deferred.getStackHook&&(a.stackTrace=Te.Deferred.getStackHook()),T.setTimeout(a))}}var c=0;return Te.Deferred(function(e){i[0][3].add(u(0,e,we(r)?r:f,e.notifyWith)),i[1][3].add(u(0,e,we(t)?t:f)),i[2][3].add(u(0,e,we(n)?n:d))}).promise()},promise:function(e){return null!=e?Te.extend(e,o):o}},s={};return Te.each(i,function(e,t){var n=t[2],r=t[5];o[t[1]]=n.add,r&&n.add(function(){a=r},i[3-e][2].disable,i[3-e][3].disable,i[0][2].lock,i[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?undefined:this,arguments),this},s[t[0]+"With"]=n.fireWith}),o.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),a=ce.call(arguments),i=Te.Deferred(),o=function(t){return function(e){r[t]=this,a[t]=1<arguments.length?ce.call(arguments):e,--n||i.resolveWith(r,a)}};if(n<=1&&(l(e,i.done(o(t)).resolve,i.reject,!n),"pending"===i.state()||we(a[t]&&a[t].then)))return i.then();for(;t--;)l(a[t],o(t),i.reject);return i.promise()}});var Pe=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;Te.Deferred.exceptionHook=function(e,t){T.console&&T.console.warn&&e&&Pe.test(e.name)&&T.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},Te.readyException=function(e){T.setTimeout(function(){throw e})};var He=Te.Deferred();Te.fn.ready=function(e){return He.then(e)["catch"](function(e){Te.readyException(e)}),this},Te.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--Te.readyWait:Te.isReady)||(Te.isReady=!0)!==e&&0<--Te.readyWait||He.resolveWith(le,[Te])}}),Te.ready.then=He.then,"complete"===le.readyState||"loading"!==le.readyState&&!le.documentElement.doScroll?T.setTimeout(Te.ready):(le.addEventListener("DOMContentLoaded",r),T.addEventListener("load",r));var Me=function(e,t,n,r,a,i,o){var s=0,l=e.length,u=null==n;if("object"===m(n))for(s in a=!0,n)Me(e,t,s,n[s],!0,i,o);else if(r!==undefined&&(a=!0,we(r)||(o=!0),u&&(o?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(Te(e),n)})),t))for(;s<l;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return a?e:u?t.call(e):l?t(e[0],n):i},Oe=/^-ms-/,qe=/-([a-z])/g,We=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};i.uid=1,i.prototype={cache:function(e){var t=e[this.expando];return t||(t={},We(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,a=this.cache(e);if("string"==typeof t)a[h(t)]=n;else for(r in t)a[h(r)]=t[r];return a},get:function(e,t){return t===undefined?this.cache(e):e[this.expando]&&e[this.expando][h(t)]},access:function(e,t,n){return t===undefined||t&&"string"==typeof t&&n===undefined?this.get(e,t):(this.set(e,t,n),n!==undefined?n:t)},remove:function(e,t){var n,r=e[this.expando];if(r!==undefined){if(t!==undefined){n=(t=Array.isArray(t)?t.map(h):(t=h(t))in r?[t]:t.match(Fe)||[]).length;for(;n--;)delete r[t[n]]}(t===undefined||Te.isEmptyObject(r))&&(e.nodeType?e[this.expando]=undefined:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return t!==undefined&&!Te.isEmptyObject(t)}};var Be=new i,$e=new i,Ue=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ze=/[A-Z]/g;Te.extend({hasData:function(e){return $e.hasData(e)||Be.hasData(e)},data:function(e,t,n){return $e.access(e,t,n)},removeData:function(e,t){$e.remove(e,t)},_data:function(e,t,n){return Be.access(e,t,n)},_removeData:function(e,t){Be.remove(e,t)}}),Te.fn.extend({data:function(n,e){var t,r,a,i=this[0],o=i&&i.attributes;if(n!==undefined)return"object"==typeof n?this.each(function(){$e.set(this,n)}):Me(this,function(e){var t;if(i&&e===undefined)return(t=$e.get(i,n))!==undefined?t:(t=p(i,n))!==undefined?t:void 0;this.each(function(){$e.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(a=$e.get(i),1===i.nodeType&&!Be.get(i,"hasDataAttrs"))){for(t=o.length;t--;)o[t]&&0===(r=o[t].name).indexOf("data-")&&(r=h(r.slice(5)),p(i,r,a[r]));Be.set(i,"hasDataAttrs",!0)}return a},removeData:function(e){return this.each(function(){$e.remove(this,e)})}}),Te.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Be.get(e,t),n&&(!r||Array.isArray(n)?r=Be.access(e,t,Te.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=Te.queue(e,t),r=n.length,a=n.shift(),i=Te._queueHooks(e,t),o=function(){Te.dequeue(e,t)};"inprogress"===a&&(a=n.shift(),r--),a&&("fx"===t&&n.unshift("inprogress"),delete i.stop,a.call(e,o,i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Be.get(e,n)||Be.access(e,n,{empty:Te.Callbacks("once memory").add(function(){Be.remove(e,[t+"queue",n])})})}}),Te.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?Te.queue(this[0],t):n===undefined?this:this.each(function(){var e=Te.queue(this,t,n);Te._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&Te.dequeue(this,t)})},dequeue:function(e){return this.each(function(){Te.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,a=Te.Deferred(),i=this,o=this.length,s=function(){--r||a.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=undefined),e=e||"fx";o--;)(n=Be.get(i[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),a.promise(t)}});var Xe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ve=new RegExp("^(?:([+-])=|)("+Xe+")([a-z%]*)$","i"),Ge=["Top","Right","Bottom","Left"],Je=le.documentElement,Ye=function(e){return Te.contains(e.ownerDocument,e)},Ze={composed:!0};Je.getRootNode&&(Ye=function(e){return Te.contains(e.ownerDocument,e)||e.getRootNode(Ze)===e.ownerDocument});var Ke=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&Ye(e)&&"none"===Te.css(e,"display")},Qe=function(e,t,n,r){var a,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in a=n.apply(e,r||[]),t)e.style[i]=o[i];return a},et={};Te.fn.extend({show:function(){return b(this,!0)},hide:function(){return b(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Ke(this)?Te(this).show():Te(this).hide()})}});var tt=/^(?:checkbox|radio)$/i,nt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,rt=/^$|^module$|\/(?:java|ecma)script/i,at={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};at.optgroup=at.option,at.tbody=at.tfoot=at.colgroup=at.caption=at.thead,at.th=at.td;var it,ot,st=/<|&#?\w+;/;it=le.createDocumentFragment().appendChild(le.createElement("div")),(ot=le.createElement("input")).setAttribute("type","radio"),ot.setAttribute("checked","checked"),ot.setAttribute("name","t"),it.appendChild(ot),be.checkClone=it.cloneNode(!0).cloneNode(!0).lastChild.checked,it.innerHTML="<textarea>x</textarea>",be.noCloneChecked=!!it.cloneNode(!0).lastChild.defaultValue;var lt=/^key/,ut=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ct=/^([^.]*)(?:\.(.+)|)/;Te.event={global:{},add:function(t,e,n,r,a){var i,o,s,l,u,c,f,d,h,p,g,m=Be.get(t);if(m)for(n.handler&&(n=(i=n).handler,a=i.selector),a&&Te.find.matchesSelector(Je,a),n.guid||(n.guid=Te.guid++),(l=m.events)||(l=m.events={}),(o=m.handle)||(o=m.handle=function(e){return void 0!==Te&&Te.event.triggered!==e.type?Te.event.dispatch.apply(t,arguments):undefined}),u=(e=(e||"").match(Fe)||[""]).length;u--;)h=g=(s=ct.exec(e[u])||[])[1],p=(s[2]||"").split(".").sort(),h&&(f=Te.event.special[h]||{},h=(a?f.delegateType:f.bindType)||h,f=Te.event.special[h]||{},c=Te.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:a,needsContext:a&&Te.expr.match.needsContext.test(a),namespace:p.join(".")},i),(d=l[h])||((d=l[h]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,p,o)||t.addEventListener&&t.addEventListener(h,o)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),a?d.splice(d.delegateCount++,0,c):d.push(c),Te.event.global[h]=!0)},remove:function(e,t,n,r,a){var i,o,s,l,u,c,f,d,h,p,g,m=Be.hasData(e)&&Be.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(Fe)||[""]).length;u--;)if(h=g=(s=ct.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h){for(f=Te.event.special[h]||{},d=l[h=(r?f.delegateType:f.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=i=d.length;i--;)c=d[i],!a&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(i,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));o&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,p,m.handle)||Te.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)Te.event.remove(e,h+t[u],n,r,!0);Te.isEmptyObject(l)&&Be.remove(e,"handle events")}},dispatch:function(e){var t,n,r,a,i,o,s=Te.event.fix(e),l=new Array(arguments.length),u=(Be.get(this,"events")||{})[s.type]||[],c=Te.event.special[s.type]||{};for(l[0]=s,t=1;t<arguments.length;t++)l[t]=arguments[t];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(o=Te.event.handlers.call(this,s,u),t=0;(a=o[t++])&&!s.isPropagationStopped();)for(s.currentTarget=a.elem,n=0;(i=a.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==i.namespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,(r=((Te.event.special[i.origType]||{}).handle||i.handler).apply(a.elem,l))!==undefined&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,r,a,i,o,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(i=[],o={},n=0;n<l;n++)o[a=(r=t[n]).selector+" "]===undefined&&(o[a]=r.needsContext?-1<Te(a,this).index(u):Te.find(a,this,null,[u]).length),o[a]&&i.push(r);i.length&&s.push({elem:u,handlers:i})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(Te.Event.prototype,t,{enumerable:!0,configurable:!0,get:we(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[Te.expando]?e:new Te.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return tt.test(t.type)&&t.click&&u(t,"input")&&k(t,"click",D),!1},trigger:function(e){var t=this||e;return tt.test(t.type)&&t.click&&u(t,"input")&&k(t,"click"),!0},_default:function(e){var t=e.target;return tt.test(t.type)&&t.click&&u(t,"input")&&Be.get(t,"click")||u(t,"a")}},beforeunload:{postDispatch:function(e){e.result!==undefined&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},Te.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},Te.Event=function(e,t){if(!(this instanceof Te.Event))return new Te.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.defaultPrevented===undefined&&!1===e.returnValue?D:C,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&Te.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[Te.expando]=!0},Te.Event.prototype={constructor:Te.Event,isDefaultPrevented:C,isPropagationStopped:C,isImmediatePropagationStopped:C,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=D,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=D,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=D,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},Te.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&lt.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&t!==undefined&&ut.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},Te.event.addProp),Te.each({focus:"focusin",blur:"focusout"},function(e,t){Te.event.special[e]={setup:function(){return k(this,e,_),!1},trigger:function(){return k(this,e),!0},delegateType:t}}),Te.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){Te.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=this,r=e.relatedTarget,a=e.handleObj;return r&&(r===n||Te.contains(n,r))||(e.type=a.origType,t=a.handler.apply(this,arguments),e.type=i),t}}}),Te.fn.extend({on:function(e,t,n,r){return N(this,e,t,n,r)},one:function(e,t,n,r){return N(this,e,t,n,r,1)},off:function(e,t,n){var r,a;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,Te(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=undefined),!1===n&&(n=C),this.each(function(){Te.event.remove(this,e,n,t)});for(a in e)this.off(a,t,e[a]);return this}});var ft=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,dt=/<script|<style|<link/i,ht=/checked\s*(?:[^=]|=\s*.checked.)/i,pt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;Te.extend({htmlPrefilter:function(e){return e.replace(ft,"<$1></$2>")},clone:function(e,t,n){var r,a,i,o,s=e.cloneNode(!0),l=Ye(e);if(!(be.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||Te.isXMLDoc(e)))for(o=w(s),r=0,a=(i=w(e)).length;r<a;r++)R(i[r],o[r]);if(t)if(n)for(i=i||w(e),o=o||w(s),r=0,a=i.length;r<a;r++)E(i[r],o[r]);else E(e,s);return 0<(o=w(s,"script")).length&&x(o,!l&&w(e,"script")),s},cleanData:function(e){for(var t,n,r,a=Te.event.special,i=0;(n=e[i])!==undefined;i++)if(We(n)){if(t=n[Be.expando]){if(t.events)for(r in t.events)a[r]?Te.event.remove(n,r):Te.removeEvent(n,r,t.handle);n[Be.expando]=undefined}n[$e.expando]&&(n[$e.expando]=undefined)}}}),Te.fn.extend({detach:function(e){return P(this,e,!0)},remove:function(e){return P(this,e)},text:function(e){return Me(this,function(e){return e===undefined?Te.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return F(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||I(this,e).appendChild(e)})},prepend:function(){return F(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=I(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return F(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return F(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(Te.cleanData(w(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return Te.clone(this,e,t)})},html:function(e){return Me(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!dt.test(e)&&!at[(nt.exec(e)||["",""])[1].toLowerCase()]){e=Te.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(Te.cleanData(w(t,!1)),t.innerHTML=e);t=0}catch(a){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return F(this,arguments,function(e){var t=this.parentNode;Te.inArray(this,n)<0&&(Te.cleanData(w(this)),t&&t.replaceChild(e,this))},n)}}),Te.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,o){Te.fn[e]=function(e){for(var t,n=[],r=Te(e),a=r.length-1,i=0;i<=a;i++)t=i===a?this:this.clone(!0),Te(r[i])[o](t),de.apply(n,t.get());return this.pushStack(n)}});var gt=new RegExp("^("+Xe+")(?!px)[a-z%]+$","i"),mt=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=T),t.getComputedStyle(e)},vt=new RegExp(Ge.join("|"),"i");!function(){function e(){if(l){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",l.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Je.appendChild(s).appendChild(l);var e=T.getComputedStyle(l);n="1%"!==e.top,o=12===t(e.marginLeft),l.style.right="60%",i=36===t(e.right),r=36===t(e.width),l.style.position="absolute",a=12===t(l.offsetWidth/3),Je.removeChild(s),l=null}}function t(e){return Math.round(parseFloat(e))}var n,r,a,i,o,s=le.createElement("div"),l=le.createElement("div");l.style&&(l.style.backgroundClip="content-box",l.cloneNode(!0).style.backgroundClip="",be.clearCloneStyle="content-box"===l.style.backgroundClip,Te.extend(be,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),i},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),o},scrollboxSize:function(){return e(),a}}))}();var yt=["Webkit","Moz","ms"],bt=le.createElement("div").style,wt={},xt=/^(none|table(?!-c[ea]).+)/,St=/^--/,Dt={position:"absolute",visibility:"hidden",display:"block"},Tt={letterSpacing:"0",fontWeight:"400"};Te.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=H(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,i,o,s=h(t),l=St.test(t),u=e.style;if(l||(t=q(s)),o=Te.cssHooks[t]||Te.cssHooks[s],n===undefined)return o&&"get"in o&&(a=o.get(e,!1,r))!==undefined?a:u[t];"string"===(i=typeof n)&&(a=Ve.exec(n))&&a[1]&&(n=v(e,t,a),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=a&&a[3]||(Te.cssNumber[s]?"":"px")),be.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&(n=o.set(e,n,r))===undefined||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var a,i,o,s=h(t);return St.test(t)||(t=q(s)),(o=Te.cssHooks[t]||Te.cssHooks[s])&&"get"in o&&(a=o.get(e,!0,n)),a===undefined&&(a=H(e,t,r)),"normal"===a&&t in Tt&&(a=Tt[t]),""===n||n?(i=parseFloat(a),!0===n||isFinite(i)?i||0:a):a}}),Te.each(["height","width"],function(e,l){Te.cssHooks[l]={get:function(e,t,n){if(t)return!xt.test(Te.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?$(e,l,n):Qe(e,Dt,function(){return $(e,l,n)})},set:function(e,t,n){var r,a=mt(e),i=!be.scrollboxSize()&&"absolute"===a.position,o=(i||n)&&"border-box"===Te.css(e,"boxSizing",!1,a),s=n?B(e,l,n,o,a):0;return o&&i&&(s-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(a[l])-B(e,l,"border",!1,a)-.5)),s&&(r=Ve.exec(t))&&"px"!==(r[3]||"px")&&(e.style[l]=t,t=Te.css(e,l)),W(e,t,s)}}}),Te.cssHooks.marginLeft=M(be.reliableMarginLeft,function(e,t){if(t)return(parseFloat(H(e,"marginLeft"))||e.getBoundingClientRect().left-Qe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),Te.each({margin:"",padding:"",border:"Width"},function(a,i){Te.cssHooks[a+i]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[a+Ge[t]+i]=r[t]||r[t-2]||r[0];return n}},"margin"!==a&&(Te.cssHooks[a+i].set=W)}),Te.fn.extend({css:function(e,t){return Me(this,function(e,t,n){var r,a,i={},o=0;if(Array.isArray(t)){for(r=mt(e),a=t.length;o<a;o++)i[t[o]]=Te.css(e,t[o],!1,r);return i}return n!==undefined?Te.style(e,t,n):Te.css(e,t)},e,t,1<arguments.length)}}),(Te.Tween=U).prototype={constructor:U,init:function(e,t,n,r,a,i){this.elem=e,this.prop=n,this.easing=a||Te.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(Te.cssNumber[n]?"":"px")},cur:function(){var e=U.propHooks[this.prop];return e&&e.get?e.get(this):U.propHooks._default.get(this)},run:function(e){var t,n=U.propHooks[this.prop];return this.options.duration?this.pos=t=Te.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):U.propHooks._default.set(this),this}},U.prototype.init.prototype=U.prototype,U.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=Te.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){Te.fx.step[e.prop]?Te.fx.step[e.prop](e):1!==e.elem.nodeType||!Te.cssHooks[e.prop]&&null==e.elem.style[q(e.prop)]?e.elem[e.prop]=e.now:Te.style(e.elem,e.prop,e.now+e.unit)}}},U.propHooks.scrollTop=U.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},Te.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},Te.fx=U.prototype.init,Te.fx.step={};var Ct,_t,At,Nt,kt=/^(?:toggle|show|hide)$/,It=/queueHooks$/;Te.Animation=Te.extend(Z,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return v(n.elem,e,Ve.exec(t),n),n}]},tweener:function(e,t){we(e)?(t=e,e=["*"]):e=e.match(Fe);for(var n,r=0,a=e.length;r<a;r++)n=e[r],Z.tweeners[n]=Z.tweeners[n]||[],Z.tweeners[n].unshift(t)},prefilters:[J],prefilter:function(e,t){t?Z.prefilters.unshift(e):Z.prefilters.push(e)}}),Te.speed=function(e,t,n){var r=e&&"object"==typeof e?Te.extend({},e):{complete:n||!n&&t||we(e)&&e,duration:e,easing:n&&t||t&&!we(t)&&t};return Te.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in Te.fx.speeds?r.duration=Te.fx.speeds[r.duration]:r.duration=Te.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){we(r.old)&&r.old.call(this),r.queue&&Te.dequeue(this,r.queue)},r},Te.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Ke).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var a=Te.isEmptyObject(t),i=Te.speed(e,n,r),o=function(){var e=Z(this,Te.extend({},t),i);(a||Be.get(this,"finish"))&&e.stop(!0)};return o.finish=o,a||!1===i.queue?this.each(o):this.queue(i.queue,o)},stop:function(a,e,i){var o=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof a&&(i=e,e=a,a=undefined),e&&!1!==a&&this.queue(a||"fx",[]),this.each(function(){var e=!0,t=null!=a&&a+"queueHooks",n=Te.timers,r=Be.get(this);if(t)r[t]&&r[t].stop&&o(r[t]);else for(t in r)r[t]&&r[t].stop&&It.test(t)&&o(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=a&&n[t].queue!==a||(n[t].anim.stop(i),e=!1,n.splice(t,1));!e&&i||Te.dequeue(this,a)})},finish:function(o){return!1!==o&&(o=o||"fx"),this.each(function(){var e,t=Be.get(this),n=t[o+"queue"],
r=t[o+"queueHooks"],a=Te.timers,i=n?n.length:0;for(t.finish=!0,Te.queue(this,o,[]),r&&r.stop&&r.stop.call(this,!0),e=a.length;e--;)a[e].elem===this&&a[e].queue===o&&(a[e].anim.stop(!0),a.splice(e,1));for(e=0;e<i;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),Te.each(["toggle","show","hide"],function(e,r){var a=Te.fn[r];Te.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?a.apply(this,arguments):this.animate(V(r,!0),e,t,n)}}),Te.each({slideDown:V("show"),slideUp:V("hide"),slideToggle:V("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){Te.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),Te.timers=[],Te.fx.tick=function(){var e,t=0,n=Te.timers;for(Ct=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||Te.fx.stop(),Ct=undefined},Te.fx.timer=function(e){Te.timers.push(e),Te.fx.start()},Te.fx.interval=13,Te.fx.start=function(){_t||(_t=!0,z())},Te.fx.stop=function(){_t=null},Te.fx.speeds={slow:600,fast:200,_default:400},Te.fn.delay=function(r,e){return r=Te.fx&&Te.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=T.setTimeout(e,r);t.stop=function(){T.clearTimeout(n)}})},At=le.createElement("input"),Nt=le.createElement("select").appendChild(le.createElement("option")),At.type="checkbox",be.checkOn=""!==At.value,be.optSelected=Nt.selected,(At=le.createElement("input")).value="t",At.type="radio",be.radioValue="t"===At.value;var jt,Lt=Te.expr.attrHandle;Te.fn.extend({attr:function(e,t){return Me(this,Te.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){Te.removeAttr(this,e)})}}),Te.extend({attr:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return"undefined"==typeof e.getAttribute?Te.prop(e,t,n):(1===i&&Te.isXMLDoc(e)||(a=Te.attrHooks[t.toLowerCase()]||(Te.expr.match.bool.test(t)?jt:undefined)),n!==undefined?null===n?void Te.removeAttr(e,t):a&&"set"in a&&(r=a.set(e,n,t))!==undefined?r:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(r=a.get(e,t))?r:null==(r=Te.find.attr(e,t))?undefined:r)},attrHooks:{type:{set:function(e,t){if(!be.radioValue&&"radio"===t&&u(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,a=t&&t.match(Fe);if(a&&1===e.nodeType)for(;n=a[r++];)e.removeAttribute(n)}}),jt={set:function(e,t,n){return!1===t?Te.removeAttr(e,n):e.setAttribute(n,n),n}},Te.each(Te.expr.match.bool.source.match(/\w+/g),function(e,t){var o=Lt[t]||Te.find.attr;Lt[t]=function(e,t,n){var r,a,i=t.toLowerCase();return n||(a=Lt[i],Lt[i]=r,r=null!=o(e,t,n)?i:null,Lt[i]=a),r}});var Et=/^(?:input|select|textarea|button)$/i,Rt=/^(?:a|area)$/i;Te.fn.extend({prop:function(e,t){return Me(this,Te.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[Te.propFix[e]||e]})}}),Te.extend({prop:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&Te.isXMLDoc(e)||(t=Te.propFix[t]||t,a=Te.propHooks[t]),n!==undefined?a&&"set"in a&&(r=a.set(e,n,t))!==undefined?r:e[t]=n:a&&"get"in a&&null!==(r=a.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=Te.find.attr(e,"tabindex");return t?parseInt(t,10):Et.test(e.nodeName)||Rt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),be.optSelected||(Te.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),Te.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Te.propFix[this.toLowerCase()]=this}),Te.fn.extend({addClass:function(t){var e,n,r,a,i,o,s,l=0;if(we(t))return this.each(function(e){Te(this).addClass(t.call(this,e,Q(this)))});if((e=ee(t)).length)for(;n=this[l++];)if(a=Q(n),r=1===n.nodeType&&" "+K(a)+" "){for(o=0;i=e[o++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");a!==(s=K(r))&&n.setAttribute("class",s)}return this},removeClass:function(t){var e,n,r,a,i,o,s,l=0;if(we(t))return this.each(function(e){Te(this).removeClass(t.call(this,e,Q(this)))});if(!arguments.length)return this.attr("class","");if((e=ee(t)).length)for(;n=this[l++];)if(a=Q(n),r=1===n.nodeType&&" "+K(a)+" "){for(o=0;i=e[o++];)for(;-1<r.indexOf(" "+i+" ");)r=r.replace(" "+i+" "," ");a!==(s=K(r))&&n.setAttribute("class",s)}return this},toggleClass:function(a,t){var i=typeof a,o="string"===i||Array.isArray(a);return"boolean"==typeof t&&o?t?this.addClass(a):this.removeClass(a):we(a)?this.each(function(e){Te(this).toggleClass(a.call(this,e,Q(this),t),t)}):this.each(function(){var e,t,n,r;if(o)for(t=0,n=Te(this),r=ee(a);e=r[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else a!==undefined&&"boolean"!==i||((e=Q(this))&&Be.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===a?"":Be.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+K(Q(n))+" ").indexOf(t))return!0;return!1}});var Ft=/\r/g;Te.fn.extend({val:function(n){var r,e,a,t=this[0];return arguments.length?(a=we(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=a?n.call(this,e,Te(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=Te.map(t,function(e){return null==e?"":e+""})),(r=Te.valHooks[this.type]||Te.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&r.set(this,t,"value")!==undefined||(this.value=t))})):t?(r=Te.valHooks[t.type]||Te.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&(e=r.get(t,"value"))!==undefined?e:"string"==typeof(e=t.value)?e.replace(Ft,""):null==e?"":e:void 0}}),Te.extend({valHooks:{option:{get:function(e){var t=Te.find.attr(e,"value");return null!=t?t:K(Te.text(e))}},select:{get:function(e){var t,n,r,a=e.options,i=e.selectedIndex,o="select-one"===e.type,s=o?null:[],l=o?i+1:a.length;for(r=i<0?l:o?i:0;r<l;r++)if(((n=a[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!u(n.parentNode,"optgroup"))){if(t=Te(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,a=e.options,i=Te.makeArray(t),o=a.length;o--;)((r=a[o]).selected=-1<Te.inArray(Te.valHooks.option.get(r),i))&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),Te.each(["radio","checkbox"],function(){Te.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<Te.inArray(Te(e).val(),t)}},be.checkOn||(Te.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),be.focusin="onfocusin"in T;var Pt=/^(?:focusinfocus|focusoutblur)$/,Ht=function(e){e.stopPropagation()};Te.extend(Te.event,{trigger:function(e,t,n,r){var a,i,o,s,l,u,c,f,d=[n||le],h=me.call(e,"type")?e.type:e,p=me.call(e,"namespace")?e.namespace.split("."):[];if(i=f=o=n=n||le,3!==n.nodeType&&8!==n.nodeType&&!Pt.test(h+Te.event.triggered)&&(-1<h.indexOf(".")&&(h=(p=h.split(".")).shift(),p.sort()),l=h.indexOf(":")<0&&"on"+h,(e=e[Te.expando]?e:new Te.Event(h,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=undefined,e.target||(e.target=n),t=null==t?[e]:Te.makeArray(t,[e]),c=Te.event.special[h]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!xe(n)){for(s=c.delegateType||h,Pt.test(s+h)||(i=i.parentNode);i;i=i.parentNode)d.push(i),o=i;o===(n.ownerDocument||le)&&d.push(o.defaultView||o.parentWindow||T)}for(a=0;(i=d[a++])&&!e.isPropagationStopped();)f=i,e.type=1<a?s:c.bindType||h,(u=(Be.get(i,"events")||{})[e.type]&&Be.get(i,"handle"))&&u.apply(i,t),(u=l&&i[l])&&u.apply&&We(i)&&(e.result=u.apply(i,t),!1===e.result&&e.preventDefault());return e.type=h,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!We(n)||l&&we(n[h])&&!xe(n)&&((o=n[l])&&(n[l]=null),Te.event.triggered=h,e.isPropagationStopped()&&f.addEventListener(h,Ht),n[h](),e.isPropagationStopped()&&f.removeEventListener(h,Ht),Te.event.triggered=undefined,o&&(n[l]=o)),e.result}},simulate:function(e,t,n){var r=Te.extend(new Te.Event,n,{type:e,isSimulated:!0});Te.event.trigger(r,null,t)}}),Te.fn.extend({trigger:function(e,t){return this.each(function(){Te.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return Te.event.trigger(e,t,n,!0)}}),be.focusin||Te.each({focus:"focusin",blur:"focusout"},function(n,r){var a=function(e){Te.event.simulate(r,e.target,Te.event.fix(e))};Te.event.special[r]={setup:function(){var e=this.ownerDocument||this,t=Be.access(e,r);t||e.addEventListener(n,a,!0),Be.access(e,r,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this,t=Be.access(e,r)-1;t?Be.access(e,r,t):(e.removeEventListener(n,a,!0),Be.remove(e,r))}}});var Mt=T.location,Ot=Date.now(),qt=/\?/;Te.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new T.DOMParser).parseFromString(e,"text/xml")}catch(n){t=undefined}return t&&!t.getElementsByTagName("parsererror").length||Te.error("Invalid XML: "+e),t};var Wt=/\[\]$/,Bt=/\r?\n/g,$t=/^(?:submit|button|image|reset|file)$/i,Ut=/^(?:input|select|textarea|keygen)/i;Te.param=function(e,t){var n,r=[],a=function(e,t){var n=we(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!Te.isPlainObject(e))Te.each(e,function(){a(this.name,this.value)});else for(n in e)te(n,e[n],t,a);return r.join("&")},Te.fn.extend({serialize:function(){return Te.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=Te.prop(this,"elements");return e?Te.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!Te(this).is(":disabled")&&Ut.test(this.nodeName)&&!$t.test(e)&&(this.checked||!tt.test(e))}).map(function(e,t){var n=Te(this).val();return null==n?null:Array.isArray(n)?Te.map(n,function(e){return{name:t.name,value:e.replace(Bt,"\r\n")}}):{name:t.name,value:n.replace(Bt,"\r\n")}}).get()}});var zt=/%20/g,Xt=/#.*$/,Vt=/([?&])_=[^&]*/,Gt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Jt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Yt=/^(?:GET|HEAD)$/,Zt=/^\/\//,Kt={},Qt={},en="*/".concat("*"),tn=le.createElement("a");tn.href=Mt.href,Te.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Mt.href,type:"GET",isLocal:Jt.test(Mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":en,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":Te.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?ae(ae(e,Te.ajaxSettings),t):ae(Te.ajaxSettings,e)},ajaxPrefilter:ne(Kt),ajaxTransport:ne(Qt),ajax:function(e,t){function n(e,t,n,r){var a,i,o,s,l,u=t;p||(p=!0,h&&T.clearTimeout(h),c=undefined,d=r||"",S.readyState=0<e?4:0,a=200<=e&&e<300||304===e,n&&(s=ie(m,S,n)),s=oe(m,s,S,a),a?(m.ifModified&&((l=S.getResponseHeader("Last-Modified"))&&(Te.lastModified[f]=l),(l=S.getResponseHeader("etag"))&&(Te.etag[f]=l)),204===e||"HEAD"===m.type?u="nocontent":304===e?u="notmodified":(u=s.state,i=s.data,a=!(o=s.error))):(o=u,!e&&u||(u="error",e<0&&(e=0))),S.status=e,S.statusText=(t||u)+"",a?b.resolveWith(v,[i,u,S]):b.rejectWith(v,[S,u,o]),S.statusCode(x),x=undefined,g&&y.trigger(a?"ajaxSuccess":"ajaxError",[S,m,a?i:o]),w.fireWith(v,[S,u]),g&&(y.trigger("ajaxComplete",[S,m]),--Te.active||Te.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=undefined),t=t||{};var c,f,d,r,h,a,p,g,i,o,m=Te.ajaxSetup({},t),v=m.context||m,y=m.context&&(v.nodeType||v.jquery)?Te(v):Te.event,b=Te.Deferred(),w=Te.Callbacks("once memory"),x=m.statusCode||{},s={},l={},u="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(p){if(!r)for(r={};t=Gt.exec(d);)r[t[1].toLowerCase()+" "]=(r[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=r[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return p?d:null},setRequestHeader:function(e,t){return null==p&&(e=l[e.toLowerCase()]=l[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==p&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(p)S.always(e[S.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),n(0,t),this}};if(b.promise(S),m.url=((e||m.url||Mt.href)+"").replace(Zt,Mt.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(Fe)||[""],null==m.crossDomain){a=le.createElement("a");try{a.href=m.url,a.href=a.href,m.crossDomain=tn.protocol+"//"+tn.host!=a.protocol+"//"+a.host}catch(D){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=Te.param(m.data,m.traditional)),re(Kt,m,t,S),p)return S;for(i in(g=Te.event&&m.global)&&0==Te.active++&&Te.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Yt.test(m.type),f=m.url.replace(Xt,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(zt,"+")):(o=m.url.slice(f.length),m.data&&(m.processData||"string"==typeof m.data)&&(f+=(qt.test(f)?"&":"?")+m.data,delete m.data),!1===m.cache&&(f=f.replace(Vt,"$1"),o=(qt.test(f)?"&":"?")+"_="+Ot+++o),m.url=f+o),m.ifModified&&(Te.lastModified[f]&&S.setRequestHeader("If-Modified-Since",Te.lastModified[f]),Te.etag[f]&&S.setRequestHeader("If-None-Match",Te.etag[f])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&S.setRequestHeader("Content-Type",m.contentType),S.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+en+"; q=0.01":""):m.accepts["*"]),m.headers)S.setRequestHeader(i,m.headers[i]);if(m.beforeSend&&(!1===m.beforeSend.call(v,S,m)||p))return S.abort();if(u="abort",w.add(m.complete),S.done(m.success),S.fail(m.error),c=re(Qt,m,t,S)){if(S.readyState=1,g&&y.trigger("ajaxSend",[S,m]),p)return S;m.async&&0<m.timeout&&(h=T.setTimeout(function(){S.abort("timeout")},m.timeout));try{p=!1,c.send(s,n)}catch(D){if(p)throw D;n(-1,D)}}else n(-1,"No Transport");return S},getJSON:function(e,t,n){return Te.get(e,t,n,"json")},getScript:function(e,t){return Te.get(e,undefined,t,"script")}}),Te.each(["get","post"],function(e,a){Te[a]=function(e,t,n,r){return we(t)&&(r=r||n,n=t,t=undefined),Te.ajax(Te.extend({url:e,type:a,dataType:r,data:t,success:n},Te.isPlainObject(e)&&e))}}),Te._evalUrl=function(e,t){return Te.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){Te.globalEval(e,t)}})},Te.fn.extend({wrapAll:function(e){var t;return this[0]&&(we(e)&&(e=e.call(this[0])),t=Te(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return we(n)?this.each(function(e){Te(this).wrapInner(n.call(this,e))}):this.each(function(){var e=Te(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=we(t);return this.each(function(e){Te(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){Te(this).replaceWith(this.childNodes)}),this}}),Te.expr.pseudos.hidden=function(e){return!Te.expr.pseudos.visible(e)},Te.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},Te.ajaxSettings.xhr=function(){try{return new T.XMLHttpRequest}catch(e){}};var nn={0:200,1223:204},rn=Te.ajaxSettings.xhr();be.cors=!!rn&&"withCredentials"in rn,be.ajax=rn=!!rn,Te.ajaxTransport(function(i){var o,s;if(be.cors||rn&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=s=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(nn[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),s=r.onerror=r.ontimeout=o("error"),r.onabort!==undefined?r.onabort=s:r.onreadystatechange=function(){4===r.readyState&&T.setTimeout(function(){o&&s()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(a){if(o)throw a}},abort:function(){o&&o()}}}),Te.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),Te.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return Te.globalEval(e),e}}}),Te.ajaxPrefilter("script",function(e){e.cache===undefined&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),Te.ajaxTransport("script",function(n){var r,a;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=Te("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",a=function(e){r.remove(),a=null,e&&t("error"===e.type?404:200,e.type)}),le.head.appendChild(r[0])},abort:function(){a&&a()}}});var an,on=[],sn=/(=)\?(?=&|$)|\?\?/;Te.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=on.pop()||Te.expando+"_"+Ot++;return this[e]=!0,e}}),Te.ajaxPrefilter("json jsonp",function(e,t,n){var r,a,i,o=!1!==e.jsonp&&(sn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&sn.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=we(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(sn,"$1"+r):!1!==e.jsonp&&(e.url+=(qt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return i||Te.error(r+" was not called"),i[0]},e.dataTypes[0]="json",a=T[r],T[r]=function(){i=arguments},n.always(function(){a===undefined?Te(T).removeProp(r):T[r]=a,e[r]&&(e.jsonpCallback=t.jsonpCallback,on.push(r)),i&&we(a)&&a(i[0]),i=a=undefined}),"script"}),be.createHTMLDocument=((an=le.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===an.childNodes.length),Te.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(be.createHTMLDocument?((r=(t=le.implementation.createHTMLDocument("")).createElement("base")).href=le.location.href,t.head.appendChild(r)):t=le),i=!n&&[],(a=Ie.exec(e))?[t.createElement(a[1])]:(a=S([e],t,i),i&&i.length&&Te(i).remove(),Te.merge([],a.childNodes)));var r,a,i},Te.fn.load=function(e,t,n){var r,a,i,o=this,s=e.indexOf(" ");return-1<s&&(r=K(e.slice(s)),e=e.slice(0,s)),we(t)?(n=t,t=undefined):t&&"object"==typeof t&&(a="POST"),0<o.length&&Te.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){i=arguments,o.html(r?Te("<div>").append(Te.parseHTML(e)).find(r):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},Te.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){Te.fn[t]=function(e){return this.on(t,e)}}),Te.expr.pseudos.animated=function(t){return Te.grep(Te.timers,function(e){return t===e.elem}).length},Te.offset={setOffset:function(e,t,n){var r,a,i,o,s,l,u=Te.css(e,"position"),c=Te(e),f={};"static"===u&&(e.style.position="relative"),s=c.offset(),i=Te.css(e,"top"),l=Te.css(e,"left"),("absolute"===u||"fixed"===u)&&-1<(i+l).indexOf("auto")?(o=(r=c.position()).top,a=r.left):(o=parseFloat(i)||0,a=parseFloat(l)||0),we(t)&&(t=t.call(e,n,Te.extend({},s))),null!=t.top&&(f.top=t.top-s.top+o),null!=t.left&&(f.left=t.left-s.left+a),"using"in t?t.using.call(e,f):c.css(f)}},Te.fn.extend({offset:function(t){if(arguments.length)return t===undefined?this:this.each(function(e){Te.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],a={top:0,left:0};if("fixed"===Te.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===Te.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((a=Te(e).offset()).top+=Te.css(e,"borderTopWidth",!0),a.left+=Te.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-Te.css(r,"marginTop",!0),left:t.left-a.left-Te.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===Te.css(e,"position");)e=e.offsetParent;return e||Je})}}),Te.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,a){var i="pageYOffset"===a;Te.fn[t]=function(e){return Me(this,function(e,t,n){var r;if(xe(e)?r=e:9===e.nodeType&&(r=e.defaultView),n===undefined)return r?r[a]:e[t];r?r.scrollTo(i?r.pageXOffset:n,i?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),Te.each(["top","left"],function(e,n){Te.cssHooks[n]=M(be.pixelPosition,function(e,t){if(t)return t=H(e,n),gt.test(t)?Te(e).position()[n]+"px":t})}),Te.each({Height:"height",Width:"width"},function(o,s){Te.each({padding:"inner"+o,content:s,"":"outer"+o},function(r,i){Te.fn[i]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),a=r||(!0===e||!0===t?"margin":"border");return Me(this,function(e,t,n){var r;return xe(e)?0===i.indexOf("outer")?e["inner"+o]:e.document.documentElement["client"+o]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+o],r["scroll"+o],e.body["offset"+o],r["offset"+o],r["client"+o])):n===undefined?Te.css(e,t,a):Te.style(e,t,n,a)},s,n?e:undefined,n)}})}),Te.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){Te.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}}),Te.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),Te.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),Te.proxy=function(e,t){var n,r,a;return"string"==typeof t&&(n=e[t],t=e,e=n),we(e)?(r=ce.call(arguments,2),(a=function(){return e.apply(t||this,r.concat(ce.call(arguments)))}).guid=e.guid=e.guid||Te.guid++,a):undefined},Te.holdReady=function(e){e?Te.readyWait++:Te.ready(!0)},Te.isArray=Array.isArray,Te.parseJSON=JSON.parse,Te.nodeName=u,Te.isFunction=we,Te.isWindow=xe,Te.camelCase=h,Te.type=m,Te.now=Date.now,Te.isNumeric=function(e){var t=Te.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return Te});var ln=T.jQuery,un=T.$;return Te.noConflict=function(e){return T.$===Te&&(T.$=un),e&&T.jQuery===Te&&(T.jQuery=ln),Te},e||(T.jQuery=T.$=Te),Te});var hljs=new function(){function x(e){return e.replace(/&/gm,"&amp;").replace(/</gm,"&lt;")}function S(e,t,n){return RegExp(t,"m"+(e.cI?"i":"")+(n?"g":""))}function r(e){for(var t=0;t<e.childNodes.length;t++){var n=e.childNodes[t];if("CODE"==n.nodeName)return n;if(3!=n.nodeType||!n.nodeValue.match(/\s+/))break}}function h(e,t){for(var n="",r=0;r<e.childNodes.length;r++)if(3==e.childNodes[r].nodeType){var a=e.childNodes[r].nodeValue;t&&(a=a.replace(/\n/g,"")),n+=a}else"BR"==e.childNodes[r].nodeName?n+="\n":n+=h(e.childNodes[r]);return/MSIE [678]/.test(navigator.userAgent)&&(n=n.replace(/\r/g,"\n")),n}function p(e){var t=e.className.split(/\s+/);t=t.concat(e.parentNode.className.split(/\s+/));for(var n=0;n<t.length;n++){var r=t[n].replace(/^language-/,"");if(T[r]||"no-highlight"==r)return r}}function g(e){var r=[];return function(e,t){for(var n=0;n<e.childNodes.length;n++)3==e.childNodes[n].nodeType?t+=e.childNodes[n].nodeValue.length:"BR"==e.childNodes[n].nodeName?t+=1:(r.push({event:"start",offset:t,node:e.childNodes[n]}),t=arguments.callee(e.childNodes[n],t),r.push({event:"stop",offset:t,node:e.childNodes[n]}))}(e,0),r}function m(e,t,n){function r(){return e.length&&t.length?e[0].offset!=t[0].offset?e[0].offset<t[0].offset?e:t:"start"==t[0].event?e:t:e.length?e:t}function a(e){for(var t="<"+e.nodeName.toLowerCase(),n=0;n<e.attributes.length;n++){var r=e.attributes[n];t+=" "+r.nodeName.toLowerCase(),r.nodeValue!=undefined&&(t+='="'+x(r.nodeValue)+'"')}return t+">"}for(var i=0,o="",s=[];e.length||t.length;){var l=r().splice(0,1)[0];if(o+=x(n.substr(i,l.offset-i)),i=l.offset,"start"==l.event)o+=a(l.node),s.push(l.node);else if("stop"==l.event){var u=s.length;do{var c=s[--u];o+="</"+c.nodeName.toLowerCase()+">"}while(c!=l.node);for(s.splice(u,1);u<s.length;)o+=a(s[u]),u++}}return o+=n.substr(i)}function D(e,t){function l(e,t){for(var n=0;n<t.c.length;n++)if(t.c[n].bR.test(e))return t.c[n]}function u(e,t){if(h[e].e&&h[e].eR.test(t))return 1;if(h[e].eW){var n=u(e-1,t);return n?n+1:0}return 0}function c(e,t){return t.iR&&t.iR.test(e)}function a(e,t){for(var n=[],r=0;r<e.c.length;r++)n.push(e.c[r].b);for(var a=h.length-1;h[a].e&&n.push(h[a].e),h[--a+1].eW;);return e.i&&n.push(e.i),S(t,"("+n.join("|")+")",!0)}function n(e,t){var n=h[h.length-1];n.t||(n.t=a(n,s)),n.t.lastIndex=t;var r=n.t.exec(e);return r?[e.substr(t,r.index-t),r[0],!1]:[e.substr(t),"",!0]}function o(e,t){var n=s.cI?t[0].toLowerCase():t[0];for(var r in e.kG)if(e.kG.hasOwnProperty(r)){var a=e.kG[r].hasOwnProperty(n);if(a)return[r,a]}return!1}function r(e,t){if(!t.k)return x(e);var n="",r=0;t.lR.lastIndex=0;for(var a=t.lR.exec(e);a;){n+=x(e.substr(r,a.index-r));var i=o(t,a);i?(g+=i[1],n+='<span class="'+i[0]+'">'+x(a[0])+"</span>"):n+=x(a[0]),r=t.lR.lastIndex,a=t.lR.exec(e)}return n+=x(e.substr(r,e.length-r))}function f(e,t){if(t.sL&&T[t.sL]){var n=D(t.sL,e);return g+=n.keyword_count,n.value}return r(e,t)}function d(e,t){var n=e.cN?'<span class="'+e.cN+'">':"";e.rB?(m+=n,e.buffer=""):e.eB?(m+=x(t)+n,e.buffer=""):(m+=n,e.buffer=t),h.push(e),p+=e.r}function i(e,t,n){var r=h[h.length-1];if(n)return m+=f(r.buffer+e,r),!1;var a=l(t,r);if(a)return m+=f(r.buffer+e,r),d(a,t),a.rB;var i=u(h.length-1,t);if(i){var o=r.cN?"</span>":"";for(r.rE?m+=f(r.buffer+e,r)+o:r.eE?m+=f(r.buffer+e,r)+o+x(t):m+=f(r.buffer+e+t,r)+o;1<i;)o=h[h.length-2].cN?"</span>":"",m+=o,i--,h.length--;var s=h[h.length-1];return h.length--,h[h.length-1].buffer="",s.starts&&d(s.starts,""),r.rE}if(c(t,r))throw"Illegal"}var s=T[e],h=[s.dM],p=0,g=0,m="";try{var v=0;s.dM.buffer="";do{var y=n(t,v),b=i(y[0],y[1],y[2]);v+=y[0].length,b||(v+=y[1].length)}while(!y[2]);if(1<h.length)throw"Illegal";return{language:e,r:p,keyword_count:g,value:m}}catch(w){if("Illegal"==w)return{language:null,r:0,keyword_count:0,value:x(t)};throw w}}function e(){function i(e,t,n){if(!e.compiled){for(var r in n||(e.bR=S(t,e.b?e.b:"\\B|\\b"),e.e||e.eW||(e.e="\\B|\\b"),e.e&&(e.eR=S(t,e.e))),e.i&&(e.iR=S(t,e.i)),e.r==undefined&&(e.r=1),e.k&&(e.lR=S(t,e.l||hljs.IR,!0)),e.k)if(e.k.hasOwnProperty(r)){e.k[r]instanceof Object?e.kG=e.k:e.kG={keyword:e.k};break}e.c||(e.c=[]),e.compiled=!0;for(var a=0;a<e.c.length;a++)i(e.c[a],t,!1);e.starts&&i(e.starts,t,!1)}}for(var e in T)T.hasOwnProperty(e)&&i(T[e].dM,T[e],!0)}function v(){v.called||(v.called=!0,e())}function a(e,n,t){v();var r=h(e,t),a=p(e);if("no-highlight"!=a){if(a)var i=D(a,r);else{var o=i={language:"",keyword_count:0,r:0,value:x(r)};for(var s in T)if(T.hasOwnProperty(s)){var l=D(s,r);l.keyword_count+l.r>o.keyword_count+o.r&&(o=l),l.keyword_count+l.r>i.keyword_count+i.r&&(o=i,i=l)}}var u=e.className;u.match(i.language)||(u=u?u+" "+i.language:i.language);var c=g(e);if(c.length)(f=document.createElement("pre")).innerHTML=i.value,i.value=m(c,g(f),r);if(n&&(i.value=i.value.replace(/^((<[^>]+>|\t)+)/gm,function(e,t){return t.replace(/\t/g,n)})),t&&(i.value=i.value.replace(/\n/g,"<br>")),/MSIE [678]/.test(navigator.userAgent)&&"CODE"==e.tagName&&"PRE"==e.parentNode.tagName){var f=e.parentNode,d=document.createElement("div");d.innerHTML="<pre><code>"+i.value+"</code></pre>",e=d.firstChild.firstChild,d.firstChild.cN=f.cN,f.parentNode.replaceChild(d.firstChild,f)}else e.innerHTML=i.value;e.className=u,e.dataset={},e.dataset.result={language:i.language,kw:i.keyword_count,re:i.r},o&&o.language&&(e.dataset.second_best={language:o.language,kw:o.keyword_count,re:o.r})}}function i(){if(!i.called){i.called=!0,v();for(var e=document.getElementsByTagName("pre"),t=0;t<e.length;t++){var n=r(e[t]);n&&a(n,hljs.tabReplace)}}}function t(){var e=arguments,t=function(){i.apply(null,e)};window.addEventListener?(window.addEventListener("DOMContentLoaded",t,!1),window.addEventListener("load",t,!1)):window.attachEvent?window.attachEvent("onload",t):window.onload=t}var T={};this.LANGUAGES=T,this.initHighlightingOnLoad=t,this.highlightBlock=a,this.initHighlighting=i,this.IR="[a-zA-Z][a-zA-Z0-9_]*",this.UIR="[a-zA-Z_][a-zA-Z0-9_]*",this.NR="\\b\\d+(\\.\\d+)?",this.CNR="\\b(0x[A-Za-z0-9]+|\\d+(\\.\\d+)?)",this.RSR="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|\\.|-|-=|/|/=|:|;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",this.BE={b:"\\\\.",r:0},this.ASM={cN:"string",b:"'",e:"'",i:"\\n",c:[this.BE],r:0},this.QSM={cN:"string",b:'"',e:'"',i:"\\n",c:[this.BE],r:0},this.CLCM={cN:"comment",b:"//",e:"$"},this.CBLCLM={cN:"comment",b:"/\\*",e:"\\*/"},this.HCM={cN:"comment",b:"#",e:"$"},this.NM={cN:"number",b:this.NR,r:0},this.CNM={cN:"number",b:this.CNR,r:0},this.inherit=function(e,t){var n={};for(var r in e)n[r]=e[r];if(t)for(var r in t)n[r]=t[r];return n}};hljs.LANGUAGES.ruby=function(){var e="[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?",t="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",n={keyword:{and:1,"false":1,then:1,defined:1,module:1,"in":1,"return":1,redo:1,"if":1,BEGIN:1,retry:1,end:1,"for":1,"true":1,self:1,when:1,next:1,until:1,"do":1,begin:1,unless:1,END:1,rescue:1,nil:1,"else":1,"break":1,undef:1,not:1,"super":1,"class":1,"case":1,require:1,"yield":1,alias:1,"while":1,ensure:1,elsif:1,or:1,def:1},keymethods:{__id__:1,__send__:1,abort:1,abs:1,"all?":1,allocate:1,ancestors:1,"any?":1,arity:1,assoc:1,at:1,at_exit:1,autoload:1,"autoload?":1,"between?":1,binding:1,binmode:1,"block_given?":1,call:1,callcc:1,caller:1,capitalize:1,"capitalize!":1,casecmp:1,"catch":1,ceil:1,center:1,chomp:1,"chomp!":1,chop:1,"chop!":1,chr:1,"class":1,class_eval:1,"class_variable_defined?":1,class_variables:1,clear:1,clone:1,close:1,close_read:1,close_write:1,"closed?":1,coerce:1,collect:1,"collect!":1,compact:1,"compact!":1,concat:1,"const_defined?":1,const_get:1,const_missing:1,const_set:1,constants:1,count:1,crypt:1,"default":1,default_proc:1,"delete":1,"delete!":1,delete_at:1,delete_if:1,detect:1,display:1,div:1,divmod:1,downcase:1,"downcase!":1,downto:1,dump:1,dup:1,each:1,each_byte:1,each_index:1,each_key:1,each_line:1,each_pair:1,each_value:1,each_with_index:1,"empty?":1,entries:1,eof:1,"eof?":1,"eql?":1,"equal?":1,eval:1,exec:1,exit:1,"exit!":1,extend:1,fail:1,fcntl:1,fetch:1,fileno:1,fill:1,find:1,find_all:1,first:1,flatten:1,"flatten!":1,floor:1,flush:1,for_fd:1,foreach:1,fork:1,format:1,freeze:1,"frozen?":1,fsync:1,getc:1,gets:1,global_variables:1,grep:1,gsub:1,"gsub!":1,"has_key?":1,"has_value?":1,hash:1,hex:1,id:1,include:1,"include?":1,included_modules:1,index:1,indexes:1,indices:1,induced_from:1,inject:1,insert:1,inspect:1,instance_eval:1,instance_method:1,instance_methods:1,"instance_of?":1,"instance_variable_defined?":1,instance_variable_get:1,instance_variable_set:1,instance_variables:1,"integer?":1,intern:1,invert:1,ioctl:1,"is_a?":1,isatty:1,"iterator?":1,join:1,"key?":1,keys:1,"kind_of?":1,lambda:1,last:1,length:1,lineno:1,ljust:1,load:1,local_variables:1,loop:1,lstrip:1,"lstrip!":1,map:1,"map!":1,match:1,max:1,"member?":1,merge:1,"merge!":1,method:1,"method_defined?":1,method_missing:1,methods:1,min:1,module_eval:1,modulo:1,name:1,nesting:1,"new":1,next:1,"next!":1,"nil?":1,nitems:1,"nonzero?":1,object_id:1,oct:1,open:1,pack:1,partition:1,pid:1,pipe:1,pop:1,popen:1,pos:1,prec:1,prec_f:1,prec_i:1,print:1,printf:1,private_class_method:1,private_instance_methods:1,"private_method_defined?":1,private_methods:1,proc:1,protected_instance_methods:1,
"protected_method_defined?":1,protected_methods:1,public_class_method:1,public_instance_methods:1,"public_method_defined?":1,public_methods:1,push:1,putc:1,puts:1,quo:1,raise:1,rand:1,rassoc:1,read:1,read_nonblock:1,readchar:1,readline:1,readlines:1,readpartial:1,rehash:1,reject:1,"reject!":1,remainder:1,reopen:1,replace:1,require:1,"respond_to?":1,reverse:1,"reverse!":1,reverse_each:1,rewind:1,rindex:1,rjust:1,round:1,rstrip:1,"rstrip!":1,scan:1,seek:1,select:1,send:1,set_trace_func:1,shift:1,singleton_method_added:1,singleton_methods:1,size:1,sleep:1,slice:1,"slice!":1,sort:1,"sort!":1,sort_by:1,split:1,sprintf:1,squeeze:1,"squeeze!":1,srand:1,stat:1,step:1,store:1,strip:1,"strip!":1,sub:1,"sub!":1,succ:1,"succ!":1,sum:1,superclass:1,swapcase:1,"swapcase!":1,sync:1,syscall:1,sysopen:1,sysread:1,sysseek:1,system:1,syswrite:1,taint:1,"tainted?":1,tell:1,test:1,"throw":1,times:1,to_a:1,to_ary:1,to_f:1,to_hash:1,to_i:1,to_int:1,to_io:1,to_proc:1,to_s:1,to_str:1,to_sym:1,tr:1,"tr!":1,tr_s:1,"tr_s!":1,trace_var:1,transpose:1,trap:1,truncate:1,"tty?":1,type:1,ungetc:1,uniq:1,"uniq!":1,unpack:1,unshift:1,untaint:1,untrace_var:1,upcase:1,"upcase!":1,update:1,upto:1,"value?":1,values:1,values_at:1,warn:1,write:1,write_nonblock:1,"zero?":1,zip:1}},r={cN:"yardoctag",b:"@[A-Za-z]+"},a={cN:"comment",b:"#",e:"$",c:[r]},i={cN:"comment",b:"^\\=begin",e:"^\\=end",c:[r],r:10},o={cN:"comment",b:"^__END__",e:"\\n$"},s={cN:"subst",b:"#\\{",e:"}",l:e,k:n},l=[hljs.BE,s],u={cN:"string",b:"'",e:"'",c:l,r:0},c={cN:"string",b:'"',e:'"',c:l,r:0},f={cN:"string",b:"%[qw]?\\(",e:"\\)",c:l,r:10},d={cN:"string",b:"%[qw]?\\[",e:"\\]",c:l,r:10},h={cN:"string",b:"%[qw]?{",e:"}",c:l,r:10},p={cN:"string",b:"%[qw]?<",e:">",c:l,r:10},g={cN:"string",b:"%[qw]?/",e:"/",c:l,r:10},m={cN:"string",b:"%[qw]?%",e:"%",c:l,r:10},v={cN:"string",b:"%[qw]?-",e:"-",c:l,r:10},y={cN:"string",b:"%[qw]?\\|",e:"\\|",c:l,r:10},b={cN:"function",b:"\\bdef\\s+",e:" |$|;",l:e,k:n,c:[{cN:"title",b:t,l:e,k:n},{cN:"params",b:"\\(",e:"\\)",l:e,k:n},a,i,o]},w={cN:"identifier",b:e,l:e,k:n,r:0},x=[a,i,o,u,c,f,d,h,p,g,m,v,y,{cN:"class",b:"\\b(class|module)\\b",e:"$|;",k:{"class":1,module:1},c:[{cN:"title",b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?",r:0},{cN:"inheritance",b:"<\\s*",c:[{cN:"parent",b:"("+hljs.IR+"::)?"+hljs.IR}]},a,i,o]},b,{cN:"constant",b:"(::)?([A-Z]\\w*(::)?)+",r:0},{cN:"symbol",b:":",c:[u,c,f,d,h,p,g,m,v,y,w],r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{cN:"number",b:"\\?\\w"},{cN:"variable",b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},w,{b:"("+hljs.RSR+")\\s*",c:[a,i,o,{cN:"regexp",b:"/",e:"/[a-z]*",i:"\\n",c:[hljs.BE]}],r:0}];return s.c=x,{dM:{l:e,k:n,c:b.c[1].c=x}}}(),function(c,s,o){function l(e,t,n){var r=s.createElement(e);return t&&(r.id=te+t),n&&(r.style.cssText=n),c(r)}function f(){return o.innerHeight?o.innerHeight:c(o).height()}function u(e,n){n!==Object(n)&&(n={}),this.cache={},this.el=e,this.value=function(e){var t;return this.cache[e]===undefined&&((t=c(this.el).attr("data-cbox-"+e))!==undefined?this.cache[e]=t:n[e]!==undefined?this.cache[e]=n[e]:Q[e]!==undefined&&(this.cache[e]=Q[e])),this.cache[e]},this.get=function(e){var t=this.value(e);return c.isFunction(t)?t.call(this.el,this):t}}function i(e){var t=k.length,n=(X+e)%t;return n<0?t+n:n}function d(e,t){return Math.round((/%/.test(e)?("x"===t?I.width():f())/100:1)*parseInt(e,10))}function h(e,t){return e.get("photo")||e.get("photoRegex").test(t)}function p(e,t){return e.get("retinaUrl")&&1<o.devicePixelRatio?t.replace(e.get("photoRegex"),e.get("retinaSuffix")):t}function g(e){"contains"in S[0]&&!S[0].contains(e.target)&&e.target!==x[0]&&(e.stopPropagation(),S.focus())}function m(e){m.str!==e&&(S.add(x).removeClass(m.str).addClass(e),m.str=e)}function v(e){X=0,e&&!1!==e&&"nofollow"!==e?(k=c("."+ne).filter(function(){return new u(this,c.data(this,ee)).get("rel")===e}),-1===(X=k.index(W.el))&&(k=k.add(W.el),X=k.length-1)):k=c(W.el)}function y(e){c(s).trigger(e),ue.triggerHandler(e)}function r(e){var t;if(!Y){if(t=c(e).data(ee),v((W=new u(e,t)).get("rel")),!G){G=J=!0,m(W.get("className")),S.css({visibility:"hidden",display:"block",opacity:""}),j=l(ce,"LoadedContent","width:0; height:0; overflow:hidden; visibility:hidden"),T.css({width:"",height:""}).append(j),B=C.height()+N.height()+T.outerHeight(!0)-T.height(),$=_.width()+A.width()+T.outerWidth(!0)-T.width(),U=j.outerHeight(!0),z=j.outerWidth(!0);var n=d(W.get("initialWidth"),"x"),r=d(W.get("initialHeight"),"y"),a=W.get("maxWidth"),i=W.get("maxHeight");W.w=Math.max((!1!==a?Math.min(n,d(a,"x")):n)-z-$,0),W.h=Math.max((!1!==i?Math.min(r,d(i,"y")):r)-U-B,0),j.css({width:"",height:W.h}),K.position(),y(re),W.get("onOpen"),q.add(R).hide(),S.focus(),W.get("trapFocus")&&s.addEventListener&&(s.addEventListener("focus",g,!0),ue.one(se,function(){s.removeEventListener("focus",g,!0)})),W.get("returnFocus")&&ue.one(se,function(){c(W.el).focus()})}var o=parseFloat(W.get("opacity"));x.css({opacity:o==o?o:"",cursor:W.get("overlayClose")?"pointer":"",visibility:"visible"}).show(),W.get("closeButton")?O.html(W.get("close")).appendTo(T):O.appendTo("<div/>"),w()}}function a(){S||(t=!1,I=c(o),S=l(ce).attr({id:ee,"class":!1===c.support.opacity?te+"IE":"",role:"dialog",tabindex:"-1"}).hide(),x=l(ce,"Overlay").hide(),E=c([l(ce,"LoadingOverlay")[0],l(ce,"LoadingGraphic")[0]]),D=l(ce,"Wrapper"),T=l(ce,"Content").append(R=l(ce,"Title"),F=l(ce,"Current"),M=c('<button type="button"/>').attr({id:te+"Previous"}),H=c('<button type="button"/>').attr({id:te+"Next"}),P=c('<button type="button"/>').attr({id:te+"Slideshow"}),E),O=c('<button type="button"/>').attr({id:te+"Close"}),D.append(l(ce).append(l(ce,"TopLeft"),C=l(ce,"TopCenter"),l(ce,"TopRight")),l(ce,!1,"clear:left").append(_=l(ce,"MiddleLeft"),T,A=l(ce,"MiddleRight")),l(ce,!1,"clear:left").append(l(ce,"BottomLeft"),N=l(ce,"BottomCenter"),l(ce,"BottomRight"))).find("div div").css({"float":"left"}),L=l(ce,!1,"position:absolute; width:9999px; visibility:hidden; display:none; max-width:none;"),q=H.add(M).add(F).add(P)),s.body&&!S.parent().length&&c(s.body).append(x,S.append(D,L))}function b(){function e(e){1<e.which||e.shiftKey||e.altKey||e.metaKey||e.ctrlKey||(e.preventDefault(),r(this))}return!!S&&(t||(t=!0,H.click(function(){K.next()}),M.click(function(){K.prev()}),O.click(function(){K.close()}),x.click(function(){W.get("overlayClose")&&K.close()}),c(s).bind("keydown."+te,function(e){var t=e.keyCode;G&&W.get("escKey")&&27===t&&(e.preventDefault(),K.close()),G&&W.get("arrowKey")&&k[1]&&!e.altKey&&(37===t?(e.preventDefault(),M.click()):39===t&&(e.preventDefault(),H.click()))}),c.isFunction(c.fn.on)?c(s).on("click."+te,"."+ne,e):c("."+ne).live("click."+te,e)),!0)}function w(){var e,t,n,r=K.prep,a=++fe;if(V=!(J=!0),y(le),y(ae),W.get("onLoad"),W.h=W.get("height")?d(W.get("height"),"y")-U-B:W.get("innerHeight")&&d(W.get("innerHeight"),"y"),W.w=W.get("width")?d(W.get("width"),"x")-z-$:W.get("innerWidth")&&d(W.get("innerWidth"),"x"),W.mw=W.w,W.mh=W.h,W.get("maxWidth")&&(W.mw=d(W.get("maxWidth"),"x")-z-$,W.mw=W.w&&W.w<W.mw?W.w:W.mw),W.get("maxHeight")&&(W.mh=d(W.get("maxHeight"),"y")-U-B,W.mh=W.h&&W.h<W.mh?W.h:W.mh),e=W.get("href"),Z=setTimeout(function(){E.show()},100),W.get("inline")){var i=c(e).eq(0);n=c("<div>").hide().insertBefore(i),ue.one(le,function(){n.replaceWith(i)}),r(i)}else W.get("iframe")?r(" "):W.get("html")?r(W.get("html")):h(W,e)?(e=p(W,e),V=W.get("createImg"),c(V).addClass(te+"Photo").bind("error."+te,function(){r(l(ce,"Error").html(W.get("imgError")))}).one("load",function(){a===fe&&setTimeout(function(){var e;W.get("retinaImage")&&1<o.devicePixelRatio&&(V.height=V.height/o.devicePixelRatio,V.width=V.width/o.devicePixelRatio),W.get("scalePhotos")&&(t=function(){V.height-=V.height*e,V.width-=V.width*e},W.mw&&V.width>W.mw&&(e=(V.width-W.mw)/V.width,t()),W.mh&&V.height>W.mh&&(e=(V.height-W.mh)/V.height,t())),W.h&&(V.style.marginTop=Math.max(W.mh-V.height,0)/2+"px"),k[1]&&(W.get("loop")||k[X+1])&&(V.style.cursor="pointer",c(V).bind("click."+te,function(){K.next()})),V.style.width=V.width+"px",V.style.height=V.height+"px",r(V)},1)}),V.src=e):e&&L.load(e,W.get("data"),function(e,t){a===fe&&r("error"===t?l(ce,"Error").html(W.get("xhrError")):c(this).contents())})}var x,S,D,T,C,_,A,N,k,I,j,L,E,R,F,P,H,M,O,q,W,B,$,U,z,X,V,G,J,Y,Z,K,t,Q={html:!1,photo:!1,iframe:!1,inline:!1,transition:"elastic",speed:300,fadeOut:300,width:!1,initialWidth:"600",innerWidth:!1,maxWidth:!1,height:!1,initialHeight:"450",innerHeight:!1,maxHeight:!1,scalePhotos:!0,scrolling:!0,opacity:.9,preloading:!0,className:!1,overlayClose:!0,escKey:!0,arrowKey:!0,top:!1,bottom:!1,left:!1,right:!1,fixed:!1,data:undefined,closeButton:!0,fastIframe:!0,open:!1,reposition:!0,loop:!0,slideshow:!1,slideshowAuto:!0,slideshowSpeed:2500,slideshowStart:"start slideshow",slideshowStop:"stop slideshow",photoRegex:/\.(gif|png|jp(e|g|eg)|bmp|ico|webp|jxr|svg)((#|\?).*)?$/i,retinaImage:!1,retinaUrl:!1,retinaSuffix:"@2x.$1",current:"image {current} of {total}",previous:"previous",next:"next",close:"close",xhrError:"This content failed to load.",imgError:"This image failed to load.",returnFocus:!0,trapFocus:!0,onOpen:!1,onLoad:!1,onComplete:!1,onCleanup:!1,onClosed:!1,rel:function(){return this.rel},href:function(){return c(this).attr("href")},title:function(){return this.title},createImg:function(){var n=new Image,e=c(this).data("cbox-img-attrs");return"object"==typeof e&&c.each(e,function(e,t){n[e]=t}),n},createIframe:function(){var n=s.createElement("iframe"),e=c(this).data("cbox-iframe-attrs");return"object"==typeof e&&c.each(e,function(e,t){n[e]=t}),"frameBorder"in n&&(n.frameBorder=0),"allowTransparency"in n&&(n.allowTransparency="true"),n.name=(new Date).getTime(),n.allowFullscreen=!0,n}},ee="colorbox",te="cbox",ne=te+"Element",re=te+"_open",ae=te+"_load",ie=te+"_complete",oe=te+"_cleanup",se=te+"_closed",le=te+"_purge",ue=c("<a/>"),ce="div",fe=0,de={},he=function(){function e(){clearTimeout(o)}function t(){(W.get("loop")||k[X+1])&&(e(),o=setTimeout(K.next,W.get("slideshowSpeed")))}function n(){P.html(W.get("slideshowStop")).unbind(l).one(l,r),ue.bind(ie,t).bind(ae,e),S.removeClass(s+"off").addClass(s+"on")}function r(){e(),ue.unbind(ie,t).unbind(ae,e),P.html(W.get("slideshowStart")).unbind(l).one(l,function(){K.next(),n()}),S.removeClass(s+"on").addClass(s+"off")}function a(){i=!1,P.hide(),e(),ue.unbind(ie,t).unbind(ae,e),S.removeClass(s+"off "+s+"on")}var i,o,s=te+"Slideshow_",l="click."+te;return function(){i?W.get("slideshow")||(ue.unbind(oe,a),a()):W.get("slideshow")&&k[1]&&(i=!0,ue.one(oe,a),W.get("slideshowAuto")?n():r(),P.show())}}();c[ee]||(c(a),(K=c.fn[ee]=c[ee]=function(t,e){var n=this;return t=t||{},c.isFunction(n)&&(n=c("<a/>"),t.open=!0),n[0]&&(a(),b()&&(e&&(t.onComplete=e),n.each(function(){var e=c.data(this,ee)||{};c.data(this,ee,c.extend(e,t))}).addClass(ne),new u(n[0],t).get("open")&&r(n[0]))),n}).position=function(t,e){function n(){C[0].style.width=N[0].style.width=T[0].style.width=parseInt(S[0].style.width,10)-$+"px",T[0].style.height=_[0].style.height=A[0].style.height=parseInt(S[0].style.height,10)-B+"px"}var r,a,i,o=0,s=0,l=S.offset();if(I.unbind("resize."+te),S.css({top:-9e4,left:-9e4}),a=I.scrollTop(),i=I.scrollLeft(),W.get("fixed")?(l.top-=a,l.left-=i,S.css({position:"fixed"})):(o=a,s=i,S.css({position:"absolute"})),!1!==W.get("right")?s+=Math.max(I.width()-W.w-z-$-d(W.get("right"),"x"),0):!1!==W.get("left")?s+=d(W.get("left"),"x"):s+=Math.round(Math.max(I.width()-W.w-z-$,0)/2),!1!==W.get("bottom")?o+=Math.max(f()-W.h-U-B-d(W.get("bottom"),"y"),0):!1!==W.get("top")?o+=d(W.get("top"),"y"):o+=Math.round(Math.max(f()-W.h-U-B,0)/2),S.css({top:l.top,left:l.left,visibility:"visible"}),D[0].style.width=D[0].style.height="9999px",r={width:W.w+z+$,height:W.h+U+B,top:o,left:s},t){var u=0;c.each(r,function(e){r[e]===de[e]||(u=t)}),t=u}de=r,t||S.css(r),S.dequeue().animate(r,{duration:t||0,complete:function(){n(),J=!1,D[0].style.width=W.w+z+$+"px",D[0].style.height=W.h+U+B+"px",W.get("reposition")&&setTimeout(function(){I.bind("resize."+te,K.position)},1),c.isFunction(e)&&e()},step:n})},K.resize=function(e){var t;G&&((e=e||{}).width&&(W.w=d(e.width,"x")-z-$),e.innerWidth&&(W.w=d(e.innerWidth,"x")),j.css({width:W.w}),e.height&&(W.h=d(e.height,"y")-U-B),e.innerHeight&&(W.h=d(e.innerHeight,"y")),e.innerHeight||e.height||(t=j.scrollTop(),j.css({height:"auto"}),W.h=j.height()),j.css({height:W.h}),t&&j.scrollTop(t),K.position("none"===W.get("transition")?0:W.get("speed")))},K.prep=function(e){function t(){return W.w=W.w||j.width(),W.w=W.mw&&W.mw<W.w?W.mw:W.w,W.w}function n(){return W.h=W.h||j.height(),W.h=W.mh&&W.mh<W.h?W.mh:W.h,W.h}if(G){var r,a="none"===W.get("transition")?0:W.get("speed");j.remove(),(j=l(ce,"LoadedContent").append(e)).hide().appendTo(L.show()).css({width:t(),overflow:W.get("scrolling")?"auto":"hidden"}).css({height:n()}).prependTo(T),L.hide(),c(V).css({"float":"none"}),m(W.get("className")),r=function(){function e(){!1===c.support.opacity&&S[0].style.removeAttribute("filter")}var t,n,r=k.length;G&&(n=function(){clearTimeout(Z),E.hide(),y(ie),W.get("onComplete")},R.html(W.get("title")).show(),j.show(),1<r?("string"==typeof W.get("current")&&F.html(W.get("current").replace("{current}",X+1).replace("{total}",r)).show(),H[W.get("loop")||X<r-1?"show":"hide"]().html(W.get("next")),M[W.get("loop")||X?"show":"hide"]().html(W.get("previous")),he(),W.get("preloading")&&c.each([i(-1),i(1)],function(){var e=k[this],t=new u(e,c.data(e,ee)),n=t.get("href");n&&h(t,n)&&(n=p(t,n),s.createElement("img").src=n)})):q.hide(),W.get("iframe")?(t=W.get("createIframe"),W.get("scrolling")||(t.scrolling="no"),c(t).attr({src:W.get("href"),"class":te+"Iframe"}).one("load",n).appendTo(j),ue.one(le,function(){t.src="//about:blank"}),W.get("fastIframe")&&c(t).trigger("load")):n(),"fade"===W.get("transition")?S.fadeTo(a,1,e):e())},"fade"===W.get("transition")?S.fadeTo(a,0,function(){K.position(0,r)}):K.position(a,r)}},K.next=function(){!J&&k[1]&&(W.get("loop")||k[X+1])&&(X=i(1),r(k[X]))},K.prev=function(){!J&&k[1]&&(W.get("loop")||X)&&(X=i(-1),r(k[X]))},K.close=function(){G&&!Y&&(G=!(Y=!0),y(oe),W.get("onCleanup"),I.unbind("."+te),x.fadeTo(W.get("fadeOut")||0,0),S.stop().fadeTo(W.get("fadeOut")||0,0,function(){S.hide(),x.hide(),y(le),j.remove(),setTimeout(function(){Y=!1,y(se),W.get("onClosed")},1)}))},K.remove=function(){S&&(S.stop(),c[ee].close(),S.stop(!1,!0).remove(),x.remove(),Y=!1,S=null,c("."+ne).removeData(ee).removeClass(ne),c(s).unbind("click."+te).unbind("keydown."+te))},K.element=function(){return c(W.el)},K.settings=Q)}(jQuery,document,window),function(n){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(e){return n(e,window,document)}):"object"==typeof exports?module.exports=function(e,t){return e||(e=window),t||(t="undefined"!=typeof window?require("jquery"):require("jquery")(e)),n(t,e,e.document)}:n(jQuery,window,document)}(function(B,N,w,$){"use strict";function o(t){var n,r,a="a aa ai ao as b fn i m o s ",i={};B.each(t,function(e){(n=e.match(/^([^A-Z]+?)([A-Z])/))&&-1!==a.indexOf(n[1]+" ")&&(r=e.replace(n[0],n[2].toLowerCase()),i[r]=e,"o"===n[1]&&o(t[e]))}),t._hungarianMap=i}function A(t,n,r){var a;t._hungarianMap||o(t),B.each(n,function(e){(a=t._hungarianMap[e])===$||!r&&n[a]!==$||("o"===a.charAt(0)?(n[a]||(n[a]={}),B.extend(!0,n[a],n[e]),A(t[a],n[a],r)):n[a]=n[e])})}function k(e){var t=Ge.defaults.oLanguage,n=t.sDecimal;if(n&&Be(n),e){var r=e.sZeroRecords;!e.sEmptyTable&&r&&"No data available in table"===t.sEmptyTable&&Ee(e,e,"sZeroRecords","sEmptyTable"),!e.sLoadingRecords&&r&&"Loading..."===t.sLoadingRecords&&Ee(e,e,"sZeroRecords","sLoadingRecords"),e.sInfoThousands&&(e.sThousands=e.sInfoThousands);var a=e.sDecimal;a&&n!==a&&Be(a)}}function I(e){pt(e,"ordering","bSort"),pt(e,"orderMulti","bSortMulti"),pt(e,"orderClasses","bSortClasses"),pt(e,"orderCellsTop","bSortCellsTop"),pt(e,"order","aaSorting"),pt(e,"orderFixed","aaSortingFixed"),pt(e,"paging","bPaginate"),pt(e,"pagingType","sPaginationType"),pt(e,"pageLength","iDisplayLength"),pt(e,"searching","bFilter"),"boolean"==typeof e.sScrollX&&(e.sScrollX=e.sScrollX?"100%":""),"boolean"==typeof e.scrollX&&(e.scrollX=e.scrollX?"100%":"");var t=e.aoSearchCols;if(t)for(var n=0,r=t.length;n<r;n++)t[n]&&A(Ge.models.oSearch,t[n])}function j(e){pt(e,"orderable","bSortable"),pt(e,"orderData","aDataSort"),pt(e,"orderSequence","asSorting"),pt(e,"orderDataType","sortDataType");var t=e.aDataSort;"number"!=typeof t||B.isArray(t)||(e.aDataSort=[t])}function L(e){if(!Ge.__browser){var t={};Ge.__browser=t;var n=B("<div/>").css({position:"fixed",top:0,left:-1*B(N).scrollLeft(),height:1,width:1,overflow:"hidden"}).append(B("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append(B("<div/>").css({width:"100%",height:10}))).appendTo("body"),r=n.children(),a=r.children();t.barWidth=r[0].offsetWidth-r[0].clientWidth,t.bScrollOversize=100===a[0].offsetWidth&&100!==r[0].clientWidth,t.bScrollbarLeft=1!==Math.round(a.offset().left),t.bBounding=!!n[0].getBoundingClientRect().width,n.remove()}B.extend(e.oBrowser,Ge.__browser),e.oScroll.iBarWidth=Ge.__browser.barWidth}function n(e,t,n,r,a,i){var o,s=r,l=!1;for(n!==$&&(o=n,l=!0);s!==a;)e.hasOwnProperty(s)&&(o=l?t(o,e[s],s,e):e[s],l=!0,s+=i);return o}function E(e,t){var n=Ge.defaults.column,r=e.aoColumns.length,a=B.extend({},Ge.models.oColumn,n,{nTh:t||w.createElement("th"),sTitle:n.sTitle?n.sTitle:t?t.innerHTML:"",aDataSort:n.aDataSort?n.aDataSort:[r],mData:n.mData?n.mData:r,idx:r});e.aoColumns.push(a);var i=e.aoPreSearchCols;i[r]=B.extend({},Ge.models.oSearch,i[r]),R(e,r,B(t).data())}function R(e,t,n){var r=e.aoColumns[t],a=e.oClasses,i=B(r.nTh);if(!r.sWidthOrig){r.sWidthOrig=i.attr("width")||null;var o=(i.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);o&&(r.sWidthOrig=o[1])}n!==$&&null!==n&&(j(n),A(Ge.defaults.column,n,!0),n.mDataProp===$||n.mData||(n.mData=n.mDataProp),n.sType&&(r._sManualType=n.sType),n.className&&!n.sClass&&(n.sClass=n.className),n.sClass&&i.addClass(n.sClass),B.extend(r,n),Ee(r,n,"sWidth","sWidthOrig"),n.iDataSort!==$&&(r.aDataSort=[n.iDataSort]),Ee(r,n,"aDataSort"));var s=r.mData,l=q(s),u=r.mRender?q(r.mRender):null,c=function(e){return"string"==typeof e&&-1!==e.indexOf("@")};r._bAttrSrc=B.isPlainObject(s)&&(c(s.sort)||c(s.type)||c(s.filter)),r._setter=null,r.fnGetData=function(e,t,n){var r=l(e,t,$,n);return u&&t?u(r,t,e,n):r},r.fnSetData=function(e,t,n){return y(s)(e,t,n)},"number"!=typeof s&&(e._rowReadObject=!0),e.oFeatures.bSort||(r.bSortable=!1,i.addClass(a.sSortableNone));var f=-1!==B.inArray("asc",r.asSorting),d=-1!==B.inArray("desc",r.asSorting);r.bSortable&&(f||d)?f&&!d?(r.sSortingClass=a.sSortableAsc,r.sSortingClassJUI=a.sSortJUIAscAllowed):!f&&d?(r.sSortingClass=a.sSortableDesc,r.sSortingClassJUI=a.sSortJUIDescAllowed):(r.sSortingClass=a.sSortable,r.sSortingClassJUI=a.sSortJUI):(r.sSortingClass=a.sSortableNone,r.sSortingClassJUI="")}function U(e){if(!1!==e.oFeatures.bAutoWidth){var t=e.aoColumns;ve(e);for(var n=0,r=t.length;n<r;n++)t[n].nTh.style.width=t[n].sWidth}var a=e.oScroll;""===a.sY&&""===a.sX||ge(e),He(e,null,"column-sizing",[e])}function z(e,t){var n=P(e,"bVisible");return"number"==typeof n[t]?n[t]:null}function c(e,t){var n=P(e,"bVisible"),r=B.inArray(t,n);return-1!==r?r:null}function F(e){var n=0;return B.each(e.aoColumns,function(e,t){t.bVisible&&"none"!==B(t.nTh).css("display")&&n++}),n}function P(e,n){var r=[];return B.map(e.aoColumns,function(e,t){e[n]&&r.push(t)}),r}function l(e){var t,n,r,a,i,o,s,l,u,c=e.aoColumns,f=e.aoData,d=Ge.ext.type.detect;for(t=0,n=c.length;t<n;t++)if(u=[],!(s=c[t]).sType&&s._sManualType)s.sType=s._sManualType;else if(!s.sType){for(r=0,a=d.length;r<a;r++){for(i=0,o=f.length;i<o&&(u[i]===$&&(u[i]=g(e,i,t,"type")),(l=d[r](u[i],e))||r===d.length-1)&&"html"!==l;i++);if(l){s.sType=l;break}}s.sType||(s.sType="string")}}function H(e,t,n,r){var a,i,o,s,l,u,c,f=e.aoColumns;if(t)for(a=t.length-1;0<=a;a--){var d=(c=t[a]).targets!==$?c.targets:c.aTargets;for(B.isArray(d)||(d=[d]),o=0,s=d.length;o<s;o++)if("number"==typeof d[o]&&0<=d[o]){for(;f.length<=d[o];)E(e);r(d[o],c)}else if("number"==typeof d[o]&&d[o]<0)r(f.length+d[o],c);else if("string"==typeof d[o])for(l=0,u=f.length;l<u;l++)("_all"==d[o]||B(f[l].nTh).hasClass(d[o]))&&r(l,c)}if(n)for(a=0,i=n.length;a<i;a++)r(a,n[a])}function M(e,t,n,r){var a=e.aoData.length,i=B.extend(!0,{},Ge.models.oRow,{src:n?"dom":"data",idx:a});i._aData=t,e.aoData.push(i);for(var o=e.aoColumns,s=0,l=o.length;s<l;s++)o[s].sType=null;e.aiDisplayMaster.push(a);var u=e.rowIdFn(t);return u!==$&&(e.aIds[u]=i),!n&&e.oFeatures.bDeferRender||S(e,a,n,r),a}function O(n,e){var r;return e instanceof B||(e=B(e)),e.map(function(e,t){return r=f(n,t),M(n,r.data,t,r.cells)})}function e(e,t){return t._DT_RowIndex!==$?t._DT_RowIndex:null}function t(e,t,n){return B.inArray(n,e.aoData[t].anCells)}function g(e,t,n,r){var a=e.iDraw,i=e.aoColumns[n],o=e.aoData[t]._aData,s=i.sDefaultContent,l=i.fnGetData(o,r,{settings:e,row:t,col:n});if(l===$)return e.iDrawError!=a&&null===s&&(Le(e,0,"Requested unknown parameter "+("function"==typeof i.mData?"{function}":"'"+i.mData+"'")+" for row "+t+", column "+n,4),e.iDrawError=a),s;if(l!==o&&null!==l||null===s||r===$){if("function"==typeof l)return l.call(o)}else l=s;return null===l&&"display"==r?"":l}function r(e,t,n,r){var a=e.aoColumns[n],i=e.aoData[t]._aData;a.fnSetData(i,r,{settings:e,row:t,col:n})}function m(e){return B.map(e.match(/(\\.|[^\.])+/g)||[""],function(e){return e.replace(/\\\./g,".")})}function q(a){if(B.isPlainObject(a)){var i={};return B.each(a,function(e,t){t&&(i[e]=q(t))}),function(e,t,n,r){var a=i[t]||i._;return a!==$?a(e,t,n,r):e}}if(null===a)return function(e){return e};if("function"==typeof a)return function(e,t,n,r){return a(e,t,n,r)};if("string"!=typeof a||-1===a.indexOf(".")&&-1===a.indexOf("[")&&-1===a.indexOf("("))return function(e){return e[a]};var h=function(e,t,n){var r,a,i,o;if(""!==n)for(var s=m(n),l=0,u=s.length;l<u;l++){if(r=s[l].match(gt),a=s[l].match(mt),r){if(s[l]=s[l].replace(gt,""),""!==s[l]&&(e=e[s[l]]),i=[],s.splice(0,l+1),o=s.join("."),B.isArray(e))for(var c=0,f=e.length;c<f;c++)i.push(h(e[c],t,o));var d=r[0].substring(1,r[0].length-1);e=""===d?i:i.join(d);break}if(a)s[l]=s[l].replace(mt,""),e=e[s[l]]();else{if(null===e||e[s[l]]===$)return $;e=e[s[l]]}}return e};return function(e,t){return h(e,t,a)}}function y(r){if(B.isPlainObject(r))return y(r._);if(null===r)return function(){};if("function"==typeof r)return function(e,t,n){r(e,"set",t,n)};if("string"!=typeof r||-1===r.indexOf(".")&&-1===r.indexOf("[")&&-1===r.indexOf("("))return function(e,t){e[r]=t};var p=function(e,t,n){for(var r,a,i,o,s,l=m(n),u=l[l.length-1],c=0,f=l.length-1;c<f;c++){if(a=l[c].match(gt),i=l[c].match(mt),a){if(l[c]=l[c].replace(gt,""),e[l[c]]=[],(r=l.slice()).splice(0,c+1),s=r.join("."),B.isArray(t))for(var d=0,h=t.length;d<h;d++)p(o={},t[d],s),e[l[c]].push(o);else e[l[c]]=t;return}i&&(l[c]=l[c].replace(mt,""),e=e[l[c]](t)),null!==e[l[c]]&&e[l[c]]!==$||(e[l[c]]={}),e=e[l[c]]}u.match(mt)?e=e[u.replace(mt,"")](t):e[u.replace(gt,"")]=t};return function(e,t){return p(e,t,r)}}function x(e){return st(e.aoData,"_aData")}function u(e){e.aoData.length=0,e.aiDisplayMaster.length=0,e.aiDisplay.length=0,e.aIds={}}function h(e,t,n){for(var r=-1,a=0,i=e.length;a<i;a++)e[a]==t?r=a:e[a]>t&&e[a]--;-1!=r&&n===$&&e.splice(r,1)}function a(n,r,e,t){var a,i,o=n.aoData[r],s=function(e,t){for(;e.childNodes.length;)e.removeChild(e.firstChild);e.innerHTML=g(n,r,t,"display")};if("dom"!==e&&(e&&"auto"!==e||"dom"!==o.src)){var l=o.anCells;if(l)if(t!==$)s(l[t],t);else for(a=0,i=l.length;a<i;a++)s(l[a],a)}else o._aData=f(n,o,t,t===$?$:o._aData).data;o._aSortData=null,o._aFilterData=null;var u=n.aoColumns;if(t!==$)u[t].sType=null;else{for(a=0,i=u.length;a<i;a++)u[a].sType=null;p(n,o)}}function f(e,t,n,a){var r,i,o,s=[],l=t.firstChild,u=0,c=e.aoColumns,f=e._rowReadObject;a=a!==$?a:f?{}:[];var d=function(e,t){if("string"==typeof e){var n=e.indexOf("@");if(-1!==n){var r=e.substring(n+1);y(e)(a,t.getAttribute(r))}}},h=function(e){n!==$&&n!==u||(i=c[u],o=B.trim(e.innerHTML),i&&i._bAttrSrc?(y(i.mData._)(a,o),d(i.mData.sort,e),d(i.mData.type,e),d(i.mData.filter,e)):f?(i._setter||(i._setter=y(i.mData)),i._setter(a,o)):a[u]=o);u++};if(l)for(;l;)"TD"!=(r=l.nodeName.toUpperCase())&&"TH"!=r||(h(l),s.push(l)),l=l.nextSibling;else for(var p=0,g=(s=t.anCells).length;p<g;p++)h(s[p]);var m=t.firstChild?t:t.nTr;if(m){var v=m.getAttribute("id");v&&y(e.rowId)(a,v)}return{data:a,cells:s}}function S(e,t,n,r){var a,i,o,s,l,u,c=e.aoData[t],f=c._aData,d=[];if(null===c.nTr){for(a=n||w.createElement("tr"),c.nTr=a,c.anCells=d,a._DT_RowIndex=t,p(e,c),s=0,l=e.aoColumns.length;s<l;s++)o=e.aoColumns[s],(i=(u=!n)?w.createElement(o.sCellType):r[s])._DT_CellIndex={row:t,column:s},d.push(i),!u&&(n&&!o.mRender&&o.mData===s||B.isPlainObject(o.mData)&&o.mData._===s+".display")||(i.innerHTML=g(e,t,s,"display")),o.sClass&&(i.className+=" "+o.sClass),o.bVisible&&!n?a.appendChild(i):!o.bVisible&&n&&i.parentNode.removeChild(i),o.fnCreatedCell&&o.fnCreatedCell.call(e.oInstance,i,g(e,t,s),f,t,s);He(e,"aoRowCreatedCallback",null,[a,f,t,d])}c.nTr.setAttribute("role","row")}function p(e,t){var n=t.nTr,r=t._aData;if(n){var a=e.rowIdFn(r);if(a&&(n.id=a),r.DT_RowClass){var i=r.DT_RowClass.split(" ");t.__rowc=t.__rowc?ht(t.__rowc.concat(i)):i,B(n).removeClass(t.__rowc.join(" ")).addClass(r.DT_RowClass)}r.DT_RowAttr&&B(n).attr(r.DT_RowAttr),r.DT_RowData&&B(n).data(r.DT_RowData)}}function d(e){var t,n,r,a,i,o=e.nTHead,s=e.nTFoot,l=0===B("th, td",o).length,u=e.oClasses,c=e.aoColumns;for(l&&(a=B("<tr/>").appendTo(o)),t=0,n=c.length;t<n;t++)i=c[t],r=B(i.nTh).addClass(i.sClass),l&&r.appendTo(a),e.oFeatures.bSort&&(r.addClass(i.sSortingClass),!1!==i.bSortable&&(r.attr("tabindex",e.iTabIndex).attr("aria-controls",e.sTableId),_e(e,i.nTh,t))),i.sTitle!=r[0].innerHTML&&r.html(i.sTitle),Oe(e,"header")(e,r,i,u);if(l&&W(e.aoHeader,o),B(o).find(">tr").attr("role","row"),B(o).find(">tr>th, >tr>td").addClass(u.sHeaderTH),B(s).find(">tr>th, >tr>td").addClass(u.sFooterTH),null!==s){var f=e.aoFooter[0];for(t=0,n=f.length;t<n;t++)(i=c[t]).nTf=f[t].cell,i.sClass&&B(i.nTf).addClass(i.sClass)}}function v(e,t,n){var r,a,i,o,s,l,u,c,f,d=[],h=[],p=e.aoColumns.length;if(t){for(n===$&&(n=!1),r=0,a=t.length;r<a;r++){for(d[r]=t[r].slice(),d[r].nTr=t[r].nTr,i=p-1;0<=i;i--)e.aoColumns[i].bVisible||n||d[r].splice(i,1);h.push([])}for(r=0,a=d.length;r<a;r++){if(u=d[r].nTr)for(;l=u.firstChild;)u.removeChild(l);for(i=0,o=d[r].length;i<o;i++)if(f=c=1,h[r][i]===$){for(u.appendChild(d[r][i].cell),h[r][i]=1;d[r+c]!==$&&d[r][i].cell==d[r+c][i].cell;)h[r+c][i]=1,c++;for(;d[r][i+f]!==$&&d[r][i].cell==d[r][i+f].cell;){for(s=0;s<c;s++)h[r+s][i+f]=1;f++}B(d[r][i].cell).attr("rowspan",c).attr("colspan",f)}}}}function b(e){var t=He(e,"aoPreDrawCallback","preDraw",[e]);if(-1===B.inArray(!1,t)){var n=[],r=0,a=e.asStripeClasses,i=a.length,o=(e.aoOpenRows.length,e.oLanguage),s=e.iInitDisplayStart,l="ssp"==qe(e),u=e.aiDisplay;e.bDrawing=!0,s!==$&&-1!==s&&(e._iDisplayStart=l?s:s>=e.fnRecordsDisplay()?0:s,e.iInitDisplayStart=-1);var c=e._iDisplayStart,f=e.fnDisplayEnd();if(e.bDeferLoading)e.bDeferLoading=!1,e.iDraw++,he(e,!1);else if(l){if(!e.bDestroying&&!_(e))return}else e.iDraw++;if(0!==u.length)for(var d=l?0:c,h=l?e.aoData.length:f,p=d;p<h;p++){var g=u[p],m=e.aoData[g];null===m.nTr&&S(e,g);var v=m.nTr;if(0!==i){var y=a[r%i];m._sRowStripe!=y&&(B(v).removeClass(m._sRowStripe).addClass(y),m._sRowStripe=y)}He(e,"aoRowCallback",null,[v,m._aData,r,p,g]),n.push(v),r++}else{var b=o.sZeroRecords;1==e.iDraw&&"ajax"==qe(e)?b=o.sLoadingRecords:o.sEmptyTable&&0===e.fnRecordsTotal()&&(b=o.sEmptyTable),n[0]=B("<tr/>",{"class":i?a[0]:""}).append(B("<td />",{valign:"top",colSpan:F(e),"class":e.oClasses.sRowEmpty}).html(b))[0]}He(e,"aoHeaderCallback","header",[B(e.nTHead).children("tr")[0],x(e),c,f,u]),He(e,"aoFooterCallback","footer",[B(e.nTFoot).children("tr")[0],x(e),c,f,u]);var w=B(e.nTBody);w.children().detach(),w.append(B(n)),He(e,"aoDrawCallback","draw",[e]),e.bSorted=!1,e.bFiltered=!1,e.bDrawing=!1}else he(e,!1)}function D(e,t){var n=e.oFeatures,r=n.bSort,a=n.bFilter;r&&De(e),a?J(e,e.oPreviousSearch):e.aiDisplay=e.aiDisplayMaster.slice(),!0!==t&&(e._iDisplayStart=0),e._drawHold=t,b(e),e._drawHold=!1}function T(e){var t=e.oClasses,n=B(e.nTable),r=B("<div/>").insertBefore(n),a=e.oFeatures,i=B("<div/>",{id:e.sTableId+"_wrapper","class":t.sWrapper+(e.nTFoot?"":" "+t.sNoFooter)});e.nHolding=r[0],e.nTableWrapper=i[0],e.nTableReinsertBefore=e.nTable.nextSibling;for(var o,s,l,u,c,f,d=e.sDom.split(""),h=0;h<d.length;h++){if(o=null,"<"==(s=d[h])){if(l=B("<div/>")[0],"'"==(u=d[h+1])||'"'==u){for(c="",f=2;d[h+f]!=u;)c+=d[h+f],f++;if("H"==c?c=t.sJUIHeader:"F"==c&&(c=t.sJUIFooter),-1!=c.indexOf(".")){var p=c.split(".");l.id=p[0].substr(1,p[0].length-1),l.className=p[1]}else"#"==c.charAt(0)?l.id=c.substr(1,c.length-1):l.className=c;h+=f}i.append(l),i=B(l)}else if(">"==s)i=i.parent();else if("l"==s&&a.bPaginate&&a.bLengthChange)o=ue(e);else if("f"==s&&a.bFilter)o=G(e);else if("r"==s&&a.bProcessing)o=de(e);else if("t"==s)o=pe(e);else if("i"==s&&a.bInfo)o=re(e);else if("p"==s&&a.bPaginate)o=ce(e);else if(0!==Ge.ext.feature.length)for(var g=Ge.ext.feature,m=0,v=g.length;m<v;m++)if(s==g[m].cFeature){o=g[m].fnInit(e);break}if(o){var y=e.aanFeatures;y[s]||(y[s]=[]),y[s].push(o),i.append(o)}}r.replaceWith(i),e.nHolding=null}function W(e,t){var n,r,a,i,o,s,l,u,c,f,d,h=B(t).children("tr"),p=function(e,t,n){for(var r=e[t];r[n];)n++;return n};for(e.splice(0,e.length),a=0,s=h.length;a<s;a++)e.push([]);for(a=0,s=h.length;a<s;a++)for(u=0,r=(n=h[a]).firstChild;r;){if("TD"==r.nodeName.toUpperCase()||"TH"==r.nodeName.toUpperCase())for(c=(c=1*r.getAttribute("colspan"))&&0!==c&&1!==c?c:1,f=(f=1*r.getAttribute("rowspan"))&&0!==f&&1!==f?f:1,l=p(e,a,u),d=1===c,o=0;o<c;o++)for(i=0;i<f;i++)e[a+i][l+o]={cell:r,unique:d},e[a+i].nTr=n;r=r.nextSibling}}function X(e,t,n){var r=[];n||(n=e.aoHeader,t&&W(n=[],t));for(var a=0,i=n.length;a<i;a++)for(var o=0,s=n[a].length;o<s;o++)!n[a][o].unique||r[o]&&e.bSortCellsTop||(r[o]=n[a][o].cell);return r}function C(r,e,t){if(He(r,"aoServerParams","serverParams",[e]),e&&B.isArray(e)){var a={},i=/(.*?)\[\]$/;B.each(e,function(e,t){var n=t.name.match(i);if(n){var r=n[0];a[r]||(a[r]=[]),a[r].push(t.value)}else a[t.name]=t.value}),e=a}var n,o=r.ajax,s=r.oInstance,l=function(e){He(r,null,"xhr",[r,e,r.jqXHR]),t(e)};if(B.isPlainObject(o)&&o.data){var u="function"==typeof(n=o.data)?n(e,r):n;e="function"==typeof n&&u?u:B.extend(!0,e,u),delete o.data}var c={data:e,success:function(e){var t=e.error||e.sError;t&&Le(r,0,t),r.json=e,l(e)},dataType:"json",cache:!1,type:r.sServerMethod,error:function(e,t){var n=He(r,null,"xhr",[r,null,r.jqXHR]);-1===B.inArray(!0,n)&&("parsererror"==t?Le(r,0,"Invalid JSON response",1):4===e.readyState&&Le(r,0,"Ajax error",7)),he(r,!1)}};r.oAjaxData=e,He(r,null,"preXhr",[r,e]),r.fnServerData?r.fnServerData.call(s,r.sAjaxSource,B.map(e,function(e,t){return{name:t,value:e}}),l,r):r.sAjaxSource||"string"==typeof o?r.jqXHR=B.ajax(B.extend(c,{url:o||r.sAjaxSource})):"function"==typeof o?r.jqXHR=o.call(s,e,l,r):(r.jqXHR=B.ajax(B.extend(c,o)),o.data=n)}function _(t){return!t.bAjaxDataGet||(t.iDraw++,he(t,!0),C(t,i(t),function(e){s(t,e)}),!1)}function i(e){var t,n,r,a,i=e.aoColumns,o=i.length,s=e.oFeatures,l=e.oPreviousSearch,u=e.aoPreSearchCols,c=[],f=Se(e),d=e._iDisplayStart,h=!1!==s.bPaginate?e._iDisplayLength:-1,p=function(e,t){c.push({name:e,value:t})};p("sEcho",e.iDraw),p("iColumns",o),p("sColumns",st(i,"sName").join(",")),p("iDisplayStart",d),p("iDisplayLength",h);var g={draw:e.iDraw,columns:[],order:[],start:d,length:h,search:{value:l.sSearch,regex:l.bRegex}};for(t=0;t<o;t++)r=i[t],a=u[t],n="function"==typeof r.mData?"function":r.mData,g.columns.push({data:n,name:r.sName,searchable:r.bSearchable,orderable:r.bSortable,search:{value:a.sSearch,regex:a.bRegex}}),p("mDataProp_"+t,n),s.bFilter&&(p("sSearch_"+t,a.sSearch),p("bRegex_"+t,a.bRegex),p("bSearchable_"+t,r.bSearchable)),s.bSort&&p("bSortable_"+t,r.bSortable);s.bFilter&&(p("sSearch",l.sSearch),p("bRegex",l.bRegex)),s.bSort&&(B.each(f,function(e,t){g.order.push({column:t.col,dir:t.dir}),p("iSortCol_"+e,t.col),p("sSortDir_"+e,t.dir)}),p("iSortingCols",f.length));var m=Ge.ext.legacy.ajax;return null===m?e.sAjaxSource?c:g:m?c:g}function s(e,n){var t=function(e,t){return n[e]!==$?n[e]:n[t]},r=V(e,n),a=t("sEcho","draw"),i=t("iTotalRecords","recordsTotal"),o=t("iTotalDisplayRecords","recordsFiltered");if(a){if(1*a<e.iDraw)return;e.iDraw=1*a}u(e),e._iRecordsTotal=parseInt(i,10),e._iRecordsDisplay=parseInt(o,10);for(var s=0,l=r.length;s<l;s++)M(e,r[s])
;e.aiDisplay=e.aiDisplayMaster.slice(),e.bAjaxDataGet=!1,b(e),e._bInitComplete||se(e,n),e.bAjaxDataGet=!0,he(e,!1)}function V(e,t){var n=B.isPlainObject(e.ajax)&&e.ajax.dataSrc!==$?e.ajax.dataSrc:e.sAjaxDataProp;return"data"===n?t.aaData||t[n]:""!==n?q(n)(t):t}function G(r){var e=r.oClasses,t=r.sTableId,n=r.oLanguage,a=r.oPreviousSearch,i=r.aanFeatures,o='<input type="search" class="'+e.sFilterInput+'"/>',s=n.sSearch;s=s.match(/_INPUT_/)?s.replace("_INPUT_",o):s+o;var l=B("<div/>",{id:i.f?null:t+"_filter","class":e.sFilter}).append(B("<label/>").append(s)),u=function(){i.f;var e=this.value?this.value:"";e!=a.sSearch&&(J(r,{sSearch:e,bRegex:a.bRegex,bSmart:a.bSmart,bCaseInsensitive:a.bCaseInsensitive}),r._iDisplayStart=0,b(r))},c=null!==r.searchDelay?r.searchDelay:"ssp"===qe(r)?400:0,f=B("input",l).val(a.sSearch).attr("placeholder",n.sSearchPlaceholder).on("keyup.DT search.DT input.DT paste.DT cut.DT",c?xt(u,c):u).on("keypress.DT",function(e){if(13==e.keyCode)return!1}).attr("aria-controls",t);return B(r.nTable).on("search.dt.DT",function(e,t){if(r===t)try{f[0]!==w.activeElement&&f.val(a.sSearch)}catch(n){}}),l[0]}function J(e,t,n){var r=e.oPreviousSearch,a=e.aoPreSearchCols,i=function(e){r.sSearch=e.sSearch,r.bRegex=e.bRegex,r.bSmart=e.bSmart,r.bCaseInsensitive=e.bCaseInsensitive},o=function(e){return e.bEscapeRegex!==$?!e.bEscapeRegex:e.bRegex};if(l(e),"ssp"!=qe(e)){K(e,t.sSearch,n,o(t),t.bSmart,t.bCaseInsensitive),i(t);for(var s=0;s<a.length;s++)Z(e,a[s].sSearch,s,o(a[s]),a[s].bSmart,a[s].bCaseInsensitive);Y(e)}else i(t);e.bFiltered=!0,He(e,null,"search",[e])}function Y(e){for(var t,n,r=Ge.ext.search,a=e.aiDisplay,i=0,o=r.length;i<o;i++){for(var s=[],l=0,u=a.length;l<u;l++)n=a[l],t=e.aoData[n],r[i](e,t._aFilterData,n,t._aData,l)&&s.push(n);a.length=0,B.merge(a,s)}}function Z(e,t,n,r,a,i){if(""!==t){for(var o,s=[],l=e.aiDisplay,u=Q(t,r,a,i),c=0;c<l.length;c++)o=e.aoData[l[c]]._aFilterData[n],u.test(o)&&s.push(l[c]);e.aiDisplay=s}}function K(e,t,n,r,a,i){var o,s,l,u=Q(t,r,a,i),c=e.oPreviousSearch.sSearch,f=e.aiDisplayMaster,d=[];if(0!==Ge.ext.search.length&&(n=!0),s=ee(e),t.length<=0)e.aiDisplay=f.slice();else{for((s||n||r||c.length>t.length||0!==t.indexOf(c)||e.bSorted)&&(e.aiDisplay=f.slice()),o=e.aiDisplay,l=0;l<o.length;l++)u.test(e.aoData[o[l]]._sFilterRow)&&d.push(o[l]);e.aiDisplay=d}}function Q(e,t,n,r){(e=t?e:vt(e),n)&&(e="^(?=.*?"+B.map(e.match(/"[^"]+"|[^ ]+/g)||[""],function(e){if('"'===e.charAt(0)){var t=e.match(/^"(.*)"$/);e=t?t[1]:e}return e.replace('"',"")}).join(")(?=.*?")+").*$");return new RegExp(e,r?"i":"")}function ee(e){var t,n,r,a,i,o,s,l,u=e.aoColumns,c=Ge.ext.type.search,f=!1;for(n=0,a=e.aoData.length;n<a;n++)if(!(l=e.aoData[n])._aFilterData){for(o=[],r=0,i=u.length;r<i;r++)(t=u[r]).bSearchable?(s=g(e,n,r,"filter"),c[t.sType]&&(s=c[t.sType](s)),null===s&&(s=""),"string"!=typeof s&&s.toString&&(s=s.toString())):s="",s.indexOf&&-1!==s.indexOf("&")&&(yt.innerHTML=s,s=bt?yt.textContent:yt.innerText),s.replace&&(s=s.replace(/[\r\n\u2028]/g,"")),o.push(s);l._aFilterData=o,l._sFilterRow=o.join("  "),f=!0}return f}function te(e){return{search:e.sSearch,smart:e.bSmart,regex:e.bRegex,caseInsensitive:e.bCaseInsensitive}}function ne(e){return{sSearch:e.search,bSmart:e.smart,bRegex:e.regex,bCaseInsensitive:e.caseInsensitive}}function re(e){var t=e.sTableId,n=e.aanFeatures.i,r=B("<div/>",{"class":e.oClasses.sInfo,id:n?null:t+"_info"});return n||(e.aoDrawCallback.push({fn:ae,sName:"information"}),r.attr("role","status").attr("aria-live","polite"),B(e.nTable).attr("aria-describedby",t+"_info")),r[0]}function ae(e){var t=e.aanFeatures.i;if(0!==t.length){var n=e.oLanguage,r=e._iDisplayStart+1,a=e.fnDisplayEnd(),i=e.fnRecordsTotal(),o=e.fnRecordsDisplay(),s=o?n.sInfo:n.sInfoEmpty;o!==i&&(s+=" "+n.sInfoFiltered),s=ie(e,s+=n.sInfoPostFix);var l=n.fnInfoCallback;null!==l&&(s=l.call(e.oInstance,e,r,a,i,o,s)),B(t).html(s)}}function ie(e,t){var n=e.fnFormatNumber,r=e._iDisplayStart+1,a=e._iDisplayLength,i=e.fnRecordsDisplay(),o=-1===a;return t.replace(/_START_/g,n.call(e,r)).replace(/_END_/g,n.call(e,e.fnDisplayEnd())).replace(/_MAX_/g,n.call(e,e.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(e,i)).replace(/_PAGE_/g,n.call(e,o?1:Math.ceil(r/a))).replace(/_PAGES_/g,n.call(e,o?1:Math.ceil(i/a)))}function oe(n){var r,e,t,a=n.iInitDisplayStart,i=n.aoColumns,o=n.oFeatures,s=n.bDeferLoading;if(n.bInitialised){for(T(n),d(n),v(n,n.aoHeader),v(n,n.aoFooter),he(n,!0),o.bAutoWidth&&ve(n),r=0,e=i.length;r<e;r++)(t=i[r]).sWidth&&(t.nTh.style.width=xe(t.sWidth));He(n,null,"preInit",[n]),D(n);var l=qe(n);("ssp"!=l||s)&&("ajax"==l?C(n,[],function(e){var t=V(n,e);for(r=0;r<t.length;r++)M(n,t[r]);n.iInitDisplayStart=a,D(n),he(n,!1),se(n,e)},n):(he(n,!1),se(n)))}else setTimeout(function(){oe(n)},200)}function se(e,t){e._bInitComplete=!0,(t||e.oInit.aaData)&&U(e),He(e,null,"plugin-init",[e,t]),He(e,"aoInitComplete","init",[e,t])}function le(e,t){var n=parseInt(t,10);e._iDisplayLength=n,Me(e),He(e,null,"length",[e,n])}function ue(r){for(var e=r.oClasses,t=r.sTableId,n=r.aLengthMenu,a=B.isArray(n[0]),i=a?n[0]:n,o=a?n[1]:n,s=B("<select/>",{name:t+"_length","aria-controls":t,"class":e.sLengthSelect}),l=0,u=i.length;l<u;l++)s[0][l]=new Option("number"==typeof o[l]?r.fnFormatNumber(o[l]):o[l],i[l]);var c=B("<div><label/></div>").addClass(e.sLength);return r.aanFeatures.l||(c[0].id=t+"_length"),c.children().append(r.oLanguage.sLengthMenu.replace("_MENU_",s[0].outerHTML)),B("select",c).val(r._iDisplayLength).on("change.DT",function(){le(r,B(this).val()),b(r)}),B(r.nTable).on("length.dt.DT",function(e,t,n){r===t&&B("select",c).val(n)}),c[0]}function ce(e){var t=e.sPaginationType,c=Ge.ext.pager[t],f="function"==typeof c,d=function(e){b(e)},n=B("<div/>").addClass(e.oClasses.sPaging+t)[0],h=e.aanFeatures;return f||c.fnInit(e,n,d),h.p||(n.id=e.sTableId+"_paginate",e.aoDrawCallback.push({fn:function(e){if(f){var t,n,r=e._iDisplayStart,a=e._iDisplayLength,i=e.fnRecordsDisplay(),o=-1===a,s=o?0:Math.ceil(r/a),l=o?1:Math.ceil(i/a),u=c(s,l);for(t=0,n=h.p.length;t<n;t++)Oe(e,"pageButton")(e,h.p[t],t,u,s,l)}else c.fnUpdate(e,d)},sName:"pagination"})),n}function fe(e,t,n){var r=e._iDisplayStart,a=e._iDisplayLength,i=e.fnRecordsDisplay();0===i||-1===a?r=0:"number"==typeof t?i<(r=t*a)&&(r=0):"first"==t?r=0:"previous"==t?(r=0<=a?r-a:0)<0&&(r=0):"next"==t?r+a<i&&(r+=a):"last"==t?r=Math.floor((i-1)/a)*a:Le(e,0,"Unknown paging action: "+t,5);var o=e._iDisplayStart!==r;return e._iDisplayStart=r,o&&(He(e,null,"page",[e]),n&&b(e)),o}function de(e){return B("<div/>",{id:e.aanFeatures.r?null:e.sTableId+"_processing","class":e.oClasses.sProcessing}).html(e.oLanguage.sProcessing).insertBefore(e.nTable)[0]}function he(e,t){e.oFeatures.bProcessing&&B(e.aanFeatures.r).css("display",t?"block":"none"),He(e,null,"processing",[e,t])}function pe(e){var t=B(e.nTable);t.attr("role","grid");var n=e.oScroll;if(""===n.sX&&""===n.sY)return e.nTable;var r=n.sX,a=n.sY,i=e.oClasses,o=t.children("caption"),s=o.length?o[0]._captionSide:null,l=B(t[0].cloneNode(!1)),u=B(t[0].cloneNode(!1)),c=t.children("tfoot"),f="<div/>",d=function(e){return e?xe(e):null};c.length||(c=null);var h=B(f,{"class":i.sScrollWrapper}).append(B(f,{"class":i.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:r?d(r):"100%"}).append(B(f,{"class":i.sScrollHeadInner}).css({"box-sizing":"content-box",width:n.sXInner||"100%"}).append(l.removeAttr("id").css("margin-left",0).append("top"===s?o:null).append(t.children("thead"))))).append(B(f,{"class":i.sScrollBody}).css({position:"relative",overflow:"auto",width:d(r)}).append(t));c&&h.append(B(f,{"class":i.sScrollFoot}).css({overflow:"hidden",border:0,width:r?d(r):"100%"}).append(B(f,{"class":i.sScrollFootInner}).append(u.removeAttr("id").css("margin-left",0).append("bottom"===s?o:null).append(t.children("tfoot")))));var p=h.children(),g=p[0],m=p[1],v=c?p[2]:null;return r&&B(m).on("scroll.DT",function(){var e=this.scrollLeft;g.scrollLeft=e,c&&(v.scrollLeft=e)}),B(m).css(a&&n.bCollapse?"max-height":"height",a),e.nScrollHead=g,e.nScrollBody=m,e.nScrollFoot=v,e.aoDrawCallback.push({fn:ge,sName:"scrolling"}),h[0]}function ge(n){var e,t,r,a,i,o,s,l,u,c=n.oScroll,f=c.sX,d=c.sXInner,h=c.sY,p=c.iBarWidth,g=B(n.nScrollHead),m=g[0].style,v=g.children("div"),y=v[0].style,b=v.children("table"),w=n.nScrollBody,x=B(w),S=w.style,D=B(n.nScrollFoot).children("div"),T=D.children("table"),C=B(n.nTHead),_=B(n.nTable),A=_[0],N=A.style,k=n.nTFoot?B(n.nTFoot):null,I=n.oBrowser,j=I.bScrollOversize,L=st(n.aoColumns,"nTh"),E=[],R=[],F=[],P=[],H=function(e){var t=e.style;t.paddingTop="0",t.paddingBottom="0",t.borderTopWidth="0",t.borderBottomWidth="0",t.height=0},M=w.scrollHeight>w.clientHeight;if(n.scrollBarVis!==M&&n.scrollBarVis!==$)return n.scrollBarVis=M,void U(n);n.scrollBarVis=M,_.children("thead, tfoot").remove(),k&&(o=k.clone().prependTo(_),t=k.find("tr"),a=o.find("tr")),i=C.clone().prependTo(_),e=C.find("tr"),r=i.find("tr"),i.find("th, td").removeAttr("tabindex"),f||(S.width="100%",g[0].style.width="100%"),B.each(X(n,i),function(e,t){s=z(n,e),t.style.width=n.aoColumns[s].sWidth}),k&&me(function(e){e.style.width=""},a),u=_.outerWidth(),""===f?(N.width="100%",j&&(_.find("tbody").height()>w.offsetHeight||"scroll"==x.css("overflow-y"))&&(N.width=xe(_.outerWidth()-p)),u=_.outerWidth()):""!==d&&(N.width=xe(d),u=_.outerWidth()),me(H,r),me(function(e){F.push(e.innerHTML),E.push(xe(B(e).css("width")))},r),me(function(e,t){-1!==B.inArray(e,L)&&(e.style.width=E[t])},e),B(r).height(0),k&&(me(H,a),me(function(e){P.push(e.innerHTML),R.push(xe(B(e).css("width")))},a),me(function(e,t){e.style.width=R[t]},t),B(a).height(0)),me(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+F[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=E[t]},r),k&&me(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+P[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=R[t]},a),_.outerWidth()<u?(l=w.scrollHeight>w.offsetHeight||"scroll"==x.css("overflow-y")?u+p:u,j&&(w.scrollHeight>w.offsetHeight||"scroll"==x.css("overflow-y"))&&(N.width=xe(l-p)),""!==f&&""===d||Le(n,1,"Possible column misalignment",6)):l="100%",S.width=xe(l),m.width=xe(l),k&&(n.nScrollFoot.style.width=xe(l)),h||j&&(S.height=xe(A.offsetHeight+p));var O=_.outerWidth();b[0].style.width=xe(O),y.width=xe(O);var q=_.height()>w.clientHeight||"scroll"==x.css("overflow-y"),W="padding"+(I.bScrollbarLeft?"Left":"Right");y[W]=q?p+"px":"0px",k&&(T[0].style.width=xe(O),D[0].style.width=xe(O),D[0].style[W]=q?p+"px":"0px"),_.children("colgroup").insertBefore(_.children("thead")),x.trigger("scroll"),!n.bSorted&&!n.bFiltered||n._drawHold||(w.scrollTop=0)}function me(e,t,n){for(var r,a,i=0,o=0,s=t.length;o<s;){for(r=t[o].firstChild,a=n?n[o].firstChild:null;r;)1===r.nodeType&&(n?e(r,a,i):e(r,i),i++),r=r.nextSibling,a=n?a.nextSibling:null;o++}}function ve(e){var t,n,r,a=e.nTable,i=e.aoColumns,o=e.oScroll,s=o.sY,l=o.sX,u=o.sXInner,c=i.length,f=P(e,"bVisible"),d=B("th",e.nTHead),h=a.getAttribute("width"),p=a.parentNode,g=!1,m=e.oBrowser,v=m.bScrollOversize,y=a.style.width;for(y&&-1!==y.indexOf("%")&&(h=y),t=0;t<f.length;t++)null!==(n=i[f[t]]).sWidth&&(n.sWidth=ye(n.sWidthOrig,p),g=!0);if(v||!g&&!l&&!s&&c==F(e)&&c==d.length)for(t=0;t<c;t++){var b=z(e,t);null!==b&&(i[b].sWidth=xe(d.eq(t).width()))}else{var w=B(a).clone().css("visibility","hidden").removeAttr("id");w.find("tbody tr").remove();var x=B("<tr/>").appendTo(w.find("tbody"));for(w.find("thead, tfoot").remove(),w.append(B(e.nTHead).clone()).append(B(e.nTFoot).clone()),w.find("tfoot th, tfoot td").css("width",""),d=X(e,w.find("thead")[0]),t=0;t<f.length;t++)n=i[f[t]],d[t].style.width=null!==n.sWidthOrig&&""!==n.sWidthOrig?xe(n.sWidthOrig):"",n.sWidthOrig&&l&&B(d[t]).append(B("<div/>").css({width:n.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(e.aoData.length)for(t=0;t<f.length;t++)n=i[r=f[t]],B(be(e,r)).clone(!1).append(n.sContentPadding).appendTo(x);B("[name]",w).removeAttr("name");var S=B("<div/>").css(l||s?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(w).appendTo(p);l&&u?w.width(u):l?(w.css("width","auto"),w.removeAttr("width"),w.width()<p.clientWidth&&h&&w.width(p.clientWidth)):s?w.width(p.clientWidth):h&&w.width(h);var D=0;for(t=0;t<f.length;t++){var T=B(d[t]),C=T.outerWidth()-T.width(),_=m.bBounding?Math.ceil(d[t].getBoundingClientRect().width):T.outerWidth();D+=_,i[f[t]].sWidth=xe(_-C)}a.style.width=xe(D),S.remove()}if(h&&(a.style.width=xe(h)),(h||l)&&!e._reszEvt){var A=function(){B(N).on("resize.DT-"+e.sInstance,xt(function(){U(e)}))};v?setTimeout(A,1e3):A(),e._reszEvt=!0}}function ye(e,t){if(!e)return 0;var n=B("<div/>").css("width",xe(e)).appendTo(t||w.body),r=n[0].offsetWidth;return n.remove(),r}function be(e,t){var n=we(e,t);if(n<0)return null;var r=e.aoData[n];return r.nTr?r.anCells[t]:B("<td/>").html(g(e,n,t,"display"))[0]}function we(e,t){for(var n,r=-1,a=-1,i=0,o=e.aoData.length;i<o;i++)(n=(n=(n=g(e,i,t,"display")+"").replace(wt,"")).replace(/&nbsp;/g," ")).length>r&&(r=n.length,a=i);return a}function xe(e){return null===e?"0px":"number"==typeof e?e<0?"0px":e+"px":e.match(/\d$/)?e+"px":e}function Se(e){var t,n,r,a,i,o,s,l=[],u=e.aoColumns,c=e.aaSortingFixed,f=B.isPlainObject(c),d=[],h=function(e){e.length&&!B.isArray(e[0])?d.push(e):B.merge(d,e)};for(B.isArray(c)&&h(c),f&&c.pre&&h(c.pre),h(e.aaSorting),f&&c.post&&h(c.post),t=0;t<d.length;t++)for(n=0,r=(a=u[s=d[t][0]].aDataSort).length;n<r;n++)o=u[i=a[n]].sType||"string",d[t]._idx===$&&(d[t]._idx=B.inArray(d[t][1],u[i].asSorting)),l.push({src:s,col:i,dir:d[t][1],index:d[t]._idx,type:o,formatter:Ge.ext.type.order[o+"-pre"]});return l}function De(e){var t,n,r,a,c,f=[],d=Ge.ext.type.order,h=e.aoData,i=(e.aoColumns,0),o=e.aiDisplayMaster;for(l(e),t=0,n=(c=Se(e)).length;t<n;t++)(a=c[t]).formatter&&i++,Ne(e,a.col);if("ssp"!=qe(e)&&0!==c.length){for(t=0,r=o.length;t<r;t++)f[o[t]]=t;i===c.length?o.sort(function(e,t){var n,r,a,i,o,s=c.length,l=h[e]._aSortData,u=h[t]._aSortData;for(a=0;a<s;a++)if(0!==(i=(n=l[(o=c[a]).col])<(r=u[o.col])?-1:r<n?1:0))return"asc"===o.dir?i:-i;return(n=f[e])<(r=f[t])?-1:r<n?1:0}):o.sort(function(e,t){var n,r,a,i,o,s=c.length,l=h[e]._aSortData,u=h[t]._aSortData;for(a=0;a<s;a++)if(n=l[(o=c[a]).col],r=u[o.col],0!==(i=(d[o.type+"-"+o.dir]||d["string-"+o.dir])(n,r)))return i;return(n=f[e])<(r=f[t])?-1:r<n?1:0})}e.bSorted=!0}function Te(e){for(var t,n,r=e.aoColumns,a=Se(e),i=e.oLanguage.oAria,o=0,s=r.length;o<s;o++){var l=r[o],u=l.asSorting,c=l.sTitle.replace(/<.*?>/g,""),f=l.nTh;f.removeAttribute("aria-sort"),l.bSortable?(0<a.length&&a[0].col==o?(f.setAttribute("aria-sort","asc"==a[0].dir?"ascending":"descending"),n=u[a[0].index+1]||u[0]):n=u[0],t=c+("asc"===n?i.sSortAscending:i.sSortDescending)):t=c,f.setAttribute("aria-label",t)}}function Ce(e,t,n,r){var a,i=e.aoColumns[t],o=e.aaSorting,s=i.asSorting,l=function(e,t){var n=e._idx;return n===$&&(n=B.inArray(e[1],s)),n+1<s.length?n+1:t?null:0};if("number"==typeof o[0]&&(o=e.aaSorting=[o]),n&&e.oFeatures.bSortMulti){var u=B.inArray(t,st(o,"0"));-1!==u?(null===(a=l(o[u],!0))&&1===o.length&&(a=0),null===a?o.splice(u,1):(o[u][1]=s[a],o[u]._idx=a)):(o.push([t,s[0],0]),o[o.length-1]._idx=0)}else o.length&&o[0][0]==t?(a=l(o[0]),o.length=1,o[0][1]=s[a],o[0]._idx=a):(o.length=0,o.push([t,s[0]]),o[0]._idx=0);D(e),"function"==typeof r&&r(e)}function _e(t,e,n,r){var a=t.aoColumns[n];Fe(e,{},function(e){!1!==a.bSortable&&(t.oFeatures.bProcessing?(he(t,!0),setTimeout(function(){Ce(t,n,e.shiftKey,r),"ssp"!==qe(t)&&he(t,!1)},0)):Ce(t,n,e.shiftKey,r))})}function Ae(e){var t,n,r,a=e.aLastSort,i=e.oClasses.sSortColumn,o=Se(e),s=e.oFeatures;if(s.bSort&&s.bSortClasses){for(t=0,n=a.length;t<n;t++)r=a[t].src,B(st(e.aoData,"anCells",r)).removeClass(i+(t<2?t+1:3));for(t=0,n=o.length;t<n;t++)r=o[t].src,B(st(e.aoData,"anCells",r)).addClass(i+(t<2?t+1:3))}e.aLastSort=o}function Ne(e,t){var n,r,a,i=e.aoColumns[t],o=Ge.ext.order[i.sSortDataType];o&&(n=o.call(e.oInstance,e,t,c(e,t)));for(var s=Ge.ext.type.order[i.sType+"-pre"],l=0,u=e.aoData.length;l<u;l++)(r=e.aoData[l])._aSortData||(r._aSortData=[]),r._aSortData[t]&&!o||(a=o?n[l]:g(e,l,t,"sort"),r._aSortData[t]=s?s(a):a)}function ke(n){if(n.oFeatures.bStateSave&&!n.bDestroying){var e={time:+new Date,start:n._iDisplayStart,length:n._iDisplayLength,order:B.extend(!0,[],n.aaSorting),search:te(n.oPreviousSearch),columns:B.map(n.aoColumns,function(e,t){return{visible:e.bVisible,search:te(n.aoPreSearchCols[t])}})};He(n,"aoStateSaveParams","stateSaveParams",[n,e]),n.oSavedState=e,n.fnStateSaveCallback.call(n.oInstance,n,e)}}function Ie(a,e,i){var o,s,l=a.aoColumns,t=function(e){if(e&&e.time){var t=He(a,"aoStateLoadParams","stateLoadParams",[a,e]);if(-1===B.inArray(!1,t)){var n=a.iStateDuration;if(0<n&&e.time<+new Date-1e3*n)i();else if(e.columns&&l.length!==e.columns.length)i();else{if(a.oLoadedState=B.extend(!0,{},e),e.start!==$&&(a._iDisplayStart=e.start,a.iInitDisplayStart=e.start),e.length!==$&&(a._iDisplayLength=e.length),e.order!==$&&(a.aaSorting=[],B.each(e.order,function(e,t){a.aaSorting.push(t[0]>=l.length?[0,t[1]]:t)})),e.search!==$&&B.extend(a.oPreviousSearch,ne(e.search)),e.columns)for(o=0,s=e.columns.length;o<s;o++){var r=e.columns[o];r.visible!==$&&(l[o].bVisible=r.visible),r.search!==$&&B.extend(a.aoPreSearchCols[o],ne(r.search))}He(a,"aoStateLoaded","stateLoaded",[a,e]),i()}}else i()}else i()};if(a.oFeatures.bStateSave){var n=a.fnStateLoadCallback.call(a.oInstance,a,t);n!==$&&t(n)}else i()}function je(e){var t=Ge.settings,n=B.inArray(e,st(t,"nTable"));return-1!==n?t[n]:null}function Le(e,t,n,r){if(n="DataTables warning: "+(e?"table id="+e.sTableId+" - ":"")+n,r&&(n+=". For more information about this error, please see http://datatables.net/tn/"+r),t)N.console&&console.log&&console.log(n);else{var a=Ge.ext,i=a.sErrMode||a.errMode;if(e&&He(e,null,"error",[e,r,n]),"alert"==i)alert(n);else{if("throw"==i)throw new Error(n);"function"==typeof i&&i(e,r,n)}}}function Ee(n,r,e,t){B.isArray(e)?B.each(e,function(e,t){B.isArray(t)?Ee(n,r,t[0],t[1]):Ee(n,r,t)}):(t===$&&(t=e),r[e]!==$&&(n[t]=r[e]))}function Re(e,t,n){var r;for(var a in t)t.hasOwnProperty(a)&&(r=t[a],B.isPlainObject(r)?(B.isPlainObject(e[a])||(e[a]={}),B.extend(!0,e[a],r)):n&&"data"!==a&&"aaData"!==a&&B.isArray(r)?e[a]=r.slice():e[a]=r);return e}function Fe(t,e,n){B(t).on("click.DT",e,function(e){B(t).blur(),n(e)}).on("keypress.DT",e,function(e){13===e.which&&(e.preventDefault(),n(e))}).on("selectstart.DT",function(){return!1})}function Pe(e,t,n,r){n&&e[t].push({fn:n,sName:r})}function He(t,e,n,r){var a=[];if(e&&(a=B.map(t[e].slice().reverse(),function(e){return e.fn.apply(t.oInstance,r)})),null!==n){var i=B.Event(n+".dt");B(t.nTable).trigger(i,r),a.push(i.result)}return a}function Me(e){var t=e._iDisplayStart,n=e.fnDisplayEnd(),r=e._iDisplayLength;n<=t&&(t=n-r),t-=t%r,(-1===r||t<0)&&(t=0),e._iDisplayStart=t}function Oe(e,t){var n=e.renderer,r=Ge.ext.renderer[t];return B.isPlainObject(n)&&n[t]?r[n[t]]||r._:"string"==typeof n&&r[n]||r._}function qe(e){return e.oFeatures.bServerSide?"ssp":e.ajax||e.sAjaxSource?"ajax":"dom"}function We(e,t){var n=[],r=$t.numbers_length,a=Math.floor(r/2);return t<=r?n=ut(0,t):e<=a?((n=ut(0,r-2)).push("ellipsis"),n.push(t-1)):(t-1-a<=e?(n=ut(t-(r-2),t)).splice(0,0,"ellipsis"):((n=ut(e-a+2,e+a-1)).push("ellipsis"),n.push(t-1),n.splice(0,0,"ellipsis")),n.splice(0,0,0)),n.DT_el="span",n}function Be(n){B.each({num:function(e){return Ut(e,n)},"num-fmt":function(e){return Ut(e,n,et)},"html-num":function(e){return Ut(e,n,Ze)},"html-num-fmt":function(e){return Ut(e,n,Ze,et)}},function(e,t){Ue.type.order[e+n+"-pre"]=t,e.match(/^html\-/)&&(Ue.type.search[e+n]=Ue.type.search.html)})}function $e(t){return function(){var e=[je(this[Ge.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return Ge.ext.internal[t].apply(this,e)}}var Ue,ze,Xe,Ve,Ge=function(D){this.$=function(e,t){return this.api(!0).$(e,t)},this._=function(e,t){return this.api(!0).rows(e,t).data()},this.api=function(e){return new ze(e?je(this[Ue.iApiIndex]):this)},this.fnAddData=function(e,t){var n=this.api(!0),r=B.isArray(e)&&(B.isArray(e[0])||B.isPlainObject(e[0]))?n.rows.add(e):n.row.add(e);return(t===$||t)&&n.draw(),r.flatten().toArray()},this.fnAdjustColumnSizing=function(e){var t=this.api(!0).columns.adjust(),n=t.settings()[0],r=n.oScroll;e===$||e?t.draw(!1):""===r.sX&&""===r.sY||ge(n)},this.fnClearTable=function(e){var t=this.api(!0).clear();(e===$||e)&&t.draw()},this.fnClose=function(e){this.api(!0).row(e).child.hide()},this.fnDeleteRow=function(e,t,n){var r=this.api(!0),a=r.rows(e),i=a.settings()[0],o=i.aoData[a[0][0]];return a.remove(),t&&t.call(this,i,o),(n===$||n)&&r.draw(),o},this.fnDestroy=function(e){this.api(!0).destroy(e)},this.fnDraw=function(e){this.api(!0).draw(e)},this.fnFilter=function(e,t,n,r,a,i){var o=this.api(!0);null===t||t===$?o.search(e,n,r,i):o.column(t).search(e,n,r,i),o.draw()},this.fnGetData=function(e,t){var n=this.api(!0);if(e===$)return n.data().toArray();var r=e.nodeName?e.nodeName.toLowerCase():"";return t!==$||"td"==r||"th"==r?n.cell(e,t).data():n.row(e).data()||null},this.fnGetNodes=function(e){var t=this.api(!0);return e!==$?t.row(e).node():t.rows().nodes().flatten().toArray()},this.fnGetPosition=function(e){var t=this.api(!0),n=e.nodeName.toUpperCase();if("TR"==n)return t.row(e).index();if("TD"!=n&&"TH"!=n)return null;var r=t.cell(e).index();return[r.row,r.columnVisible,r.column]},this.fnIsOpen=function(e){return this.api(!0).row(e).child.isShown()},this.fnOpen=function(e,t,n){return this.api(!0).row(e).child(t,n).show().child()[0]},this.fnPageChange=function(e,t){var n=this.api(!0).page(e);(t===$||t)&&n.draw(!1)},this.fnSetColumnVis=function(e,t,n){var r=this.api(!0).column(e).visible(t);(n===$||n)&&r.columns.adjust().draw()},this.fnSettings=function(){return je(this[Ue.iApiIndex])},this.fnSort=function(e){this.api(!0).order(e).draw()},this.fnSortListener=function(e,t,n){this.api(!0).order.listener(e,t,n)},this.fnUpdate=function(e,t,n,r,a){var i=this.api(!0);return n===$||null===n?i.row(t).data(e):i.cell(t,n).data(e),(a===$||a)&&i.columns.adjust(),(r===$||r)&&i.draw(),0},this.fnVersionCheck=Ue.fnVersionCheck;var T=this,C=D===$,_=this.length;for(var e in C&&(D={}),this.oApi=this.internal=Ue.internal,Ge.ext.internal)e&&(this[e]=$e(e));return this.each(function(){var i,o=1<_?Re({},D,!0):D,s=0,e=this.getAttribute("id"),l=!1,t=Ge.defaults,u=B(this);if("table"==this.nodeName.toLowerCase()){I(t),j(t.column),A(t,t,!0),A(t.column,t.column,!0),A(t,B.extend(o,u.data()),!0);var n=Ge.settings;for(s=0,i=n.length;s<i;s++){var r=n[s];if(r.nTable==this||r.nTHead&&r.nTHead.parentNode==this||r.nTFoot&&r.nTFoot.parentNode==this){var a=o.bRetrieve!==$?o.bRetrieve:t.bRetrieve,c=o.bDestroy!==$?o.bDestroy:t.bDestroy;if(C||a)return r.oInstance;if(c){r.oInstance.fnDestroy();break}return void Le(r,0,"Cannot reinitialise DataTable",3)}if(r.sTableId==this.id){n.splice(s,1);break}}null!==e&&""!==e||(e="DataTables_Table_"+Ge.ext._unique++,this.id=e);var f=B.extend(!0,{},Ge.models.oSettings,{sDestroyWidth:u[0].style.width,sInstance:e,sTableId:e});f.nTable=this,f.oApi=T.internal,f.oInit=o,n.push(f),f.oInstance=1===T.length?T:u.dataTable(),I(o),k(o.oLanguage),o.aLengthMenu&&!o.iDisplayLength&&(o.iDisplayLength=B.isArray(o.aLengthMenu[0])?o.aLengthMenu[0][0]:o.aLengthMenu[0]),o=Re(B.extend(!0,{},t),o),Ee(f.oFeatures,o,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),Ee(f,o,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"]]),Ee(f.oScroll,o,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),Ee(f.oLanguage,o,"fnInfoCallback"),Pe(f,"aoDrawCallback",o.fnDrawCallback,"user"),Pe(f,"aoServerParams",o.fnServerParams,"user"),Pe(f,"aoStateSaveParams",o.fnStateSaveParams,"user"),Pe(f,"aoStateLoadParams",o.fnStateLoadParams,"user"),Pe(f,"aoStateLoaded",o.fnStateLoaded,"user"),Pe(f,"aoRowCallback",o.fnRowCallback,"user"),Pe(f,"aoRowCreatedCallback",o.fnCreatedRow,"user"),Pe(f,"aoHeaderCallback",o.fnHeaderCallback,"user"),Pe(f,"aoFooterCallback",o.fnFooterCallback,"user"),Pe(f,"aoInitComplete",o.fnInitComplete,"user"),Pe(f,"aoPreDrawCallback",o.fnPreDrawCallback,"user"),f.rowIdFn=q(o.rowId),L(f);var d=f.oClasses;if(B.extend(d,Ge.ext.classes,o.oClasses),u.addClass(d.sTable),f.iInitDisplayStart===$&&(f.iInitDisplayStart=o.iDisplayStart,f._iDisplayStart=o.iDisplayStart),null!==o.iDeferLoading){f.bDeferLoading=!0;var h=B.isArray(o.iDeferLoading);f._iRecordsDisplay=h?o.iDeferLoading[0]:o.iDeferLoading,f._iRecordsTotal=h?o.iDeferLoading[1]:o.iDeferLoading}var p=f.oLanguage;B.extend(!0,p,o.oLanguage),p.sUrl&&(B.ajax({dataType:"json",url:p.sUrl,success:function(e){k(e),A(t.oLanguage,e),B.extend(!0,p,e),oe(f)},error:function(){oe(f)}}),l=!0),null===o.asStripeClasses&&(f.asStripeClasses=[d.sStripeOdd,d.sStripeEven]);var g=f.asStripeClasses,m=u.children("tbody").find("tr").eq(0);-1!==B.inArray(!0,B.map(g,function(e){return m.hasClass(e)}))&&(B("tbody tr",this).removeClass(g.join(" ")),f.asDestroyStripes=g.slice());var v,y=[],b=this.getElementsByTagName("thead");if(0!==b.length&&(W(f.aoHeader,b[0]),y=X(f)),null===o.aoColumns)for(v=[],s=0,i=y.length;s<i;s++)v.push(null);else v=o.aoColumns;for(s=0,i=v.length;s<i;s++)E(f,y?y[s]:null);if(H(f,o.aoColumnDefs,v,function(e,t){R(f,e,t)}),m.length){var w=function(e,t){return null!==e.getAttribute("data-"+t)?t:null};B(m[0]).children("th, td").each(function(e,t){var n=f.aoColumns[e];if(n.mData===e){var r=w(t,"sort")||w(t,"order"),a=w(t,"filter")||w(t,"search");null===r&&null===a||(n.mData={_:e+".display",sort:null!==r?e+".@data-"+r:$,type:null!==r?e+".@data-"+r:$,filter:null!==a?e+".@data-"+a:$},R(f,e))}})}var x=f.oFeatures,S=function(){if(o.aaSorting===$){var e=f.aaSorting;for(s=0,i=e.length;s<i;s++)e[s][1]=f.aoColumns[s].asSorting[0]}Ae(f),x.bSort&&Pe(f,"aoDrawCallback",function(){if(f.bSorted){var e=Se(f),n={};B.each(e,function(e,t){n[t.src]=t.dir}),He(f,null,"order",[f,e,n]),Te(f)}}),Pe(f,"aoDrawCallback",function(){(f.bSorted||"ssp"===qe(f)||x.bDeferRender)&&Ae(f)},"sc");var t=u.children("caption").each(function(){this._captionSide=B(this).css("caption-side")}),n=u.children("thead");0===n.length&&(n=B("<thead/>").appendTo(u)),f.nTHead=n[0];var r=u.children("tbody");0===r.length&&(r=B("<tbody/>").appendTo(u)),f.nTBody=r[0];var a=u.children("tfoot");if(0===a.length&&0<t.length&&(""!==f.oScroll.sX||""!==f.oScroll.sY)&&(a=B("<tfoot/>").appendTo(u)),0===a.length||0===a.children().length?u.addClass(d.sNoFooter):0<a.length&&(f.nTFoot=a[0],W(f.aoFooter,f.nTFoot)),o.aaData)for(s=0;s<o.aaData.length;s++)M(f,o.aaData[s]);else(f.bDeferLoading||"dom"==qe(f))&&O(f,B(f.nTBody).children("tr"));f.aiDisplay=f.aiDisplayMaster.slice(),!(f.bInitialised=!0)===l&&oe(f)};o.bStateSave?(x.bStateSave=!0,Pe(f,"aoDrawCallback",ke,"state_save"),Ie(f,o,S)):S()}else Le(null,0,"Non-table node initialisation ("+this.nodeName+")",2)}),T=null,this},Je={},Ye=/[\r\n\u2028]/g,Ze=/<.*?>/g,Ke=/^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/,Qe=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),et=/[',$\xa3\u20ac\xa5%\u2009\u202F\u20BD\u20a9\u20BArfk\u0243\u039e]/gi,tt=function(e){return!e||!0===e||"-"===e},nt=function(e){var t=parseInt(e,10);return!isNaN(t)&&isFinite(e)?t:null},rt=function(e,t){return Je[t]||(Je[t]=new RegExp(vt(t),"g")),"string"==typeof e&&"."!==t?e.replace(/\./g,"").replace(Je[t],"."):e},at=function(e,t,n){var r="string"==typeof e;return!!tt(e)||(t&&r&&(e=rt(e,t)),n&&r&&(e=e.replace(et,"")),!isNaN(parseFloat(e))&&isFinite(e))},it=function(e){return tt(e)||"string"==typeof e},ot=function(e,t,n){return!!tt(e)||(it(e)&&!!at(ft(e),t,n)||null)},st=function(e,t,n){var r=[],a=0,i=e.length;if(n!==$)for(;a<i;a++)e[a]&&e[a][t]&&r.push(e[a][t][n]);else for(;a<i;a++)e[a]&&r.push(e[a][t]);return r},lt=function(e,t,n,r){var a=[],i=0,o=t.length;if(r!==$)for(;i<o;i++)e[t[i]][n]&&a.push(e[t[i]][n][r]);else for(;i<o;i++)a.push(e[t[i]][n]);return a},ut=function(e,t){var n,r=[];t===$?(t=0,n=e):(n=t,t=e);for(var a=t;a<n;a++)r.push(a);return r},ct=function(e){for(var t=[],n=0,r=e.length;n<r;n++)e[n]&&t.push(e[n]);return t},ft=function(e){return e.replace(Ze,"")},dt=function(e){if(e.length<2)return!0;for(var t=e.slice().sort(),n=t[0],r=1,a=t.length;r<a;r++){if(t[r]===n)return!1;n=t[r]}return!0},ht=function(e){if(dt(e))return e.slice();var t,n,r,a=[],i=e.length,o=0;e:for(n=0;n<i;n++){for(t=e[n],r=0;r<o;r++)if(a[r]===t)continue e;a.push(t),o++}return a};Ge.util={throttle:function(r,e){var a,i,o=e!==$?e:200;return function(){var e=this,t=+new Date,n=arguments;a&&t<a+o?(clearTimeout(i),i=setTimeout(function(){a=$,r.apply(e,n)},o)):(a=t,r.apply(e,n))}},escapeRegex:function(e){return e.replace(Qe,"\\$1")}};var pt=function(e,t,n){e[t]!==$&&(e[n]=e[t])},gt=/\[.*?\]$/,mt=/\(\)$/,vt=Ge.util.escapeRegex,yt=B("<div>")[0],bt=yt.textContent!==$,wt=/<.*?>/g,xt=Ge.util.throttle,St=[],Dt=Array.prototype,Tt=function(e){var t,n,r=Ge.settings,a=B.map(r,function(e){return e.nTable});return e?e.nTable&&e.oApi?[e]:e.nodeName&&"table"===e.nodeName.toLowerCase()?-1!==(t=B.inArray(e,a))?[r[t]]:null:e&&"function"==typeof e.settings?e.settings().toArray():("string"==typeof e?n=B(e):e instanceof B&&(n=e),n?n.map(function(){return-1!==(t=B.inArray(this,a))?r[t]:null}).toArray():void 0):[]};ze=function(e,t){if(!(this instanceof ze))return new ze(e,t);var n=[],r=function(e){var t=Tt(e);t&&n.push.apply(n,t)};if(B.isArray(e))for(var a=0,i=e.length;a<i;a++)r(e[a]);else r(e);this.context=ht(n),t&&B.merge(this,t),this.selector={rows:null,cols:null,opts:null},ze.extend(this,this,St)},Ge.Api=ze,B.extend(ze.prototype,{any:function(){return 0!==this.count()},concat:Dt.concat,context:[],count:function(){return this.flatten().length},each:function(e){for(var t=0,n=this.length;t<n;t++)e.call(this,this[t],t,this);return this},eq:function(e){var t=this.context;return t.length>e?new ze(t[e],this[e]):null},filter:function(e){var t=[];if(Dt.filter)t=Dt.filter.call(this,e,this);else for(var n=0,r=this.length;n<r;n++)e.call(this,this[n],n,this)&&t.push(this[n]);return new ze(this.context,t)},flatten:function(){var e=[];return new ze(this.context,e.concat.apply(e,this.toArray()))},join:Dt.join,indexOf:Dt.indexOf||function(e,t){for(var n=t||0,r=this.length;n<r;n++)if(this[n]===e)return n;return-1},iterator:function(e,t,n,r){var a,i,o,s,l,u,c,f,d=[],h=this.context,p=this.selector;for("string"==typeof e&&(r=n,n=t,t=e,e=!1),i=0,o=h.length;i<o;i++){var g=new ze(h[i]);if("table"===t)(a=n.call(g,h[i],i))!==$&&d.push(a);else if("columns"===t||"rows"===t)(a=n.call(g,h[i],this[i],i))!==$&&d.push(a);else if("column"===t||"column-rows"===t||"row"===t||"cell"===t)for(c=this[i],"column-rows"===t&&(u=It(h[i],p.opts)),s=0,l=c.length;s<l;s++)f=c[s],(a="cell"===t?n.call(g,h[i],f.row,f.column,i,s):n.call(g,h[i],f,i,s,u))!==$&&d.push(a)}if(d.length||r){var m=new ze(h,e?d.concat.apply([],d):d),v=m.selector;return v.rows=p.rows,v.cols=p.cols,v.opts=p.opts,m}return this},lastIndexOf:Dt.lastIndexOf||function(){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(e){var t=[];if(Dt.map)t=Dt.map.call(this,e,this);else for(var n=0,r=this.length;n<r;n++)t.push(e.call(this,this[n],n));return new ze(this.context,t)},pluck:function(t){return this.map(function(e){return e[t]})},pop:Dt.pop,push:Dt.push,reduce:Dt.reduce||function(e,t){return n(this,e,t,0,this.length,1)},reduceRight:Dt.reduceRight||function(e,t){return n(this,e,t,this.length-1,-1,-1)},reverse:Dt.reverse,selector:null,shift:Dt.shift,slice:function(){return new ze(this.context,this)},sort:Dt.sort,splice:Dt.splice,toArray:function(){return Dt.slice.call(this)},to$:function(){return B(this)},toJQuery:function(){return B(this)},unique:function(){return new ze(this.context,ht(this))},unshift:Dt.unshift}),ze.extend=function(e,t,n){if(n.length&&t&&(t instanceof ze||t.__dt_wrapper)){var r,a,i,o=function(t,n,r){return function(){var e=n.apply(t,arguments);return ze.extend(e,e,r.methodExt),e}};for(r=0,a=n.length;r<a;r++)t[(i=n[r]).name]="function"===i.type?o(e,i.val,i):"object"===i.type?{}:i.val,t[i.name].__dt_wrapper=!0,ze.extend(e,t[i.name],i.propExt)}},ze.register=Xe=function(e,t){if(
B.isArray(e))for(var n=0,r=e.length;n<r;n++)ze.register(e[n],t);else{var a,i,o,s,l=e.split("."),u=St,c=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n].name===t)return e[n];return null};for(a=0,i=l.length;a<i;a++){var f=c(u,o=(s=-1!==l[a].indexOf("()"))?l[a].replace("()",""):l[a]);f||(f={name:o,val:{},methodExt:[],propExt:[],type:"object"},u.push(f)),a===i-1?(f.val=t,f.type="function"==typeof t?"function":B.isPlainObject(t)?"object":"other"):u=s?f.methodExt:f.propExt}}},ze.registerPlural=Ve=function(e,t,n){ze.register(e,n),ze.register(t,function(){var e=n.apply(this,arguments);return e===this?this:e instanceof ze?e.length?B.isArray(e[0])?new ze(e.context,e[0]):e[0]:$:e})};var Ct=function(e,t){if("number"==typeof e)return[t[e]];var n=B.map(t,function(e){return e.nTable});return B(n).filter(e).map(function(){var e=B.inArray(this,n);return t[e]}).toArray()};Xe("tables()",function(e){return e?new ze(Ct(e,this.context)):this}),Xe("table()",function(e){var t=this.tables(e),n=t.context;return n.length?new ze(n[0]):t}),Ve("tables().nodes()","table().node()",function(){return this.iterator("table",function(e){return e.nTable},1)}),Ve("tables().body()","table().body()",function(){return this.iterator("table",function(e){return e.nTBody},1)}),Ve("tables().header()","table().header()",function(){return this.iterator("table",function(e){return e.nTHead},1)}),Ve("tables().footer()","table().footer()",function(){return this.iterator("table",function(e){return e.nTFoot},1)}),Ve("tables().containers()","table().container()",function(){return this.iterator("table",function(e){return e.nTableWrapper},1)}),Xe("draw()",function(t){return this.iterator("table",function(e){"page"===t?b(e):("string"==typeof t&&(t="full-hold"!==t),D(e,!1===t))})}),Xe("page()",function(t){return t===$?this.page.info().page:this.iterator("table",function(e){fe(e,t)})}),Xe("page.info()",function(){if(0===this.context.length)return $;var e=this.context[0],t=e._iDisplayStart,n=e.oFeatures.bPaginate?e._iDisplayLength:-1,r=e.fnRecordsDisplay(),a=-1===n;return{page:a?0:Math.floor(t/n),pages:a?1:Math.ceil(r/n),start:t,end:e.fnDisplayEnd(),length:n,recordsTotal:e.fnRecordsTotal(),recordsDisplay:r,serverSide:"ssp"===qe(e)}}),Xe("page.len()",function(t){return t===$?0!==this.context.length?this.context[0]._iDisplayLength:$:this.iterator("table",function(e){le(e,t)})});var _t=function(a,i,e){if(e){var t=new ze(a);t.one("draw",function(){e(t.ajax.json())})}if("ssp"==qe(a))D(a,i);else{he(a,!0);var n=a.jqXHR;n&&4!==n.readyState&&n.abort(),C(a,[],function(e){u(a);for(var t=V(a,e),n=0,r=t.length;n<r;n++)M(a,t[n]);D(a,i),he(a,!1)})}};Xe("ajax.json()",function(){var e=this.context;if(0<e.length)return e[0].json}),Xe("ajax.params()",function(){var e=this.context;if(0<e.length)return e[0].oAjaxData}),Xe("ajax.reload()",function(t,n){return this.iterator("table",function(e){_t(e,!1===n,t)})}),Xe("ajax.url()",function(t){var e=this.context;return t===$?0===e.length?$:(e=e[0]).ajax?B.isPlainObject(e.ajax)?e.ajax.url:e.ajax:e.sAjaxSource:this.iterator("table",function(e){B.isPlainObject(e.ajax)?e.ajax.url=t:e.ajax=t})}),Xe("ajax.url().load()",function(t,n){return this.iterator("table",function(e){_t(e,!1===n,t)})});var At=function(e,t,n,r,a){var i,o,s,l,u,c,f=[],d=typeof t;for(t&&"string"!==d&&"function"!==d&&t.length!==$||(t=[t]),s=0,l=t.length;s<l;s++)for(u=0,c=(o=t[s]&&t[s].split&&!t[s].match(/[\[\(:]/)?t[s].split(","):[t[s]]).length;u<c;u++)(i=n("string"==typeof o[u]?B.trim(o[u]):o[u]))&&i.length&&(f=f.concat(i));var h=Ue.selector[e];if(h.length)for(s=0,l=h.length;s<l;s++)f=h[s](r,a,f);return ht(f)},Nt=function(e){return e||(e={}),e.filter&&e.search===$&&(e.search=e.filter),B.extend({search:"none",order:"current",page:"all"},e)},kt=function(e){for(var t=0,n=e.length;t<n;t++)if(0<e[t].length)return e[0]=e[t],e[0].length=1,e.length=1,e.context=[e.context[t]],e;return e.length=0,e},It=function(e,t){var n,r=[],a=e.aiDisplay,i=e.aiDisplayMaster,o=t.search,s=t.order,l=t.page;if("ssp"==qe(e))return"removed"===o?[]:ut(0,i.length);if("current"==l)for(c=e._iDisplayStart,f=e.fnDisplayEnd();c<f;c++)r.push(a[c]);else if("current"==s||"applied"==s){if("none"==o)r=i.slice();else if("applied"==o)r=a.slice();else if("removed"==o){for(var u={},c=0,f=a.length;c<f;c++)u[a[c]]=null;r=B.map(i,function(e){return u.hasOwnProperty(e)?null:e})}}else if("index"==s||"original"==s)for(c=0,f=e.aoData.length;c<f;c++)"none"==o?r.push(c):(-1===(n=B.inArray(c,a))&&"removed"==o||0<=n&&"applied"==o)&&r.push(c);return r},jt=function(l,e,u){var c;return At("row",e,function(n){var e=nt(n),r=l.aoData;if(null!==e&&!u)return[e];if(c||(c=It(l,u)),null!==e&&-1!==B.inArray(e,c))return[e];if(null===n||n===$||""===n)return c;if("function"==typeof n)return B.map(c,function(e){var t=r[e];return n(e,t._aData,t.nTr)?e:null});if(n.nodeName){var t=n._DT_RowIndex,a=n._DT_CellIndex;if(t!==$)return r[t]&&r[t].nTr===n?[t]:[];if(a)return r[a.row]&&r[a.row].nTr===n.parentNode?[a.row]:[];var i=B(n).closest("*[data-dt-row]");return i.length?[i.data("dt-row")]:[]}if("string"==typeof n&&"#"===n.charAt(0)){var o=l.aIds[n.replace(/^#/,"")];if(o!==$)return[o.idx]}var s=ct(lt(l.aoData,c,"nTr"));return B(s).filter(n).map(function(){return this._DT_RowIndex}).toArray()},l,u)};Xe("rows()",function(t,n){t===$?t="":B.isPlainObject(t)&&(n=t,t=""),n=Nt(n);var e=this.iterator("table",function(e){return jt(e,t,n)},1);return e.selector.rows=t,e.selector.opts=n,e}),Xe("rows().nodes()",function(){return this.iterator("row",function(e,t){return e.aoData[t].nTr||$},1)}),Xe("rows().data()",function(){return this.iterator(!0,"rows",function(e,t){return lt(e.aoData,t,"_aData")},1)}),Ve("rows().cache()","row().cache()",function(r){return this.iterator("row",function(e,t){var n=e.aoData[t];return"search"===r?n._aFilterData:n._aSortData},1)}),Ve("rows().invalidate()","row().invalidate()",function(n){return this.iterator("row",function(e,t){a(e,t,n)})}),Ve("rows().indexes()","row().index()",function(){return this.iterator("row",function(e,t){return t},1)}),Ve("rows().ids()","row().id()",function(e){for(var t=[],n=this.context,r=0,a=n.length;r<a;r++)for(var i=0,o=this[r].length;i<o;i++){var s=n[r].rowIdFn(n[r].aoData[this[r][i]]._aData);t.push((!0===e?"#":"")+s)}return new ze(n,t)}),Ve("rows().remove()","row().remove()",function(){var d=this;return this.iterator("row",function(e,t,n){var r,a,i,o,s,l,u=e.aoData,c=u[t];for(u.splice(t,1),r=0,a=u.length;r<a;r++)if(l=(s=u[r]).anCells,null!==s.nTr&&(s.nTr._DT_RowIndex=r),null!==l)for(i=0,o=l.length;i<o;i++)l[i]._DT_CellIndex.row=r;h(e.aiDisplayMaster,t),h(e.aiDisplay,t),h(d[n],t,!1),0<e._iRecordsDisplay&&e._iRecordsDisplay--,Me(e);var f=e.rowIdFn(c._aData);f!==$&&delete e.aIds[f]}),this.iterator("table",function(e){for(var t=0,n=e.aoData.length;t<n;t++)e.aoData[t].idx=t}),this}),Xe("rows.add()",function(i){var e=this.iterator("table",function(e){var t,n,r,a=[];for(n=0,r=i.length;n<r;n++)(t=i[n]).nodeName&&"TR"===t.nodeName.toUpperCase()?a.push(O(e,t)[0]):a.push(M(e,t));return a},1),t=this.rows(-1);return t.pop(),B.merge(t,e),t}),Xe("row()",function(e,t){return kt(this.rows(e,t))}),Xe("row().data()",function(e){var t=this.context;if(e===$)return t.length&&this.length?t[0].aoData[this[0]]._aData:$;var n=t[0].aoData[this[0]];return n._aData=e,B.isArray(e)&&n.nTr.id&&y(t[0].rowId)(e,n.nTr.id),a(t[0],this[0],"data"),this}),Xe("row().node()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]].nTr||null}),Xe("row.add()",function(t){t instanceof B&&t.length&&(t=t[0]);var e=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?O(e,t)[0]:M(e,t)});return this.row(e[0])});var Lt=function(i,e,t,n){var o=[],s=function(e,t){if(B.isArray(e)||e instanceof B)for(var n=0,r=e.length;n<r;n++)s(e[n],t);else if(e.nodeName&&"tr"===e.nodeName.toLowerCase())o.push(e);else{var a=B("<tr><td/></tr>").addClass(t);B("td",a).addClass(t).html(e)[0].colSpan=F(i),o.push(a[0])}};s(t,n),e._details&&e._details.detach(),e._details=B(o),e._detailsShow&&e._details.insertAfter(e.nTr)},Et=function(e,t){var n=e.context;if(n.length){var r=n[0].aoData[t!==$?t:e[0]];r&&r._details&&(r._details.remove(),r._detailsShow=$,r._details=$)}},Rt=function(e,t){var n=e.context;if(n.length&&e.length){var r=n[0].aoData[e[0]];r._details&&((r._detailsShow=t)?r._details.insertAfter(r.nTr):r._details.detach(),Ft(n[0]))}},Ft=function(o){var a=new ze(o),e=".dt.DT_details",t="draw"+e,n="column-visibility"+e,r="destroy"+e,s=o.aoData;a.off(t+" "+n+" "+r),0<st(s,"_details").length&&(a.on(t,function(e,t){o===t&&a.rows({page:"current"}).eq(0).each(function(e){var t=s[e];t._detailsShow&&t._details.insertAfter(t.nTr)})}),a.on(n,function(e,t){if(o===t)for(var n,r=F(t),a=0,i=s.length;a<i;a++)(n=s[a])._details&&n._details.children("td[colspan]").attr("colspan",r)}),a.on(r,function(e,t){if(o===t)for(var n=0,r=s.length;n<r;n++)s[n]._details&&Et(a,n)}))},Pt=""+"row().child",Ht=Pt+"()";Xe(Ht,function(e,t){var n=this.context;return e===$?n.length&&this.length?n[0].aoData[this[0]]._details:$:(!0===e?this.child.show():!1===e?Et(this):n.length&&this.length&&Lt(n[0],n[0].aoData[this[0]],e,t),this)}),Xe([Pt+".show()",Ht+".show()"],function(){return Rt(this,!0),this}),Xe([Pt+".hide()",Ht+".hide()"],function(){return Rt(this,!1),this}),Xe([Pt+".remove()",Ht+".remove()"],function(){return Et(this),this}),Xe(Pt+".isShown()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]]._detailsShow||!1});var Mt=/^([^:]+):(name|visIdx|visible)$/,Ot=function(e,t,n,r,a){for(var i=[],o=0,s=a.length;o<s;o++)i.push(g(e,a[o],t));return i},qt=function(l,e,u){var c=l.aoColumns,f=st(c,"sName"),d=st(c,"nTh");return At("column",e,function(n){var e=nt(n);if(""===n)return ut(c.length);if(null!==e)return[0<=e?e:c.length+e];if("function"==typeof n){var r=It(l,u);return B.map(c,function(e,t){return n(t,Ot(l,t,0,0,r),d[t])?t:null})}var a="string"==typeof n?n.match(Mt):"";if(a)switch(a[2]){case"visIdx":case"visible":var t=parseInt(a[1],10);if(t<0){var i=B.map(c,function(e,t){return e.bVisible?t:null});return[i[i.length+t]]}return[z(l,t)];case"name":return B.map(f,function(e,t){return e===a[1]?t:null});default:return[]}if(n.nodeName&&n._DT_CellIndex)return[n._DT_CellIndex.column];var o=B(d).filter(n).map(function(){return B.inArray(this,d)}).toArray();if(o.length||!n.nodeName)return o;var s=B(n).closest("*[data-dt-column]");return s.length?[s.data("dt-column")]:[]},l,u)},Wt=function(e,t,n){var r,a,i,o,s=e.aoColumns,l=s[t],u=e.aoData;if(n===$)return l.bVisible;if(l.bVisible!==n){if(n){var c=B.inArray(!0,st(s,"bVisible"),t+1);for(a=0,i=u.length;a<i;a++)o=u[a].nTr,r=u[a].anCells,o&&o.insertBefore(r[t],r[c]||null)}else B(st(e.aoData,"anCells",t)).detach();l.bVisible=n}};Xe("columns()",function(t,n){t===$?t="":B.isPlainObject(t)&&(n=t,t=""),n=Nt(n);var e=this.iterator("table",function(e){return qt(e,t,n)},1);return e.selector.cols=t,e.selector.opts=n,e}),Ve("columns().header()","column().header()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].nTh},1)}),Ve("columns().footer()","column().footer()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].nTf},1)}),Ve("columns().data()","column().data()",function(){return this.iterator("column-rows",Ot,1)}),Ve("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].mData},1)}),Ve("columns().cache()","column().cache()",function(i){return this.iterator("column-rows",function(e,t,n,r,a){return lt(e.aoData,a,"search"===i?"_aFilterData":"_aSortData",t)},1)}),Ve("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(e,t,n,r,a){return lt(e.aoData,a,"anCells",t)},1)}),Ve("columns().visible()","column().visible()",function(n,r){var t=this,e=this.iterator("column",function(e,t){if(n===$)return e.aoColumns[t].bVisible;Wt(e,t,n)});return n!==$&&this.iterator("table",function(e){v(e,e.aoHeader),v(e,e.aoFooter),e.aiDisplay.length||B(e.nTBody).find("td[colspan]").attr("colspan",F(e)),ke(e),t.iterator("column",function(e,t){He(e,null,"column-visibility",[e,t,n,r])}),(r===$||r)&&t.columns.adjust()}),e}),Ve("columns().indexes()","column().index()",function(n){return this.iterator("column",function(e,t){return"visible"===n?c(e,t):t},1)}),Xe("columns.adjust()",function(){return this.iterator("table",function(e){U(e)},1)}),Xe("column.index()",function(e,t){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===e||"toData"===e)return z(n,t);if("fromData"===e||"toVisible"===e)return c(n,t)}}),Xe("column()",function(e,t){return kt(this.columns(e,t))});var Bt=function(r,e,t){var a,i,o,s,l,u,c,f=r.aoData,d=It(r,t),n=ct(lt(f,d,"anCells")),h=B([].concat.apply([],n)),p=r.aoColumns.length;return At("cell",e,function(e){var t="function"==typeof e;if(null===e||e===$||t){for(i=[],o=0,s=d.length;o<s;o++)for(a=d[o],l=0;l<p;l++)u={row:a,column:l},t?(c=f[a],e(u,g(r,a,l),c.anCells?c.anCells[l]:null)&&i.push(u)):i.push(u);return i}if(B.isPlainObject(e))return e.column!==$&&e.row!==$&&-1!==B.inArray(e.row,d)?[e]:[];var n=h.filter(e).map(function(e,t){return{row:t._DT_CellIndex.row,column:t._DT_CellIndex.column}}).toArray();return n.length||!e.nodeName?n:(c=B(e).closest("*[data-dt-row]")).length?[{row:c.data("dt-row"),column:c.data("dt-column")}]:[]},r,t)};Xe("cells()",function(t,e,n){if(B.isPlainObject(t)&&(t.row===$?(n=t,t=null):(n=e,e=null)),B.isPlainObject(e)&&(n=e,e=null),null===e||e===$)return this.iterator("table",function(e){return Bt(e,t,Nt(n))});var r,a,i,o,s=n?{page:n.page,order:n.order,search:n.search}:{},l=this.columns(e,s),u=this.rows(t,s),c=this.iterator("table",function(e,t){var n=[];for(r=0,a=u[t].length;r<a;r++)for(i=0,o=l[t].length;i<o;i++)n.push({row:u[t][r],column:l[t][i]});return n},1),f=n&&n.selected?this.cells(c,n):c;return B.extend(f.selector,{cols:e,rows:t,opts:n}),f}),Ve("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(e,t,n){var r=e.aoData[t];return r&&r.anCells?r.anCells[n]:$},1)}),Xe("cells().data()",function(){return this.iterator("cell",function(e,t,n){return g(e,t,n)},1)}),Ve("cells().cache()","cell().cache()",function(r){return r="search"===r?"_aFilterData":"_aSortData",this.iterator("cell",function(e,t,n){return e.aoData[t][r][n]},1)}),Ve("cells().render()","cell().render()",function(r){return this.iterator("cell",function(e,t,n){return g(e,t,n,r)},1)}),Ve("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(e,t,n){return{row:t,column:n,columnVisible:c(e,n)}},1)}),Ve("cells().invalidate()","cell().invalidate()",function(r){return this.iterator("cell",function(e,t,n){a(e,t,r,n)})}),Xe("cell()",function(e,t,n){return kt(this.cells(e,t,n))}),Xe("cell().data()",function(e){var t=this.context,n=this[0];return e===$?t.length&&n.length?g(t[0],n[0].row,n[0].column):$:(r(t[0],n[0].row,n[0].column,e),a(t[0],n[0].row,"data",n[0].column),this)}),Xe("order()",function(t,e){var n=this.context;return t===$?0!==n.length?n[0].aaSorting:$:("number"==typeof t?t=[[t,e]]:t.length&&!B.isArray(t[0])&&(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),Xe("order.listener()",function(t,n,r){return this.iterator("table",function(e){_e(e,t,n,r)})}),Xe("order.fixed()",function(t){if(t)return this.iterator("table",function(e){e.aaSortingFixed=B.extend(!0,{},t)});var e=this.context,n=e.length?e[0].aaSortingFixed:$;return B.isArray(n)?{pre:n}:n}),Xe(["columns().order()","column().order()"],function(r){var a=this;return this.iterator("table",function(e,t){var n=[];B.each(a[t],function(e,t){n.push([t,r])}),e.aaSorting=n})}),Xe("search()",function(t,n,r,a){var e=this.context;return t===$?0!==e.length?e[0].oPreviousSearch.sSearch:$:this.iterator("table",function(e){e.oFeatures.bFilter&&J(e,B.extend({},e.oPreviousSearch,{sSearch:t+"",bRegex:null!==n&&n,bSmart:null===r||r,bCaseInsensitive:null===a||a}),1)})}),Ve("columns().search()","column().search()",function(r,a,i,o){return this.iterator("column",function(e,t){var n=e.aoPreSearchCols;if(r===$)return n[t].sSearch;e.oFeatures.bFilter&&(B.extend(n[t],{sSearch:r+"",bRegex:null!==a&&a,bSmart:null===i||i,bCaseInsensitive:null===o||o}),J(e,e.oPreviousSearch,1))})}),Xe("state()",function(){return this.context.length?this.context[0].oSavedState:null}),Xe("state.clear()",function(){return this.iterator("table",function(e){e.fnStateSaveCallback.call(e.oInstance,e,{})})}),Xe("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),Xe("state.save()",function(){return this.iterator("table",function(e){ke(e)})}),Ge.versionCheck=Ge.fnVersionCheck=function(e){for(var t,n,r=Ge.version.split("."),a=e.split("."),i=0,o=a.length;i<o;i++)if((t=parseInt(r[i],10)||0)!==(n=parseInt(a[i],10)||0))return n<t;return!0},Ge.isDataTable=Ge.fnIsDataTable=function(e){var a=B(e).get(0),i=!1;return e instanceof Ge.Api||(B.each(Ge.settings,function(e,t){var n=t.nScrollHead?B("table",t.nScrollHead)[0]:null,r=t.nScrollFoot?B("table",t.nScrollFoot)[0]:null;t.nTable!==a&&n!==a&&r!==a||(i=!0)}),i)},Ge.tables=Ge.fnTables=function(t){var e=!1;B.isPlainObject(t)&&(e=t.api,t=t.visible);var n=B.map(Ge.settings,function(e){if(!t||t&&B(e.nTable).is(":visible"))return e.nTable});return e?new ze(n):n},Ge.camelToHungarian=A,Xe("$()",function(e,t){var n=this.rows(t).nodes(),r=B(n);return B([].concat(r.filter(e).toArray(),r.find(e).toArray()))}),B.each(["on","one","off"],function(e,n){Xe(n+"()",function(){var e=Array.prototype.slice.call(arguments);e[0]=B.map(e[0].split(/\s/),function(e){return e.match(/\.dt\b/)?e:e+".dt"}).join(" ");var t=B(this.tables().nodes());return t[n].apply(t,e),this})}),Xe("clear()",function(){return this.iterator("table",function(e){u(e)})}),Xe("settings()",function(){return new ze(this.context,this.context)}),Xe("init()",function(){var e=this.context;return e.length?e[0].oInit:null}),Xe("data()",function(){return this.iterator("table",function(e){return st(e.aoData,"_aData")}).flatten()}),Xe("destroy()",function(p){return p=p||!1,this.iterator("table",function(t){var n,e=t.nTableWrapper.parentNode,r=t.oClasses,a=t.nTable,i=t.nTBody,o=t.nTHead,s=t.nTFoot,l=B(a),u=B(i),c=B(t.nTableWrapper),f=B.map(t.aoData,function(e){return e.nTr});t.bDestroying=!0,He(t,"aoDestroyCallback","destroy",[t]),p||new ze(t).columns().visible(!0),c.off(".DT").find(":not(tbody *)").off(".DT"),B(N).off(".DT-"+t.sInstance),a!=o.parentNode&&(l.children("thead").detach(),l.append(o)),s&&a!=s.parentNode&&(l.children("tfoot").detach(),l.append(s)),t.aaSorting=[],t.aaSortingFixed=[],Ae(t),B(f).removeClass(t.asStripeClasses.join(" ")),B("th, td",o).removeClass(r.sSortable+" "+r.sSortableAsc+" "+r.sSortableDesc+" "+r.sSortableNone),u.children().detach(),u.append(f);var d=p?"remove":"detach";l[d](),c[d](),!p&&e&&(e.insertBefore(a,t.nTableReinsertBefore),l.css("width",t.sDestroyWidth).removeClass(r.sTable),(n=t.asDestroyStripes.length)&&u.children().each(function(e){B(this).addClass(t.asDestroyStripes[e%n])}));var h=B.inArray(t,Ge.settings);-1!==h&&Ge.settings.splice(h,1)})}),B.each(["column","row","cell"],function(e,l){Xe(l+"s().every()",function(i){var o=this.selector.opts,s=this;return this.iterator(l,function(e,t,n,r,a){i.call(s[l](t,"cell"===l?n:o,"cell"===l?o:$),t,n,r,a)})})}),Xe("i18n()",function(e,t,n){var r=this.context[0],a=q(e)(r.oLanguage);return a===$&&(a=t),n!==$&&B.isPlainObject(a)&&(a=a[n]!==$?a[n]:a._),a.replace("%d",n)}),Ge.version="1.10.20",Ge.settings=[],Ge.models={},Ge.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},Ge.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},Ge.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},Ge.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(e){try{return JSON.parse((-1===e.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+e.sInstance+"_"+location.pathname))}catch(t){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(e,t){try{(-1===e.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+e.sInstance+"_"+location.pathname,JSON.stringify(t))}catch(n){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:B.extend({},Ge.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},o(Ge.defaults),Ge.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},o(Ge.defaults.column),Ge.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:$,oAjaxData:$,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==qe(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==qe(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var e=this._iDisplayLength,t=this._iDisplayStart,n=t+e,r=this.aiDisplay.length,a=this.oFeatures,i=a.bPaginate;return a.bServerSide?!1===i||-1===e?t+r:Math.min(t+e,this._iRecordsDisplay):!i||r<n||-1===e?r:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},Ge.ext=Ue={buttons:{},classes:{},build:"dt/dt-1.10.20",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:Ge.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:Ge.version},B.extend(Ue,{afnFiltering:Ue.search,aTypes:Ue.type.detect,ofnSearch:Ue.type.search,oSort:Ue.type.order,afnSortData:Ue.order,aoFeatures:Ue.feature,oApi:Ue.internal,oStdClasses:Ue.classes,oPagination:Ue.pager}),B.extend(Ge.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""});var $t=Ge.ext.pager;B.extend($t,{simple:function(){return["previous","next"]},full:function(){return["first","previous","next","last"]},numbers:function(e,t){return[We(e,t)]},simple_numbers:function(e,t){return["previous",We(e,t),"next"]},full_numbers:function(e,t){return["first","previous",We(e,t),"next","last"]},first_last_numbers:function(e,t){return["first",We(e,t),"last"]},_numbers:We,numbers_length:7}),B.extend(!0,Ge.ext.renderer,{pageButton:{_:function(u,e,c,t,f,d){var h,p,n,g=u.oClasses,m=u.oLanguage.oPaginate,v=u.oLanguage.oAria.paginate||{},y=0,b=function(e,t){var n,r,a,i,o=g.sPageButtonDisabled,s=function(e){fe(u,e.data.action,!0)};for(n=0,r=t.length;n<r;n++)if(a=t[n],B.isArray(a)){var l=B("<"+(a.DT_el||"div")+"/>").appendTo(e);b(l,a)}else{switch(h=null,p=a,i=u.iTabIndex,a){case"ellipsis":e.append('<span class="ellipsis">&#x2026;</span>');break;case"first":h=m.sFirst,0===f&&(i=-1,p+=" "+o);break;case"previous":h=m.sPrevious,0===f&&(i=-1,p+=" "+o);break;case"next":h=m.sNext,f===d-1&&(i=-1,p+=" "+o);break;case"last":h=m.sLast,f===d-1&&(i=-1,p+=" "+o);break;default:h=a+1,p=f===a?g.sPageButtonActive:""}null!==h&&(Fe(B("<a>",{"class":g.sPageButton+" "+p,"aria-controls":u.sTableId,"aria-label":v[a],"data-dt-idx":y,tabindex:i,id:0===c&&"string"==typeof a?u.sTableId+"_"+a:null}).html(h).appendTo(e),{action:a},s),y++)}};try{n=B(e).find(w.activeElement).data("dt-idx")}catch(r){}b(B(e).empty(),t),n!==$&&B(e).find("[data-dt-idx="+n+"]").focus()}}}),B.extend(Ge.ext.type.detect,[function(e,t){var n=t.oLanguage.sDecimal;return at(e,n)?"num"+n:null},function(e){if(e&&!(e instanceof Date)&&!Ke.test(e))return null;var t=Date.parse(e);return null!==t&&!isNaN(t)||tt(e)?"date":null},function(e,t){var n=t.oLanguage.sDecimal;return at(e,n,!0)?"num-fmt"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return ot(e,n)?"html-num"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return ot(e,n,!0)?"html-num-fmt"+n:null},function(e){return tt(e)||"string"==typeof e&&-1!==e.indexOf("<")?"html":null}]),B.extend(Ge.ext.type.search,{html:function(e){return tt(e)?e:"string"==typeof e?e.replace(Ye," ").replace(Ze,""):""},string:function(e){return tt(e)?e:"string"==typeof e?e.replace(Ye," "):e}});var Ut=function(e,t,n,r){return 0===e||e&&"-"!==e?(t&&(e=rt(e,t)),e.replace&&(n&&(e=e.replace(n,"")),r&&(e=e.replace(r,""))),1*e):-Infinity};B.extend(Ue.type.order,{"date-pre":function(e){var t=Date.parse(e);return isNaN(t)?-Infinity:t},"html-pre":function(e){return tt(e)?"":e.replace?e.replace(/<.*?>/g,"").toLowerCase():e+""},"string-pre":function(e){return tt(e)?"":"string"==typeof e?e.toLowerCase():e.toString?e.toString():""},"string-asc":function(e,t){return e<t?-1:t<e?1:0},"string-desc":function(e,t){return e<t?1:t<e?-1:0}}),Be(""),B.extend(!0,Ge.ext.renderer,{header:{_:function(i,o,s,l){B(i.nTable).on("order.dt.DT",function(e,t,n,r){if(i===t){var a=s.idx;o.removeClass(s.sSortingClass+" "+l.sSortAsc+" "+l.sSortDesc).addClass("asc"==r[a]?l.sSortAsc:"desc"==r[a]?l.sSortDesc:s.sSortingClass)}})},jqueryui:function(i,o,s,l){B("<div/>").addClass(l.sSortJUIWrapper).append(o.contents()).append(B("<span/>").addClass(l.sSortIcon+" "+s.sSortingClassJUI)).appendTo(o),B(i.nTable).on("order.dt.DT",function(e,t,n,r){if(i===t){var a=s.idx;o.removeClass(l.sSortAsc+" "+l.sSortDesc).addClass("asc"==r[a]?l.sSortAsc:"desc"==r[a]?l.sSortDesc:s.sSortingClass),o.find("span."+l.sSortIcon).removeClass(l.sSortJUIAsc+" "+l.sSortJUIDesc+" "+l.sSortJUI+" "+l.sSortJUIAscAllowed+" "+l.sSortJUIDescAllowed).addClass("asc"==r[a]?l.sSortJUIAsc:"desc"==r[a]?l.sSortJUIDesc:s.sSortingClassJUI)}})}}});var zt=function(e){return"string"==typeof e?e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):e};return Ge.render={number:function(i,o,s,l,u){return{display:function(e){if("number"!=typeof e&&"string"!=typeof e)return e;var t=e<0?"-":"",n=parseFloat(e);if(isNaN(n))return zt(e);n=n.toFixed(s),e=Math.abs(n);var r=parseInt(e,10),a=s?o+(e-r).toFixed(s).substring(2):"";return t+(l||"")+r.toString().replace(/\B(?=(\d{3})+(?!\d))/g,i)+a+(u||"")}}},text:function(){return{display:zt,filter:zt}}},B.extend(Ge.ext.internal,{_fnExternApiFunc:$e,_fnBuildAjax:C,_fnAjaxUpdate:_,_fnAjaxParameters:i,_fnAjaxUpdateDraw:s,_fnAjaxDataSrc:V,_fnAddColumn:E,_fnColumnOptions:R,_fnAdjustColumnSizing:U,_fnVisibleToColumnIndex:z,_fnColumnIndexToVisible:c,_fnVisbleColumns:F,_fnGetColumns:P,_fnColumnTypes:l,_fnApplyColumnDefs:H,_fnHungarianMap:o,_fnCamelToHungarian:A,_fnLanguageCompat:k,_fnBrowserDetect:L,_fnAddData:M,_fnAddTr:O,_fnNodeToDataIndex:e,_fnNodeToColumnIndex:t,_fnGetCellData:g,_fnSetCellData:r,_fnSplitObjNotation:m,_fnGetObjectDataFn:q,_fnSetObjectDataFn:y,_fnGetDataMaster:x,_fnClearTable:u,_fnDeleteIndex:h,_fnInvalidate:a,_fnGetRowElements:f,_fnCreateTr:S,_fnBuildHead:d,_fnDrawHead:v,_fnDraw:b,_fnReDraw:D,_fnAddOptionsHtml:T,_fnDetectHeader:W,_fnGetUniqueThs:X,_fnFeatureHtmlFilter:G,_fnFilterComplete:J,_fnFilterCustom:Y,_fnFilterColumn:Z,_fnFilter:K,_fnFilterCreateSearch:Q,_fnEscapeRegex:vt,_fnFilterData:ee,_fnFeatureHtmlInfo:re,_fnUpdateInfo:ae,_fnInfoMacros:ie,_fnInitialise:oe,_fnInitComplete:se,_fnLengthChange:le,_fnFeatureHtmlLength:ue,_fnFeatureHtmlPaginate:ce,_fnPageChange:fe,_fnFeatureHtmlProcessing:de,_fnProcessingDisplay:he,_fnFeatureHtmlTable:pe,_fnScrollDraw:ge,_fnApplyToChildren:me,_fnCalculateColumnWidths:ve,_fnThrottle:xt,_fnConvertToWidth:ye,_fnGetWidestNode:be,_fnGetMaxLenString:we,_fnStringToCss:xe,_fnSortFlatten:Se,_fnSort:De,_fnSortAria:Te,_fnSortListener:Ce,_fnSortAttachListener:_e,_fnSortingClasses:Ae,_fnSortData:Ne,_fnSaveState:ke,_fnLoadState:Ie,_fnSettingsFromNode:je,_fnLog:Le,_fnMap:Ee,_fnBindAction:Fe,_fnCallbackReg:Pe,_fnCallbackFire:He,_fnLengthOverflow:Me,_fnRenderer:Oe,_fnDataSource:qe,_fnRowAttributes:p,_fnExtend:Re,_fnCalculateEnd:function(){}}),((B.fn.dataTable=Ge).$=B).fn.dataTableSettings=Ge.settings,B.fn.dataTableExt=Ge.ext,B.fn.DataTable=function(e){return B(this).dataTable(e).api()},B.each(Ge,function(e,t){B.fn.DataTable[e]=t}),B.fn.dataTable}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&"object"==typeof module.exports?e(require("jquery")):e(jQuery)}(function(d){function n(){var e=o.settings;if(e.autoDispose&&!d.contains(document.documentElement,this))return d(this).timeago("dispose"),this;var t=r(this);return isNaN(t.datetime)||(0===e.cutoff||Math.abs(i(t.datetime))<e.cutoff?d(this).text(a(t.datetime)):0<d(this).attr("title").length&&d(this).text(d(this).attr("title"))),this}function r(e){if(!(e=d(e)).data("timeago")){e.data("timeago",{datetime:o.datetime(e)});var t=d.trim(e.text())
;o.settings.localeTitle?e.attr("title",e.data("timeago").datetime.toLocaleString()):!(0<t.length)||o.isTime(e)&&e.attr("title")||e.attr("title",t)}return e.data("timeago")}function a(e){return o.inWords(i(e))}function i(e){return(new Date).getTime()-e.getTime()}d.timeago=function(e){return e instanceof Date?a(e):a("string"==typeof e?d.timeago.parse(e):"number"==typeof e?new Date(e):d.timeago.datetime(e))};var o=d.timeago;d.extend(d.timeago,{settings:{refreshMillis:6e4,allowPast:!0,allowFuture:!1,localeTitle:!1,cutoff:0,autoDispose:!0,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",inPast:"any moment now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"about %d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",wordSeparator:" ",numbers:[]}},inWords:function(a){function e(e,t){var n=d.isFunction(e)?e(t,a):e,r=i.numbers&&i.numbers[t]||t;return n.replace(/%d/i,r)}if(!this.settings.allowPast&&!this.settings.allowFuture)throw"timeago allowPast and allowFuture settings can not both be set to false.";var i=this.settings.strings,t=i.prefixAgo,n=i.suffixAgo;if(this.settings.allowFuture&&a<0&&(t=i.prefixFromNow,n=i.suffixFromNow),!this.settings.allowPast&&0<=a)return this.settings.strings.inPast;var r=Math.abs(a)/1e3,o=r/60,s=o/60,l=s/24,u=l/365,c=r<45&&e(i.seconds,Math.round(r))||r<90&&e(i.minute,1)||o<45&&e(i.minutes,Math.round(o))||o<90&&e(i.hour,1)||s<24&&e(i.hours,Math.round(s))||s<42&&e(i.day,1)||l<30&&e(i.days,Math.round(l))||l<45&&e(i.month,1)||l<365&&e(i.months,Math.round(l/30))||u<1.5&&e(i.year,1)||e(i.years,Math.round(u)),f=i.wordSeparator||"";return i.wordSeparator===undefined&&(f=" "),d.trim([t,c,n].join(f))},parse:function(e){var t=d.trim(e);return t=(t=(t=(t=(t=t.replace(/\.\d+/,"")).replace(/-/,"/").replace(/-/,"/")).replace(/T/," ").replace(/Z/," UTC")).replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2")).replace(/([\+\-]\d\d)$/," $100"),new Date(t)},datetime:function(e){var t=o.isTime(e)?d(e).attr("datetime"):d(e).attr("title");return o.parse(t)},isTime:function(e){return"time"===d(e).get(0).tagName.toLowerCase()}});var s={init:function(){s.dispose.call(this);var e=d.proxy(n,this);e();var t=o.settings;0<t.refreshMillis&&(this._timeagoInterval=setInterval(e,t.refreshMillis))},update:function(e){var t=e instanceof Date?e:o.parse(e);d(this).data("timeago",{datetime:t}),o.settings.localeTitle&&d(this).attr("title",t.toLocaleString()),n.apply(this)},updateFromDOM:function(){d(this).data("timeago",{datetime:o.parse(o.isTime(this)?d(this).attr("datetime"):d(this).attr("title"))}),n.apply(this)},dispose:function(){this._timeagoInterval&&(window.clearInterval(this._timeagoInterval),this._timeagoInterval=null)}};d.fn.timeago=function(e,t){var n=e?s[e]:s.init;if(!n)throw new Error("Unknown function name '"+e+"' for timeago");return this.each(function(){n.call(this,t)}),this},document.createElement("abbr"),document.createElement("time")}),$(document).ready(function(){var t,n;$(".file_list").dataTable({order:[[1,"asc"]],paging:!1}),$("a.src_link").click(function(){var e=$($(this).attr("href"));e.hasClass("highlighted")||(e.find("pre code").each(function(e,t){hljs.highlightBlock(t,"  ")}),e.addClass("highlighted"))}),$("a.src_link").colorbox({transition:"none",inline:!0,opacity:1,width:"95%",height:"95%",onLoad:function(){t=n||window.location.hash.substring(1),n=this.href.split("#")[1],window.location.hash=n,$(".file_list_container").hide()},onCleanup:function(){t&&t!=n?($('a[href="#'+t+'"]').click(),n=t):($(".group_tabs a:first").click(),t=n,n="#_AllFiles"),window.location.hash=n;var e=$(".group_tabs li.active a").attr("class");$("#"+e+".file_list_container").show()}}),window.onpopstate=function(){"#_"==window.location.hash.substring(0,2)?($.colorbox.close(),n=window.location.hash.substring(1)):$("#colorbox").is(":hidden")&&$('a.src_link[href="'+window.location.hash+'"]').colorbox({open:!0})},$(".source_files").hide(),$(".file_list_container").hide(),$(".file_list_container h2").each(function(){var e=$(this).parent().attr("id"),t=$(this).find(".group_name").first().html(),n=$(this).find(".covered_percent").first().html();$(".group_tabs").append('<li><a href="#'+e+'">'+t+" ("+n+")</a></li>")}),$(".group_tabs a").each(function(){$(this).addClass($(this).attr("href").replace("#",""))}),$(".group_tabs").on("focus","a",function(){$(this).blur()});var e=$('link[rel="shortcut icon"]').attr("href");if($(".group_tabs").on("click","a",function(){return $(this).parent().hasClass("active")||($(".group_tabs a").parent().removeClass("active"),$(this).parent().addClass("active"),$(".file_list_container").hide(),$(".file_list_container"+$(this).attr("href")).show(),window.location.href=window.location.href.split("#")[0]+$(this).attr("href").replace("#","#_"),$('link[rel="shortcut icon"]').remove(),$("head").append('<link rel="shortcut icon" type="image/png" href="'+e+'" />')),!1}),window.location.hash){var r=window.location.hash.substring(1);40==r.length?$('a.src_link[href="#'+r+'"]').click():$(".group_tabs a."+r.replace("_","")).click()}else $(".group_tabs a:first").click();$("abbr.timeago").timeago(),$("#loading").fadeOut(),$("#wrapper").show(),$(".dataTables_filter input").focus()});

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/coverage/assets/0.13.2/application.js ===
!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(le,e){"use strict";function g(e,t,n){var r,a,i=(n=n||xe).createElement("script");if(i.text=e,t)for(r in we)(a=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,a);n.head.appendChild(i).parentNode.removeChild(i)}function m(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?se[he.call(e)]||"object":typeof e}function s(e){var t=!!e&&"length"in e&&e.length,n=m(e);return!ye(e)&&!be(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}function ue(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function t(e,t){return t?"\0"===e?"\ufffd":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e}function n(e,n,r){return ye(n)?De.grep(e,function(e,t){return!!n.call(e,t,e)!==r}):n.nodeType?De.grep(e,function(e){return e===n!==r}):"string"!=typeof n?De.grep(e,function(e){return-1<de.call(n,e)!==r}):De.filter(n,e,r)}function r(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function c(e){var n={};return De.each(e.match(We)||[],function(e,t){n[t]=!0}),n}function f(e){return e}function d(e){throw e}function l(e,t,n,r){var a;try{e&&ye(a=e.promise)?a.call(e).done(t).fail(n):e&&ye(a=e.then)?a.call(e,t,n):t.apply(undefined,[e].slice(r))}catch(e){n.apply(undefined,[e])}}function a(){xe.removeEventListener("DOMContentLoaded",a),le.removeEventListener("load",a),De.ready()}function i(e,t){return t.toUpperCase()}function h(e){return e.replace(ze,"ms-").replace(Xe,i)}function o(){this.expando=De.expando+o.uid++}function u(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Ye.test(e)?JSON.parse(e):e)}function p(e,t,n){var r;if(n===undefined&&1===e.nodeType)if(r="data-"+t.replace(Ze,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=u(n)}catch(a){}Je.set(e,t,n)}else n=undefined;return n}function v(e,t,n,r){var a,i,o=20,s=r?function(){return r.cur()}:function(){return De.css(e,t,"")},l=s(),u=n&&n[3]||(De.cssNumber[t]?"":"px"),c=e.nodeType&&(De.cssNumber[t]||"px"!==u&&+l)&&Qe.exec(De.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;o--;)De.style(e,t,c+u),(1-i)*(1-(i=s()/l||.5))<=0&&(o=0),c/=i;c*=2,De.style(e,t,c+u),n=n||[]}return n&&(c=+c||+l||0,a=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=c,r.end=a)),a}function y(e){var t,n=e.ownerDocument,r=e.nodeName,a=it[r];return a||(t=n.body.appendChild(n.createElement(r)),a=De.css(t,"display"),t.parentNode.removeChild(t),"none"===a&&(a="block"),it[r]=a)}function b(e,t){for(var n,r,a=[],i=0,o=e.length;i<o;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(a[i]=Ge.get(r,"display")||null,a[i]||(r.style.display="")),""===r.style.display&&at(r)&&(a[i]=y(r))):"none"!==n&&(a[i]="none",Ge.set(r,"display",n)));for(i=0;i<o;i++)null!=a[i]&&(e[i].style.display=a[i]);return e}function x(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],t===undefined||t&&ue(e,t)?De.merge([e],n):n}function w(e,t){for(var n=0,r=e.length;n<r;n++)Ge.set(e[n],"globalEval",!t||Ge.get(t[n],"globalEval"))}function S(e,t,n,r,a){for(var i,o,s,l,u,c,f=t.createDocumentFragment(),d=[],h=0,p=e.length;h<p;h++)if((i=e[h])||0===i)if("object"===m(i))De.merge(d,i.nodeType?[i]:i);else if(dt.test(i)){for(o=o||f.appendChild(t.createElement("div")),s=(ut.exec(i)||["",""])[1].toLowerCase(),l=ft[s]||ft._default,o.innerHTML=l[1]+De.htmlPrefilter(i)+l[2],c=l[0];c--;)o=o.lastChild;De.merge(d,o.childNodes),(o=f.firstChild).textContent=""}else d.push(t.createTextNode(i));for(f.textContent="",h=0;i=d[h++];)if(r&&-1<De.inArray(i,r))a&&a.push(i);else if(u=nt(i),o=x(f.appendChild(i),"script"),u&&w(o),n)for(c=0;i=o[c++];)ct.test(i.type||"")&&n.push(i);return f}function T(){return!0}function D(){return!1}function C(e,t,n,r,a,i){var o,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=undefined),t)C(e,s,n,r,t[s],i);return e}if(null==r&&null==a?(a=n,r=n=undefined):null==a&&("string"==typeof n?(a=r,r=undefined):(a=r,r=n,n=undefined)),!1===a)a=D;else if(!a)return e;return 1===i&&(o=a,(a=function(e){return De().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=De.guid++)),e.each(function(){De.event.add(this,t,a,r,n)})}function _(e,r,t){t?(Ge.set(e,r,!1),De.event.add(e,r,{namespace:!1,handler:function(e){var t,n=Ge.get(this,r);if(1&e.isTrigger&&this[r]){if(n)(De.event.special[r]||{}).delegateType&&e.stopPropagation();else if(n=fe.call(arguments),Ge.set(this,r,n),this[r](),t=Ge.get(this,r),Ge.set(this,r,!1),n!==t)return e.stopImmediatePropagation(),e.preventDefault(),t}else n&&(Ge.set(this,r,De.event.trigger(n[0],n.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=T)}})):Ge.get(e,r)===undefined&&De.event.add(e,r,T)}function A(e,t){return ue(e,"table")&&ue(11!==t.nodeType?t:t.firstChild,"tr")&&De(e).children("tbody")[0]||e}function k(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function N(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function j(e,t){var n,r,a,i,o,s;if(1===t.nodeType){if(Ge.hasData(e)&&(s=Ge.get(e).events))for(a in Ge.remove(t,"handle events"),s)for(n=0,r=s[a].length;n<r;n++)De.event.add(t,a,s[a][n]);Je.hasData(e)&&(i=Je.access(e),o=De.extend({},i),Je.set(t,o))}}function I(e,t){var n=t.nodeName.toLowerCase();"input"===n&&lt.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function L(n,r,a,i){r=ie(r);var e,t,o,s,l,u,c=0,f=n.length,d=f-1,h=r[0],p=ye(h);if(p||1<f&&"string"==typeof h&&!ve.checkClone&&gt.test(h))return n.each(function(e){var t=n.eq(e);p&&(r[0]=h.call(this,e,t.html())),L(t,r,a,i)});if(f&&(t=(e=S(r,n[0].ownerDocument,!1,n,i)).firstChild,1===e.childNodes.length&&(e=t),t||i)){for(s=(o=De.map(x(e,"script"),k)).length;c<f;c++)l=e,c!==d&&(l=De.clone(l,!0,!0),s&&De.merge(o,x(l,"script"))),a.call(n[c],l,c);if(s)for(u=o[o.length-1].ownerDocument,De.map(o,N),c=0;c<s;c++)l=o[c],ct.test(l.type||"")&&!Ge.access(l,"globalEval")&&De.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?De._evalUrl&&!l.noModule&&De._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},u):g(l.textContent.replace(mt,""),l,u))}return n}function E(e,t,n){for(var r,a=t?De.filter(t,e):e,i=0;null!=(r=a[i]);i++)n||1!==r.nodeType||De.cleanData(x(r)),r.parentNode&&(n&&nt(r)&&w(x(r,"script")),r.parentNode.removeChild(r));return e}function R(e,t,n){var r,a,i,o,s=yt.test(t),l=e.style;return(n=n||bt(e))&&(o=n.getPropertyValue(t)||n[t],s&&o&&(o=o.replace(Ne,"$1")||undefined),""!==o||nt(e)||(o=De.style(e,t)),!ve.pixelBoxStyles()&&vt.test(o)&&wt.test(t)&&(r=l.width,a=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=o,o=n.width,l.width=r,l.minWidth=a,l.maxWidth=i)),o!==undefined?o+"":o}function F(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}function P(e){for(var t=e[0].toUpperCase()+e.slice(1),n=St.length;n--;)if((e=St[n]+t)in Tt)return e}function H(e){var t=De.cssProps[e]||Dt[e];return t||(e in Tt?e:Dt[e]=P(e)||e)}function M(e,t,n){var r=Qe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function O(e,t,n,r,a,i){var o="width"===t?1:0,s=0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(u+=De.css(e,n+et[o],!0,a)),r?("content"===n&&(l-=De.css(e,"padding"+et[o],!0,a)),"margin"!==n&&(l-=De.css(e,"border"+et[o]+"Width",!0,a))):(l+=De.css(e,"padding"+et[o],!0,a),"padding"!==n?l+=De.css(e,"border"+et[o]+"Width",!0,a):s+=De.css(e,"border"+et[o]+"Width",!0,a));return!r&&0<=i&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-s-.5))||0),l+u}function q(e,t,n){var r=bt(e),a=(!ve.boxSizingReliable()||n)&&"border-box"===De.css(e,"boxSizing",!1,r),i=a,o=R(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(vt.test(o)){if(!n)return o;o="auto"}return(!ve.boxSizingReliable()&&a||!ve.reliableTrDimensions()&&ue(e,"tr")||"auto"===o||!parseFloat(o)&&"inline"===De.css(e,"display",!1,r))&&e.getClientRects().length&&(a="border-box"===De.css(e,"boxSizing",!1,r),(i=s in e)&&(o=e[s])),(o=parseFloat(o)||0)+O(e,t,n||(a?"border":"content"),i,r,o)+"px"}function W(e,t,n,r,a){return new W.prototype.init(e,t,n,r,a)}function $(){Nt&&(!1===xe.hidden&&le.requestAnimationFrame?le.requestAnimationFrame($):le.setTimeout($,De.fx.interval),De.fx.tick())}function B(){return le.setTimeout(function(){kt=undefined}),kt=Date.now()}function U(e,t){var n,r=0,a={height:e};for(t=t?1:0;r<4;r+=2-t)a["margin"+(n=et[r])]=a["padding"+n]=e;return t&&(a.opacity=a.width=e),a}function z(e,t,n){for(var r,a=(G.tweeners[t]||[]).concat(G.tweeners["*"]),i=0,o=a.length;i<o;i++)if(r=a[i].call(n,t,e))return r}function X(e,t,n){var r,a,i,o,s,l,u,c,f="width"in t||"height"in t,d=this,h={},p=e.style,g=e.nodeType&&at(e),m=Ge.get(e,"fxshow");for(r in n.queue||(null==(o=De._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,s=o.empty.fire,o.empty.fire=function(){o.unqueued||s()}),o.unqueued++,d.always(function(){d.always(function(){o.unqueued--,De.queue(e,"fx").length||o.empty.fire()})})),t)if(a=t[r],Lt.test(a)){if(delete t[r],i=i||"toggle"===a,a===(g?"hide":"show")){if("show"!==a||!m||m[r]===undefined)continue;g=!0}h[r]=m&&m[r]||De.style(e,r)}if((l=!De.isEmptyObject(t))||!De.isEmptyObject(h))for(r in f&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=m&&m.display)&&(u=Ge.get(e,"display")),"none"===(c=De.css(e,"display"))&&(u?c=u:(b([e],!0),u=e.style.display||u,c=De.css(e,"display"),b([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===De.css(e,"float")&&(l||(d.done(function(){p.display=u}),null==u&&(c=p.display,u="none"===c?"":c)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]})),l=!1,h)l||(m?"hidden"in m&&(g=m.hidden):m=Ge.access(e,"fxshow",{display:u}),i&&(m.hidden=!g),g&&b([e],!0),d.done(function(){for(r in g||b([e]),Ge.remove(e,"fxshow"),h)De.style(e,r,h[r])})),l=z(g?m[r]:0,r,d),r in m||(m[r]=l.start,g&&(l.end=l.start,l.start=0))}function V(e,t){var n,r,a,i,o;for(n in e)if(a=t[r=h(n)],i=e[n],Array.isArray(i)&&(a=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(o=De.cssHooks[r])&&"expand"in o)for(n in i=o.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=a);else t[r]=a}function G(i,e,t){var n,o,r=0,a=G.prefilters.length,s=De.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var e=kt||B(),t=Math.max(0,u.startTime+u.duration-e),n=1-(t/u.duration||0),r=0,a=u.tweens.length;r<a;r++)u.tweens[r].run(n);return s.notifyWith(i,[u,n,t]),n<1&&a?t:(a||s.notifyWith(i,[u,1,0]),s.resolveWith(i,[u]),!1)},u=s.promise({elem:i,props:De.extend({},e),opts:De.extend(!0,{specialEasing:{},easing:De.easing._default},t),originalProperties:e,originalOptions:t,startTime:kt||B(),duration:t.duration,tweens:[],createTween:function(e,t){var n=De.Tween(i,u.opts,e,t,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(n),n},stop:function(e){var t=0,n=e?u.tweens.length:0;if(o)return this;for(o=!0;t<n;t++)u.tweens[t].run(1);return e?(s.notifyWith(i,[u,1,0]),s.resolveWith(i,[u,e])):s.rejectWith(i,[u,e]),this}}),c=u.props;for(V(c,u.opts.specialEasing);r<a;r++)if(n=G.prefilters[r].call(u,i,c,u.opts))return ye(n.stop)&&(De._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return De.map(c,z,u),ye(u.opts.start)&&u.opts.start.call(i,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),De.fx.timer(De.extend(l,{elem:i,anim:u,queue:u.opts.queue})),u}function J(e){return(e.match(We)||[]).join(" ")}function Y(e){return e.getAttribute&&e.getAttribute("class")||""}function Z(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(We)||[]}function K(n,e,r,a){var t;if(Array.isArray(e))De.each(e,function(e,t){r||Ut.test(n)?a(n,t):K(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,r,a)});else if(r||"object"!==m(e))a(n,e);else for(t in e)K(n+"["+t+"]",e[t],r,a)}function Q(i){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,r=0,a=e.toLowerCase().match(We)||[];if(ye(t))for(;n=a[r++];)"+"===n[0]?(n=n.slice(1)||"*",(i[n]=i[n]||[]).unshift(t)):(i[n]=i[n]||[]).push(t)}}function ee(t,a,i,o){function s(e){var r;return l[e]=!0,De.each(t[e]||[],function(e,t){var n=t(a,i,o);return"string"!=typeof n||u||l[n]?u?!(r=n):void 0:(a.dataTypes.unshift(n),s(n),!1)}),r}var l={},u=t===nn;return s(a.dataTypes[0])||!l["*"]&&s("*")}function te(e,t){var n,r,a=De.ajaxSettings.flatOptions||{};for(n in t)t[n]!==undefined&&((a[n]?e:r||(r={}))[n]=t[n]);return r&&De.extend(!0,e,r),e}function ne(e,t,n){for(var r,a,i,o,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),r===undefined&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(a in s)if(s[a]&&s[a].test(r)){l.unshift(a);break}if(l[0]in n)i=l[0];else{for(a in n){if(!l[0]||e.converters[a+" "+l[0]]){i=a;break}o||(o=a)}i=i||o}if(i)return i!==l[0]&&l.unshift(i),n[i]}function re(e,t,n,r){var a,i,o,s,l,u={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)u[o.toLowerCase()]=e.converters[o];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=c.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(o=u[l+" "+i]||u["* "+i]))for(a in u)if((s=a.split(" "))[1]===i&&(o=u[l+" "+s[0]]||u["* "+s[0]])){!0===o?o=u[a]:!0!==u[a]&&(i=s[0],c.unshift(s[1]));break}if(!0!==o)if(o&&e["throws"])t=o(t);else try{t=o(t)}catch(f){return{state:"parsererror",error:o?f:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}var ce=[],ae=Object.getPrototypeOf,fe=ce.slice,ie=ce.flat?function(e){return ce.flat.call(e)}:function(e){return ce.concat.apply([],e)},oe=ce.push,de=ce.indexOf,se={},he=se.toString,pe=se.hasOwnProperty,ge=pe.toString,me=ge.call(Object),ve={},ye=function ye(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},be=function be(e){return null!=e&&e===e.window},xe=le.document,we={type:!0,src:!0,nonce:!0,noModule:!0},Se="3.7.1",Te=/HTML$/i,De=function(e,t){return new De.fn.init(e,t)};De.fn=De.prototype={jquery:Se,constructor:De,length:0,toArray:function(){return fe.call(this)},get:function(e){return null==e?fe.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=De.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return De.each(this,e)},map:function(n){return this.pushStack(De.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(fe.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(De.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(De.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:oe,sort:ce.sort,splice:ce.splice},De.extend=De.fn.extend=function(e){var t,n,r,a,i,o,s=e||{},l=1,u=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[l]||{},l++),"object"==typeof s||ye(s)||(s={}),l===u&&(s=this,l--);l<u;l++)if(null!=(t=arguments[l]))for(n in t)a=t[n],"__proto__"!==n&&s!==a&&(c&&a&&(De.isPlainObject(a)||(i=Array.isArray(a)))?(r=s[n],o=i&&!Array.isArray(r)?[]:i||De.isPlainObject(r)?r:{},i=!1,s[n]=De.extend(c,o,a)):a!==undefined&&(s[n]=a));return s},De.extend({expando:"jQuery"+(Se+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==he.call(e))&&(!(t=ae(e))||"function"==typeof(n=pe.call(t,"constructor")&&t.constructor)&&ge.call(n)===me)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){g(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(s(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},text:function(e){var t,n="",r=0,a=e.nodeType;if(!a)for(;t=e[r++];)n+=De.text(t);return 1===a||11===a?e.textContent:9===a?e.documentElement.textContent:3===a||4===a?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(s(Object(e))?De.merge(n,"string"==typeof e?[e]:e):oe.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:de.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Te.test(t||n&&n.nodeName||"HTML")},merge:function(e,t){for(var n=+t.length,r=0,a=e.length;r<n;r++)e[a++]=t[r];return e.length=a,e},grep:function(e,t,n){for(var r=[],a=0,i=e.length,o=!n;a<i;a++)!t(e[a],a)!==o&&r.push(e[a]);return r},map:function(e,t,n){var r,a,i=0,o=[];if(s(e))for(r=e.length;i<r;i++)null!=(a=t(e[i],i,n))&&o.push(a);else for(i in e)null!=(a=t(e[i],i,n))&&o.push(a);return ie(o)},guid:1,support:ve}),"function"==typeof Symbol&&(De.fn[Symbol.iterator]=ce[Symbol.iterator]),De.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){se["[object "+t+"]"]=t.toLowerCase()});var Ce=ce.pop,_e=ce.sort,Ae=ce.splice,ke="[\\x20\\t\\r\\n\\f]",Ne=new RegExp("^"+ke+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ke+"+$","g");De.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var je=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;De.escapeSelector=function(e){return(e+"").replace(je,t)};var Ie=xe,Le=oe;!function(){function t(){try{return k.activeElement}catch(e){}}function p(e,t,n,r){var a,i,o,s,l,u,c,f=t&&t.ownerDocument,d=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==d&&9!==d&&11!==d)return n;if(!r&&(x(t),t=t||k,j)){if(11!==d&&(l=te.exec(e)))if(a=l[1]){if(9===d){if(!(o=t.getElementById(a)))return n;if(o.id===a)return E.call(n,o),n}else if(f&&(o=f.getElementById(a))&&p.contains(t,o)&&o.id===a)return E.call(n,o),n}else{if(l[2])return E.apply(n,t.getElementsByTagName(e)),n;if((a=l[3])&&t.getElementsByClassName)return E.apply(n,t.getElementsByClassName(a)),n}if(!(q[e+" "]||I&&I.test(e))){if(c=e,f=t,1===d&&(J.test(e)||G.test(e))){for((f=ne.test(e)&&g(t.parentNode)||t)==t&&ve.scope||((s=t.getAttribute("id"))?s=De.escapeSelector(s):t.setAttribute("id",s=R)),i=(u=m(e)).length;i--;)u[i]=(s?"#"+s:":scope")+" "+v(u[i]);c=u.join(",")}try{return E.apply(n,f.querySelectorAll(c)),n}catch(h){q(e,!0)}finally{s===R&&t.removeAttribute("id")}}}return T(e.replace(Ne,"$1"),t,n,r)}function e(){function n(e,t){return r.push(e+" ")>D.cacheLength&&delete n[r.shift()],n[e+" "]=t}var r=[];return n}function n(e){return e[R]=!0,e}function r(e){var t=k.createElement("fieldset");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function a(t){return function(e){return ue(e,"input")&&e.type===t}}function i(t){return function(e){return(ue(e,"input")||ue(e,"button"))&&e.type===t}}function o(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&oe(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function s(o){return n(function(i){return i=+i,n(function(e,t){for(var n,r=o([],e.length,i),a=r.length;a--;)e[n=r[a]]&&(e[n]=!(t[n]=e[n]))})})}function g(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function x(e){var t,n=e?e.ownerDocument||e:Ie;return n!=k&&9===n.nodeType&&n.documentElement&&(N=(k=n).documentElement,j=!De.isXMLDoc(k),L=N.matches||N.webkitMatchesSelector||N.msMatchesSelector,N.msMatchesSelector&&Ie!=k&&(t=k.defaultView)&&t.top!==t&&t.addEventListener("unload",ie),ve.getById=r(function(e){return N.appendChild(e).id=De.expando,!k.getElementsByName||!k.getElementsByName(De.expando).length}),ve.disconnectedMatch=r(function(e){return L.call(e,"*")}),ve.scope=r(function(){return k.querySelectorAll(":scope")}),ve.cssHas=r(function(){try{return k.querySelector(":has(*,:jqfake)"),!1}catch(e){return!0}}),ve.getById?(D.filter.ID=function(e){var t=e.replace(re,ae);return function(e){return e.getAttribute("id")===t}},D.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&j){var n=t.getElementById(e);return n?[n]:[]}}):(D.filter.ID=function(e){var n=e.replace(re,ae);return function(e){var t="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return t&&t.value===n}},D.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&j){var n,r,a,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(a=t.getElementsByName(e),r=0;i=a[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),D.find.TAG=function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},D.find.CLASS=function(e,t){if("undefined"!=typeof t.getElementsByClassName&&j)return t.getElementsByClassName(e)},I=[],r(function(e){var t;N.appendChild(e).innerHTML="<a id='"+R+"' href='' disabled='disabled'></a><select id='"+R+"-\r\\' disabled='disabled'><option selected=''></option></select>",e.querySelectorAll("[selected]").length||I.push("\\["+ke+"*(?:value|"+$+")"),e.querySelectorAll("[id~="+R+"-]").length||I.push("~="),e.querySelectorAll("a#"+R+"+*").length||I.push(".#.+[+~]"),e.querySelectorAll(":checked").length||I.push(":checked"),(t=k.createElement("input")).setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),N.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&I.push(":enabled",":disabled"),(t=k.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||I.push("\\["+ke+"*name"+ke+"*="+ke+"*(?:''|\"\")")}),ve.cssHas||I.push(":has"),I=I.length&&new RegExp(I.join("|")),W=function(e,t){if(e===t)return A=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!ve.sortDetached&&t.compareDocumentPosition(e)===n?e===k||e.ownerDocument==Ie&&p.contains(Ie,e)?-1:t===k||t.ownerDocument==Ie&&p.contains(Ie,t)?1:_?de.call(_,e)-de.call(_,t):0:4&n?-1:1)}),k}function l(){}function m(e,t){var n,r,a,i,o,s,l,u=M[e+" "];if(u)return t?0:u.slice(0);for(o=e,s=[],l=D.preFilter;o;){for(i in n&&!(r=V.exec(o))||(r&&(o=o.slice(r[0].length)||o),s.push(a=[])),n=!1,(r=G.exec(o))&&(n=r.shift(),a.push({value:n,type:r[0].replace(Ne," ")}),o=o.slice(n.length)),D.filter)!(r=K[i].exec(o))||l[i]&&!(r=l[i](r))||(n=r.shift(),a.push({value:n,type:i,matches:r}),o=o.slice(n.length));if(!n)break}return t?o.length:o?p.error(e):M(e,s).slice(0)}function v(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function f(o,e,t){var s=e.dir,l=e.next,u=l||s,c=t&&"parentNode"===u,f=P++;return e.first?function(e,t,n){for(;e=e[s];)if(1===e.nodeType||c)return o(e,t,n);return!1}:function(e,t,n){var r,a,i=[F,f];if(n){for(;e=e[s];)if((1===e.nodeType||c)&&o(e,t,n))return!0}else for(;e=e[s];)if(1===e.nodeType||c)if(a=e[R]||(e[R]={}),l&&ue(e,l))e=e[s]||e;else{if((r=a[u])&&r[0]===F&&r[1]===f)return i[2]=r[2];if((a[u]=i)[2]=o(e,t,n))return!0}return!1}}function d(a){return 1<a.length?function(e,t,n){for(var r=a.length;r--;)if(!a[r](e,t,n))return!1;return!0}:a[0]}function y(e,t,n){for(var r=0,a=t.length;r<a;r++)p(e,t[r],n);return n}function w(e,t,n,r,a){for(var i,o=[],s=0,l=e.length,u=null!=t;s<l;s++)(i=e[s])&&(n&&!n(i,r,a)||(o.push(i),u&&t.push(s)));return o}function b(h,p,g,m,v,e){return m&&!m[R]&&(m=b(m)),v&&!v[R]&&(v=b(v,e)),n(function(e,t,n,r){var a,i,o,s,l=[],u=[],c=t.length,f=e||y(p||"*",n.nodeType?[n]:n,[]),d=!h||!e&&p?f:w(f,l,h,n,r);if(g?g(d,s=v||(e?h:c||m)?[]:t,n,r):s=d,m)for(a=w(s,u),m(a,[],n,r),i=a.length;i--;)(o=a[i])&&(s[u[i]]=!(d[u[i]]=o));if(e){if(v||h){if(v){for(a=[],i=s.length;i--;)(o=s[i])&&a.push(d[i]=o);v(null,s=[],a,r)}for(i=s.length;i--;)(o=s[i])&&-1<(a=v?de.call(e,o):l[i])&&(e[a]=!(t[a]=o))}}else s=w(s===t?s.splice(c,s.length):s),v?v(null,t,s,r):E.apply(t,s)})}function h(e){for(var a,t,n,r=e.length,i=D.relative[e[0].type],o=i||D.relative[" "],s=i?1:0,l=f(function(e){return e===a},o,!0),u=f(function(e){return-1<de.call(a,e)},o,!0),c=[function(e,t,n){var r=!i&&(n||t!=C)||((a=t).nodeType?l(e,t,n):u(e,t,n));return a=null,r}];s<r;s++)if(t=D.relative[e[s].type])c=[f(d(c),t)];else{if((t=D.filter[e[s].type].apply(null,e[s].matches))[R]){for(n=++s;n<r&&!D.relative[e[n].type];n++);return b(1<s&&d(c),1<s&&v(e.slice(0,s-1).concat({value:" "===e[s-2].type?"*":""})).replace(Ne,"$1"),t,s<n&&h(e.slice(s,n)),n<r&&h(e=e.slice(n)),n<r&&v(e))}c.push(t)}return d(c)}function u(m,v){var y=0<v.length,b=0<m.length,e=function(e,t,n,r,a){var i,o,s,l=0,u="0",c=e&&[],f=[],d=C,h=e||b&&D.find.TAG("*",a),p=F+=null==d?1:Math.random()||.1,g=h.length;for(a&&(C=t==k||t||a);u!==g&&null!=(i=h[u]);u++){if(b&&i){for(o=0,t||i.ownerDocument==k||(x(i),n=!j);s=m[o++];)if(s(i,t||k,n)){E.call(r,i);break}a&&(F=p)}y&&((i=!s&&i)&&l--,e&&c.push(i))}if(l+=u,y&&u!==l){for(o=0;s=v[o++];)s(c,f,t,n);if(e){if(0<l)for(;u--;)c[u]||f[u]||(f[u]=Ce.call(r));f=w(f)}E.apply(r,f),a&&!e&&0<f.length&&1<l+v.length&&De.uniqueSort(r)}return a&&(F=p,C=d),c};return y?n(e):e}function S(e,t){var n,r=[],a=[],i=O[e+" "];if(!i){for(t||(t=m(e)),n=t.length;n--;)(i=h(t[n]))[R]?r.push(i):a.push(i);(i=O(e,u(a,r))).selector=e}return i}function T(e,t,n,r){var a,i,o,s,l,u="function"==typeof e&&e,c=!r&&m(e=u.selector||e);if(n=n||[],1===c.length){if(2<(i=c[0]=c[0].slice(0)).length&&"ID"===(o=i[0]).type&&9===t.nodeType&&j&&D.relative[i[1].type]){if(!(t=(D.find.ID(o.matches[0].replace(re,ae),t)||[])[0]))return n;u&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(a=K.needsContext.test(e)?0:i.length;a--&&(o=i[a],!D.relative[s=o.type]);)if((l=D.find[s])&&(r=l(o.matches[0].replace(re,ae),ne.test(i[0].type)&&g(t.parentNode)||t))){if(i.splice(a,1),!(e=r.length&&v(i)))return E.apply(n,r),n;break}}return(u||S(e,c))(r,t,!j,n,!t||ne.test(e)&&g(t.parentNode)||t),n}var c,D,C,_,A,k,N,j,I,L,E=Le,R=De.expando,F=0,P=0,H=e(),M=e(),O=e(),q=e(),W=function(e,t){return e===t&&(A=!0),0},$="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",B="(?:\\\\[\\da-fA-F]{1,6}"+ke+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",U="\\["+ke+"*("+B+")(?:"+ke+"*([*^$|!~]?=)"+ke+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+B+"))|)"+ke+"*\\]",z=":("+B+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+U+")*)|.*)\\)|)",X=new RegExp(ke+"+","g"),V=new RegExp("^"+ke+"*,"+ke+"*"),G=new RegExp("^"+ke+"*([>+~]|"+ke+")"+ke+"*"),J=new RegExp(ke+"|>"),Y=new RegExp(z),Z=new RegExp("^"+B+"$"),K={ID:new RegExp("^#("+B+")"),CLASS:new RegExp("^\\.("+B+")"),TAG:new RegExp("^("+B+"|[*])"),ATTR:new RegExp("^"+U),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ke+"*(even|odd|(([+-]|)(\\d*)n|)"+ke+"*(?:([+-]|)"+ke+"*(\\d+)|))"+ke+"*\\)|)","i"),bool:new RegExp("^(?:"+$+")$","i"),needsContext:new RegExp("^"+ke+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ke+"*((?:-\\d)?\\d*)"+ke+"*\\)|)(?=[^-]|$)","i")},Q=/^(?:input|select|textarea|button)$/i,ee=/^h\d$/i,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,re=new RegExp("\\\\[\\da-fA-F]{1,6}"+ke+"?|\\\\([^\\r\\n\\f])","g"),ae=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=function(){x()},oe=f(function(e){return!0===e.disabled&&ue(e,"fieldset")},{dir:"parentNode",next:"legend"});try{E.apply(ce=fe.call(Ie.childNodes),Ie.childNodes),ce[Ie.childNodes.length].nodeType}catch(se){E={apply:function(e,t){Le.apply(e,fe.call(t))},call:function(e){Le.apply(e,fe.call(arguments,1))}}}for(c in p.matches=function(e,t){return p(e,null,null,t)},p.matchesSelector=function(e,t){if(x(e),j&&!q[t+" "]&&(!I||!I.test(t)))try{var n=L.call(e,t);if(n||ve.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(se){q(t,!0)}return 0<p(t,k,null,[e]).length},p.contains=function(e,t){return(e.ownerDocument||e)!=k&&x(e),De.contains(e,t)},p.attr=function(e,t){(e.ownerDocument||e)!=k&&x(e);var n=D.attrHandle[t.toLowerCase()],r=n&&pe.call(D.attrHandle,t.toLowerCase())?n(e,t,!j):undefined;return r!==undefined?r:e.getAttribute(t)},p.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},De.uniqueSort=function(e){var t,n=[],r=0,a=0;if(A=!ve.sortStable,_=!ve.sortStable&&fe.call(e,0),_e.call(e,W),A){for(;t=e[a++];)t===e[a]&&(r=n.push(a));for(;r--;)Ae.call(e,n[r],1)}return _=null,e},De.fn.uniqueSort=function(){return this.pushStack(De.uniqueSort(fe.apply(this)))},(D=De.expr={cacheLength:50,createPseudo:n,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(re,ae),e[3]=(e[3]||e[4]||e[5]||"").replace(re,ae),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||p.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&p.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return K.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Y.test(n)&&(t=m(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(re,ae).toLowerCase();return"*"===e?function(){return!0}:function(e){return ue(e,t)}},CLASS:function(e){var t=H[e+" "];return t||(t=new RegExp("(^|"+ke+")"+e+"("+ke+"|$)"))&&H(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(n,r,a){return function(e){var t=p.attr(e,n);return null==t?"!="===r:!r||(t+="","="===r?t===a:"!="===r?t!==a:"^="===r?a&&0===t.indexOf(a):"*="===r?a&&-1<t.indexOf(a):"$="===r?a&&t.slice(-a.length)===a:"~="===r?-1<(" "+t.replace(X," ")+" ").indexOf(a):"|="===r&&(t===a||t.slice(0,a.length+1)===a+"-"))}},CHILD:function(h,e,t,p,g){var m="nth"!==h.slice(0,3),v="last"!==h.slice(-4),y="of-type"===e;return 1===p&&0===g?function(e){return!!e.parentNode}:function(e,t,n){var r,a,i,o,s,l=m!==v?"nextSibling":"previousSibling",u=e.parentNode,c=y&&e.nodeName.toLowerCase(),f=!n&&!y,d=!1;if(u){if(m){for(;l;){for(i=e;i=i[l];)if(y?ue(i,c):1===i.nodeType)return!1;s=l="only"===h&&!s&&"nextSibling"}return!0}if(s=[v?u.firstChild:u.lastChild],v&&f){for(d=(o=(r=(a=u[R]||(u[R]={}))[h]||[])[0]===F&&r[1])&&r[2],i=o&&u.childNodes[o];i=++o&&i&&i[l]||(d=o=0)||s.pop();)if(1===i.nodeType&&++d&&i===e){a[h]=[F,o,d];break}}else if(f&&(d=o=(r=(a=e[R]||(e[R]={}))[h]||[])[0]===F&&r[1]),!1===d)for(;(i=++o&&i&&i[l]||(d=o=0)||s.pop())&&((y?!ue(i,c):1!==i.nodeType)||!++d||(f&&((a=i[R]||(i[R]={}))[h]=[F,d]),i!==e)););return(d-=g)===p||d%p==0&&0<=d/p}}},PSEUDO:function(e,i){var t,o=D.pseudos[e]||D.setFilters[e.toLowerCase()]||p.error("unsupported pseudo: "+e);return o[R]?o(i):1<o.length?(t=[e,e,"",i],D.setFilters.hasOwnProperty(e.toLowerCase())?n(function(e,t){for(var n,r=o(e,i),a=r.length;a--;)e[n=de.call(e,r[a])]=!(t[n]=r[a])}):function(e){return o(e,0,t)}):o}},pseudos:{not:n(function(e){var r=[],a=[],s=S(e.replace(Ne,"$1"));return s[R]?n(function(e,t,n,r){for(var a,i=s(e,null,r,[]),o=e.length;o--;)(a=i[o])&&(e[o]=!(t[o]=a))}):function(e,t,n){return r[0]=e,s(r,null,n,a),r[0]=null,!a.pop()}}),has:n(function(t){return function(e){return 0<p(t,e).length}}),contains:n(function(t){return t=t.replace(re,ae),function(e){return-1<(e.textContent||De.text(e)).indexOf(t)}}),lang:n(function(n){return Z.test(n||"")||p.error("unsupported lang: "+n),n=n.replace(re,ae).toLowerCase(),function(e){var t;do{if(t=j?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=le.location&&le.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===N},focus:function(e){return e===t()&&k.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:o(!1),disabled:o(!0),checked:function(e){return ue(e,"input")&&!!e.checked||ue(e,"option")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!D.pseudos.empty(e)},header:function(e){return ee.test(e.nodeName)},input:function(e){return Q.test(e.nodeName)},button:function(e){return ue(e,"input")&&"button"===e.type||ue(e,"button")},
text:function(e){var t;return ue(e,"input")&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:s(function(){return[0]}),last:s(function(e,t){return[t-1]}),eq:s(function(e,t,n){return[n<0?n+t:n]}),even:s(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:s(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:s(function(e,t,n){var r;for(r=n<0?n+t:t<n?t:n;0<=--r;)e.push(r);return e}),gt:s(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=D.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})D.pseudos[c]=a(c);for(c in{submit:!0,reset:!0})D.pseudos[c]=i(c);l.prototype=D.filters=D.pseudos,D.setFilters=new l,ve.sortStable=R.split("").sort(W).join("")===R,x(),ve.sortDetached=r(function(e){return 1&e.compareDocumentPosition(k.createElement("fieldset"))}),De.find=p,De.expr[":"]=De.expr.pseudos,De.unique=De.uniqueSort,p.compile=S,p.select=T,p.setDocument=x,p.tokenize=m,p.escape=De.escapeSelector,p.getText=De.text,p.isXML=De.isXMLDoc,p.selectors=De.expr,p.support=De.support,p.uniqueSort=De.uniqueSort}();var Ee=function(e,t,n){for(var r=[],a=n!==undefined;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(a&&De(e).is(n))break;r.push(e)}return r},Re=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Fe=De.expr.match.needsContext,Pe=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;De.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?De.find.matchesSelector(r,e)?[r]:[]:De.find.matches(e,De.grep(t,function(e){return 1===e.nodeType}))},De.fn.extend({find:function(e){var t,n,r=this.length,a=this;if("string"!=typeof e)return this.pushStack(De(e).filter(function(){for(t=0;t<r;t++)if(De.contains(a[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)De.find(e,a[t],n);return 1<r?De.uniqueSort(n):n},filter:function(e){return this.pushStack(n(this,e||[],!1))},not:function(e){return this.pushStack(n(this,e||[],!0))},is:function(e){return!!n(this,"string"==typeof e&&Fe.test(e)?De(e):e||[],!1).length}});var He,Me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(De.fn.init=function(e,t,n){var r,a;if(!e)return this;if(n=n||He,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):ye(e)?n.ready!==undefined?n.ready(e):e(De):De.makeArray(e,this);if(!(r="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:Me.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof De?t[0]:t,De.merge(this,De.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:xe,!0)),Pe.test(r[1])&&De.isPlainObject(t))for(r in t)ye(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(a=xe.getElementById(r[2]))&&(this[0]=a,this.length=1),this}).prototype=De.fn,He=De(xe);var Oe=/^(?:parents|prev(?:Until|All))/,qe={children:!0,contents:!0,next:!0,prev:!0};De.fn.extend({has:function(e){var t=De(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(De.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,a=this.length,i=[],o="string"!=typeof e&&De(e);if(!Fe.test(e))for(;r<a;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?-1<o.index(n):1===n.nodeType&&De.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(1<i.length?De.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?de.call(De(e),this[0]):de.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(De.uniqueSort(De.merge(this.get(),De(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),De.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Ee(e,"parentNode")},parentsUntil:function(e,t,n){return Ee(e,"parentNode",n)},next:function(e){return r(e,"nextSibling")},prev:function(e){return r(e,"previousSibling")},nextAll:function(e){return Ee(e,"nextSibling")},prevAll:function(e){return Ee(e,"previousSibling")},nextUntil:function(e,t,n){return Ee(e,"nextSibling",n)},prevUntil:function(e,t,n){return Ee(e,"previousSibling",n)},siblings:function(e){return Re((e.parentNode||{}).firstChild,e)},children:function(e){return Re(e.firstChild)},contents:function(e){return null!=e.contentDocument&&ae(e.contentDocument)?e.contentDocument:(ue(e,"template")&&(e=e.content||e),De.merge([],e.childNodes))}},function(r,a){De.fn[r]=function(e,t){var n=De.map(this,a,e);return"Until"!==r.slice(-5)&&(t=e),t&&"string"==typeof t&&(n=De.filter(t,n)),1<this.length&&(qe[r]||De.uniqueSort(n),Oe.test(r)&&n.reverse()),this.pushStack(n)}});var We=/[^\x20\t\r\n\f]+/g;De.Callbacks=function(r){r="string"==typeof r?c(r):De.extend({},r);var a,e,t,n,i=[],o=[],s=-1,l=function(){for(n=n||r.once,t=a=!0;o.length;s=-1)for(e=o.shift();++s<i.length;)!1===i[s].apply(e[0],e[1])&&r.stopOnFalse&&(s=i.length,e=!1);r.memory||(e=!1),a=!1,n&&(i=e?[]:"")},u={add:function(){return i&&(e&&!a&&(s=i.length-1,o.push(e)),function n(e){De.each(e,function(e,t){ye(t)?r.unique&&u.has(t)||i.push(t):t&&t.length&&"string"!==m(t)&&n(t)})}(arguments),e&&!a&&l()),this},remove:function(){return De.each(arguments,function(e,t){for(var n;-1<(n=De.inArray(t,i,n));)i.splice(n,1),n<=s&&s--}),this},has:function(e){return e?-1<De.inArray(e,i):0<i.length},empty:function(){return i&&(i=[]),this},disable:function(){return n=o=[],i=e="",this},disabled:function(){return!i},lock:function(){return n=o=[],e||a||(i=e=""),this},locked:function(){return!!n},fireWith:function(e,t){return n||(t=[e,(t=t||[]).slice?t.slice():t],o.push(t),a||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!t}};return u},De.extend({Deferred:function(e){var i=[["notify","progress",De.Callbacks("memory"),De.Callbacks("memory"),2],["resolve","done",De.Callbacks("once memory"),De.Callbacks("once memory"),0,"resolved"],["reject","fail",De.Callbacks("once memory"),De.Callbacks("once memory"),1,"rejected"]],a="pending",o={state:function(){return a},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(e){return o.then(null,e)},pipe:function(){var a=arguments;return De.Deferred(function(r){De.each(i,function(e,t){var n=ye(a[t[4]])&&a[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&ye(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[t[0]+"With"](this,n?[e]:arguments)})}),a=null}).promise()},then:function(t,n,r){function u(i,o,s,l){return function(){var n=this,r=arguments,t=function(){var e,t;if(!(i<c)){if((e=s.apply(n,r))===o.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"==typeof e||"function"==typeof e)&&e.then,ye(t)?l?t.call(e,u(c,o,f,l),u(c,o,d,l)):(c++,t.call(e,u(c,o,f,l),u(c,o,d,l),u(c,o,f,o.notifyWith))):(s!==f&&(n=undefined,r=[e]),(l||o.resolveWith)(n,r))}},a=l?t:function(){try{t()}catch(e){De.Deferred.exceptionHook&&De.Deferred.exceptionHook(e,a.error),c<=i+1&&(s!==d&&(n=undefined,r=[e]),o.rejectWith(n,r))}};i?a():(De.Deferred.getErrorHook?a.error=De.Deferred.getErrorHook():De.Deferred.getStackHook&&(a.error=De.Deferred.getStackHook()),le.setTimeout(a))}}var c=0;return De.Deferred(function(e){i[0][3].add(u(0,e,ye(r)?r:f,e.notifyWith)),i[1][3].add(u(0,e,ye(t)?t:f)),i[2][3].add(u(0,e,ye(n)?n:d))}).promise()},promise:function(e){return null!=e?De.extend(e,o):o}},s={};return De.each(i,function(e,t){var n=t[2],r=t[5];o[t[1]]=n.add,r&&n.add(function(){a=r},i[3-e][2].disable,i[3-e][3].disable,i[0][2].lock,i[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?undefined:this,arguments),this},s[t[0]+"With"]=n.fireWith}),o.promise(s),e&&e.call(s,s),s},when:function(e){var n=arguments.length,t=n,r=Array(t),a=fe.call(arguments),i=De.Deferred(),o=function(t){return function(e){r[t]=this,a[t]=1<arguments.length?fe.call(arguments):e,--n||i.resolveWith(r,a)}};if(n<=1&&(l(e,i.done(o(t)).resolve,i.reject,!n),"pending"===i.state()||ye(a[t]&&a[t].then)))return i.then();for(;t--;)l(a[t],o(t),i.reject);return i.promise()}});var $e=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;De.Deferred.exceptionHook=function(e,t){le.console&&le.console.warn&&e&&$e.test(e.name)&&le.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},De.readyException=function(e){le.setTimeout(function(){throw e})};var Be=De.Deferred();De.fn.ready=function(e){return Be.then(e)["catch"](function(e){De.readyException(e)}),this},De.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--De.readyWait:De.isReady)||(De.isReady=!0)!==e&&0<--De.readyWait||Be.resolveWith(xe,[De])}}),De.ready.then=Be.then,"complete"===xe.readyState||"loading"!==xe.readyState&&!xe.documentElement.doScroll?le.setTimeout(De.ready):(xe.addEventListener("DOMContentLoaded",a),le.addEventListener("load",a));var Ue=function(e,t,n,r,a,i,o){var s=0,l=e.length,u=null==n;if("object"===m(n))for(s in a=!0,n)Ue(e,t,s,n[s],!0,i,o);else if(r!==undefined&&(a=!0,ye(r)||(o=!0),u&&(o?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(De(e),n)})),t))for(;s<l;s++)t(e[s],n,o?r:r.call(e[s],s,t(e[s],n)));return a?e:u?t.call(e):l?t(e[0],n):i},ze=/^-ms-/,Xe=/-([a-z])/g,Ve=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};o.uid=1,o.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ve(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,a=this.cache(e);if("string"==typeof t)a[h(t)]=n;else for(r in t)a[h(r)]=t[r];return a},get:function(e,t){return t===undefined?this.cache(e):e[this.expando]&&e[this.expando][h(t)]},access:function(e,t,n){return t===undefined||t&&"string"==typeof t&&n===undefined?this.get(e,t):(this.set(e,t,n),n!==undefined?n:t)},remove:function(e,t){var n,r=e[this.expando];if(r!==undefined){if(t!==undefined){n=(t=Array.isArray(t)?t.map(h):(t=h(t))in r?[t]:t.match(We)||[]).length;for(;n--;)delete r[t[n]]}(t===undefined||De.isEmptyObject(r))&&(e.nodeType?e[this.expando]=undefined:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return t!==undefined&&!De.isEmptyObject(t)}};var Ge=new o,Je=new o,Ye=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ze=/[A-Z]/g;De.extend({hasData:function(e){return Je.hasData(e)||Ge.hasData(e)},data:function(e,t,n){return Je.access(e,t,n)},removeData:function(e,t){Je.remove(e,t)},_data:function(e,t,n){return Ge.access(e,t,n)},_removeData:function(e,t){Ge.remove(e,t)}}),De.fn.extend({data:function(n,e){var t,r,a,i=this[0],o=i&&i.attributes;if(n!==undefined)return"object"==typeof n?this.each(function(){Je.set(this,n)}):Ue(this,function(e){var t;if(i&&e===undefined)return(t=Je.get(i,n))!==undefined?t:(t=p(i,n))!==undefined?t:void 0;this.each(function(){Je.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(a=Je.get(i),1===i.nodeType&&!Ge.get(i,"hasDataAttrs"))){for(t=o.length;t--;)o[t]&&0===(r=o[t].name).indexOf("data-")&&(r=h(r.slice(5)),p(i,r,a[r]));Ge.set(i,"hasDataAttrs",!0)}return a},removeData:function(e){return this.each(function(){Je.remove(this,e)})}}),De.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Ge.get(e,t),n&&(!r||Array.isArray(n)?r=Ge.access(e,t,De.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=De.queue(e,t),r=n.length,a=n.shift(),i=De._queueHooks(e,t),o=function(){De.dequeue(e,t)};"inprogress"===a&&(a=n.shift(),r--),a&&("fx"===t&&n.unshift("inprogress"),delete i.stop,a.call(e,o,i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ge.get(e,n)||Ge.access(e,n,{empty:De.Callbacks("once memory").add(function(){Ge.remove(e,[t+"queue",n])})})}}),De.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?De.queue(this[0],t):n===undefined?this:this.each(function(){var e=De.queue(this,t,n);De._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&De.dequeue(this,t)})},dequeue:function(e){return this.each(function(){De.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,a=De.Deferred(),i=this,o=this.length,s=function(){--r||a.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=undefined),e=e||"fx";o--;)(n=Ge.get(i[o],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),a.promise(t)}});var Ke=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Qe=new RegExp("^(?:([+-])=|)("+Ke+")([a-z%]*)$","i"),et=["Top","Right","Bottom","Left"],tt=xe.documentElement,nt=function(e){return De.contains(e.ownerDocument,e)},rt={composed:!0};tt.getRootNode&&(nt=function(e){return De.contains(e.ownerDocument,e)||e.getRootNode(rt)===e.ownerDocument});var at=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&nt(e)&&"none"===De.css(e,"display")},it={};De.fn.extend({show:function(){return b(this,!0)},hide:function(){return b(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){at(this)?De(this).show():De(this).hide()})}});var ot,st,lt=/^(?:checkbox|radio)$/i,ut=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ct=/^$|^module$|\/(?:java|ecma)script/i;ot=xe.createDocumentFragment().appendChild(xe.createElement("div")),(st=xe.createElement("input")).setAttribute("type","radio"),st.setAttribute("checked","checked"),st.setAttribute("name","t"),ot.appendChild(st),ve.checkClone=ot.cloneNode(!0).cloneNode(!0).lastChild.checked,ot.innerHTML="<textarea>x</textarea>",ve.noCloneChecked=!!ot.cloneNode(!0).lastChild.defaultValue,ot.innerHTML="<option></option>",ve.option=!!ot.lastChild;var ft={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ft.tbody=ft.tfoot=ft.colgroup=ft.caption=ft.thead,ft.th=ft.td,ve.option||(ft.optgroup=ft.option=[1,"<select multiple='multiple'>","</select>"]);var dt=/<|&#?\w+;/,ht=/^([^.]*)(?:\.(.+)|)/;De.event={global:{},add:function(t,e,n,r,a){var i,o,s,l,u,c,f,d,h,p,g,m=Ge.get(t);if(Ve(t))for(n.handler&&(n=(i=n).handler,a=i.selector),a&&De.find.matchesSelector(tt,a),n.guid||(n.guid=De.guid++),(l=m.events)||(l=m.events=Object.create(null)),(o=m.handle)||(o=m.handle=function(e){return void 0!==De&&De.event.triggered!==e.type?De.event.dispatch.apply(t,arguments):undefined}),u=(e=(e||"").match(We)||[""]).length;u--;)h=g=(s=ht.exec(e[u])||[])[1],p=(s[2]||"").split(".").sort(),h&&(f=De.event.special[h]||{},h=(a?f.delegateType:f.bindType)||h,f=De.event.special[h]||{},c=De.extend({type:h,origType:g,data:r,handler:n,guid:n.guid,selector:a,needsContext:a&&De.expr.match.needsContext.test(a),namespace:p.join(".")},i),(d=l[h])||((d=l[h]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(t,r,p,o)||t.addEventListener&&t.addEventListener(h,o)),f.add&&(f.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),a?d.splice(d.delegateCount++,0,c):d.push(c),De.event.global[h]=!0)},remove:function(e,t,n,r,a){var i,o,s,l,u,c,f,d,h,p,g,m=Ge.hasData(e)&&Ge.get(e);if(m&&(l=m.events)){for(u=(t=(t||"").match(We)||[""]).length;u--;)if(h=g=(s=ht.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h){for(f=De.event.special[h]||{},d=l[h=(r?f.delegateType:f.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=i=d.length;i--;)c=d[i],!a&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(i,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));o&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,p,m.handle)||De.removeEvent(e,h,m.handle),delete l[h])}else for(h in l)De.event.remove(e,h+t[u],n,r,!0);De.isEmptyObject(l)&&Ge.remove(e,"handle events")}},dispatch:function(e){var t,n,r,a,i,o,s=new Array(arguments.length),l=De.event.fix(e),u=(Ge.get(this,"events")||Object.create(null))[l.type]||[],c=De.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,l)){for(o=De.event.handlers.call(this,l,u),t=0;(a=o[t++])&&!l.isPropagationStopped();)for(l.currentTarget=a.elem,n=0;(i=a.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==i.namespace&&!l.rnamespace.test(i.namespace)||(l.handleObj=i,l.data=i.data,(r=((De.event.special[i.origType]||{}).handle||i.handler).apply(a.elem,s))!==undefined&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,a,i,o,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&1<=e.button))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(i=[],o={},n=0;n<l;n++)o[a=(r=t[n]).selector+" "]===undefined&&(o[a]=r.needsContext?-1<De(a,this).index(u):De.find(a,this,null,[u]).length),o[a]&&i.push(r);i.length&&s.push({elem:u,handlers:i})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(De.Event.prototype,t,{enumerable:!0,configurable:!0,get:ye(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[De.expando]?e:new De.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return lt.test(t.type)&&t.click&&ue(t,"input")&&_(t,"click",!0),!1},trigger:function(e){var t=this||e;return lt.test(t.type)&&t.click&&ue(t,"input")&&_(t,"click"),!0},_default:function(e){var t=e.target;return lt.test(t.type)&&t.click&&ue(t,"input")&&Ge.get(t,"click")||ue(t,"a")}},beforeunload:{postDispatch:function(e){e.result!==undefined&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},De.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},De.Event=function(e,t){if(!(this instanceof De.Event))return new De.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.defaultPrevented===undefined&&!1===e.returnValue?T:D,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&De.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[De.expando]=!0},De.Event.prototype={constructor:De.Event,isDefaultPrevented:D,isPropagationStopped:D,isImmediatePropagationStopped:D,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=T,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=T,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=T,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},De.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},De.event.addProp),De.each({focus:"focusin",blur:"focusout"},function(r,a){function i(e){if(xe.documentMode){var t=Ge.get(this,"handle"),n=De.event.fix(e);n.type="focusin"===e.type?"focus":"blur",n.isSimulated=!0,t(e),n.target===n.currentTarget&&t(n)}else De.event.simulate(a,e.target,De.event.fix(e))}De.event.special[r]={setup:function(){var e;if(_(this,r,!0),!xe.documentMode)return!1;(e=Ge.get(this,a))||this.addEventListener(a,i),Ge.set(this,a,(e||0)+1)},trigger:function(){return _(this,r),!0},teardown:function(){var e;if(!xe.documentMode)return!1;(e=Ge.get(this,a)-1)?Ge.set(this,a,e):(this.removeEventListener(a,i),Ge.remove(this,a))},_default:function(e){return Ge.get(e.target,r)},delegateType:a},De.event.special[a]={setup:function(){var e=this.ownerDocument||this.document||this,t=xe.documentMode?this:e,n=Ge.get(t,a);n||(xe.documentMode?this.addEventListener(a,i):e.addEventListener(r,i,!0)),Ge.set(t,a,(n||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=xe.documentMode?this:e,n=Ge.get(t,a)-1;n?Ge.set(t,a,n):(xe.documentMode?this.removeEventListener(a,i):e.removeEventListener(r,i,!0),Ge.remove(t,a))}}}),De.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,i){De.event.special[e]={delegateType:i,bindType:i,handle:function(e){var t,n=this,r=e.relatedTarget,a=e.handleObj;return r&&(r===n||De.contains(n,r))||(e.type=a.origType,t=a.handler.apply(this,arguments),e.type=i),t}}}),De.fn.extend({on:function(e,t,n,r){return C(this,e,t,n,r)},one:function(e,t,n,r){return C(this,e,t,n,r,1)},off:function(e,t,n){var r,a;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,De(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"!=typeof e)return!1!==t&&"function"!=typeof t||(n=t,t=undefined),!1===n&&(n=D),this.each(function(){De.event.remove(this,e,n,t)});for(a in e)this.off(a,t,e[a]);return this}});var pt=/<script|<style|<link/i,gt=/checked\s*(?:[^=]|=\s*.checked.)/i,mt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;De.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,a,i,o,s=e.cloneNode(!0),l=nt(e);if(!(ve.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||De.isXMLDoc(e)))for(o=x(s),r=0,a=(i=x(e)).length;r<a;r++)I(i[r],o[r]);if(t)if(n)for(i=i||x(e),o=o||x(s),r=0,a=i.length;r<a;r++)j(i[r],o[r]);else j(e,s);return 0<(o=x(s,"script")).length&&w(o,!l&&x(e,"script")),s},cleanData:function(e){for(var t,n,r,a=De.event.special,i=0;(n=e[i])!==undefined;i++)if(Ve(n)){if(t=n[Ge.expando]){if(t.events)for(r in t.events)a[r]?De.event.remove(n,r):De.removeEvent(n,r,t.handle);n[Ge.expando]=undefined}n[Je.expando]&&(n[Je.expando]=undefined)}}}),De.fn.extend({detach:function(e){return E(this,e,!0)},remove:function(e){return E(this,e)},text:function(e){return Ue(this,function(e){return e===undefined?De.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return L(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||A(this,e).appendChild(e)})},prepend:function(){return L(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=A(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return L(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return L(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(De.cleanData(x(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return De.clone(this,e,t)})},html:function(e){return Ue(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!pt.test(e)&&!ft[(ut.exec(e)||["",""])[1].toLowerCase()]){e=De.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(De.cleanData(x(t,!1)),t.innerHTML=e);t=0}catch(a){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return L(this,arguments,function(e){var t=this.parentNode;De.inArray(this,n)<0&&(De.cleanData(x(this)),t&&t.replaceChild(e,this))},n)}}),De.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,o){De.fn[e]=function(e){for(var t,n=[],r=De(e),a=r.length-1,i=0;i<=a;i++)t=i===a?this:this.clone(!0),De(r[i])[o](t),oe.apply(n,t.get());return this.pushStack(n)}});var vt=new RegExp("^("+Ke+")(?!px)[a-z%]+$","i"),yt=/^--/,bt=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=le),t.getComputedStyle(e)},xt=function(e,t,n){var r,a,i={};for(a in t)i[a]=e.style[a],e.style[a]=t[a];for(a in r=n.call(e),t)e.style[a]=i[a];return r},wt=new RegExp(et.join("|"),"i");!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",tt.appendChild(l).appendChild(u);var e=le.getComputedStyle(u);n="1%"!==e.top,s=12===t(e.marginLeft),u.style.right="60%",i=36===t(e.right),r=36===t(e.width),u.style.position="absolute",a=12===t(u.offsetWidth/3),tt.removeChild(l),u=null}}function t(e){return Math.round(parseFloat(e))}var n,r,a,i,o,s,l=xe.createElement("div"),u=xe.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",ve.clearCloneStyle="content-box"===u.style.backgroundClip,De.extend(ve,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),i},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),s},scrollboxSize:function(){return e(),a},reliableTrDimensions:function(){var e,t,n,r;return null==o&&(e=xe.createElement("table"),t=xe.createElement("tr"),n=xe.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="box-sizing:content-box;border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",tt.appendChild(e).appendChild(t).appendChild(n),r=le.getComputedStyle(t),o=parseInt(r.height,10)+parseInt(r.borderTopWidth,10)+parseInt(r.borderBottomWidth,10)===t.offsetHeight,tt.removeChild(e)),o}}))}();var St=["Webkit","Moz","ms"],Tt=xe.createElement("div").style,Dt={},Ct=/^(none|table(?!-c[ea]).+)/,_t={position:"absolute",visibility:"hidden",display:"block"},At={letterSpacing:"0",fontWeight:"400"};De.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=R(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var a,i,o,s=h(t),l=yt.test(t),u=e.style;if(l||(t=H(s)),o=De.cssHooks[t]||De.cssHooks[s],n===undefined)return o&&"get"in o&&(a=o.get(e,!1,r))!==undefined?a:u[t];"string"===(i=typeof n)&&(a=Qe.exec(n))&&a[1]&&(n=v(e,t,a),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=a&&a[3]||(De.cssNumber[s]?"":"px")),ve.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),o&&"set"in o&&(n=o.set(e,n,r))===undefined||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var a,i,o,s=h(t);return yt.test(t)||(t=H(s)),(o=De.cssHooks[t]||De.cssHooks[s])&&"get"in o&&(a=o.get(e,!0,n)),a===undefined&&(a=R(e,t,r)),"normal"===a&&t in At&&(a=At[t]),""===n||n?(i=parseFloat(a),!0===n||isFinite(i)?i||0:a):a}}),De.each(["height","width"],function(e,l){De.cssHooks[l]={get:function(e,t,n){if(t)return!Ct.test(De.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?q(e,l,n):xt(e,_t,function(){return q(e,l,n)})},set:function(e,t,n){var r,a=bt(e),i=!ve.scrollboxSize()&&"absolute"===a.position,o=(i||n)&&"border-box"===De.css(e,"boxSizing",!1,a),s=n?O(e,l,n,o,a):0;return o&&i&&(s-=Math.ceil(e["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(a[l])-O(e,l,"border",!1,a)-.5)),s&&(r=Qe.exec(t))&&"px"!==(r[3]||"px")&&(e.style[l]=t,t=De.css(e,l)),M(e,t,s)}}}),De.cssHooks.marginLeft=F(ve.reliableMarginLeft,function(e,t){if(t)return(parseFloat(R(e,"marginLeft"))||e.getBoundingClientRect().left-xt(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),De.each({margin:"",padding:"",border:"Width"},function(a,i){De.cssHooks[a+i]={expand:function(e){for(var t=0,n={},r="string"==typeof e?e.split(" "):[e];t<4;t++)n[a+et[t]+i]=r[t]||r[t-2]||r[0];return n}},"margin"!==a&&(De.cssHooks[a+i].set=M)}),De.fn.extend({css:function(e,t){return Ue(this,function(e,t,n){var r,a,i={},o=0;if(Array.isArray(t)){for(r=bt(e),a=t.length;o<a;o++)i[t[o]]=De.css(e,t[o],!1,r);return i}return n!==undefined?De.style(e,t,n):De.css(e,t)},e,t,1<arguments.length)}}),(De.Tween=W).prototype={constructor:W,init:function(e,t,n,r,a,i){this.elem=e,this.prop=n,this.easing=a||De.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(De.cssNumber[n]?"":"px")},cur:function(){var e=W.propHooks[this.prop];return e&&e.get?e.get(this):W.propHooks._default.get(this)},run:function(e){var t,n=W.propHooks[this.prop];return this.options.duration?this.pos=t=De.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):W.propHooks._default.set(this),this}},W.prototype.init.prototype=W.prototype,W.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=De.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){De.fx.step[e.prop]?De.fx.step[e.prop](e):1!==e.elem.nodeType||!De.cssHooks[e.prop]&&null==e.elem.style[H(e.prop)]?e.elem[e.prop]=e.now:De.style(e.elem,e.prop,e.now+e.unit)}}},W.propHooks.scrollTop=W.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},De.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},De.fx=W.prototype.init,De.fx.step={};var kt,Nt,jt,It,Lt=/^(?:toggle|show|hide)$/,Et=/queueHooks$/;De.Animation=De.extend(G,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return v(n.elem,e,Qe.exec(t),n),n}]},tweener:function(e,t){ye(e)?(t=e,e=["*"]):e=e.match(We);for(var n,r=0,a=e.length;r<a;r++)n=e[r],G.tweeners[n]=G.tweeners[n]||[],G.tweeners[n].unshift(t)},prefilters:[X],prefilter:function(e,t){t?G.prefilters.unshift(e):G.prefilters.push(e)}}),De.speed=function(e,t,n){var r=e&&"object"==typeof e?De.extend({},e):{complete:n||!n&&t||ye(e)&&e,duration:e,easing:n&&t||t&&!ye(t)&&t};return De.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in De.fx.speeds?r.duration=De.fx.speeds[r.duration]:r.duration=De.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){ye(r.old)&&r.old.call(this),r.queue&&De.dequeue(this,r.queue)},r},De.fn.extend({fadeTo:function(e,t,n,r){return this.filter(at).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,e,n,r){var a=De.isEmptyObject(t),i=De.speed(e,n,r),o=function(){var e=G(this,De.extend({},t),i);(a||Ge.get(this,"finish"))&&e.stop(!0)};return o.finish=o,a||!1===i.queue?this.each(o):this.queue(i.queue,o)},stop:function(a,e,i){var o=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof a&&(i=e,e=a,a=undefined),e&&this.queue(a||"fx",[]),this.each(function(){var e=!0,t=null!=a&&a+"queueHooks",n=De.timers,r=Ge.get(this);if(t)r[t]&&r[t].stop&&o(r[t]);else for(t in r)r[t]&&r[t].stop&&Et.test(t)&&o(r[t]);for(t=n.length;t--;)n[t].elem!==this||null!=a&&n[t].queue!==a||(n[t].anim.stop(i),e=!1,n.splice(t,1));!e&&i||De.dequeue(this,a)})},finish:function(o){return!1!==o&&(o=o||"fx"),this.each(function(){var e,t=Ge.get(this),n=t[o+"queue"],r=t[o+"queueHooks"],a=De.timers,i=n?n.length:0;for(t.finish=!0,De.queue(this,o,[]),r&&r.stop&&r.stop.call(this,!0),e=a.length;e--;)a[e].elem===this&&a[e].queue===o&&(a[e].anim.stop(!0),a.splice(e,1));for(e=0;e<i;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),De.each(["toggle","show","hide"],function(e,r){var a=De.fn[r];De.fn[r]=function(e,t,n){return null==e||"boolean"==typeof e?a.apply(this,arguments):this.animate(U(r,!0),e,t,n)}}),De.each({slideDown:U("show"),slideUp:U("hide"),slideToggle:U("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,r){De.fn[e]=function(e,t,n){return this.animate(r,e,t,n)}}),De.timers=[],De.fx.tick=function(){var e,t=0,n=De.timers;for(kt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||De.fx.stop(),kt=undefined},De.fx.timer=function(e){De.timers.push(e),De.fx.start()},De.fx.interval=13,De.fx.start=function(){Nt||(Nt=!0,$())},De.fx.stop=function(){Nt=null},De.fx.speeds={slow:600,fast:200,_default:400},De.fn.delay=function(r,e){return r=De.fx&&De.fx.speeds[r]||r,e=e||"fx",this.queue(e,function(e,t){var n=le.setTimeout(e,r);t.stop=function(){le.clearTimeout(n)}})},
jt=xe.createElement("input"),It=xe.createElement("select").appendChild(xe.createElement("option")),jt.type="checkbox",ve.checkOn=""!==jt.value,ve.optSelected=It.selected,(jt=xe.createElement("input")).value="t",jt.type="radio",ve.radioValue="t"===jt.value;var Rt,Ft=De.expr.attrHandle;De.fn.extend({attr:function(e,t){return Ue(this,De.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){De.removeAttr(this,e)})}}),De.extend({attr:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return"undefined"==typeof e.getAttribute?De.prop(e,t,n):(1===i&&De.isXMLDoc(e)||(a=De.attrHooks[t.toLowerCase()]||(De.expr.match.bool.test(t)?Rt:undefined)),n!==undefined?null===n?void De.removeAttr(e,t):a&&"set"in a&&(r=a.set(e,n,t))!==undefined?r:(e.setAttribute(t,n+""),n):a&&"get"in a&&null!==(r=a.get(e,t))?r:null==(r=De.find.attr(e,t))?undefined:r)},attrHooks:{type:{set:function(e,t){if(!ve.radioValue&&"radio"===t&&ue(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,a=t&&t.match(We);if(a&&1===e.nodeType)for(;n=a[r++];)e.removeAttribute(n)}}),Rt={set:function(e,t,n){return!1===t?De.removeAttr(e,n):e.setAttribute(n,n),n}},De.each(De.expr.match.bool.source.match(/\w+/g),function(e,t){var o=Ft[t]||De.find.attr;Ft[t]=function(e,t,n){var r,a,i=t.toLowerCase();return n||(a=Ft[i],Ft[i]=r,r=null!=o(e,t,n)?i:null,Ft[i]=a),r}});var Pt=/^(?:input|select|textarea|button)$/i,Ht=/^(?:a|area)$/i;De.fn.extend({prop:function(e,t){return Ue(this,De.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[De.propFix[e]||e]})}}),De.extend({prop:function(e,t,n){var r,a,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&De.isXMLDoc(e)||(t=De.propFix[t]||t,a=De.propHooks[t]),n!==undefined?a&&"set"in a&&(r=a.set(e,n,t))!==undefined?r:e[t]=n:a&&"get"in a&&null!==(r=a.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=De.find.attr(e,"tabindex");return t?parseInt(t,10):Pt.test(e.nodeName)||Ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),ve.optSelected||(De.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),De.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){De.propFix[this.toLowerCase()]=this}),De.fn.extend({addClass:function(t){var e,n,r,a,i,o;return ye(t)?this.each(function(e){De(this).addClass(t.call(this,e,Y(this)))}):(e=Z(t)).length?this.each(function(){if(r=Y(this),n=1===this.nodeType&&" "+J(r)+" "){for(i=0;i<e.length;i++)a=e[i],n.indexOf(" "+a+" ")<0&&(n+=a+" ");o=J(n),r!==o&&this.setAttribute("class",o)}}):this},removeClass:function(t){var e,n,r,a,i,o;return ye(t)?this.each(function(e){De(this).removeClass(t.call(this,e,Y(this)))}):arguments.length?(e=Z(t)).length?this.each(function(){if(r=Y(this),n=1===this.nodeType&&" "+J(r)+" "){for(i=0;i<e.length;i++)for(a=e[i];-1<n.indexOf(" "+a+" ");)n=n.replace(" "+a+" "," ");o=J(n),r!==o&&this.setAttribute("class",o)}}):this:this.attr("class","")},toggleClass:function(t,n){var e,r,a,i,o=typeof t,s="string"===o||Array.isArray(t);return ye(t)?this.each(function(e){De(this).toggleClass(t.call(this,e,Y(this),n),n)}):"boolean"==typeof n&&s?n?this.addClass(t):this.removeClass(t):(e=Z(t),this.each(function(){if(s)for(i=De(this),a=0;a<e.length;a++)r=e[a],i.hasClass(r)?i.removeClass(r):i.addClass(r);else t!==undefined&&"boolean"!==o||((r=Y(this))&&Ge.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":Ge.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&-1<(" "+J(Y(n))+" ").indexOf(t))return!0;return!1}});var Mt=/\r/g;De.fn.extend({val:function(n){var r,e,a,t=this[0];return arguments.length?(a=ye(n),this.each(function(e){var t;1===this.nodeType&&(null==(t=a?n.call(this,e,De(this).val()):n)?t="":"number"==typeof t?t+="":Array.isArray(t)&&(t=De.map(t,function(e){return null==e?"":e+""})),(r=De.valHooks[this.type]||De.valHooks[this.nodeName.toLowerCase()])&&"set"in r&&r.set(this,t,"value")!==undefined||(this.value=t))})):t?(r=De.valHooks[t.type]||De.valHooks[t.nodeName.toLowerCase()])&&"get"in r&&(e=r.get(t,"value"))!==undefined?e:"string"==typeof(e=t.value)?e.replace(Mt,""):null==e?"":e:void 0}}),De.extend({valHooks:{option:{get:function(e){var t=De.find.attr(e,"value");return null!=t?t:J(De.text(e))}},select:{get:function(e){var t,n,r,a=e.options,i=e.selectedIndex,o="select-one"===e.type,s=o?null:[],l=o?i+1:a.length;for(r=i<0?l:o?i:0;r<l;r++)if(((n=a[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!ue(n.parentNode,"optgroup"))){if(t=De(n).val(),o)return t;s.push(t)}return s},set:function(e,t){for(var n,r,a=e.options,i=De.makeArray(t),o=a.length;o--;)((r=a[o]).selected=-1<De.inArray(De.valHooks.option.get(r),i))&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),De.each(["radio","checkbox"],function(){De.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<De.inArray(De(e).val(),t)}},ve.checkOn||(De.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})});var Ot=le.location,qt={guid:Date.now()},Wt=/\?/;De.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new le.DOMParser).parseFromString(e,"text/xml")}catch(r){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||De.error("Invalid XML: "+(n?De.map(n.childNodes,function(e){return e.textContent}).join("\n"):e)),t};var $t=/^(?:focusinfocus|focusoutblur)$/,Bt=function(e){e.stopPropagation()};De.extend(De.event,{trigger:function(e,t,n,r){var a,i,o,s,l,u,c,f,d=[n||xe],h=pe.call(e,"type")?e.type:e,p=pe.call(e,"namespace")?e.namespace.split("."):[];if(i=f=o=n=n||xe,3!==n.nodeType&&8!==n.nodeType&&!$t.test(h+De.event.triggered)&&(-1<h.indexOf(".")&&(h=(p=h.split(".")).shift(),p.sort()),l=h.indexOf(":")<0&&"on"+h,(e=e[De.expando]?e:new De.Event(h,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=p.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=undefined,e.target||(e.target=n),t=null==t?[e]:De.makeArray(t,[e]),c=De.event.special[h]||{},r||!c.trigger||!1!==c.trigger.apply(n,t))){if(!r&&!c.noBubble&&!be(n)){for(s=c.delegateType||h,$t.test(s+h)||(i=i.parentNode);i;i=i.parentNode)d.push(i),o=i;o===(n.ownerDocument||xe)&&d.push(o.defaultView||o.parentWindow||le)}for(a=0;(i=d[a++])&&!e.isPropagationStopped();)f=i,e.type=1<a?s:c.bindType||h,(u=(Ge.get(i,"events")||Object.create(null))[e.type]&&Ge.get(i,"handle"))&&u.apply(i,t),(u=l&&i[l])&&u.apply&&Ve(i)&&(e.result=u.apply(i,t),!1===e.result&&e.preventDefault());return e.type=h,r||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!Ve(n)||l&&ye(n[h])&&!be(n)&&((o=n[l])&&(n[l]=null),De.event.triggered=h,e.isPropagationStopped()&&f.addEventListener(h,Bt),n[h](),e.isPropagationStopped()&&f.removeEventListener(h,Bt),De.event.triggered=undefined,o&&(n[l]=o)),e.result}},simulate:function(e,t,n){var r=De.extend(new De.Event,n,{type:e,isSimulated:!0});De.event.trigger(r,null,t)}}),De.fn.extend({trigger:function(e,t){return this.each(function(){De.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return De.event.trigger(e,t,n,!0)}});var Ut=/\[\]$/,zt=/\r?\n/g,Xt=/^(?:submit|button|image|reset|file)$/i,Vt=/^(?:input|select|textarea|keygen)/i;De.param=function(e,t){var n,r=[],a=function(e,t){var n=ye(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!De.isPlainObject(e))De.each(e,function(){a(this.name,this.value)});else for(n in e)K(n,e[n],t,a);return r.join("&")},De.fn.extend({serialize:function(){return De.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=De.prop(this,"elements");return e?De.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!De(this).is(":disabled")&&Vt.test(this.nodeName)&&!Xt.test(e)&&(this.checked||!lt.test(e))}).map(function(e,t){var n=De(this).val();return null==n?null:Array.isArray(n)?De.map(n,function(e){return{name:t.name,value:e.replace(zt,"\r\n")}}):{name:t.name,value:n.replace(zt,"\r\n")}}).get()}});var Gt=/%20/g,Jt=/#.*$/,Yt=/([?&])_=[^&]*/,Zt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Kt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Qt=/^(?:GET|HEAD)$/,en=/^\/\//,tn={},nn={},rn="*/".concat("*"),an=xe.createElement("a");an.href=Ot.href,De.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ot.href,type:"GET",isLocal:Kt.test(Ot.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":rn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":De.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?te(te(e,De.ajaxSettings),t):te(De.ajaxSettings,e)},ajaxPrefilter:Q(tn),ajaxTransport:Q(nn),ajax:function(e,t){function n(e,t,n,r){var a,i,o,s,l,u=t;p||(p=!0,h&&le.clearTimeout(h),c=undefined,d=r||"",S.readyState=0<e?4:0,a=200<=e&&e<300||304===e,n&&(s=ne(m,S,n)),!a&&-1<De.inArray("script",m.dataTypes)&&De.inArray("json",m.dataTypes)<0&&(m.converters["text script"]=function(){}),s=re(m,s,S,a),a?(m.ifModified&&((l=S.getResponseHeader("Last-Modified"))&&(De.lastModified[f]=l),(l=S.getResponseHeader("etag"))&&(De.etag[f]=l)),204===e||"HEAD"===m.type?u="nocontent":304===e?u="notmodified":(u=s.state,i=s.data,a=!(o=s.error))):(o=u,!e&&u||(u="error",e<0&&(e=0))),S.status=e,S.statusText=(t||u)+"",a?b.resolveWith(v,[i,u,S]):b.rejectWith(v,[S,u,o]),S.statusCode(w),w=undefined,g&&y.trigger(a?"ajaxSuccess":"ajaxError",[S,m,a?i:o]),x.fireWith(v,[S,u]),g&&(y.trigger("ajaxComplete",[S,m]),--De.active||De.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=undefined),t=t||{};var c,f,d,r,h,a,p,g,i,o,m=De.ajaxSetup({},t),v=m.context||m,y=m.context&&(v.nodeType||v.jquery)?De(v):De.event,b=De.Deferred(),x=De.Callbacks("once memory"),w=m.statusCode||{},s={},l={},u="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(p){if(!r)for(r={};t=Zt.exec(d);)r[t[1].toLowerCase()+" "]=(r[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=r[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return p?d:null},setRequestHeader:function(e,t){return null==p&&(e=l[e.toLowerCase()]=l[e.toLowerCase()]||e,s[e]=t),this},overrideMimeType:function(e){return null==p&&(m.mimeType=e),this},statusCode:function(e){var t;if(e)if(p)S.always(e[S.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||u;return c&&c.abort(t),n(0,t),this}};if(b.promise(S),m.url=((e||m.url||Ot.href)+"").replace(en,Ot.protocol+"//"),m.type=t.method||t.type||m.method||m.type,m.dataTypes=(m.dataType||"*").toLowerCase().match(We)||[""],null==m.crossDomain){a=xe.createElement("a");try{a.href=m.url,a.href=a.href,m.crossDomain=an.protocol+"//"+an.host!=a.protocol+"//"+a.host}catch(T){m.crossDomain=!0}}if(m.data&&m.processData&&"string"!=typeof m.data&&(m.data=De.param(m.data,m.traditional)),ee(tn,m,t,S),p)return S;for(i in(g=De.event&&m.global)&&0==De.active++&&De.event.trigger("ajaxStart"),m.type=m.type.toUpperCase(),m.hasContent=!Qt.test(m.type),f=m.url.replace(Jt,""),m.hasContent?m.data&&m.processData&&0===(m.contentType||"").indexOf("application/x-www-form-urlencoded")&&(m.data=m.data.replace(Gt,"+")):(o=m.url.slice(f.length),m.data&&(m.processData||"string"==typeof m.data)&&(f+=(Wt.test(f)?"&":"?")+m.data,delete m.data),!1===m.cache&&(f=f.replace(Yt,"$1"),o=(Wt.test(f)?"&":"?")+"_="+qt.guid+++o),m.url=f+o),m.ifModified&&(De.lastModified[f]&&S.setRequestHeader("If-Modified-Since",De.lastModified[f]),De.etag[f]&&S.setRequestHeader("If-None-Match",De.etag[f])),(m.data&&m.hasContent&&!1!==m.contentType||t.contentType)&&S.setRequestHeader("Content-Type",m.contentType),S.setRequestHeader("Accept",m.dataTypes[0]&&m.accepts[m.dataTypes[0]]?m.accepts[m.dataTypes[0]]+("*"!==m.dataTypes[0]?", "+rn+"; q=0.01":""):m.accepts["*"]),m.headers)S.setRequestHeader(i,m.headers[i]);if(m.beforeSend&&(!1===m.beforeSend.call(v,S,m)||p))return S.abort();if(u="abort",x.add(m.complete),S.done(m.success),S.fail(m.error),c=ee(nn,m,t,S)){if(S.readyState=1,g&&y.trigger("ajaxSend",[S,m]),p)return S;m.async&&0<m.timeout&&(h=le.setTimeout(function(){S.abort("timeout")},m.timeout));try{p=!1,c.send(s,n)}catch(T){if(p)throw T;n(-1,T)}}else n(-1,"No Transport");return S},getJSON:function(e,t,n){return De.get(e,t,n,"json")},getScript:function(e,t){return De.get(e,undefined,t,"script")}}),De.each(["get","post"],function(e,a){De[a]=function(e,t,n,r){return ye(t)&&(r=r||n,n=t,t=undefined),De.ajax(De.extend({url:e,type:a,dataType:r,data:t,success:n},De.isPlainObject(e)&&e))}}),De.ajaxPrefilter(function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),De._evalUrl=function(e,t,n){return De.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){De.globalEval(e,t,n)}})},De.fn.extend({wrapAll:function(e){var t;return this[0]&&(ye(e)&&(e=e.call(this[0])),t=De(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return ye(n)?this.each(function(e){De(this).wrapInner(n.call(this,e))}):this.each(function(){var e=De(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=ye(t);return this.each(function(e){De(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){De(this).replaceWith(this.childNodes)}),this}}),De.expr.pseudos.hidden=function(e){return!De.expr.pseudos.visible(e)},De.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},De.ajaxSettings.xhr=function(){try{return new le.XMLHttpRequest}catch(e){}};var on={0:200,1223:204},sn=De.ajaxSettings.xhr();ve.cors=!!sn&&"withCredentials"in sn,ve.ajax=sn=!!sn,De.ajaxTransport(function(i){var o,s;if(ve.cors||sn&&!i.crossDomain)return{send:function(e,t){var n,r=i.xhr();if(r.open(i.type,i.url,i.async,i.username,i.password),i.xhrFields)for(n in i.xhrFields)r[n]=i.xhrFields[n];for(n in i.mimeType&&r.overrideMimeType&&r.overrideMimeType(i.mimeType),i.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)r.setRequestHeader(n,e[n]);o=function(e){return function(){o&&(o=s=r.onload=r.onerror=r.onabort=r.ontimeout=r.onreadystatechange=null,"abort"===e?r.abort():"error"===e?"number"!=typeof r.status?t(0,"error"):t(r.status,r.statusText):t(on[r.status]||r.status,r.statusText,"text"!==(r.responseType||"text")||"string"!=typeof r.responseText?{binary:r.response}:{text:r.responseText},r.getAllResponseHeaders()))}},r.onload=o(),s=r.onerror=r.ontimeout=o("error"),r.onabort!==undefined?r.onabort=s:r.onreadystatechange=function(){4===r.readyState&&le.setTimeout(function(){o&&s()})},o=o("abort");try{r.send(i.hasContent&&i.data||null)}catch(a){if(o)throw a}},abort:function(){o&&o()}}}),De.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),De.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return De.globalEval(e),e}}}),De.ajaxPrefilter("script",function(e){e.cache===undefined&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),De.ajaxTransport("script",function(n){var r,a;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){r=De("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",a=function(e){r.remove(),a=null,e&&t("error"===e.type?404:200,e.type)}),xe.head.appendChild(r[0])},abort:function(){a&&a()}}});var ln,un=[],cn=/(=)\?(?=&|$)|\?\?/;De.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=un.pop()||De.expando+"_"+qt.guid++;return this[e]=!0,e}}),De.ajaxPrefilter("json jsonp",function(e,t,n){var r,a,i,o=!1!==e.jsonp&&(cn.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&cn.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=ye(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(cn,"$1"+r):!1!==e.jsonp&&(e.url+=(Wt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return i||De.error(r+" was not called"),i[0]},e.dataTypes[0]="json",a=le[r],le[r]=function(){i=arguments},n.always(function(){a===undefined?De(le).removeProp(r):le[r]=a,e[r]&&(e.jsonpCallback=t.jsonpCallback,un.push(r)),i&&ye(a)&&a(i[0]),i=a=undefined}),"script"}),ve.createHTMLDocument=((ln=xe.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ln.childNodes.length),De.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(ve.createHTMLDocument?((r=(t=xe.implementation.createHTMLDocument("")).createElement("base")).href=xe.location.href,t.head.appendChild(r)):t=xe),i=!n&&[],(a=Pe.exec(e))?[t.createElement(a[1])]:(a=S([e],t,i),i&&i.length&&De(i).remove(),De.merge([],a.childNodes)));var r,a,i},De.fn.load=function(e,t,n){var r,a,i,o=this,s=e.indexOf(" ");return-1<s&&(r=J(e.slice(s)),e=e.slice(0,s)),ye(t)?(n=t,t=undefined):t&&"object"==typeof t&&(a="POST"),0<o.length&&De.ajax({url:e,type:a||"GET",dataType:"html",data:t}).done(function(e){i=arguments,o.html(r?De("<div>").append(De.parseHTML(e)).find(r):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},De.expr.pseudos.animated=function(t){return De.grep(De.timers,function(e){return t===e.elem}).length},De.offset={setOffset:function(e,t,n){var r,a,i,o,s,l,u=De.css(e,"position"),c=De(e),f={};"static"===u&&(e.style.position="relative"),s=c.offset(),i=De.css(e,"top"),l=De.css(e,"left"),("absolute"===u||"fixed"===u)&&-1<(i+l).indexOf("auto")?(o=(r=c.position()).top,a=r.left):(o=parseFloat(i)||0,a=parseFloat(l)||0),ye(t)&&(t=t.call(e,n,De.extend({},s))),null!=t.top&&(f.top=t.top-s.top+o),null!=t.left&&(f.left=t.left-s.left+a),"using"in t?t.using.call(e,f):c.css(f)}},De.fn.extend({offset:function(t){if(arguments.length)return t===undefined?this:this.each(function(e){De.offset.setOffset(this,t,e)});var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],a={top:0,left:0};if("fixed"===De.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===De.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((a=De(e).offset()).top+=De.css(e,"borderTopWidth",!0),a.left+=De.css(e,"borderLeftWidth",!0))}return{top:t.top-a.top-De.css(r,"marginTop",!0),left:t.left-a.left-De.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===De.css(e,"position");)e=e.offsetParent;return e||tt})}}),De.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,a){var i="pageYOffset"===a;De.fn[t]=function(e){return Ue(this,function(e,t,n){var r;if(be(e)?r=e:9===e.nodeType&&(r=e.defaultView),n===undefined)return r?r[a]:e[t];r?r.scrollTo(i?r.pageXOffset:n,i?n:r.pageYOffset):e[t]=n},t,e,arguments.length)}}),De.each(["top","left"],function(e,n){De.cssHooks[n]=F(ve.pixelPosition,function(e,t){if(t)return t=R(e,n),vt.test(t)?De(e).position()[n]+"px":t})}),De.each({Height:"height",Width:"width"},function(o,s){De.each({padding:"inner"+o,content:s,"":"outer"+o},function(r,i){De.fn[i]=function(e,t){var n=arguments.length&&(r||"boolean"!=typeof e),a=r||(!0===e||!0===t?"margin":"border");return Ue(this,function(e,t,n){var r;return be(e)?0===i.indexOf("outer")?e["inner"+o]:e.document.documentElement["client"+o]:9===e.nodeType?(r=e.documentElement,Math.max(e.body["scroll"+o],r["scroll"+o],e.body["offset"+o],r["offset"+o],r["client"+o])):n===undefined?De.css(e,t,a):De.style(e,t,n,a)},s,n?e:undefined,n)}})}),De.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){De.fn[t]=function(e){return this.on(t,e)}}),De.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.on("mouseenter",e).on("mouseleave",t||e)}}),De.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){De.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var fn=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;De.proxy=function(e,t){var n,r,a;return"string"==typeof t&&(n=e[t],t=e,e=n),ye(e)?(r=fe.call(arguments,2),(a=function(){return e.apply(t||this,r.concat(fe.call(arguments)))}).guid=e.guid=e.guid||De.guid++,a):undefined},De.holdReady=function(e){e?De.readyWait++:De.ready(!0)},De.isArray=Array.isArray,De.parseJSON=JSON.parse,De.nodeName=ue,De.isFunction=ye,De.isWindow=be,De.camelCase=h,De.type=m,De.now=Date.now,De.isNumeric=function(e){var t=De.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},De.trim=function(e){return null==e?"":(e+"").replace(fn,"$1")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return De});var dn=le.jQuery,hn=le.$;return De.noConflict=function(e){return le.$===De&&(le.$=hn),e&&le.jQuery===De&&(le.jQuery=dn),De},void 0===e&&(le.jQuery=le.$=De),De});var hljs=new function(){function w(e){return e.replace(/&/gm,"&amp;").replace(/</gm,"&lt;")}function S(e,t,n){return RegExp(t,"m"+(e.cI?"i":"")+(n?"g":""))}function r(e){for(var t=0;t<e.childNodes.length;t++){var n=e.childNodes[t];if("CODE"==n.nodeName)return n;if(3!=n.nodeType||!n.nodeValue.match(/\s+/))break}}function h(e,t){for(var n="",r=0;r<e.childNodes.length;r++)if(3==e.childNodes[r].nodeType){var a=e.childNodes[r].nodeValue;t&&(a=a.replace(/\n/g,"")),n+=a}else"BR"==e.childNodes[r].nodeName?n+="\n":n+=h(e.childNodes[r]);return/MSIE [678]/.test(navigator.userAgent)&&(n=n.replace(/\r/g,"\n")),n}function p(e){var t=e.className.split(/\s+/);t=t.concat(e.parentNode.className.split(/\s+/));for(var n=0;n<t.length;n++){var r=t[n].replace(/^language-/,"");if(D[r]||"no-highlight"==r)return r}}function g(e){var r=[];return function(e,t){for(var n=0;n<e.childNodes.length;n++)3==e.childNodes[n].nodeType?t+=e.childNodes[n].nodeValue.length:"BR"==e.childNodes[n].nodeName?t+=1:(r.push({event:"start",offset:t,node:e.childNodes[n]}),t=arguments.callee(e.childNodes[n],t),r.push({event:"stop",offset:t,node:e.childNodes[n]}))}(e,0),r}function m(e,t,n){function r(){return e.length&&t.length?e[0].offset!=t[0].offset?e[0].offset<t[0].offset?e:t:"start"==t[0].event?e:t:e.length?e:t}function a(e){for(var t="<"+e.nodeName.toLowerCase(),n=0;n<e.attributes.length;n++){var r=e.attributes[n];t+=" "+r.nodeName.toLowerCase(),r.nodeValue!=undefined&&(t+='="'+w(r.nodeValue)+'"')}return t+">"}for(var i=0,o="",s=[];e.length||t.length;){var l=r().splice(0,1)[0];if(o+=w(n.substr(i,l.offset-i)),i=l.offset,"start"==l.event)o+=a(l.node),s.push(l.node);else if("stop"==l.event){var u=s.length;do{var c=s[--u];o+="</"+c.nodeName.toLowerCase()+">"}while(c!=l.node);for(s.splice(u,1);u<s.length;)o+=a(s[u]),u++}}return o+=n.substr(i)}function T(e,t){function l(e,t){for(var n=0;n<t.c.length;n++)if(t.c[n].bR.test(e))return t.c[n]}function u(e,t){if(h[e].e&&h[e].eR.test(t))return 1;if(h[e].eW){var n=u(e-1,t);return n?n+1:0}return 0}function c(e,t){return t.iR&&t.iR.test(e)}function a(e,t){for(var n=[],r=0;r<e.c.length;r++)n.push(e.c[r].b);for(var a=h.length-1;h[a].e&&n.push(h[a].e),h[--a+1].eW;);return e.i&&n.push(e.i),S(t,"("+n.join("|")+")",!0)}function n(e,t){var n=h[h.length-1];n.t||(n.t=a(n,s)),n.t.lastIndex=t;var r=n.t.exec(e);return r?[e.substr(t,r.index-t),r[0],!1]:[e.substr(t),"",!0]}function o(e,t){var n=s.cI?t[0].toLowerCase():t[0];for(var r in e.kG)if(e.kG.hasOwnProperty(r)){var a=e.kG[r].hasOwnProperty(n);if(a)return[r,a]}return!1}function r(e,t){if(!t.k)return w(e);var n="",r=0;t.lR.lastIndex=0;for(var a=t.lR.exec(e);a;){n+=w(e.substr(r,a.index-r));var i=o(t,a);i?(g+=i[1],n+='<span class="'+i[0]+'">'+w(a[0])+"</span>"):n+=w(a[0]),r=t.lR.lastIndex,a=t.lR.exec(e)}return n+=w(e.substr(r,e.length-r))}function f(e,t){if(t.sL&&D[t.sL]){var n=T(t.sL,e);return g+=n.keyword_count,n.value}return r(e,t)}function d(e,t){var n=e.cN?'<span class="'+e.cN+'">':"";e.rB?(m+=n,e.buffer=""):e.eB?(m+=w(t)+n,e.buffer=""):(m+=n,e.buffer=t),h.push(e),p+=e.r}function i(e,t,n){var r=h[h.length-1];if(n)return m+=f(r.buffer+e,r),!1;var a=l(t,r);if(a)return m+=f(r.buffer+e,r),d(a,t),a.rB;var i=u(h.length-1,t);if(i){var o=r.cN?"</span>":"";for(r.rE?m+=f(r.buffer+e,r)+o:r.eE?m+=f(r.buffer+e,r)+o+w(t):m+=f(r.buffer+e+t,r)+o;1<i;)o=h[h.length-2].cN?"</span>":"",m+=o,i--,h.length--;var s=h[h.length-1];return h.length--,h[h.length-1].buffer="",s.starts&&d(s.starts,""),r.rE}if(c(t,r))throw"Illegal"}var s=D[e],h=[s.dM],p=0,g=0,m="";try{var v=0;s.dM.buffer="";do{var y=n(t,v),b=i(y[0],y[1],y[2]);v+=y[0].length,b||(v+=y[1].length)}while(!y[2]);if(1<h.length)throw"Illegal";return{language:e,r:p,keyword_count:g,value:m}}catch(x){if("Illegal"==x)return{language:null,r:0,keyword_count:0,value:w(t)};throw x}}function e(){function i(e,t,n){if(!e.compiled){for(var r in n||(e.bR=S(t,e.b?e.b:"\\B|\\b"),e.e||e.eW||(e.e="\\B|\\b"),e.e&&(e.eR=S(t,e.e))),e.i&&(e.iR=S(t,e.i)),e.r==undefined&&(e.r=1),e.k&&(e.lR=S(t,e.l||hljs.IR,!0)),e.k)if(e.k.hasOwnProperty(r)){e.k[r]instanceof Object?e.kG=e.k:e.kG={keyword:e.k};break}e.c||(e.c=[]),e.compiled=!0;for(var a=0;a<e.c.length;a++)i(e.c[a],t,!1);e.starts&&i(e.starts,t,!1)}}for(var e in D)D.hasOwnProperty(e)&&i(D[e].dM,D[e],!0)}function v(){v.called||(v.called=!0,e())}function a(e,n,t){v();var r=h(e,t),a=p(e);if("no-highlight"!=a){if(a)var i=T(a,r);else{var o=i={language:"",keyword_count:0,r:0,value:w(r)};for(var s in D)if(D.hasOwnProperty(s)){var l=T(s,r);l.keyword_count+l.r>o.keyword_count+o.r&&(o=l),l.keyword_count+l.r>i.keyword_count+i.r&&(o=i,i=l)}}var u=e.className;u.match(i.language)||(u=u?u+" "+i.language:i.language);var c=g(e);if(c.length)(f=document.createElement("pre")).innerHTML=i.value,i.value=m(c,g(f),r);if(n&&(i.value=i.value.replace(/^((<[^>]+>|\t)+)/gm,function(e,t){return t.replace(/\t/g,n)})),t&&(i.value=i.value.replace(/\n/g,"<br>")),/MSIE [678]/.test(navigator.userAgent)&&"CODE"==e.tagName&&"PRE"==e.parentNode.tagName){var f=e.parentNode,d=document.createElement("div");d.innerHTML="<pre><code>"+i.value+"</code></pre>",e=d.firstChild.firstChild,d.firstChild.cN=f.cN,f.parentNode.replaceChild(d.firstChild,f)}else e.innerHTML=i.value;e.className=u,e.dataset={},e.dataset.result={language:i.language,kw:i.keyword_count,re:i.r},o&&o.language&&(e.dataset.second_best={language:o.language,kw:o.keyword_count,re:o.r})}}function i(){if(!i.called){i.called=!0,v();for(var e=document.getElementsByTagName("pre"),t=0;t<e.length;t++){var n=r(e[t]);n&&a(n,hljs.tabReplace)}}}function t(){var e=arguments,t=function(){i.apply(null,e)};window.addEventListener?(window.addEventListener("DOMContentLoaded",t,!1),window.addEventListener("load",t,!1)):window.attachEvent?window.attachEvent("onload",t):window.onload=t}var D={};this.LANGUAGES=D,this.initHighlightingOnLoad=t,this.highlightBlock=a,this.initHighlighting=i,this.IR="[a-zA-Z][a-zA-Z0-9_]*",this.UIR="[a-zA-Z_][a-zA-Z0-9_]*",this.NR="\\b\\d+(\\.\\d+)?",this.CNR="\\b(0x[A-Za-z0-9]+|\\d+(\\.\\d+)?)",this.RSR="!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|\\.|-|-=|/|/=|:|;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",this.BE={b:"\\\\.",r:0},this.ASM={cN:"string",b:"'",e:"'",i:"\\n",c:[this.BE],r:0},this.QSM={cN:"string",b:'"',e:'"',i:"\\n",c:[this.BE],r:0},this.CLCM={cN:"comment",b:"//",e:"$"},this.CBLCLM={cN:"comment",b:"/\\*",e:"\\*/"},this.HCM={cN:"comment",b:"#",e:"$"},this.NM={cN:"number",b:this.NR,r:0},this.CNM={cN:"number",b:this.CNR,r:0},this.inherit=function(e,t){var n={};for(var r in e)n[r]=e[r];if(t)for(var r in t)n[r]=t[r];return n}};hljs.LANGUAGES.ruby=function(){var e="[a-zA-Z_][a-zA-Z0-9_]*(\\!|\\?)?",t="[a-zA-Z_]\\w*[!?=]?|[-+~]\\@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?",n={keyword:{and:1,"false":1,then:1,defined:1,module:1,"in":1,"return":1,redo:1,"if":1,BEGIN:1,retry:1,end:1,"for":1,"true":1,self:1,when:1,next:1,until:1,"do":1,begin:1,unless:1,END:1,rescue:1,nil:1,"else":1,"break":1,undef:1,not:1,"super":1,"class":1,"case":1,require:1,"yield":1,alias:1,"while":1,ensure:1,elsif:1,or:1,def:1},keymethods:{__id__:1,__send__:1,abort:1,abs:1,"all?":1,allocate:1,ancestors:1,"any?":1,arity:1,assoc:1,at:1,at_exit:1,autoload:1,"autoload?":1,"between?":1,binding:1,binmode:1,"block_given?":1,call:1,callcc:1,caller:1,capitalize:1,"capitalize!":1,casecmp:1,"catch":1,ceil:1,center:1,chomp:1,"chomp!":1,chop:1,"chop!":1,chr:1,"class":1,class_eval:1,"class_variable_defined?":1,class_variables:1,clear:1,clone:1,close:1,close_read:1,close_write:1,"closed?":1,coerce:1,collect:1,"collect!":1,compact:1,"compact!":1,concat:1,"const_defined?":1,const_get:1,const_missing:1,const_set:1,constants:1,count:1,crypt:1,"default":1,default_proc:1,"delete":1,"delete!":1,delete_at:1,delete_if:1,detect:1,display:1,div:1,divmod:1,downcase:1,"downcase!":1,downto:1,dump:1,dup:1,each:1,each_byte:1,each_index:1,each_key:1,each_line:1,each_pair:1,each_value:1,each_with_index:1,"empty?":1,entries:1,eof:1,"eof?":1,"eql?":1,"equal?":1,eval:1,exec:1,exit:1,"exit!":1,extend:1,fail:1,fcntl:1,fetch:1,fileno:1,fill:1,find:1,find_all:1,first:1,flatten:1,"flatten!":1,floor:1,flush:1,for_fd:1,foreach:1,fork:1,format:1,freeze:1,"frozen?":1,fsync:1,getc:1,gets:1,global_variables:1,grep:1,gsub:1,"gsub!":1,"has_key?":1,"has_value?":1,hash:1,hex:1,id:1,include:1,"include?":1,included_modules:1,index:1,indexes:1,indices:1,induced_from:1,inject:1,insert:1,inspect:1,instance_eval:1,instance_method:1,instance_methods:1,"instance_of?":1,"instance_variable_defined?":1,instance_variable_get:1,instance_variable_set:1,instance_variables:1,"integer?":1,intern:1,invert:1,ioctl:1,"is_a?":1,isatty:1,"iterator?":1,join:1,"key?":1,keys:1,"kind_of?":1,lambda:1,last:1,length:1,lineno:1,ljust:1,load:1,local_variables:1,loop:1,lstrip:1,"lstrip!":1,map:1,"map!":1,match:1,max:1,"member?":1,merge:1,"merge!":1,method:1,"method_defined?":1,method_missing:1,methods:1,min:1,module_eval:1,modulo:1,name:1,nesting:1,"new":1,next:1,"next!":1,"nil?":1,nitems:1,"nonzero?":1,object_id:1,oct:1,open:1,pack:1,partition:1,pid:1,pipe:1,pop:1,popen:1,pos:1,prec:1,prec_f:1,prec_i:1,print:1,printf:1,private_class_method:1,private_instance_methods:1,"private_method_defined?":1,private_methods:1,proc:1,protected_instance_methods:1,"protected_method_defined?":1,protected_methods:1,public_class_method:1,public_instance_methods:1,"public_method_defined?":1,public_methods:1,push:1,putc:1,puts:1,quo:1,raise:1,rand:1,rassoc:1,read:1,read_nonblock:1,readchar:1,readline:1,readlines:1,readpartial:1,rehash:1,reject:1,"reject!":1,remainder:1,reopen:1,replace:1,require:1,"respond_to?":1,reverse:1,"reverse!":1,reverse_each:1,rewind:1,rindex:1,rjust:1,round:1,rstrip:1,"rstrip!":1,scan:1,seek:1,select:1,send:1,set_trace_func:1,shift:1,singleton_method_added:1,singleton_methods:1,size:1,sleep:1,slice:1,"slice!":1,sort:1,"sort!":1,sort_by:1,split:1,sprintf:1,squeeze:1,"squeeze!":1,srand:1,stat:1,step:1,store:1,strip:1,"strip!":1,sub:1,"sub!":1,succ:1,"succ!":1,sum:1,superclass:1,swapcase:1,"swapcase!":1,sync:1,syscall:1,sysopen:1,sysread:1,sysseek:1,system:1,syswrite:1,taint:1,"tainted?":1,tell:1,test:1,"throw":1,times:1,to_a:1,to_ary:1,to_f:1,to_hash:1,to_i:1,to_int:1,to_io:1,to_proc:1,to_s:1,to_str:1,to_sym:1,tr:1,"tr!":1,tr_s:1,"tr_s!":1,trace_var:1,transpose:1,trap:1,truncate:1,"tty?":1,type:1,ungetc:1,uniq:1,"uniq!":1,unpack:1,unshift:1,untaint:1,untrace_var:1,upcase:1,"upcase!":1,
update:1,upto:1,"value?":1,values:1,values_at:1,warn:1,write:1,write_nonblock:1,"zero?":1,zip:1}},r={cN:"yardoctag",b:"@[A-Za-z]+"},a={cN:"comment",b:"#",e:"$",c:[r]},i={cN:"comment",b:"^\\=begin",e:"^\\=end",c:[r],r:10},o={cN:"comment",b:"^__END__",e:"\\n$"},s={cN:"subst",b:"#\\{",e:"}",l:e,k:n},l=[hljs.BE,s],u={cN:"string",b:"'",e:"'",c:l,r:0},c={cN:"string",b:'"',e:'"',c:l,r:0},f={cN:"string",b:"%[qw]?\\(",e:"\\)",c:l,r:10},d={cN:"string",b:"%[qw]?\\[",e:"\\]",c:l,r:10},h={cN:"string",b:"%[qw]?{",e:"}",c:l,r:10},p={cN:"string",b:"%[qw]?<",e:">",c:l,r:10},g={cN:"string",b:"%[qw]?/",e:"/",c:l,r:10},m={cN:"string",b:"%[qw]?%",e:"%",c:l,r:10},v={cN:"string",b:"%[qw]?-",e:"-",c:l,r:10},y={cN:"string",b:"%[qw]?\\|",e:"\\|",c:l,r:10},b={cN:"function",b:"\\bdef\\s+",e:" |$|;",l:e,k:n,c:[{cN:"title",b:t,l:e,k:n},{cN:"params",b:"\\(",e:"\\)",l:e,k:n},a,i,o]},x={cN:"identifier",b:e,l:e,k:n,r:0},w=[a,i,o,u,c,f,d,h,p,g,m,v,y,{cN:"class",b:"\\b(class|module)\\b",e:"$|;",k:{"class":1,module:1},c:[{cN:"title",b:"[A-Za-z_]\\w*(::\\w+)*(\\?|\\!)?",r:0},{cN:"inheritance",b:"<\\s*",c:[{cN:"parent",b:"("+hljs.IR+"::)?"+hljs.IR}]},a,i,o]},b,{cN:"constant",b:"(::)?([A-Z]\\w*(::)?)+",r:0},{cN:"symbol",b:":",c:[u,c,f,d,h,p,g,m,v,y,x],r:0},{cN:"number",b:"(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b",r:0},{cN:"number",b:"\\?\\w"},{cN:"variable",b:"(\\$\\W)|((\\$|\\@\\@?)(\\w+))"},x,{b:"("+hljs.RSR+")\\s*",c:[a,i,o,{cN:"regexp",b:"/",e:"/[a-z]*",i:"\\n",c:[hljs.BE]}],r:0}];return s.c=w,{dM:{l:e,k:n,c:b.c[1].c=w}}}(),function(c,s,o){function l(e,t,n){var r=s.createElement(e);return t&&(r.id=te+t),n&&(r.style.cssText=n),c(r)}function f(){return o.innerHeight?o.innerHeight:c(o).height()}function u(e,n){n!==Object(n)&&(n={}),this.cache={},this.el=e,this.value=function(e){var t;return this.cache[e]===undefined&&((t=c(this.el).attr("data-cbox-"+e))!==undefined?this.cache[e]=t:n[e]!==undefined?this.cache[e]=n[e]:Q[e]!==undefined&&(this.cache[e]=Q[e])),this.cache[e]},this.get=function(e){var t=this.value(e);return c.isFunction(t)?t.call(this.el,this):t}}function i(e){var t=N.length,n=(X+e)%t;return n<0?t+n:n}function d(e,t){return Math.round((/%/.test(e)?("x"===t?j.width():f())/100:1)*parseInt(e,10))}function h(e,t){return e.get("photo")||e.get("photoRegex").test(t)}function p(e,t){return e.get("retinaUrl")&&1<o.devicePixelRatio?t.replace(e.get("photoRegex"),e.get("retinaSuffix")):t}function g(e){"contains"in S[0]&&!S[0].contains(e.target)&&e.target!==w[0]&&(e.stopPropagation(),S.focus())}function m(e){m.str!==e&&(S.add(w).removeClass(m.str).addClass(e),m.str=e)}function v(e){X=0,e&&!1!==e&&"nofollow"!==e?(N=c("."+ne).filter(function(){return new u(this,c.data(this,ee)).get("rel")===e}),-1===(X=N.index(W.el))&&(N=N.add(W.el),X=N.length-1)):N=c(W.el)}function y(e){c(s).trigger(e),ue.triggerHandler(e)}function r(e){var t;if(!Y){if(t=c(e).data(ee),v((W=new u(e,t)).get("rel")),!G){G=J=!0,m(W.get("className")),S.css({visibility:"hidden",display:"block",opacity:""}),I=l(ce,"LoadedContent","width:0; height:0; overflow:hidden; visibility:hidden"),D.css({width:"",height:""}).append(I),$=C.height()+k.height()+D.outerHeight(!0)-D.height(),B=_.width()+A.width()+D.outerWidth(!0)-D.width(),U=I.outerHeight(!0),z=I.outerWidth(!0);var n=d(W.get("initialWidth"),"x"),r=d(W.get("initialHeight"),"y"),a=W.get("maxWidth"),i=W.get("maxHeight");W.w=Math.max((!1!==a?Math.min(n,d(a,"x")):n)-z-B,0),W.h=Math.max((!1!==i?Math.min(r,d(i,"y")):r)-U-$,0),I.css({width:"",height:W.h}),K.position(),y(re),W.get("onOpen"),q.add(R).hide(),S.focus(),W.get("trapFocus")&&s.addEventListener&&(s.addEventListener("focus",g,!0),ue.one(se,function(){s.removeEventListener("focus",g,!0)})),W.get("returnFocus")&&ue.one(se,function(){c(W.el).focus()})}var o=parseFloat(W.get("opacity"));w.css({opacity:o==o?o:"",cursor:W.get("overlayClose")?"pointer":"",visibility:"visible"}).show(),W.get("closeButton")?O.html(W.get("close")).appendTo(D):O.appendTo("<div/>"),x()}}function a(){S||(t=!1,j=c(o),S=l(ce).attr({id:ee,"class":!1===c.support.opacity?te+"IE":"",role:"dialog",tabindex:"-1"}).hide(),w=l(ce,"Overlay").hide(),E=c([l(ce,"LoadingOverlay")[0],l(ce,"LoadingGraphic")[0]]),T=l(ce,"Wrapper"),D=l(ce,"Content").append(R=l(ce,"Title"),F=l(ce,"Current"),M=c('<button type="button"/>').attr({id:te+"Previous"}),H=c('<button type="button"/>').attr({id:te+"Next"}),P=c('<button type="button"/>').attr({id:te+"Slideshow"}),E),O=c('<button type="button"/>').attr({id:te+"Close"}),T.append(l(ce).append(l(ce,"TopLeft"),C=l(ce,"TopCenter"),l(ce,"TopRight")),l(ce,!1,"clear:left").append(_=l(ce,"MiddleLeft"),D,A=l(ce,"MiddleRight")),l(ce,!1,"clear:left").append(l(ce,"BottomLeft"),k=l(ce,"BottomCenter"),l(ce,"BottomRight"))).find("div div").css({"float":"left"}),L=l(ce,!1,"position:absolute; width:9999px; visibility:hidden; display:none; max-width:none;"),q=H.add(M).add(F).add(P)),s.body&&!S.parent().length&&c(s.body).append(w,S.append(T,L))}function b(){function e(e){1<e.which||e.shiftKey||e.altKey||e.metaKey||e.ctrlKey||(e.preventDefault(),r(this))}return!!S&&(t||(t=!0,H.click(function(){K.next()}),M.click(function(){K.prev()}),O.click(function(){K.close()}),w.click(function(){W.get("overlayClose")&&K.close()}),c(s).bind("keydown."+te,function(e){var t=e.keyCode;G&&W.get("escKey")&&27===t&&(e.preventDefault(),K.close()),G&&W.get("arrowKey")&&N[1]&&!e.altKey&&(37===t?(e.preventDefault(),M.click()):39===t&&(e.preventDefault(),H.click()))}),c.isFunction(c.fn.on)?c(s).on("click."+te,"."+ne,e):c("."+ne).live("click."+te,e)),!0)}function x(){var e,t,n,r=K.prep,a=++fe;if(V=!(J=!0),y(le),y(ae),W.get("onLoad"),W.h=W.get("height")?d(W.get("height"),"y")-U-$:W.get("innerHeight")&&d(W.get("innerHeight"),"y"),W.w=W.get("width")?d(W.get("width"),"x")-z-B:W.get("innerWidth")&&d(W.get("innerWidth"),"x"),W.mw=W.w,W.mh=W.h,W.get("maxWidth")&&(W.mw=d(W.get("maxWidth"),"x")-z-B,W.mw=W.w&&W.w<W.mw?W.w:W.mw),W.get("maxHeight")&&(W.mh=d(W.get("maxHeight"),"y")-U-$,W.mh=W.h&&W.h<W.mh?W.h:W.mh),e=W.get("href"),Z=setTimeout(function(){E.show()},100),W.get("inline")){var i=c(e).eq(0);n=c("<div>").hide().insertBefore(i),ue.one(le,function(){n.replaceWith(i)}),r(i)}else W.get("iframe")?r(" "):W.get("html")?r(W.get("html")):h(W,e)?(e=p(W,e),V=W.get("createImg"),c(V).addClass(te+"Photo").bind("error."+te,function(){r(l(ce,"Error").html(W.get("imgError")))}).one("load",function(){a===fe&&setTimeout(function(){var e;W.get("retinaImage")&&1<o.devicePixelRatio&&(V.height=V.height/o.devicePixelRatio,V.width=V.width/o.devicePixelRatio),W.get("scalePhotos")&&(t=function(){V.height-=V.height*e,V.width-=V.width*e},W.mw&&V.width>W.mw&&(e=(V.width-W.mw)/V.width,t()),W.mh&&V.height>W.mh&&(e=(V.height-W.mh)/V.height,t())),W.h&&(V.style.marginTop=Math.max(W.mh-V.height,0)/2+"px"),N[1]&&(W.get("loop")||N[X+1])&&(V.style.cursor="pointer",c(V).bind("click."+te,function(){K.next()})),V.style.width=V.width+"px",V.style.height=V.height+"px",r(V)},1)}),V.src=e):e&&L.load(e,W.get("data"),function(e,t){a===fe&&r("error"===t?l(ce,"Error").html(W.get("xhrError")):c(this).contents())})}var w,S,T,D,C,_,A,k,N,j,I,L,E,R,F,P,H,M,O,q,W,$,B,U,z,X,V,G,J,Y,Z,K,t,Q={html:!1,photo:!1,iframe:!1,inline:!1,transition:"elastic",speed:300,fadeOut:300,width:!1,initialWidth:"600",innerWidth:!1,maxWidth:!1,height:!1,initialHeight:"450",innerHeight:!1,maxHeight:!1,scalePhotos:!0,scrolling:!0,opacity:.9,preloading:!0,className:!1,overlayClose:!0,escKey:!0,arrowKey:!0,top:!1,bottom:!1,left:!1,right:!1,fixed:!1,data:undefined,closeButton:!0,fastIframe:!0,open:!1,reposition:!0,loop:!0,slideshow:!1,slideshowAuto:!0,slideshowSpeed:2500,slideshowStart:"start slideshow",slideshowStop:"stop slideshow",photoRegex:/\.(gif|png|jp(e|g|eg)|bmp|ico|webp|jxr|svg)((#|\?).*)?$/i,retinaImage:!1,retinaUrl:!1,retinaSuffix:"@2x.$1",current:"image {current} of {total}",previous:"previous",next:"next",close:"close",xhrError:"This content failed to load.",imgError:"This image failed to load.",returnFocus:!0,trapFocus:!0,onOpen:!1,onLoad:!1,onComplete:!1,onCleanup:!1,onClosed:!1,rel:function(){return this.rel},href:function(){return c(this).attr("href")},title:function(){return this.title},createImg:function(){var n=new Image,e=c(this).data("cbox-img-attrs");return"object"==typeof e&&c.each(e,function(e,t){n[e]=t}),n},createIframe:function(){var n=s.createElement("iframe"),e=c(this).data("cbox-iframe-attrs");return"object"==typeof e&&c.each(e,function(e,t){n[e]=t}),"frameBorder"in n&&(n.frameBorder=0),"allowTransparency"in n&&(n.allowTransparency="true"),n.name=(new Date).getTime(),n.allowFullscreen=!0,n}},ee="colorbox",te="cbox",ne=te+"Element",re=te+"_open",ae=te+"_load",ie=te+"_complete",oe=te+"_cleanup",se=te+"_closed",le=te+"_purge",ue=c("<a/>"),ce="div",fe=0,de={},he=function(){function e(){clearTimeout(o)}function t(){(W.get("loop")||N[X+1])&&(e(),o=setTimeout(K.next,W.get("slideshowSpeed")))}function n(){P.html(W.get("slideshowStop")).unbind(l).one(l,r),ue.bind(ie,t).bind(ae,e),S.removeClass(s+"off").addClass(s+"on")}function r(){e(),ue.unbind(ie,t).unbind(ae,e),P.html(W.get("slideshowStart")).unbind(l).one(l,function(){K.next(),n()}),S.removeClass(s+"on").addClass(s+"off")}function a(){i=!1,P.hide(),e(),ue.unbind(ie,t).unbind(ae,e),S.removeClass(s+"off "+s+"on")}var i,o,s=te+"Slideshow_",l="click."+te;return function(){i?W.get("slideshow")||(ue.unbind(oe,a),a()):W.get("slideshow")&&N[1]&&(i=!0,ue.one(oe,a),W.get("slideshowAuto")?n():r(),P.show())}}();c[ee]||(c(a),(K=c.fn[ee]=c[ee]=function(t,e){var n=this;return t=t||{},c.isFunction(n)&&(n=c("<a/>"),t.open=!0),n[0]&&(a(),b()&&(e&&(t.onComplete=e),n.each(function(){var e=c.data(this,ee)||{};c.data(this,ee,c.extend(e,t))}).addClass(ne),new u(n[0],t).get("open")&&r(n[0]))),n}).position=function(t,e){function n(){C[0].style.width=k[0].style.width=D[0].style.width=parseInt(S[0].style.width,10)-B+"px",D[0].style.height=_[0].style.height=A[0].style.height=parseInt(S[0].style.height,10)-$+"px"}var r,a,i,o=0,s=0,l=S.offset();if(j.unbind("resize."+te),S.css({top:-9e4,left:-9e4}),a=j.scrollTop(),i=j.scrollLeft(),W.get("fixed")?(l.top-=a,l.left-=i,S.css({position:"fixed"})):(o=a,s=i,S.css({position:"absolute"})),!1!==W.get("right")?s+=Math.max(j.width()-W.w-z-B-d(W.get("right"),"x"),0):!1!==W.get("left")?s+=d(W.get("left"),"x"):s+=Math.round(Math.max(j.width()-W.w-z-B,0)/2),!1!==W.get("bottom")?o+=Math.max(f()-W.h-U-$-d(W.get("bottom"),"y"),0):!1!==W.get("top")?o+=d(W.get("top"),"y"):o+=Math.round(Math.max(f()-W.h-U-$,0)/2),S.css({top:l.top,left:l.left,visibility:"visible"}),T[0].style.width=T[0].style.height="9999px",r={width:W.w+z+B,height:W.h+U+$,top:o,left:s},t){var u=0;c.each(r,function(e){r[e]===de[e]||(u=t)}),t=u}de=r,t||S.css(r),S.dequeue().animate(r,{duration:t||0,complete:function(){n(),J=!1,T[0].style.width=W.w+z+B+"px",T[0].style.height=W.h+U+$+"px",W.get("reposition")&&setTimeout(function(){j.bind("resize."+te,K.position)},1),c.isFunction(e)&&e()},step:n})},K.resize=function(e){var t;G&&((e=e||{}).width&&(W.w=d(e.width,"x")-z-B),e.innerWidth&&(W.w=d(e.innerWidth,"x")),I.css({width:W.w}),e.height&&(W.h=d(e.height,"y")-U-$),e.innerHeight&&(W.h=d(e.innerHeight,"y")),e.innerHeight||e.height||(t=I.scrollTop(),I.css({height:"auto"}),W.h=I.height()),I.css({height:W.h}),t&&I.scrollTop(t),K.position("none"===W.get("transition")?0:W.get("speed")))},K.prep=function(e){function t(){return W.w=W.w||I.width(),W.w=W.mw&&W.mw<W.w?W.mw:W.w,W.w}function n(){return W.h=W.h||I.height(),W.h=W.mh&&W.mh<W.h?W.mh:W.h,W.h}if(G){var r,a="none"===W.get("transition")?0:W.get("speed");I.remove(),(I=l(ce,"LoadedContent").append(e)).hide().appendTo(L.show()).css({width:t(),overflow:W.get("scrolling")?"auto":"hidden"}).css({height:n()}).prependTo(D),L.hide(),c(V).css({"float":"none"}),m(W.get("className")),r=function(){function e(){!1===c.support.opacity&&S[0].style.removeAttribute("filter")}var t,n,r=N.length;G&&(n=function(){clearTimeout(Z),E.hide(),y(ie),W.get("onComplete")},R.html(W.get("title")).show(),I.show(),1<r?("string"==typeof W.get("current")&&F.html(W.get("current").replace("{current}",X+1).replace("{total}",r)).show(),H[W.get("loop")||X<r-1?"show":"hide"]().html(W.get("next")),M[W.get("loop")||X?"show":"hide"]().html(W.get("previous")),he(),W.get("preloading")&&c.each([i(-1),i(1)],function(){var e=N[this],t=new u(e,c.data(e,ee)),n=t.get("href");n&&h(t,n)&&(n=p(t,n),s.createElement("img").src=n)})):q.hide(),W.get("iframe")?(t=W.get("createIframe"),W.get("scrolling")||(t.scrolling="no"),c(t).attr({src:W.get("href"),"class":te+"Iframe"}).one("load",n).appendTo(I),ue.one(le,function(){t.src="//about:blank"}),W.get("fastIframe")&&c(t).trigger("load")):n(),"fade"===W.get("transition")?S.fadeTo(a,1,e):e())},"fade"===W.get("transition")?S.fadeTo(a,0,function(){K.position(0,r)}):K.position(a,r)}},K.next=function(){!J&&N[1]&&(W.get("loop")||N[X+1])&&(X=i(1),r(N[X]))},K.prev=function(){!J&&N[1]&&(W.get("loop")||X)&&(X=i(-1),r(N[X]))},K.close=function(){G&&!Y&&(G=!(Y=!0),y(oe),W.get("onCleanup"),j.unbind("."+te),w.fadeTo(W.get("fadeOut")||0,0),S.stop().fadeTo(W.get("fadeOut")||0,0,function(){S.hide(),w.hide(),y(le),I.remove(),setTimeout(function(){Y=!1,y(se),W.get("onClosed")},1)}))},K.remove=function(){S&&(S.stop(),c[ee].close(),S.stop(!1,!0).remove(),w.remove(),Y=!1,S=null,c("."+ne).removeData(ee).removeClass(ne),c(s).unbind("click."+te).unbind("keydown."+te))},K.element=function(){return c(W.el)},K.settings=Q)}(jQuery,document,window),function(n){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(e){return n(e,window,document)}):"object"==typeof exports?module.exports=function(e,t){return e||(e=window),t||(t="undefined"!=typeof window?require("jquery"):require("jquery")(e)),n(t,e,e.document)}:n(jQuery,window,document)}(function($,k,x,B){"use strict";function o(t){var n,r,a="a aa ai ao as b fn i m o s ",i={};$.each(t,function(e){(n=e.match(/^([^A-Z]+?)([A-Z])/))&&-1!==a.indexOf(n[1]+" ")&&(r=e.replace(n[0],n[2].toLowerCase()),i[r]=e,"o"===n[1]&&o(t[e]))}),t._hungarianMap=i}function A(t,n,r){var a;t._hungarianMap||o(t),$.each(n,function(e){(a=t._hungarianMap[e])===B||!r&&n[a]!==B||("o"===a.charAt(0)?(n[a]||(n[a]={}),$.extend(!0,n[a],n[e]),A(t[a],n[a],r)):n[a]=n[e])})}function N(e){var t=Ge.defaults.oLanguage,n=t.sDecimal;if(n&&$e(n),e){var r=e.sZeroRecords;!e.sEmptyTable&&r&&"No data available in table"===t.sEmptyTable&&Ee(e,e,"sZeroRecords","sEmptyTable"),!e.sLoadingRecords&&r&&"Loading..."===t.sLoadingRecords&&Ee(e,e,"sZeroRecords","sLoadingRecords"),e.sInfoThousands&&(e.sThousands=e.sInfoThousands);var a=e.sDecimal;a&&n!==a&&$e(a)}}function j(e){pt(e,"ordering","bSort"),pt(e,"orderMulti","bSortMulti"),pt(e,"orderClasses","bSortClasses"),pt(e,"orderCellsTop","bSortCellsTop"),pt(e,"order","aaSorting"),pt(e,"orderFixed","aaSortingFixed"),pt(e,"paging","bPaginate"),pt(e,"pagingType","sPaginationType"),pt(e,"pageLength","iDisplayLength"),pt(e,"searching","bFilter"),"boolean"==typeof e.sScrollX&&(e.sScrollX=e.sScrollX?"100%":""),"boolean"==typeof e.scrollX&&(e.scrollX=e.scrollX?"100%":"");var t=e.aoSearchCols;if(t)for(var n=0,r=t.length;n<r;n++)t[n]&&A(Ge.models.oSearch,t[n])}function I(e){pt(e,"orderable","bSortable"),pt(e,"orderData","aDataSort"),pt(e,"orderSequence","asSorting"),pt(e,"orderDataType","sortDataType");var t=e.aDataSort;"number"!=typeof t||$.isArray(t)||(e.aDataSort=[t])}function L(e){if(!Ge.__browser){var t={};Ge.__browser=t;var n=$("<div/>").css({position:"fixed",top:0,left:-1*$(k).scrollLeft(),height:1,width:1,overflow:"hidden"}).append($("<div/>").css({position:"absolute",top:1,left:1,width:100,overflow:"scroll"}).append($("<div/>").css({width:"100%",height:10}))).appendTo("body"),r=n.children(),a=r.children();t.barWidth=r[0].offsetWidth-r[0].clientWidth,t.bScrollOversize=100===a[0].offsetWidth&&100!==r[0].clientWidth,t.bScrollbarLeft=1!==Math.round(a.offset().left),t.bBounding=!!n[0].getBoundingClientRect().width,n.remove()}$.extend(e.oBrowser,Ge.__browser),e.oScroll.iBarWidth=Ge.__browser.barWidth}function n(e,t,n,r,a,i){var o,s=r,l=!1;for(n!==B&&(o=n,l=!0);s!==a;)e.hasOwnProperty(s)&&(o=l?t(o,e[s],s,e):e[s],l=!0,s+=i);return o}function E(e,t){var n=Ge.defaults.column,r=e.aoColumns.length,a=$.extend({},Ge.models.oColumn,n,{nTh:t||x.createElement("th"),sTitle:n.sTitle?n.sTitle:t?t.innerHTML:"",aDataSort:n.aDataSort?n.aDataSort:[r],mData:n.mData?n.mData:r,idx:r});e.aoColumns.push(a);var i=e.aoPreSearchCols;i[r]=$.extend({},Ge.models.oSearch,i[r]),R(e,r,$(t).data())}function R(e,t,n){var r=e.aoColumns[t],a=e.oClasses,i=$(r.nTh);if(!r.sWidthOrig){r.sWidthOrig=i.attr("width")||null;var o=(i.attr("style")||"").match(/width:\s*(\d+[pxem%]+)/);o&&(r.sWidthOrig=o[1])}n!==B&&null!==n&&(I(n),A(Ge.defaults.column,n,!0),n.mDataProp===B||n.mData||(n.mData=n.mDataProp),n.sType&&(r._sManualType=n.sType),n.className&&!n.sClass&&(n.sClass=n.className),n.sClass&&i.addClass(n.sClass),$.extend(r,n),Ee(r,n,"sWidth","sWidthOrig"),n.iDataSort!==B&&(r.aDataSort=[n.iDataSort]),Ee(r,n,"aDataSort"));var s=r.mData,l=q(s),u=r.mRender?q(r.mRender):null,c=function(e){return"string"==typeof e&&-1!==e.indexOf("@")};r._bAttrSrc=$.isPlainObject(s)&&(c(s.sort)||c(s.type)||c(s.filter)),r._setter=null,r.fnGetData=function(e,t,n){var r=l(e,t,B,n);return u&&t?u(r,t,e,n):r},r.fnSetData=function(e,t,n){return y(s)(e,t,n)},"number"!=typeof s&&(e._rowReadObject=!0),e.oFeatures.bSort||(r.bSortable=!1,i.addClass(a.sSortableNone));var f=-1!==$.inArray("asc",r.asSorting),d=-1!==$.inArray("desc",r.asSorting);r.bSortable&&(f||d)?f&&!d?(r.sSortingClass=a.sSortableAsc,r.sSortingClassJUI=a.sSortJUIAscAllowed):!f&&d?(r.sSortingClass=a.sSortableDesc,r.sSortingClassJUI=a.sSortJUIDescAllowed):(r.sSortingClass=a.sSortable,r.sSortingClassJUI=a.sSortJUI):(r.sSortingClass=a.sSortableNone,r.sSortingClassJUI="")}function U(e){if(!1!==e.oFeatures.bAutoWidth){var t=e.aoColumns;ve(e);for(var n=0,r=t.length;n<r;n++)t[n].nTh.style.width=t[n].sWidth}var a=e.oScroll;""===a.sY&&""===a.sX||ge(e),He(e,null,"column-sizing",[e])}function z(e,t){var n=P(e,"bVisible");return"number"==typeof n[t]?n[t]:null}function c(e,t){var n=P(e,"bVisible"),r=$.inArray(t,n);return-1!==r?r:null}function F(e){var n=0;return $.each(e.aoColumns,function(e,t){t.bVisible&&"none"!==$(t.nTh).css("display")&&n++}),n}function P(e,n){var r=[];return $.map(e.aoColumns,function(e,t){e[n]&&r.push(t)}),r}function l(e){var t,n,r,a,i,o,s,l,u,c=e.aoColumns,f=e.aoData,d=Ge.ext.type.detect;for(t=0,n=c.length;t<n;t++)if(u=[],!(s=c[t]).sType&&s._sManualType)s.sType=s._sManualType;else if(!s.sType){for(r=0,a=d.length;r<a;r++){for(i=0,o=f.length;i<o&&(u[i]===B&&(u[i]=g(e,i,t,"type")),(l=d[r](u[i],e))||r===d.length-1)&&"html"!==l;i++);if(l){s.sType=l;break}}s.sType||(s.sType="string")}}function H(e,t,n,r){var a,i,o,s,l,u,c,f=e.aoColumns;if(t)for(a=t.length-1;0<=a;a--){var d=(c=t[a]).targets!==B?c.targets:c.aTargets;for($.isArray(d)||(d=[d]),o=0,s=d.length;o<s;o++)if("number"==typeof d[o]&&0<=d[o]){for(;f.length<=d[o];)E(e);r(d[o],c)}else if("number"==typeof d[o]&&d[o]<0)r(f.length+d[o],c);else if("string"==typeof d[o])for(l=0,u=f.length;l<u;l++)("_all"==d[o]||$(f[l].nTh).hasClass(d[o]))&&r(l,c)}if(n)for(a=0,i=n.length;a<i;a++)r(a,n[a])}function M(e,t,n,r){var a=e.aoData.length,i=$.extend(!0,{},Ge.models.oRow,{src:n?"dom":"data",idx:a});i._aData=t,e.aoData.push(i);for(var o=e.aoColumns,s=0,l=o.length;s<l;s++)o[s].sType=null;e.aiDisplayMaster.push(a);var u=e.rowIdFn(t);return u!==B&&(e.aIds[u]=i),!n&&e.oFeatures.bDeferRender||S(e,a,n,r),a}function O(n,e){var r;return e instanceof $||(e=$(e)),e.map(function(e,t){return r=f(n,t),M(n,r.data,t,r.cells)})}function e(e,t){return t._DT_RowIndex!==B?t._DT_RowIndex:null}function t(e,t,n){return $.inArray(n,e.aoData[t].anCells)}function g(e,t,n,r){var a=e.iDraw,i=e.aoColumns[n],o=e.aoData[t]._aData,s=i.sDefaultContent,l=i.fnGetData(o,r,{settings:e,row:t,col:n});if(l===B)return e.iDrawError!=a&&null===s&&(Le(e,0,"Requested unknown parameter "+("function"==typeof i.mData?"{function}":"'"+i.mData+"'")+" for row "+t+", column "+n,4),e.iDrawError=a),s;if(l!==o&&null!==l||null===s||r===B){if("function"==typeof l)return l.call(o)}else l=s;return null===l&&"display"==r?"":l}function r(e,t,n,r){var a=e.aoColumns[n],i=e.aoData[t]._aData;a.fnSetData(i,r,{settings:e,row:t,col:n})}function m(e){return $.map(e.match(/(\\.|[^\.])+/g)||[""],function(e){return e.replace(/\\\./g,".")})}function q(a){if($.isPlainObject(a)){var i={};return $.each(a,function(e,t){t&&(i[e]=q(t))}),function(e,t,n,r){var a=i[t]||i._;return a!==B?a(e,t,n,r):e}}if(null===a)return function(e){return e};if("function"==typeof a)return function(e,t,n,r){return a(e,t,n,r)};if("string"!=typeof a||-1===a.indexOf(".")&&-1===a.indexOf("[")&&-1===a.indexOf("("))return function(e){return e[a]};var h=function(e,t,n){var r,a,i,o;if(""!==n)for(var s=m(n),l=0,u=s.length;l<u;l++){if(r=s[l].match(gt),a=s[l].match(mt),r){if(s[l]=s[l].replace(gt,""),""!==s[l]&&(e=e[s[l]]),i=[],s.splice(0,l+1),o=s.join("."),$.isArray(e))for(var c=0,f=e.length;c<f;c++)i.push(h(e[c],t,o));var d=r[0].substring(1,r[0].length-1);e=""===d?i:i.join(d);break}if(a)s[l]=s[l].replace(mt,""),e=e[s[l]]();else{if(null===e||e[s[l]]===B)return B;e=e[s[l]]}}return e};return function(e,t){return h(e,t,a)}}function y(r){if($.isPlainObject(r))return y(r._);if(null===r)return function(){};if("function"==typeof r)return function(e,t,n){r(e,"set",t,n)};if("string"!=typeof r||-1===r.indexOf(".")&&-1===r.indexOf("[")&&-1===r.indexOf("("))return function(e,t){e[r]=t};var p=function(e,t,n){for(var r,a,i,o,s,l=m(n),u=l[l.length-1],c=0,f=l.length-1;c<f;c++){if(a=l[c].match(gt),i=l[c].match(mt),a){if(l[c]=l[c].replace(gt,""),e[l[c]]=[],(r=l.slice()).splice(0,c+1),s=r.join("."),$.isArray(t))for(var d=0,h=t.length;d<h;d++)p(o={},t[d],s),e[l[c]].push(o);else e[l[c]]=t;return}i&&(l[c]=l[c].replace(mt,""),e=e[l[c]](t)),null!==e[l[c]]&&e[l[c]]!==B||(e[l[c]]={}),e=e[l[c]]}u.match(mt)?e=e[u.replace(mt,"")](t):e[u.replace(gt,"")]=t};return function(e,t){return p(e,t,r)}}function w(e){return st(e.aoData,"_aData")}function u(e){e.aoData.length=0,e.aiDisplayMaster.length=0,e.aiDisplay.length=0,e.aIds={}}function h(e,t,n){for(var r=-1,a=0,i=e.length;a<i;a++)e[a]==t?r=a:e[a]>t&&e[a]--;-1!=r&&n===B&&e.splice(r,1)}function a(n,r,e,t){var a,i,o=n.aoData[r],s=function(e,t){for(;e.childNodes.length;)e.removeChild(e.firstChild);e.innerHTML=g(n,r,t,"display")};if("dom"!==e&&(e&&"auto"!==e||"dom"!==o.src)){var l=o.anCells;if(l)if(t!==B)s(l[t],t);else for(a=0,i=l.length;a<i;a++)s(l[a],a)}else o._aData=f(n,o,t,t===B?B:o._aData).data;o._aSortData=null,o._aFilterData=null;var u=n.aoColumns;if(t!==B)u[t].sType=null;else{for(a=0,i=u.length;a<i;a++)u[a].sType=null;p(n,o)}}function f(e,t,n,a){var r,i,o,s=[],l=t.firstChild,u=0,c=e.aoColumns,f=e._rowReadObject;a=a!==B?a:f?{}:[];var d=function(e,t){if("string"==typeof e){var n=e.indexOf("@");if(-1!==n){var r=e.substring(n+1);y(e)(a,t.getAttribute(r))}}},h=function(e){n!==B&&n!==u||(i=c[u],o=$.trim(e.innerHTML),i&&i._bAttrSrc?(y(i.mData._)(a,o),d(i.mData.sort,e),d(i.mData.type,e),d(i.mData.filter,e)):f?(i._setter||(i._setter=y(i.mData)),i._setter(a,o)):a[u]=o);u++};if(l)for(;l;)"TD"!=(r=l.nodeName.toUpperCase())&&"TH"!=r||(h(l),s.push(l)),l=l.nextSibling;else for(var p=0,g=(s=t.anCells).length;p<g;p++)h(s[p]);var m=t.firstChild?t:t.nTr;if(m){var v=m.getAttribute("id");v&&y(e.rowId)(a,v)}return{data:a,cells:s}}function S(e,t,n,r){var a,i,o,s,l,u,c=e.aoData[t],f=c._aData,d=[];if(null===c.nTr){for(a=n||x.createElement("tr"),c.nTr=a,c.anCells=d,a._DT_RowIndex=t,p(e,c),s=0,l=e.aoColumns.length;s<l;s++)o=e.aoColumns[s],(i=(u=!n)?x.createElement(o.sCellType):r[s])._DT_CellIndex={row:t,column:s},d.push(i),!u&&(n&&!o.mRender&&o.mData===s||$.isPlainObject(o.mData)&&o.mData._===s+".display")||(i.innerHTML=g(e,t,s,"display")),o.sClass&&(i.className+=" "+o.sClass),o.bVisible&&!n?a.appendChild(i):!o.bVisible&&n&&i.parentNode.removeChild(i),o.fnCreatedCell&&o.fnCreatedCell.call(e.oInstance,i,g(e,t,s),f,t,s);He(e,"aoRowCreatedCallback",null,[a,f,t,d])}c.nTr.setAttribute("role","row")}function p(e,t){var n=t.nTr,r=t._aData;if(n){var a=e.rowIdFn(r);if(a&&(n.id=a),r.DT_RowClass){var i=r.DT_RowClass.split(" ");t.__rowc=t.__rowc?ht(t.__rowc.concat(i)):i,$(n).removeClass(t.__rowc.join(" ")).addClass(r.DT_RowClass)}r.DT_RowAttr&&$(n).attr(r.DT_RowAttr),r.DT_RowData&&$(n).data(r.DT_RowData)}}function d(e){var t,n,r,a,i,o=e.nTHead,s=e.nTFoot,l=0===$("th, td",o).length,u=e.oClasses,c=e.aoColumns;for(l&&(a=$("<tr/>").appendTo(o)),t=0,n=c.length;t<n;t++)i=c[t],r=$(i.nTh).addClass(i.sClass),l&&r.appendTo(a),e.oFeatures.bSort&&(r.addClass(i.sSortingClass),!1!==i.bSortable&&(r.attr("tabindex",e.iTabIndex).attr("aria-controls",e.sTableId),_e(e,i.nTh,t))),i.sTitle!=r[0].innerHTML&&r.html(i.sTitle),Oe(e,"header")(e,r,i,u);if(l&&W(e.aoHeader,o),$(o).find(">tr").attr("role","row"),$(o).find(">tr>th, >tr>td").addClass(u.sHeaderTH),$(s).find(">tr>th, >tr>td").addClass(u.sFooterTH),null!==s){var f=e.aoFooter[0];for(t=0,n=f.length;t<n;t++)(i=c[t]).nTf=f[t].cell,i.sClass&&$(i.nTf).addClass(i.sClass)}}function v(e,t,n){var r,a,i,o,s,l,u,c,f,d=[],h=[],p=e.aoColumns.length;if(t){for(n===B&&(n=!1),r=0,a=t.length;r<a;r++){for(d[r]=t[r].slice(),d[r].nTr=t[r].nTr,i=p-1;0<=i;i--)e.aoColumns[i].bVisible||n||d[r].splice(i,1);h.push([])}for(r=0,a=d.length;r<a;r++){if(u=d[r].nTr)for(;l=u.firstChild;)u.removeChild(l);for(i=0,o=d[r].length;i<o;i++)if(f=c=1,h[r][i]===B){for(u.appendChild(d[r][i].cell),h[r][i]=1;d[r+c]!==B&&d[r][i].cell==d[r+c][i].cell;)h[r+c][i]=1,c++;for(;d[r][i+f]!==B&&d[r][i].cell==d[r][i+f].cell;){for(s=0;s<c;s++)h[r+s][i+f]=1;f++}$(d[r][i].cell).attr("rowspan",c).attr("colspan",f)}}}}function b(e){var t=He(e,"aoPreDrawCallback","preDraw",[e]);if(-1===$.inArray(!1,t)){var n=[],r=0,a=e.asStripeClasses,i=a.length,o=(e.aoOpenRows.length,e.oLanguage),s=e.iInitDisplayStart,l="ssp"==qe(e),u=e.aiDisplay;e.bDrawing=!0,s!==B&&-1!==s&&(e._iDisplayStart=l?s:s>=e.fnRecordsDisplay()?0:s,e.iInitDisplayStart=-1);var c=e._iDisplayStart,f=e.fnDisplayEnd();if(e.bDeferLoading)e.bDeferLoading=!1,e.iDraw++,he(e,!1);else if(l){if(!e.bDestroying&&!_(e))return}else e.iDraw++;if(0!==u.length)for(var d=l?0:c,h=l?e.aoData.length:f,p=d;p<h;p++){var g=u[p],m=e.aoData[g];null===m.nTr&&S(e,g);var v=m.nTr;if(0!==i){var y=a[r%i];m._sRowStripe!=y&&($(v).removeClass(m._sRowStripe).addClass(y),m._sRowStripe=y)}He(e,"aoRowCallback",null,[v,m._aData,r,p,g]),n.push(v),r++}else{var b=o.sZeroRecords;1==e.iDraw&&"ajax"==qe(e)?b=o.sLoadingRecords:o.sEmptyTable&&0===e.fnRecordsTotal()&&(b=o.sEmptyTable),n[0]=$("<tr/>",{"class":i?a[0]:""}).append($("<td />",{valign:"top",colSpan:F(e),"class":e.oClasses.sRowEmpty}).html(b))[0]}He(e,"aoHeaderCallback","header",[$(e.nTHead).children("tr")[0],w(e),c,f,u]),He(e,"aoFooterCallback","footer",[$(e.nTFoot).children("tr")[0],w(e),c,f,u]);var x=$(e.nTBody);x.children().detach(),x.append($(n)),He(e,"aoDrawCallback","draw",[e]),e.bSorted=!1,e.bFiltered=!1,e.bDrawing=!1}else he(e,!1)}function T(e,t){var n=e.oFeatures,r=n.bSort,a=n.bFilter;r&&Te(e),a?J(e,e.oPreviousSearch):e.aiDisplay=e.aiDisplayMaster.slice(),!0!==t&&(e._iDisplayStart=0),e._drawHold=t,b(e),e._drawHold=!1}function D(e){var t=e.oClasses,n=$(e.nTable),r=$("<div/>").insertBefore(n),a=e.oFeatures,i=$("<div/>",{id:e.sTableId+"_wrapper","class":t.sWrapper+(e.nTFoot?"":" "+t.sNoFooter)});e.nHolding=r[0],e.nTableWrapper=i[0],e.nTableReinsertBefore=e.nTable.nextSibling;for(var o,s,l,u,c,f,d=e.sDom.split(""),h=0;h<d.length;h++){if(o=null,"<"==(s=d[h])){if(l=$("<div/>")[0],"'"==(u=d[h+1])||'"'==u){for(c="",f=2;d[h+f]!=u;)c+=d[h+f],f++;if("H"==c?c=t.sJUIHeader:"F"==c&&(c=t.sJUIFooter),-1!=c.indexOf(".")){var p=c.split(".");l.id=p[0].substr(1,p[0].length-1),l.className=p[1]}else"#"==c.charAt(0)?l.id=c.substr(1,c.length-1):l.className=c;h+=f}i.append(l),i=$(l)}else if(">"==s)i=i.parent();else if("l"==s&&a.bPaginate&&a.bLengthChange)o=ue(e);else if("f"==s&&a.bFilter)o=G(e);else if("r"==s&&a.bProcessing)o=de(e);else if("t"==s)o=pe(e);else if("i"==s&&a.bInfo)o=re(e);else if("p"==s&&a.bPaginate)o=ce(e);else if(0!==Ge.ext.feature.length)for(var g=Ge.ext.feature,m=0,v=g.length;m<v;m++)if(s==g[m].cFeature){o=g[m].fnInit(e);break}if(o){var y=e.aanFeatures;y[s]||(y[s]=[]),y[s].push(o),i.append(o)}}r.replaceWith(i),e.nHolding=null}function W(e,t){var n,r,a,i,o,s,l,u,c,f,d,h=$(t).children("tr"),p=function(e,t,n){for(var r=e[t];r[n];)n++;return n};for(e.splice(0,e.length),a=0,s=h.length;a<s;a++)e.push([]);for(a=0,s=h.length;a<s;a++)for(u=0,r=(n=h[a]).firstChild;r;){if("TD"==r.nodeName.toUpperCase()||"TH"==r.nodeName.toUpperCase())for(c=(c=1*r.getAttribute("colspan"))&&0!==c&&1!==c?c:1,f=(f=1*r.getAttribute("rowspan"))&&0!==f&&1!==f?f:1,l=p(e,a,u),d=1===c,o=0;o<c;o++)for(i=0;i<f;i++)e[a+i][l+o]={cell:r,unique:d},e[a+i].nTr=n;r=r.nextSibling}}function X(e,t,n){var r=[];n||(n=e.aoHeader,t&&W(n=[],t));for(var a=0,i=n.length;a<i;a++)for(var o=0,s=n[a].length;o<s;o++)!n[a][o].unique||r[o]&&e.bSortCellsTop||(r[o]=n[a][o].cell);return r}function C(r,e,t){if(He(r,"aoServerParams","serverParams",[e]),e&&$.isArray(e)){var a={},i=/(.*?)\[\]$/;$.each(e,function(e,t){var n=t.name.match(i);if(n){var r=n[0];a[r]||(a[r]=[]),a[r].push(t.value)}else a[t.name]=t.value}),e=a}var n,o=r.ajax,s=r.oInstance,l=function(e){He(r,null,"xhr",[r,e,r.jqXHR]),t(e)};if($.isPlainObject(o)&&o.data){var u="function"==typeof(n=o.data)?n(e,r):n;e="function"==typeof n&&u?u:$.extend(!0,e,u),delete o.data}var c={data:e,success:function(e){var t=e.error||e.sError;t&&Le(r,0,t),r.json=e,l(e)},dataType:"json",cache:!1,type:r.sServerMethod,error:function(e,t){var n=He(r,null,"xhr",[r,null,r.jqXHR]);-1===$.inArray(!0,n)&&("parsererror"==t?Le(r,0,"Invalid JSON response",1):4===e.readyState&&Le(r,0,"Ajax error",7)),he(r,!1)}};r.oAjaxData=e,He(r,null,"preXhr",[r,e]),r.fnServerData?r.fnServerData.call(s,r.sAjaxSource,$.map(e,function(e,t){return{name:t,value:e}}),l,r):r.sAjaxSource||"string"==typeof o?r.jqXHR=$.ajax($.extend(c,{url:o||r.sAjaxSource})):"function"==typeof o?r.jqXHR=o.call(s,e,l,r):(r.jqXHR=$.ajax($.extend(c,o)),o.data=n)}function _(t){return!t.bAjaxDataGet||(t.iDraw++,he(t,!0),C(t,i(t),function(e){s(t,e)}),!1)}function i(e){var t,n,r,a,i=e.aoColumns,o=i.length,s=e.oFeatures,l=e.oPreviousSearch,u=e.aoPreSearchCols,c=[],f=Se(e),d=e._iDisplayStart,h=!1!==s.bPaginate?e._iDisplayLength:-1,p=function(e,t){c.push({name:e,value:t})};p("sEcho",e.iDraw),p("iColumns",o),p("sColumns",st(i,"sName").join(",")),p("iDisplayStart",d),p("iDisplayLength",h);var g={draw:e.iDraw,columns:[],order:[],start:d,length:h,search:{value:l.sSearch,regex:l.bRegex}};for(t=0;t<o;t++)r=i[t],a=u[t],n="function"==typeof r.mData?"function":r.mData,g.columns.push({data:n,name:r.sName,searchable:r.bSearchable,orderable:r.bSortable,search:{value:a.sSearch,regex:a.bRegex}}),p("mDataProp_"+t,n),s.bFilter&&(p("sSearch_"+t,a.sSearch),p("bRegex_"+t,a.bRegex),p("bSearchable_"+t,r.bSearchable)),s.bSort&&p("bSortable_"+t,r.bSortable);s.bFilter&&(p("sSearch",l.sSearch),p("bRegex",l.bRegex)),s.bSort&&($.each(f,function(e,t){g.order.push({column:t.col,dir:t.dir}),p("iSortCol_"+e,t.col),p("sSortDir_"+e,t.dir)}),p("iSortingCols",f.length));var m=Ge.ext.legacy.ajax;return null===m?e.sAjaxSource?c:g:m?c:g}function s(e,n){var t=function(e,t){return n[e]!==B?n[e]:n[t]},r=V(e,n),a=t("sEcho","draw"),i=t("iTotalRecords","recordsTotal"),o=t("iTotalDisplayRecords","recordsFiltered");if(a){if(1*a<e.iDraw)return;e.iDraw=1*a}u(e),e._iRecordsTotal=parseInt(i,10),e._iRecordsDisplay=parseInt(o,10);for(var s=0,l=r.length;s<l;s++)M(e,r[s]);e.aiDisplay=e.aiDisplayMaster.slice(),e.bAjaxDataGet=!1,b(e),e._bInitComplete||se(e,n),e.bAjaxDataGet=!0,he(e,!1)}function V(e,t){var n=$.isPlainObject(e.ajax)&&e.ajax.dataSrc!==B?e.ajax.dataSrc:e.sAjaxDataProp;return"data"===n?t.aaData||t[n]:""!==n?q(n)(t):t}function G(r){var e=r.oClasses,t=r.sTableId,n=r.oLanguage,a=r.oPreviousSearch,i=r.aanFeatures,o='<input type="search" class="'+e.sFilterInput+'"/>',s=n.sSearch;s=s.match(/_INPUT_/)?s.replace("_INPUT_",o):s+o;var l=$("<div/>",{id:i.f?null:t+"_filter","class":e.sFilter}).append($("<label/>").append(s)),u=function(){i.f;var e=this.value?this.value:"";e!=a.sSearch&&(J(r,{sSearch:e,bRegex:a.bRegex,bSmart:a.bSmart,bCaseInsensitive:a.bCaseInsensitive}),r._iDisplayStart=0,b(r))},c=null!==r.searchDelay?r.searchDelay:"ssp"===qe(r)?400:0,f=$("input",l).val(a.sSearch).attr("placeholder",n.sSearchPlaceholder).on("keyup.DT search.DT input.DT paste.DT cut.DT",c?wt(u,c):u).on("keypress.DT",function(e){if(13==e.keyCode)return!1}).attr("aria-controls",t);return $(r.nTable).on("search.dt.DT",function(e,t){if(r===t)try{f[0]!==x.activeElement&&f.val(a.sSearch)}catch(n){}}),l[0]}function J(e,t,n){var r=e.oPreviousSearch,
a=e.aoPreSearchCols,i=function(e){r.sSearch=e.sSearch,r.bRegex=e.bRegex,r.bSmart=e.bSmart,r.bCaseInsensitive=e.bCaseInsensitive},o=function(e){return e.bEscapeRegex!==B?!e.bEscapeRegex:e.bRegex};if(l(e),"ssp"!=qe(e)){K(e,t.sSearch,n,o(t),t.bSmart,t.bCaseInsensitive),i(t);for(var s=0;s<a.length;s++)Z(e,a[s].sSearch,s,o(a[s]),a[s].bSmart,a[s].bCaseInsensitive);Y(e)}else i(t);e.bFiltered=!0,He(e,null,"search",[e])}function Y(e){for(var t,n,r=Ge.ext.search,a=e.aiDisplay,i=0,o=r.length;i<o;i++){for(var s=[],l=0,u=a.length;l<u;l++)n=a[l],t=e.aoData[n],r[i](e,t._aFilterData,n,t._aData,l)&&s.push(n);a.length=0,$.merge(a,s)}}function Z(e,t,n,r,a,i){if(""!==t){for(var o,s=[],l=e.aiDisplay,u=Q(t,r,a,i),c=0;c<l.length;c++)o=e.aoData[l[c]]._aFilterData[n],u.test(o)&&s.push(l[c]);e.aiDisplay=s}}function K(e,t,n,r,a,i){var o,s,l,u=Q(t,r,a,i),c=e.oPreviousSearch.sSearch,f=e.aiDisplayMaster,d=[];if(0!==Ge.ext.search.length&&(n=!0),s=ee(e),t.length<=0)e.aiDisplay=f.slice();else{for((s||n||r||c.length>t.length||0!==t.indexOf(c)||e.bSorted)&&(e.aiDisplay=f.slice()),o=e.aiDisplay,l=0;l<o.length;l++)u.test(e.aoData[o[l]]._sFilterRow)&&d.push(o[l]);e.aiDisplay=d}}function Q(e,t,n,r){(e=t?e:vt(e),n)&&(e="^(?=.*?"+$.map(e.match(/"[^"]+"|[^ ]+/g)||[""],function(e){if('"'===e.charAt(0)){var t=e.match(/^"(.*)"$/);e=t?t[1]:e}return e.replace('"',"")}).join(")(?=.*?")+").*$");return new RegExp(e,r?"i":"")}function ee(e){var t,n,r,a,i,o,s,l,u=e.aoColumns,c=Ge.ext.type.search,f=!1;for(n=0,a=e.aoData.length;n<a;n++)if(!(l=e.aoData[n])._aFilterData){for(o=[],r=0,i=u.length;r<i;r++)(t=u[r]).bSearchable?(s=g(e,n,r,"filter"),c[t.sType]&&(s=c[t.sType](s)),null===s&&(s=""),"string"!=typeof s&&s.toString&&(s=s.toString())):s="",s.indexOf&&-1!==s.indexOf("&")&&(yt.innerHTML=s,s=bt?yt.textContent:yt.innerText),s.replace&&(s=s.replace(/[\r\n\u2028]/g,"")),o.push(s);l._aFilterData=o,l._sFilterRow=o.join("  "),f=!0}return f}function te(e){return{search:e.sSearch,smart:e.bSmart,regex:e.bRegex,caseInsensitive:e.bCaseInsensitive}}function ne(e){return{sSearch:e.search,bSmart:e.smart,bRegex:e.regex,bCaseInsensitive:e.caseInsensitive}}function re(e){var t=e.sTableId,n=e.aanFeatures.i,r=$("<div/>",{"class":e.oClasses.sInfo,id:n?null:t+"_info"});return n||(e.aoDrawCallback.push({fn:ae,sName:"information"}),r.attr("role","status").attr("aria-live","polite"),$(e.nTable).attr("aria-describedby",t+"_info")),r[0]}function ae(e){var t=e.aanFeatures.i;if(0!==t.length){var n=e.oLanguage,r=e._iDisplayStart+1,a=e.fnDisplayEnd(),i=e.fnRecordsTotal(),o=e.fnRecordsDisplay(),s=o?n.sInfo:n.sInfoEmpty;o!==i&&(s+=" "+n.sInfoFiltered),s=ie(e,s+=n.sInfoPostFix);var l=n.fnInfoCallback;null!==l&&(s=l.call(e.oInstance,e,r,a,i,o,s)),$(t).html(s)}}function ie(e,t){var n=e.fnFormatNumber,r=e._iDisplayStart+1,a=e._iDisplayLength,i=e.fnRecordsDisplay(),o=-1===a;return t.replace(/_START_/g,n.call(e,r)).replace(/_END_/g,n.call(e,e.fnDisplayEnd())).replace(/_MAX_/g,n.call(e,e.fnRecordsTotal())).replace(/_TOTAL_/g,n.call(e,i)).replace(/_PAGE_/g,n.call(e,o?1:Math.ceil(r/a))).replace(/_PAGES_/g,n.call(e,o?1:Math.ceil(i/a)))}function oe(n){var r,e,t,a=n.iInitDisplayStart,i=n.aoColumns,o=n.oFeatures,s=n.bDeferLoading;if(n.bInitialised){for(D(n),d(n),v(n,n.aoHeader),v(n,n.aoFooter),he(n,!0),o.bAutoWidth&&ve(n),r=0,e=i.length;r<e;r++)(t=i[r]).sWidth&&(t.nTh.style.width=we(t.sWidth));He(n,null,"preInit",[n]),T(n);var l=qe(n);("ssp"!=l||s)&&("ajax"==l?C(n,[],function(e){var t=V(n,e);for(r=0;r<t.length;r++)M(n,t[r]);n.iInitDisplayStart=a,T(n),he(n,!1),se(n,e)},n):(he(n,!1),se(n)))}else setTimeout(function(){oe(n)},200)}function se(e,t){e._bInitComplete=!0,(t||e.oInit.aaData)&&U(e),He(e,null,"plugin-init",[e,t]),He(e,"aoInitComplete","init",[e,t])}function le(e,t){var n=parseInt(t,10);e._iDisplayLength=n,Me(e),He(e,null,"length",[e,n])}function ue(r){for(var e=r.oClasses,t=r.sTableId,n=r.aLengthMenu,a=$.isArray(n[0]),i=a?n[0]:n,o=a?n[1]:n,s=$("<select/>",{name:t+"_length","aria-controls":t,"class":e.sLengthSelect}),l=0,u=i.length;l<u;l++)s[0][l]=new Option("number"==typeof o[l]?r.fnFormatNumber(o[l]):o[l],i[l]);var c=$("<div><label/></div>").addClass(e.sLength);return r.aanFeatures.l||(c[0].id=t+"_length"),c.children().append(r.oLanguage.sLengthMenu.replace("_MENU_",s[0].outerHTML)),$("select",c).val(r._iDisplayLength).on("change.DT",function(){le(r,$(this).val()),b(r)}),$(r.nTable).on("length.dt.DT",function(e,t,n){r===t&&$("select",c).val(n)}),c[0]}function ce(e){var t=e.sPaginationType,c=Ge.ext.pager[t],f="function"==typeof c,d=function(e){b(e)},n=$("<div/>").addClass(e.oClasses.sPaging+t)[0],h=e.aanFeatures;return f||c.fnInit(e,n,d),h.p||(n.id=e.sTableId+"_paginate",e.aoDrawCallback.push({fn:function(e){if(f){var t,n,r=e._iDisplayStart,a=e._iDisplayLength,i=e.fnRecordsDisplay(),o=-1===a,s=o?0:Math.ceil(r/a),l=o?1:Math.ceil(i/a),u=c(s,l);for(t=0,n=h.p.length;t<n;t++)Oe(e,"pageButton")(e,h.p[t],t,u,s,l)}else c.fnUpdate(e,d)},sName:"pagination"})),n}function fe(e,t,n){var r=e._iDisplayStart,a=e._iDisplayLength,i=e.fnRecordsDisplay();0===i||-1===a?r=0:"number"==typeof t?i<(r=t*a)&&(r=0):"first"==t?r=0:"previous"==t?(r=0<=a?r-a:0)<0&&(r=0):"next"==t?r+a<i&&(r+=a):"last"==t?r=Math.floor((i-1)/a)*a:Le(e,0,"Unknown paging action: "+t,5);var o=e._iDisplayStart!==r;return e._iDisplayStart=r,o&&(He(e,null,"page",[e]),n&&b(e)),o}function de(e){return $("<div/>",{id:e.aanFeatures.r?null:e.sTableId+"_processing","class":e.oClasses.sProcessing}).html(e.oLanguage.sProcessing).insertBefore(e.nTable)[0]}function he(e,t){e.oFeatures.bProcessing&&$(e.aanFeatures.r).css("display",t?"block":"none"),He(e,null,"processing",[e,t])}function pe(e){var t=$(e.nTable);t.attr("role","grid");var n=e.oScroll;if(""===n.sX&&""===n.sY)return e.nTable;var r=n.sX,a=n.sY,i=e.oClasses,o=t.children("caption"),s=o.length?o[0]._captionSide:null,l=$(t[0].cloneNode(!1)),u=$(t[0].cloneNode(!1)),c=t.children("tfoot"),f="<div/>",d=function(e){return e?we(e):null};c.length||(c=null);var h=$(f,{"class":i.sScrollWrapper}).append($(f,{"class":i.sScrollHead}).css({overflow:"hidden",position:"relative",border:0,width:r?d(r):"100%"}).append($(f,{"class":i.sScrollHeadInner}).css({"box-sizing":"content-box",width:n.sXInner||"100%"}).append(l.removeAttr("id").css("margin-left",0).append("top"===s?o:null).append(t.children("thead"))))).append($(f,{"class":i.sScrollBody}).css({position:"relative",overflow:"auto",width:d(r)}).append(t));c&&h.append($(f,{"class":i.sScrollFoot}).css({overflow:"hidden",border:0,width:r?d(r):"100%"}).append($(f,{"class":i.sScrollFootInner}).append(u.removeAttr("id").css("margin-left",0).append("bottom"===s?o:null).append(t.children("tfoot")))));var p=h.children(),g=p[0],m=p[1],v=c?p[2]:null;return r&&$(m).on("scroll.DT",function(){var e=this.scrollLeft;g.scrollLeft=e,c&&(v.scrollLeft=e)}),$(m).css(a&&n.bCollapse?"max-height":"height",a),e.nScrollHead=g,e.nScrollBody=m,e.nScrollFoot=v,e.aoDrawCallback.push({fn:ge,sName:"scrolling"}),h[0]}function ge(n){var e,t,r,a,i,o,s,l,u,c=n.oScroll,f=c.sX,d=c.sXInner,h=c.sY,p=c.iBarWidth,g=$(n.nScrollHead),m=g[0].style,v=g.children("div"),y=v[0].style,b=v.children("table"),x=n.nScrollBody,w=$(x),S=x.style,T=$(n.nScrollFoot).children("div"),D=T.children("table"),C=$(n.nTHead),_=$(n.nTable),A=_[0],k=A.style,N=n.nTFoot?$(n.nTFoot):null,j=n.oBrowser,I=j.bScrollOversize,L=st(n.aoColumns,"nTh"),E=[],R=[],F=[],P=[],H=function(e){var t=e.style;t.paddingTop="0",t.paddingBottom="0",t.borderTopWidth="0",t.borderBottomWidth="0",t.height=0},M=x.scrollHeight>x.clientHeight;if(n.scrollBarVis!==M&&n.scrollBarVis!==B)return n.scrollBarVis=M,void U(n);n.scrollBarVis=M,_.children("thead, tfoot").remove(),N&&(o=N.clone().prependTo(_),t=N.find("tr"),a=o.find("tr")),i=C.clone().prependTo(_),e=C.find("tr"),r=i.find("tr"),i.find("th, td").removeAttr("tabindex"),f||(S.width="100%",g[0].style.width="100%"),$.each(X(n,i),function(e,t){s=z(n,e),t.style.width=n.aoColumns[s].sWidth}),N&&me(function(e){e.style.width=""},a),u=_.outerWidth(),""===f?(k.width="100%",I&&(_.find("tbody").height()>x.offsetHeight||"scroll"==w.css("overflow-y"))&&(k.width=we(_.outerWidth()-p)),u=_.outerWidth()):""!==d&&(k.width=we(d),u=_.outerWidth()),me(H,r),me(function(e){F.push(e.innerHTML),E.push(we($(e).css("width")))},r),me(function(e,t){-1!==$.inArray(e,L)&&(e.style.width=E[t])},e),$(r).height(0),N&&(me(H,a),me(function(e){P.push(e.innerHTML),R.push(we($(e).css("width")))},a),me(function(e,t){e.style.width=R[t]},t),$(a).height(0)),me(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+F[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=E[t]},r),N&&me(function(e,t){e.innerHTML='<div class="dataTables_sizing">'+P[t]+"</div>",e.childNodes[0].style.height="0",e.childNodes[0].style.overflow="hidden",e.style.width=R[t]},a),_.outerWidth()<u?(l=x.scrollHeight>x.offsetHeight||"scroll"==w.css("overflow-y")?u+p:u,I&&(x.scrollHeight>x.offsetHeight||"scroll"==w.css("overflow-y"))&&(k.width=we(l-p)),""!==f&&""===d||Le(n,1,"Possible column misalignment",6)):l="100%",S.width=we(l),m.width=we(l),N&&(n.nScrollFoot.style.width=we(l)),h||I&&(S.height=we(A.offsetHeight+p));var O=_.outerWidth();b[0].style.width=we(O),y.width=we(O);var q=_.height()>x.clientHeight||"scroll"==w.css("overflow-y"),W="padding"+(j.bScrollbarLeft?"Left":"Right");y[W]=q?p+"px":"0px",N&&(D[0].style.width=we(O),T[0].style.width=we(O),T[0].style[W]=q?p+"px":"0px"),_.children("colgroup").insertBefore(_.children("thead")),w.trigger("scroll"),!n.bSorted&&!n.bFiltered||n._drawHold||(x.scrollTop=0)}function me(e,t,n){for(var r,a,i=0,o=0,s=t.length;o<s;){for(r=t[o].firstChild,a=n?n[o].firstChild:null;r;)1===r.nodeType&&(n?e(r,a,i):e(r,i),i++),r=r.nextSibling,a=n?a.nextSibling:null;o++}}function ve(e){var t,n,r,a=e.nTable,i=e.aoColumns,o=e.oScroll,s=o.sY,l=o.sX,u=o.sXInner,c=i.length,f=P(e,"bVisible"),d=$("th",e.nTHead),h=a.getAttribute("width"),p=a.parentNode,g=!1,m=e.oBrowser,v=m.bScrollOversize,y=a.style.width;for(y&&-1!==y.indexOf("%")&&(h=y),t=0;t<f.length;t++)null!==(n=i[f[t]]).sWidth&&(n.sWidth=ye(n.sWidthOrig,p),g=!0);if(v||!g&&!l&&!s&&c==F(e)&&c==d.length)for(t=0;t<c;t++){var b=z(e,t);null!==b&&(i[b].sWidth=we(d.eq(t).width()))}else{var x=$(a).clone().css("visibility","hidden").removeAttr("id");x.find("tbody tr").remove();var w=$("<tr/>").appendTo(x.find("tbody"));for(x.find("thead, tfoot").remove(),x.append($(e.nTHead).clone()).append($(e.nTFoot).clone()),x.find("tfoot th, tfoot td").css("width",""),d=X(e,x.find("thead")[0]),t=0;t<f.length;t++)n=i[f[t]],d[t].style.width=null!==n.sWidthOrig&&""!==n.sWidthOrig?we(n.sWidthOrig):"",n.sWidthOrig&&l&&$(d[t]).append($("<div/>").css({width:n.sWidthOrig,margin:0,padding:0,border:0,height:1}));if(e.aoData.length)for(t=0;t<f.length;t++)n=i[r=f[t]],$(be(e,r)).clone(!1).append(n.sContentPadding).appendTo(w);$("[name]",x).removeAttr("name");var S=$("<div/>").css(l||s?{position:"absolute",top:0,left:0,height:1,right:0,overflow:"hidden"}:{}).append(x).appendTo(p);l&&u?x.width(u):l?(x.css("width","auto"),x.removeAttr("width"),x.width()<p.clientWidth&&h&&x.width(p.clientWidth)):s?x.width(p.clientWidth):h&&x.width(h);var T=0;for(t=0;t<f.length;t++){var D=$(d[t]),C=D.outerWidth()-D.width(),_=m.bBounding?Math.ceil(d[t].getBoundingClientRect().width):D.outerWidth();T+=_,i[f[t]].sWidth=we(_-C)}a.style.width=we(T),S.remove()}if(h&&(a.style.width=we(h)),(h||l)&&!e._reszEvt){var A=function(){$(k).on("resize.DT-"+e.sInstance,wt(function(){U(e)}))};v?setTimeout(A,1e3):A(),e._reszEvt=!0}}function ye(e,t){if(!e)return 0;var n=$("<div/>").css("width",we(e)).appendTo(t||x.body),r=n[0].offsetWidth;return n.remove(),r}function be(e,t){var n=xe(e,t);if(n<0)return null;var r=e.aoData[n];return r.nTr?r.anCells[t]:$("<td/>").html(g(e,n,t,"display"))[0]}function xe(e,t){for(var n,r=-1,a=-1,i=0,o=e.aoData.length;i<o;i++)(n=(n=(n=g(e,i,t,"display")+"").replace(xt,"")).replace(/&nbsp;/g," ")).length>r&&(r=n.length,a=i);return a}function we(e){return null===e?"0px":"number"==typeof e?e<0?"0px":e+"px":e.match(/\d$/)?e+"px":e}function Se(e){var t,n,r,a,i,o,s,l=[],u=e.aoColumns,c=e.aaSortingFixed,f=$.isPlainObject(c),d=[],h=function(e){e.length&&!$.isArray(e[0])?d.push(e):$.merge(d,e)};for($.isArray(c)&&h(c),f&&c.pre&&h(c.pre),h(e.aaSorting),f&&c.post&&h(c.post),t=0;t<d.length;t++)for(n=0,r=(a=u[s=d[t][0]].aDataSort).length;n<r;n++)o=u[i=a[n]].sType||"string",d[t]._idx===B&&(d[t]._idx=$.inArray(d[t][1],u[i].asSorting)),l.push({src:s,col:i,dir:d[t][1],index:d[t]._idx,type:o,formatter:Ge.ext.type.order[o+"-pre"]});return l}function Te(e){var t,n,r,a,c,f=[],d=Ge.ext.type.order,h=e.aoData,i=(e.aoColumns,0),o=e.aiDisplayMaster;for(l(e),t=0,n=(c=Se(e)).length;t<n;t++)(a=c[t]).formatter&&i++,ke(e,a.col);if("ssp"!=qe(e)&&0!==c.length){for(t=0,r=o.length;t<r;t++)f[o[t]]=t;i===c.length?o.sort(function(e,t){var n,r,a,i,o,s=c.length,l=h[e]._aSortData,u=h[t]._aSortData;for(a=0;a<s;a++)if(0!==(i=(n=l[(o=c[a]).col])<(r=u[o.col])?-1:r<n?1:0))return"asc"===o.dir?i:-i;return(n=f[e])<(r=f[t])?-1:r<n?1:0}):o.sort(function(e,t){var n,r,a,i,o,s=c.length,l=h[e]._aSortData,u=h[t]._aSortData;for(a=0;a<s;a++)if(n=l[(o=c[a]).col],r=u[o.col],0!==(i=(d[o.type+"-"+o.dir]||d["string-"+o.dir])(n,r)))return i;return(n=f[e])<(r=f[t])?-1:r<n?1:0})}e.bSorted=!0}function De(e){for(var t,n,r=e.aoColumns,a=Se(e),i=e.oLanguage.oAria,o=0,s=r.length;o<s;o++){var l=r[o],u=l.asSorting,c=l.sTitle.replace(/<.*?>/g,""),f=l.nTh;f.removeAttribute("aria-sort"),l.bSortable?(0<a.length&&a[0].col==o?(f.setAttribute("aria-sort","asc"==a[0].dir?"ascending":"descending"),n=u[a[0].index+1]||u[0]):n=u[0],t=c+("asc"===n?i.sSortAscending:i.sSortDescending)):t=c,f.setAttribute("aria-label",t)}}function Ce(e,t,n,r){var a,i=e.aoColumns[t],o=e.aaSorting,s=i.asSorting,l=function(e,t){var n=e._idx;return n===B&&(n=$.inArray(e[1],s)),n+1<s.length?n+1:t?null:0};if("number"==typeof o[0]&&(o=e.aaSorting=[o]),n&&e.oFeatures.bSortMulti){var u=$.inArray(t,st(o,"0"));-1!==u?(null===(a=l(o[u],!0))&&1===o.length&&(a=0),null===a?o.splice(u,1):(o[u][1]=s[a],o[u]._idx=a)):(o.push([t,s[0],0]),o[o.length-1]._idx=0)}else o.length&&o[0][0]==t?(a=l(o[0]),o.length=1,o[0][1]=s[a],o[0]._idx=a):(o.length=0,o.push([t,s[0]]),o[0]._idx=0);T(e),"function"==typeof r&&r(e)}function _e(t,e,n,r){var a=t.aoColumns[n];Fe(e,{},function(e){!1!==a.bSortable&&(t.oFeatures.bProcessing?(he(t,!0),setTimeout(function(){Ce(t,n,e.shiftKey,r),"ssp"!==qe(t)&&he(t,!1)},0)):Ce(t,n,e.shiftKey,r))})}function Ae(e){var t,n,r,a=e.aLastSort,i=e.oClasses.sSortColumn,o=Se(e),s=e.oFeatures;if(s.bSort&&s.bSortClasses){for(t=0,n=a.length;t<n;t++)r=a[t].src,$(st(e.aoData,"anCells",r)).removeClass(i+(t<2?t+1:3));for(t=0,n=o.length;t<n;t++)r=o[t].src,$(st(e.aoData,"anCells",r)).addClass(i+(t<2?t+1:3))}e.aLastSort=o}function ke(e,t){var n,r,a,i=e.aoColumns[t],o=Ge.ext.order[i.sSortDataType];o&&(n=o.call(e.oInstance,e,t,c(e,t)));for(var s=Ge.ext.type.order[i.sType+"-pre"],l=0,u=e.aoData.length;l<u;l++)(r=e.aoData[l])._aSortData||(r._aSortData=[]),r._aSortData[t]&&!o||(a=o?n[l]:g(e,l,t,"sort"),r._aSortData[t]=s?s(a):a)}function Ne(n){if(n.oFeatures.bStateSave&&!n.bDestroying){var e={time:+new Date,start:n._iDisplayStart,length:n._iDisplayLength,order:$.extend(!0,[],n.aaSorting),search:te(n.oPreviousSearch),columns:$.map(n.aoColumns,function(e,t){return{visible:e.bVisible,search:te(n.aoPreSearchCols[t])}})};He(n,"aoStateSaveParams","stateSaveParams",[n,e]),n.oSavedState=e,n.fnStateSaveCallback.call(n.oInstance,n,e)}}function je(a,e,i){var o,s,l=a.aoColumns,t=function(e){if(e&&e.time){var t=He(a,"aoStateLoadParams","stateLoadParams",[a,e]);if(-1===$.inArray(!1,t)){var n=a.iStateDuration;if(0<n&&e.time<+new Date-1e3*n)i();else if(e.columns&&l.length!==e.columns.length)i();else{if(a.oLoadedState=$.extend(!0,{},e),e.start!==B&&(a._iDisplayStart=e.start,a.iInitDisplayStart=e.start),e.length!==B&&(a._iDisplayLength=e.length),e.order!==B&&(a.aaSorting=[],$.each(e.order,function(e,t){a.aaSorting.push(t[0]>=l.length?[0,t[1]]:t)})),e.search!==B&&$.extend(a.oPreviousSearch,ne(e.search)),e.columns)for(o=0,s=e.columns.length;o<s;o++){var r=e.columns[o];r.visible!==B&&(l[o].bVisible=r.visible),r.search!==B&&$.extend(a.aoPreSearchCols[o],ne(r.search))}He(a,"aoStateLoaded","stateLoaded",[a,e]),i()}}else i()}else i()};if(a.oFeatures.bStateSave){var n=a.fnStateLoadCallback.call(a.oInstance,a,t);n!==B&&t(n)}else i()}function Ie(e){var t=Ge.settings,n=$.inArray(e,st(t,"nTable"));return-1!==n?t[n]:null}function Le(e,t,n,r){if(n="DataTables warning: "+(e?"table id="+e.sTableId+" - ":"")+n,r&&(n+=". For more information about this error, please see http://datatables.net/tn/"+r),t)k.console&&console.log&&console.log(n);else{var a=Ge.ext,i=a.sErrMode||a.errMode;if(e&&He(e,null,"error",[e,r,n]),"alert"==i)alert(n);else{if("throw"==i)throw new Error(n);"function"==typeof i&&i(e,r,n)}}}function Ee(n,r,e,t){$.isArray(e)?$.each(e,function(e,t){$.isArray(t)?Ee(n,r,t[0],t[1]):Ee(n,r,t)}):(t===B&&(t=e),r[e]!==B&&(n[t]=r[e]))}function Re(e,t,n){var r;for(var a in t)t.hasOwnProperty(a)&&(r=t[a],$.isPlainObject(r)?($.isPlainObject(e[a])||(e[a]={}),$.extend(!0,e[a],r)):n&&"data"!==a&&"aaData"!==a&&$.isArray(r)?e[a]=r.slice():e[a]=r);return e}function Fe(t,e,n){$(t).on("click.DT",e,function(e){$(t).blur(),n(e)}).on("keypress.DT",e,function(e){13===e.which&&(e.preventDefault(),n(e))}).on("selectstart.DT",function(){return!1})}function Pe(e,t,n,r){n&&e[t].push({fn:n,sName:r})}function He(t,e,n,r){var a=[];if(e&&(a=$.map(t[e].slice().reverse(),function(e){return e.fn.apply(t.oInstance,r)})),null!==n){var i=$.Event(n+".dt");$(t.nTable).trigger(i,r),a.push(i.result)}return a}function Me(e){var t=e._iDisplayStart,n=e.fnDisplayEnd(),r=e._iDisplayLength;n<=t&&(t=n-r),t-=t%r,(-1===r||t<0)&&(t=0),e._iDisplayStart=t}function Oe(e,t){var n=e.renderer,r=Ge.ext.renderer[t];return $.isPlainObject(n)&&n[t]?r[n[t]]||r._:"string"==typeof n&&r[n]||r._}function qe(e){return e.oFeatures.bServerSide?"ssp":e.ajax||e.sAjaxSource?"ajax":"dom"}function We(e,t){var n=[],r=Bt.numbers_length,a=Math.floor(r/2);return t<=r?n=ut(0,t):e<=a?((n=ut(0,r-2)).push("ellipsis"),n.push(t-1)):(t-1-a<=e?(n=ut(t-(r-2),t)).splice(0,0,"ellipsis"):((n=ut(e-a+2,e+a-1)).push("ellipsis"),n.push(t-1),n.splice(0,0,"ellipsis")),n.splice(0,0,0)),n.DT_el="span",n}function $e(n){$.each({num:function(e){return Ut(e,n)},"num-fmt":function(e){return Ut(e,n,et)},"html-num":function(e){return Ut(e,n,Ze)},"html-num-fmt":function(e){return Ut(e,n,Ze,et)}},function(e,t){Ue.type.order[e+n+"-pre"]=t,e.match(/^html\-/)&&(Ue.type.search[e+n]=Ue.type.search.html)})}function Be(t){return function(){var e=[Ie(this[Ge.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return Ge.ext.internal[t].apply(this,e)}}var Ue,ze,Xe,Ve,Ge=function(T){this.$=function(e,t){return this.api(!0).$(e,t)},this._=function(e,t){return this.api(!0).rows(e,t).data()},this.api=function(e){return new ze(e?Ie(this[Ue.iApiIndex]):this)},this.fnAddData=function(e,t){var n=this.api(!0),r=$.isArray(e)&&($.isArray(e[0])||$.isPlainObject(e[0]))?n.rows.add(e):n.row.add(e);return(t===B||t)&&n.draw(),r.flatten().toArray()},this.fnAdjustColumnSizing=function(e){var t=this.api(!0).columns.adjust(),n=t.settings()[0],r=n.oScroll;e===B||e?t.draw(!1):""===r.sX&&""===r.sY||ge(n)},this.fnClearTable=function(e){var t=this.api(!0).clear();(e===B||e)&&t.draw()},this.fnClose=function(e){this.api(!0).row(e).child.hide()},this.fnDeleteRow=function(e,t,n){var r=this.api(!0),a=r.rows(e),i=a.settings()[0],o=i.aoData[a[0][0]];return a.remove(),t&&t.call(this,i,o),(n===B||n)&&r.draw(),o},this.fnDestroy=function(e){this.api(!0).destroy(e)},this.fnDraw=function(e){this.api(!0).draw(e)},this.fnFilter=function(e,t,n,r,a,i){var o=this.api(!0);null===t||t===B?o.search(e,n,r,i):o.column(t).search(e,n,r,i),o.draw()},this.fnGetData=function(e,t){var n=this.api(!0);if(e===B)return n.data().toArray();var r=e.nodeName?e.nodeName.toLowerCase():"";return t!==B||"td"==r||"th"==r?n.cell(e,t).data():n.row(e).data()||null},this.fnGetNodes=function(e){var t=this.api(!0);return e!==B?t.row(e).node():t.rows().nodes().flatten().toArray()},this.fnGetPosition=function(e){var t=this.api(!0),n=e.nodeName.toUpperCase();if("TR"==n)return t.row(e).index();if("TD"!=n&&"TH"!=n)return null;var r=t.cell(e).index();return[r.row,r.columnVisible,r.column]},this.fnIsOpen=function(e){return this.api(!0).row(e).child.isShown()},this.fnOpen=function(e,t,n){return this.api(!0).row(e).child(t,n).show().child()[0]},this.fnPageChange=function(e,t){var n=this.api(!0).page(e);(t===B||t)&&n.draw(!1)},this.fnSetColumnVis=function(e,t,n){var r=this.api(!0).column(e).visible(t);(n===B||n)&&r.columns.adjust().draw()},this.fnSettings=function(){return Ie(this[Ue.iApiIndex])},this.fnSort=function(e){this.api(!0).order(e).draw()},this.fnSortListener=function(e,t,n){this.api(!0).order.listener(e,t,n)},this.fnUpdate=function(e,t,n,r,a){var i=this.api(!0);return n===B||null===n?i.row(t).data(e):i.cell(t,n).data(e),(a===B||a)&&i.columns.adjust(),(r===B||r)&&i.draw(),0},this.fnVersionCheck=Ue.fnVersionCheck;var D=this,C=T===B,_=this.length;for(var e in C&&(T={}),this.oApi=this.internal=Ue.internal,Ge.ext.internal)e&&(this[e]=Be(e));return this.each(function(){var i,o=1<_?Re({},T,!0):T,s=0,e=this.getAttribute("id"),l=!1,t=Ge.defaults,u=$(this);if("table"==this.nodeName.toLowerCase()){j(t),I(t.column),A(t,t,!0),A(t.column,t.column,!0),A(t,$.extend(o,u.data()),!0);var n=Ge.settings;for(s=0,i=n.length;s<i;s++){var r=n[s];if(r.nTable==this||r.nTHead&&r.nTHead.parentNode==this||r.nTFoot&&r.nTFoot.parentNode==this){var a=o.bRetrieve!==B?o.bRetrieve:t.bRetrieve,c=o.bDestroy!==B?o.bDestroy:t.bDestroy;if(C||a)return r.oInstance;if(c){r.oInstance.fnDestroy();break}return void Le(r,0,"Cannot reinitialise DataTable",3)}if(r.sTableId==this.id){n.splice(s,1);break}}null!==e&&""!==e||(e="DataTables_Table_"+Ge.ext._unique++,this.id=e);var f=$.extend(!0,{},Ge.models.oSettings,{sDestroyWidth:u[0].style.width,sInstance:e,sTableId:e});f.nTable=this,f.oApi=D.internal,f.oInit=o,n.push(f),f.oInstance=1===D.length?D:u.dataTable(),j(o),N(o.oLanguage),o.aLengthMenu&&!o.iDisplayLength&&(o.iDisplayLength=$.isArray(o.aLengthMenu[0])?o.aLengthMenu[0][0]:o.aLengthMenu[0]),o=Re($.extend(!0,{},t),o),Ee(f.oFeatures,o,["bPaginate","bLengthChange","bFilter","bSort","bSortMulti","bInfo","bProcessing","bAutoWidth","bSortClasses","bServerSide","bDeferRender"]),Ee(f,o,["asStripeClasses","ajax","fnServerData","fnFormatNumber","sServerMethod","aaSorting","aaSortingFixed","aLengthMenu","sPaginationType","sAjaxSource","sAjaxDataProp","iStateDuration","sDom","bSortCellsTop","iTabIndex","fnStateLoadCallback","fnStateSaveCallback","renderer","searchDelay","rowId",["iCookieDuration","iStateDuration"],["oSearch","oPreviousSearch"],["aoSearchCols","aoPreSearchCols"],["iDisplayLength","_iDisplayLength"]]),Ee(f.oScroll,o,[["sScrollX","sX"],["sScrollXInner","sXInner"],["sScrollY","sY"],["bScrollCollapse","bCollapse"]]),Ee(f.oLanguage,o,"fnInfoCallback"),Pe(f,"aoDrawCallback",o.fnDrawCallback,"user"),Pe(f,"aoServerParams",o.fnServerParams,"user"),Pe(f,"aoStateSaveParams",o.fnStateSaveParams,"user"),Pe(f,"aoStateLoadParams",o.fnStateLoadParams,"user"),Pe(f,"aoStateLoaded",o.fnStateLoaded,"user"),Pe(f,"aoRowCallback",o.fnRowCallback,"user"),Pe(f,"aoRowCreatedCallback",o.fnCreatedRow,"user"),Pe(f,"aoHeaderCallback",o.fnHeaderCallback,"user"),Pe(f,"aoFooterCallback",o.fnFooterCallback,"user"),Pe(f,"aoInitComplete",o.fnInitComplete,"user"),Pe(f,"aoPreDrawCallback",o.fnPreDrawCallback,"user"),f.rowIdFn=q(o.rowId),L(f);var d=f.oClasses;if($.extend(d,Ge.ext.classes,o.oClasses),u.addClass(d.sTable),f.iInitDisplayStart===B&&(f.iInitDisplayStart=o.iDisplayStart,f._iDisplayStart=o.iDisplayStart),null!==o.iDeferLoading){f.bDeferLoading=!0;var h=$.isArray(o.iDeferLoading);f._iRecordsDisplay=h?o.iDeferLoading[0]:o.iDeferLoading,f._iRecordsTotal=h?o.iDeferLoading[1]:o.iDeferLoading}var p=f.oLanguage;$.extend(!0,p,o.oLanguage),p.sUrl&&($.ajax({dataType:"json",url:p.sUrl,success:function(e){N(e),A(t.oLanguage,e),$.extend(!0,p,e),oe(f)},error:function(){oe(f)}}),l=!0),null===o.asStripeClasses&&(f.asStripeClasses=[d.sStripeOdd,d.sStripeEven]);var g=f.asStripeClasses,m=u.children("tbody").find("tr").eq(0);-1!==$.inArray(!0,$.map(g,function(e){return m.hasClass(e)}))&&($("tbody tr",this).removeClass(g.join(" ")),f.asDestroyStripes=g.slice());var v,y=[],b=this.getElementsByTagName("thead");if(0!==b.length&&(W(f.aoHeader,b[0]),y=X(f)),null===o.aoColumns)for(v=[],s=0,i=y.length;s<i;s++)v.push(null);else v=o.aoColumns;for(s=0,i=v.length;s<i;s++)E(f,y?y[s]:null);if(H(f,o.aoColumnDefs,v,function(e,t){R(f,e,t)}),m.length){var x=function(e,t){return null!==e.getAttribute("data-"+t)?t:null};$(m[0]).children("th, td").each(function(e,t){var n=f.aoColumns[e];if(n.mData===e){var r=x(t,"sort")||x(t,"order"),a=x(t,"filter")||x(t,"search");null===r&&null===a||(n.mData={_:e+".display",sort:null!==r?e+".@data-"+r:B,type:null!==r?e+".@data-"+r:B,filter:null!==a?e+".@data-"+a:B},R(f,e))}})}var w=f.oFeatures,S=function(){if(o.aaSorting===B){var e=f.aaSorting;for(s=0,i=e.length;s<i;s++)e[s][1]=f.aoColumns[s].asSorting[0]}Ae(f),w.bSort&&Pe(f,"aoDrawCallback",function(){if(f.bSorted){var e=Se(f),n={};$.each(e,function(e,t){n[t.src]=t.dir}),He(f,null,"order",[f,e,n]),De(f)}}),Pe(f,"aoDrawCallback",function(){(f.bSorted||"ssp"===qe(f)||w.bDeferRender)&&Ae(f)},"sc");var t=u.children("caption").each(function(){this._captionSide=$(this).css("caption-side")}),n=u.children("thead");0===n.length&&(n=$("<thead/>").appendTo(u)),f.nTHead=n[0];var r=u.children("tbody");0===r.length&&(r=$("<tbody/>").appendTo(u)),f.nTBody=r[0];var a=u.children("tfoot");if(0===a.length&&0<t.length&&(""!==f.oScroll.sX||""!==f.oScroll.sY)&&(a=$("<tfoot/>").appendTo(u)),0===a.length||0===a.children().length?u.addClass(d.sNoFooter):0<a.length&&(f.nTFoot=a[0],W(f.aoFooter,f.nTFoot)),o.aaData)for(s=0;s<o.aaData.length;s++)M(f,o.aaData[s]);else(f.bDeferLoading||"dom"==qe(f))&&O(f,$(f.nTBody).children("tr"));f.aiDisplay=f.aiDisplayMaster.slice(),!(f.bInitialised=!0)===l&&oe(f)};o.bStateSave?(w.bStateSave=!0,Pe(f,"aoDrawCallback",Ne,"state_save"),je(f,o,S)):S()}else Le(null,0,"Non-table node initialisation ("+this.nodeName+")",2)}),D=null,this},Je={},Ye=/[\r\n\u2028]/g,Ze=/<.*?>/g,Ke=/^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/,Qe=new RegExp("(\\"+["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"].join("|\\")+")","g"),et=/[',$\xa3\u20ac\xa5%\u2009\u202F\u20BD\u20a9\u20BArfk\u0243\u039e]/gi,tt=function(e){return!e||!0===e||"-"===e},nt=function(e){var t=parseInt(e,10);return!isNaN(t)&&isFinite(e)?t:null},rt=function(e,t){return Je[t]||(Je[t]=new RegExp(vt(t),"g")),"string"==typeof e&&"."!==t?e.replace(/\./g,"").replace(Je[t],"."):e},at=function(e,t,n){var r="string"==typeof e;return!!tt(e)||(t&&r&&(e=rt(e,t)),n&&r&&(e=e.replace(et,"")),!isNaN(parseFloat(e))&&isFinite(e))},it=function(e){return tt(e)||"string"==typeof e},ot=function(e,t,n){return!!tt(e)||(it(e)&&!!at(ft(e),t,n)||null)},st=function(e,t,n){var r=[],a=0,i=e.length;if(n!==B)for(;a<i;a++)e[a]&&e[a][t]&&r.push(e[a][t][n]);else for(;a<i;a++)e[a]&&r.push(e[a][t]);return r},lt=function(e,t,n,r){var a=[],i=0,o=t.length;if(r!==B)for(;i<o;i++)e[t[i]][n]&&a.push(e[t[i]][n][r]);else for(;i<o;i++)a.push(e[t[i]][n]);return a},ut=function(e,t){var n,r=[];t===B?(t=0,n=e):(n=t,t=e);for(var a=t;a<n;a++)r.push(a);return r},ct=function(e){for(var t=[],n=0,r=e.length;n<r;n++)e[n]&&t.push(e[n]);return t},ft=function(e){return e.replace(Ze,"")},dt=function(e){if(e.length<2)return!0;for(var t=e.slice().sort(),n=t[0],r=1,a=t.length;r<a;r++){if(t[r]===n)return!1;n=t[r]}return!0},ht=function(e){if(dt(e))return e.slice();var t,n,r,a=[],i=e.length,o=0;e:for(n=0;n<i;n++){for(t=e[n],r=0;r<o;r++)if(a[r]===t)continue e;a.push(t),o++}return a};Ge.util={throttle:function(r,e){var a,i,o=e!==B?e:200;return function(){var e=this,t=+new Date,n=arguments;a&&t<a+o?(clearTimeout(i),i=setTimeout(function(){a=B,r.apply(e,n)},o)):(a=t,r.apply(e,n))}},escapeRegex:function(e){return e.replace(Qe,"\\$1")}};var pt=function(e,t,n){e[t]!==B&&(e[n]=e[t])},gt=/\[.*?\]$/,mt=/\(\)$/,vt=Ge.util.escapeRegex,yt=$("<div>")[0],bt=yt.textContent!==B,xt=/<.*?>/g,wt=Ge.util.throttle,St=[],Tt=Array.prototype,Dt=function(e){var t,n,r=Ge.settings,a=$.map(r,function(e){return e.nTable});return e?e.nTable&&e.oApi?[e]:e.nodeName&&"table"===e.nodeName.toLowerCase()?-1!==(t=$.inArray(e,a))?[r[t]]:null:e&&"function"==typeof e.settings?e.settings().toArray():("string"==typeof e?n=$(e):e instanceof $&&(n=e),n?n.map(function(){return-1!==(t=$.inArray(this,a))?r[t]:null}).toArray():void 0):[]};ze=function(e,t){if(!(this instanceof ze))return new ze(e,t);var n=[],r=function(e){var t=Dt(e);t&&n.push.apply(n,t)};if($.isArray(e))for(var a=0,i=e.length;a<i;a++)r(e[a]);else r(e);this.context=ht(n),t&&$.merge(this,t),this.selector={rows:null,cols:null,opts:null},ze.extend(this,this,St)},Ge.Api=ze,$.extend(ze.prototype,{any:function(){return 0!==this.count()},concat:Tt.concat,context:[],count:function(){return this.flatten().length},each:function(e){for(var t=0,n=this.length;t<n;t++)e.call(this,this[t],t,this);return this},eq:function(e){var t=this.context;return t.length>e?new ze(t[e],this[e]):null},filter:function(e){var t=[];if(Tt.filter)t=Tt.filter.call(this,e,this);else for(var n=0,r=this.length;n<r;n++)e.call(this,this[n],n,this)&&t.push(this[n]);return new ze(this.context,t)},flatten:function(){var e=[];return new ze(this.context,e.concat.apply(e,this.toArray()))},join:Tt.join,indexOf:Tt.indexOf||function(e,t){for(var n=t||0,r=this.length;n<r;n++)if(this[n]===e)return n;return-1},iterator:function(e,t,n,r){var a,i,o,s,l,u,c,f,d=[],h=this.context,p=this.selector;for("string"==typeof e&&(r=n,n=t,t=e,e=!1),i=0,o=h.length;i<o;i++){var g=new ze(h[i]);if("table"===t)(a=n.call(g,h[i],i))!==B&&d.push(a);else if("columns"===t||"rows"===t)(a=n.call(g,h[i],this[i],i))!==B&&d.push(a);else if("column"===t||"column-rows"===t||"row"===t||"cell"===t)for(c=this[i],"column-rows"===t&&(u=jt(h[i],p.opts)),s=0,l=c.length;s<l;s++)f=c[s],(a="cell"===t?n.call(g,h[i],f.row,f.column,i,s):n.call(g,h[i],f,i,s,u))!==B&&d.push(a)}if(d.length||r){var m=new ze(h,e?d.concat.apply([],d):d),v=m.selector;return v.rows=p.rows,v.cols=p.cols,v.opts=p.opts,m}return this},lastIndexOf:Tt.lastIndexOf||function(){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(e){var t=[];if(Tt.map)t=Tt.map.call(this,e,this);else for(var n=0,r=this.length;n<r;n++)t.push(e.call(this,this[n],n));return new ze(this.context,t)},pluck:function(t){return this.map(function(e){return e[t]})},pop:Tt.pop,push:Tt.push,reduce:Tt.reduce||function(e,t){return n(this,e,t,0,this.length,1)},reduceRight:Tt.reduceRight||function(e,t){return n(this,e,t,this.length-1,-1,-1)},reverse:Tt.reverse,selector:null,shift:Tt.shift,slice:function(){return new ze(this.context,this)},sort:Tt.sort,splice:Tt.splice,toArray:function(){return Tt.slice.call(this)},to$:function(){return $(this)},toJQuery:function(){return $(this)},unique:function(){return new ze(this.context,ht(this))},unshift:Tt.unshift}),ze.extend=function(e,t,n){if(n.length&&t&&(t instanceof ze||t.__dt_wrapper)){var r,a,i,o=function(t,n,r){return function(){var e=n.apply(t,arguments);return ze.extend(e,e,r.methodExt),e}};for(r=0,a=n.length;r<a;r++)t[(i=n[r]).name]="function"===i.type?o(e,i.val,i):"object"===i.type?{}:i.val,t[i.name].__dt_wrapper=!0,ze.extend(e,t[i.name],i.propExt)}},ze.register=Xe=function(e,t){if($.isArray(e))for(var n=0,r=e.length;n<r;n++)ze.register(e[n],t);else{var a,i,o,s,l=e.split("."),u=St,c=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n].name===t)return e[n];return null};for(a=0,i=l.length;a<i;a++){var f=c(u,o=(s=-1!==l[a].indexOf("()"))?l[a].replace("()",""):l[a]);f||(f={name:o,val:{},methodExt:[],propExt:[],type:"object"},u.push(f)),a===i-1?(f.val=t,f.type="function"==typeof t?"function":$.isPlainObject(t)?"object":"other"):u=s?f.methodExt:f.propExt}}},ze.registerPlural=Ve=function(e,t,n){ze.register(e,n),ze.register(t,function(){var e=n.apply(this,arguments);return e===this?this:e instanceof ze?e.length?$.isArray(e[0])?new ze(e.context,e[0]):e[0]:B:e})};var Ct=function(e,t){if("number"==typeof e)return[t[e]];var n=$.map(t,function(e){return e.nTable});return $(n).filter(e).map(function(){var e=$.inArray(this,n);return t[e]}).toArray()};Xe("tables()",function(e){return e?new ze(Ct(e,this.context)):this}),Xe("table()",function(e){var t=this.tables(e),n=t.context;return n.length?new ze(n[0]):t}),Ve("tables().nodes()","table().node()",function(){return this.iterator("table",function(e){return e.nTable},1)}),Ve("tables().body()","table().body()",
function(){return this.iterator("table",function(e){return e.nTBody},1)}),Ve("tables().header()","table().header()",function(){return this.iterator("table",function(e){return e.nTHead},1)}),Ve("tables().footer()","table().footer()",function(){return this.iterator("table",function(e){return e.nTFoot},1)}),Ve("tables().containers()","table().container()",function(){return this.iterator("table",function(e){return e.nTableWrapper},1)}),Xe("draw()",function(t){return this.iterator("table",function(e){"page"===t?b(e):("string"==typeof t&&(t="full-hold"!==t),T(e,!1===t))})}),Xe("page()",function(t){return t===B?this.page.info().page:this.iterator("table",function(e){fe(e,t)})}),Xe("page.info()",function(){if(0===this.context.length)return B;var e=this.context[0],t=e._iDisplayStart,n=e.oFeatures.bPaginate?e._iDisplayLength:-1,r=e.fnRecordsDisplay(),a=-1===n;return{page:a?0:Math.floor(t/n),pages:a?1:Math.ceil(r/n),start:t,end:e.fnDisplayEnd(),length:n,recordsTotal:e.fnRecordsTotal(),recordsDisplay:r,serverSide:"ssp"===qe(e)}}),Xe("page.len()",function(t){return t===B?0!==this.context.length?this.context[0]._iDisplayLength:B:this.iterator("table",function(e){le(e,t)})});var _t=function(a,i,e){if(e){var t=new ze(a);t.one("draw",function(){e(t.ajax.json())})}if("ssp"==qe(a))T(a,i);else{he(a,!0);var n=a.jqXHR;n&&4!==n.readyState&&n.abort(),C(a,[],function(e){u(a);for(var t=V(a,e),n=0,r=t.length;n<r;n++)M(a,t[n]);T(a,i),he(a,!1)})}};Xe("ajax.json()",function(){var e=this.context;if(0<e.length)return e[0].json}),Xe("ajax.params()",function(){var e=this.context;if(0<e.length)return e[0].oAjaxData}),Xe("ajax.reload()",function(t,n){return this.iterator("table",function(e){_t(e,!1===n,t)})}),Xe("ajax.url()",function(t){var e=this.context;return t===B?0===e.length?B:(e=e[0]).ajax?$.isPlainObject(e.ajax)?e.ajax.url:e.ajax:e.sAjaxSource:this.iterator("table",function(e){$.isPlainObject(e.ajax)?e.ajax.url=t:e.ajax=t})}),Xe("ajax.url().load()",function(t,n){return this.iterator("table",function(e){_t(e,!1===n,t)})});var At=function(e,t,n,r,a){var i,o,s,l,u,c,f=[],d=typeof t;for(t&&"string"!==d&&"function"!==d&&t.length!==B||(t=[t]),s=0,l=t.length;s<l;s++)for(u=0,c=(o=t[s]&&t[s].split&&!t[s].match(/[\[\(:]/)?t[s].split(","):[t[s]]).length;u<c;u++)(i=n("string"==typeof o[u]?$.trim(o[u]):o[u]))&&i.length&&(f=f.concat(i));var h=Ue.selector[e];if(h.length)for(s=0,l=h.length;s<l;s++)f=h[s](r,a,f);return ht(f)},kt=function(e){return e||(e={}),e.filter&&e.search===B&&(e.search=e.filter),$.extend({search:"none",order:"current",page:"all"},e)},Nt=function(e){for(var t=0,n=e.length;t<n;t++)if(0<e[t].length)return e[0]=e[t],e[0].length=1,e.length=1,e.context=[e.context[t]],e;return e.length=0,e},jt=function(e,t){var n,r=[],a=e.aiDisplay,i=e.aiDisplayMaster,o=t.search,s=t.order,l=t.page;if("ssp"==qe(e))return"removed"===o?[]:ut(0,i.length);if("current"==l)for(c=e._iDisplayStart,f=e.fnDisplayEnd();c<f;c++)r.push(a[c]);else if("current"==s||"applied"==s){if("none"==o)r=i.slice();else if("applied"==o)r=a.slice();else if("removed"==o){for(var u={},c=0,f=a.length;c<f;c++)u[a[c]]=null;r=$.map(i,function(e){return u.hasOwnProperty(e)?null:e})}}else if("index"==s||"original"==s)for(c=0,f=e.aoData.length;c<f;c++)"none"==o?r.push(c):(-1===(n=$.inArray(c,a))&&"removed"==o||0<=n&&"applied"==o)&&r.push(c);return r},It=function(l,e,u){var c;return At("row",e,function(n){var e=nt(n),r=l.aoData;if(null!==e&&!u)return[e];if(c||(c=jt(l,u)),null!==e&&-1!==$.inArray(e,c))return[e];if(null===n||n===B||""===n)return c;if("function"==typeof n)return $.map(c,function(e){var t=r[e];return n(e,t._aData,t.nTr)?e:null});if(n.nodeName){var t=n._DT_RowIndex,a=n._DT_CellIndex;if(t!==B)return r[t]&&r[t].nTr===n?[t]:[];if(a)return r[a.row]&&r[a.row].nTr===n.parentNode?[a.row]:[];var i=$(n).closest("*[data-dt-row]");return i.length?[i.data("dt-row")]:[]}if("string"==typeof n&&"#"===n.charAt(0)){var o=l.aIds[n.replace(/^#/,"")];if(o!==B)return[o.idx]}var s=ct(lt(l.aoData,c,"nTr"));return $(s).filter(n).map(function(){return this._DT_RowIndex}).toArray()},l,u)};Xe("rows()",function(t,n){t===B?t="":$.isPlainObject(t)&&(n=t,t=""),n=kt(n);var e=this.iterator("table",function(e){return It(e,t,n)},1);return e.selector.rows=t,e.selector.opts=n,e}),Xe("rows().nodes()",function(){return this.iterator("row",function(e,t){return e.aoData[t].nTr||B},1)}),Xe("rows().data()",function(){return this.iterator(!0,"rows",function(e,t){return lt(e.aoData,t,"_aData")},1)}),Ve("rows().cache()","row().cache()",function(r){return this.iterator("row",function(e,t){var n=e.aoData[t];return"search"===r?n._aFilterData:n._aSortData},1)}),Ve("rows().invalidate()","row().invalidate()",function(n){return this.iterator("row",function(e,t){a(e,t,n)})}),Ve("rows().indexes()","row().index()",function(){return this.iterator("row",function(e,t){return t},1)}),Ve("rows().ids()","row().id()",function(e){for(var t=[],n=this.context,r=0,a=n.length;r<a;r++)for(var i=0,o=this[r].length;i<o;i++){var s=n[r].rowIdFn(n[r].aoData[this[r][i]]._aData);t.push((!0===e?"#":"")+s)}return new ze(n,t)}),Ve("rows().remove()","row().remove()",function(){var d=this;return this.iterator("row",function(e,t,n){var r,a,i,o,s,l,u=e.aoData,c=u[t];for(u.splice(t,1),r=0,a=u.length;r<a;r++)if(l=(s=u[r]).anCells,null!==s.nTr&&(s.nTr._DT_RowIndex=r),null!==l)for(i=0,o=l.length;i<o;i++)l[i]._DT_CellIndex.row=r;h(e.aiDisplayMaster,t),h(e.aiDisplay,t),h(d[n],t,!1),0<e._iRecordsDisplay&&e._iRecordsDisplay--,Me(e);var f=e.rowIdFn(c._aData);f!==B&&delete e.aIds[f]}),this.iterator("table",function(e){for(var t=0,n=e.aoData.length;t<n;t++)e.aoData[t].idx=t}),this}),Xe("rows.add()",function(i){var e=this.iterator("table",function(e){var t,n,r,a=[];for(n=0,r=i.length;n<r;n++)(t=i[n]).nodeName&&"TR"===t.nodeName.toUpperCase()?a.push(O(e,t)[0]):a.push(M(e,t));return a},1),t=this.rows(-1);return t.pop(),$.merge(t,e),t}),Xe("row()",function(e,t){return Nt(this.rows(e,t))}),Xe("row().data()",function(e){var t=this.context;if(e===B)return t.length&&this.length?t[0].aoData[this[0]]._aData:B;var n=t[0].aoData[this[0]];return n._aData=e,$.isArray(e)&&n.nTr.id&&y(t[0].rowId)(e,n.nTr.id),a(t[0],this[0],"data"),this}),Xe("row().node()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]].nTr||null}),Xe("row.add()",function(t){t instanceof $&&t.length&&(t=t[0]);var e=this.iterator("table",function(e){return t.nodeName&&"TR"===t.nodeName.toUpperCase()?O(e,t)[0]:M(e,t)});return this.row(e[0])});var Lt=function(i,e,t,n){var o=[],s=function(e,t){if($.isArray(e)||e instanceof $)for(var n=0,r=e.length;n<r;n++)s(e[n],t);else if(e.nodeName&&"tr"===e.nodeName.toLowerCase())o.push(e);else{var a=$("<tr><td/></tr>").addClass(t);$("td",a).addClass(t).html(e)[0].colSpan=F(i),o.push(a[0])}};s(t,n),e._details&&e._details.detach(),e._details=$(o),e._detailsShow&&e._details.insertAfter(e.nTr)},Et=function(e,t){var n=e.context;if(n.length){var r=n[0].aoData[t!==B?t:e[0]];r&&r._details&&(r._details.remove(),r._detailsShow=B,r._details=B)}},Rt=function(e,t){var n=e.context;if(n.length&&e.length){var r=n[0].aoData[e[0]];r._details&&((r._detailsShow=t)?r._details.insertAfter(r.nTr):r._details.detach(),Ft(n[0]))}},Ft=function(o){var a=new ze(o),e=".dt.DT_details",t="draw"+e,n="column-visibility"+e,r="destroy"+e,s=o.aoData;a.off(t+" "+n+" "+r),0<st(s,"_details").length&&(a.on(t,function(e,t){o===t&&a.rows({page:"current"}).eq(0).each(function(e){var t=s[e];t._detailsShow&&t._details.insertAfter(t.nTr)})}),a.on(n,function(e,t){if(o===t)for(var n,r=F(t),a=0,i=s.length;a<i;a++)(n=s[a])._details&&n._details.children("td[colspan]").attr("colspan",r)}),a.on(r,function(e,t){if(o===t)for(var n=0,r=s.length;n<r;n++)s[n]._details&&Et(a,n)}))},Pt=""+"row().child",Ht=Pt+"()";Xe(Ht,function(e,t){var n=this.context;return e===B?n.length&&this.length?n[0].aoData[this[0]]._details:B:(!0===e?this.child.show():!1===e?Et(this):n.length&&this.length&&Lt(n[0],n[0].aoData[this[0]],e,t),this)}),Xe([Pt+".show()",Ht+".show()"],function(){return Rt(this,!0),this}),Xe([Pt+".hide()",Ht+".hide()"],function(){return Rt(this,!1),this}),Xe([Pt+".remove()",Ht+".remove()"],function(){return Et(this),this}),Xe(Pt+".isShown()",function(){var e=this.context;return e.length&&this.length&&e[0].aoData[this[0]]._detailsShow||!1});var Mt=/^([^:]+):(name|visIdx|visible)$/,Ot=function(e,t,n,r,a){for(var i=[],o=0,s=a.length;o<s;o++)i.push(g(e,a[o],t));return i},qt=function(l,e,u){var c=l.aoColumns,f=st(c,"sName"),d=st(c,"nTh");return At("column",e,function(n){var e=nt(n);if(""===n)return ut(c.length);if(null!==e)return[0<=e?e:c.length+e];if("function"==typeof n){var r=jt(l,u);return $.map(c,function(e,t){return n(t,Ot(l,t,0,0,r),d[t])?t:null})}var a="string"==typeof n?n.match(Mt):"";if(a)switch(a[2]){case"visIdx":case"visible":var t=parseInt(a[1],10);if(t<0){var i=$.map(c,function(e,t){return e.bVisible?t:null});return[i[i.length+t]]}return[z(l,t)];case"name":return $.map(f,function(e,t){return e===a[1]?t:null});default:return[]}if(n.nodeName&&n._DT_CellIndex)return[n._DT_CellIndex.column];var o=$(d).filter(n).map(function(){return $.inArray(this,d)}).toArray();if(o.length||!n.nodeName)return o;var s=$(n).closest("*[data-dt-column]");return s.length?[s.data("dt-column")]:[]},l,u)},Wt=function(e,t,n){var r,a,i,o,s=e.aoColumns,l=s[t],u=e.aoData;if(n===B)return l.bVisible;if(l.bVisible!==n){if(n){var c=$.inArray(!0,st(s,"bVisible"),t+1);for(a=0,i=u.length;a<i;a++)o=u[a].nTr,r=u[a].anCells,o&&o.insertBefore(r[t],r[c]||null)}else $(st(e.aoData,"anCells",t)).detach();l.bVisible=n}};Xe("columns()",function(t,n){t===B?t="":$.isPlainObject(t)&&(n=t,t=""),n=kt(n);var e=this.iterator("table",function(e){return qt(e,t,n)},1);return e.selector.cols=t,e.selector.opts=n,e}),Ve("columns().header()","column().header()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].nTh},1)}),Ve("columns().footer()","column().footer()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].nTf},1)}),Ve("columns().data()","column().data()",function(){return this.iterator("column-rows",Ot,1)}),Ve("columns().dataSrc()","column().dataSrc()",function(){return this.iterator("column",function(e,t){return e.aoColumns[t].mData},1)}),Ve("columns().cache()","column().cache()",function(i){return this.iterator("column-rows",function(e,t,n,r,a){return lt(e.aoData,a,"search"===i?"_aFilterData":"_aSortData",t)},1)}),Ve("columns().nodes()","column().nodes()",function(){return this.iterator("column-rows",function(e,t,n,r,a){return lt(e.aoData,a,"anCells",t)},1)}),Ve("columns().visible()","column().visible()",function(n,r){var t=this,e=this.iterator("column",function(e,t){if(n===B)return e.aoColumns[t].bVisible;Wt(e,t,n)});return n!==B&&this.iterator("table",function(e){v(e,e.aoHeader),v(e,e.aoFooter),e.aiDisplay.length||$(e.nTBody).find("td[colspan]").attr("colspan",F(e)),Ne(e),t.iterator("column",function(e,t){He(e,null,"column-visibility",[e,t,n,r])}),(r===B||r)&&t.columns.adjust()}),e}),Ve("columns().indexes()","column().index()",function(n){return this.iterator("column",function(e,t){return"visible"===n?c(e,t):t},1)}),Xe("columns.adjust()",function(){return this.iterator("table",function(e){U(e)},1)}),Xe("column.index()",function(e,t){if(0!==this.context.length){var n=this.context[0];if("fromVisible"===e||"toData"===e)return z(n,t);if("fromData"===e||"toVisible"===e)return c(n,t)}}),Xe("column()",function(e,t){return Nt(this.columns(e,t))});var $t=function(r,e,t){var a,i,o,s,l,u,c,f=r.aoData,d=jt(r,t),n=ct(lt(f,d,"anCells")),h=$([].concat.apply([],n)),p=r.aoColumns.length;return At("cell",e,function(e){var t="function"==typeof e;if(null===e||e===B||t){for(i=[],o=0,s=d.length;o<s;o++)for(a=d[o],l=0;l<p;l++)u={row:a,column:l},t?(c=f[a],e(u,g(r,a,l),c.anCells?c.anCells[l]:null)&&i.push(u)):i.push(u);return i}if($.isPlainObject(e))return e.column!==B&&e.row!==B&&-1!==$.inArray(e.row,d)?[e]:[];var n=h.filter(e).map(function(e,t){return{row:t._DT_CellIndex.row,column:t._DT_CellIndex.column}}).toArray();return n.length||!e.nodeName?n:(c=$(e).closest("*[data-dt-row]")).length?[{row:c.data("dt-row"),column:c.data("dt-column")}]:[]},r,t)};Xe("cells()",function(t,e,n){if($.isPlainObject(t)&&(t.row===B?(n=t,t=null):(n=e,e=null)),$.isPlainObject(e)&&(n=e,e=null),null===e||e===B)return this.iterator("table",function(e){return $t(e,t,kt(n))});var r,a,i,o,s=n?{page:n.page,order:n.order,search:n.search}:{},l=this.columns(e,s),u=this.rows(t,s),c=this.iterator("table",function(e,t){var n=[];for(r=0,a=u[t].length;r<a;r++)for(i=0,o=l[t].length;i<o;i++)n.push({row:u[t][r],column:l[t][i]});return n},1),f=n&&n.selected?this.cells(c,n):c;return $.extend(f.selector,{cols:e,rows:t,opts:n}),f}),Ve("cells().nodes()","cell().node()",function(){return this.iterator("cell",function(e,t,n){var r=e.aoData[t];return r&&r.anCells?r.anCells[n]:B},1)}),Xe("cells().data()",function(){return this.iterator("cell",function(e,t,n){return g(e,t,n)},1)}),Ve("cells().cache()","cell().cache()",function(r){return r="search"===r?"_aFilterData":"_aSortData",this.iterator("cell",function(e,t,n){return e.aoData[t][r][n]},1)}),Ve("cells().render()","cell().render()",function(r){return this.iterator("cell",function(e,t,n){return g(e,t,n,r)},1)}),Ve("cells().indexes()","cell().index()",function(){return this.iterator("cell",function(e,t,n){return{row:t,column:n,columnVisible:c(e,n)}},1)}),Ve("cells().invalidate()","cell().invalidate()",function(r){return this.iterator("cell",function(e,t,n){a(e,t,r,n)})}),Xe("cell()",function(e,t,n){return Nt(this.cells(e,t,n))}),Xe("cell().data()",function(e){var t=this.context,n=this[0];return e===B?t.length&&n.length?g(t[0],n[0].row,n[0].column):B:(r(t[0],n[0].row,n[0].column,e),a(t[0],n[0].row,"data",n[0].column),this)}),Xe("order()",function(t,e){var n=this.context;return t===B?0!==n.length?n[0].aaSorting:B:("number"==typeof t?t=[[t,e]]:t.length&&!$.isArray(t[0])&&(t=Array.prototype.slice.call(arguments)),this.iterator("table",function(e){e.aaSorting=t.slice()}))}),Xe("order.listener()",function(t,n,r){return this.iterator("table",function(e){_e(e,t,n,r)})}),Xe("order.fixed()",function(t){if(t)return this.iterator("table",function(e){e.aaSortingFixed=$.extend(!0,{},t)});var e=this.context,n=e.length?e[0].aaSortingFixed:B;return $.isArray(n)?{pre:n}:n}),Xe(["columns().order()","column().order()"],function(r){var a=this;return this.iterator("table",function(e,t){var n=[];$.each(a[t],function(e,t){n.push([t,r])}),e.aaSorting=n})}),Xe("search()",function(t,n,r,a){var e=this.context;return t===B?0!==e.length?e[0].oPreviousSearch.sSearch:B:this.iterator("table",function(e){e.oFeatures.bFilter&&J(e,$.extend({},e.oPreviousSearch,{sSearch:t+"",bRegex:null!==n&&n,bSmart:null===r||r,bCaseInsensitive:null===a||a}),1)})}),Ve("columns().search()","column().search()",function(r,a,i,o){return this.iterator("column",function(e,t){var n=e.aoPreSearchCols;if(r===B)return n[t].sSearch;e.oFeatures.bFilter&&($.extend(n[t],{sSearch:r+"",bRegex:null!==a&&a,bSmart:null===i||i,bCaseInsensitive:null===o||o}),J(e,e.oPreviousSearch,1))})}),Xe("state()",function(){return this.context.length?this.context[0].oSavedState:null}),Xe("state.clear()",function(){return this.iterator("table",function(e){e.fnStateSaveCallback.call(e.oInstance,e,{})})}),Xe("state.loaded()",function(){return this.context.length?this.context[0].oLoadedState:null}),Xe("state.save()",function(){return this.iterator("table",function(e){Ne(e)})}),Ge.versionCheck=Ge.fnVersionCheck=function(e){for(var t,n,r=Ge.version.split("."),a=e.split("."),i=0,o=a.length;i<o;i++)if((t=parseInt(r[i],10)||0)!==(n=parseInt(a[i],10)||0))return n<t;return!0},Ge.isDataTable=Ge.fnIsDataTable=function(e){var a=$(e).get(0),i=!1;return e instanceof Ge.Api||($.each(Ge.settings,function(e,t){var n=t.nScrollHead?$("table",t.nScrollHead)[0]:null,r=t.nScrollFoot?$("table",t.nScrollFoot)[0]:null;t.nTable!==a&&n!==a&&r!==a||(i=!0)}),i)},Ge.tables=Ge.fnTables=function(t){var e=!1;$.isPlainObject(t)&&(e=t.api,t=t.visible);var n=$.map(Ge.settings,function(e){if(!t||t&&$(e.nTable).is(":visible"))return e.nTable});return e?new ze(n):n},Ge.camelToHungarian=A,Xe("$()",function(e,t){var n=this.rows(t).nodes(),r=$(n);return $([].concat(r.filter(e).toArray(),r.find(e).toArray()))}),$.each(["on","one","off"],function(e,n){Xe(n+"()",function(){var e=Array.prototype.slice.call(arguments);e[0]=$.map(e[0].split(/\s/),function(e){return e.match(/\.dt\b/)?e:e+".dt"}).join(" ");var t=$(this.tables().nodes());return t[n].apply(t,e),this})}),Xe("clear()",function(){return this.iterator("table",function(e){u(e)})}),Xe("settings()",function(){return new ze(this.context,this.context)}),Xe("init()",function(){var e=this.context;return e.length?e[0].oInit:null}),Xe("data()",function(){return this.iterator("table",function(e){return st(e.aoData,"_aData")}).flatten()}),Xe("destroy()",function(p){return p=p||!1,this.iterator("table",function(t){var n,e=t.nTableWrapper.parentNode,r=t.oClasses,a=t.nTable,i=t.nTBody,o=t.nTHead,s=t.nTFoot,l=$(a),u=$(i),c=$(t.nTableWrapper),f=$.map(t.aoData,function(e){return e.nTr});t.bDestroying=!0,He(t,"aoDestroyCallback","destroy",[t]),p||new ze(t).columns().visible(!0),c.off(".DT").find(":not(tbody *)").off(".DT"),$(k).off(".DT-"+t.sInstance),a!=o.parentNode&&(l.children("thead").detach(),l.append(o)),s&&a!=s.parentNode&&(l.children("tfoot").detach(),l.append(s)),t.aaSorting=[],t.aaSortingFixed=[],Ae(t),$(f).removeClass(t.asStripeClasses.join(" ")),$("th, td",o).removeClass(r.sSortable+" "+r.sSortableAsc+" "+r.sSortableDesc+" "+r.sSortableNone),u.children().detach(),u.append(f);var d=p?"remove":"detach";l[d](),c[d](),!p&&e&&(e.insertBefore(a,t.nTableReinsertBefore),l.css("width",t.sDestroyWidth).removeClass(r.sTable),(n=t.asDestroyStripes.length)&&u.children().each(function(e){$(this).addClass(t.asDestroyStripes[e%n])}));var h=$.inArray(t,Ge.settings);-1!==h&&Ge.settings.splice(h,1)})}),$.each(["column","row","cell"],function(e,l){Xe(l+"s().every()",function(i){var o=this.selector.opts,s=this;return this.iterator(l,function(e,t,n,r,a){i.call(s[l](t,"cell"===l?n:o,"cell"===l?o:B),t,n,r,a)})})}),Xe("i18n()",function(e,t,n){var r=this.context[0],a=q(e)(r.oLanguage);return a===B&&(a=t),n!==B&&$.isPlainObject(a)&&(a=a[n]!==B?a[n]:a._),a.replace("%d",n)}),Ge.version="1.10.20",Ge.settings=[],Ge.models={},Ge.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},Ge.models.oRow={nTr:null,anCells:null,_aData:[],_aSortData:null,_aFilterData:null,_sFilterRow:null,_sRowStripe:"",src:null,idx:-1},Ge.models.oColumn={idx:null,aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_sManualType:null,_bAttrSrc:!1,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},Ge.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:[],ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollCollapse:!1,bServerSide:!1,bSort:!0,bSortMulti:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(e){return e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,this.oLanguage.sThousands)},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(e){try{return JSON.parse((-1===e.iStateDuration?sessionStorage:localStorage).getItem("DataTables_"+e.sInstance+"_"+location.pathname))}catch(t){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(e,t){try{(-1===e.iStateDuration?sessionStorage:localStorage).setItem("DataTables_"+e.sInstance+"_"+location.pathname,JSON.stringify(t))}catch(n){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iTabIndex:0,oClasses:{},oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sDecimal:"",sThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sSearchPlaceholder:"",sUrl:"",sZeroRecords:"No matching records found"},oSearch:$.extend({},Ge.models.oSearch),sAjaxDataProp:"data",sAjaxSource:null,sDom:"lfrtip",searchDelay:null,sPaginationType:"simple_numbers",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET",renderer:null,rowId:"DT_RowId"},o(Ge.defaults),Ge.defaults.column={aDataSort:null,iDataSort:-1,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},o(Ge.defaults.column),Ge.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortMulti:null,bSortClasses:null,bStateSave:null},oScroll:{bCollapse:null,iBarWidth:0,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1,bBounding:!1,barWidth:0},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aIds:{},aoColumns:[],aoHeader:[],aoFooter:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:[],asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,searchDelay:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oSavedState:null,oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,json:B,oAjaxData:B,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iRecordsTotal:0,_iRecordsDisplay:0,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return"ssp"==qe(this)?1*this._iRecordsTotal:this.aiDisplayMaster.length},fnRecordsDisplay:function(){return"ssp"==qe(this)?1*this._iRecordsDisplay:this.aiDisplay.length},fnDisplayEnd:function(){var e=this._iDisplayLength,t=this._iDisplayStart,n=t+e,r=this.aiDisplay.length,a=this.oFeatures,i=a.bPaginate;return a.bServerSide?!1===i||-1===e?t+r:Math.min(t+e,this._iRecordsDisplay):!i||r<n||-1===e?r:n},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null,aLastSort:[],oPlugins:{},rowIdFn:null,rowId:null},Ge.ext=Ue={buttons:{},classes:{},build:"dt/dt-1.10.20",errMode:"alert",feature:[],search:[],selector:{cell:[],column:[],row:[]},internal:{},legacy:{ajax:null},pager:{},renderer:{pageButton:{},header:{}},order:{},type:{detect:[],search:{},order:{}},_unique:0,fnVersionCheck:Ge.fnVersionCheck,iApiIndex:0,oJUIClasses:{},sVersion:Ge.version},$.extend(Ue,{afnFiltering:Ue.search,aTypes:Ue.type.detect,ofnSearch:Ue.type.search,oSort:Ue.type.order,afnSortData:Ue.order,aoFeatures:Ue.feature,oApi:Ue.internal,oStdClasses:Ue.classes,oPagination:Ue.pager}),$.extend(Ge.ext.classes,{sTable:"dataTable",sNoFooter:"no-footer",sPageButton:"paginate_button",sPageButtonActive:"current",sPageButtonDisabled:"disabled",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sFilterInput:"",sLengthSelect:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sHeaderTH:"",sFooterTH:"",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sJUIHeader:"",sJUIFooter:""});var Bt=Ge.ext.pager;$.extend(Bt,{simple:function(){return["previous","next"]},full:function(){return["first","previous","next","last"]},numbers:function(e,t){return[We(e,t)]},simple_numbers:function(e,t){return["previous",We(e,t),"next"]},full_numbers:function(e,t){return["first","previous",We(e,t),"next","last"]},first_last_numbers:function(e,t){return["first",We(e,t),"last"]},_numbers:We,numbers_length:7}),$.extend(!0,Ge.ext.renderer,{pageButton:{_:function(u,e,c,t,f,d){var h,p,n,g=u.oClasses,m=u.oLanguage.oPaginate,v=u.oLanguage.oAria.paginate||{},y=0,b=function(e,t){var n,r,a,i,o=g.sPageButtonDisabled,s=function(e){fe(u,e.data.action,!0)};for(n=0,r=t.length;n<r;n++)if(a=t[n],$.isArray(a)){var l=$("<"+(a.DT_el||"div")+"/>").appendTo(e);b(l,a)}else{switch(h=null,p=a,i=u.iTabIndex,a){case"ellipsis":e.append('<span class="ellipsis">&#x2026;</span>');break;case"first":h=m.sFirst,0===f&&(i=-1,p+=" "+o);break;case"previous":h=m.sPrevious,0===f&&(i=-1,p+=" "+o);break;case"next":h=m.sNext,f===d-1&&(i=-1,p+=" "+o);break;case"last":h=m.sLast,f===d-1&&(i=-1,p+=" "+o);break;default:h=a+1,p=f===a?g.sPageButtonActive:""}null!==h&&(Fe($("<a>",{"class":g.sPageButton+" "+p,"aria-controls":u.sTableId,"aria-label":v[a],"data-dt-idx":y,tabindex:i,id:0===c&&"string"==typeof a?u.sTableId+"_"+a:null}).html(h).appendTo(e),{action:a},s),y++)}};try{n=$(e).find(x.activeElement).data("dt-idx")}catch(r){}b($(e).empty(),t),n!==B&&$(e).find("[data-dt-idx="+n+"]").focus()}}}),$.extend(Ge.ext.type.detect,[function(e,t){var n=t.oLanguage.sDecimal;return at(e,n)?"num"+n:null},function(e){if(e&&!(e instanceof Date)&&!Ke.test(e))return null;var t=Date.parse(e);return null!==t&&!isNaN(t)||tt(e)?"date":null},function(e,t){var n=t.oLanguage.sDecimal;return at(e,n,!0)?"num-fmt"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return ot(e,n)?"html-num"+n:null},function(e,t){var n=t.oLanguage.sDecimal;return ot(e,n,!0)?"html-num-fmt"+n:null},function(e){return tt(e)||"string"==typeof e&&-1!==e.indexOf("<")?"html":null}]),$.extend(Ge.ext.type.search,{html:function(e){return tt(e)?e:"string"==typeof e?e.replace(Ye," ").replace(Ze,""):""},string:function(e){return tt(e)?e:"string"==typeof e?e.replace(Ye," "):e}});var Ut=function(e,t,n,r){return 0===e||e&&"-"!==e?(t&&(e=rt(e,t)),e.replace&&(n&&(e=e.replace(n,"")),r&&(e=e.replace(r,""))),1*e):-Infinity};$.extend(Ue.type.order,{"date-pre":function(e){var t=Date.parse(e);return isNaN(t)?-Infinity:t},"html-pre":function(e){return tt(e)?"":e.replace?e.replace(/<.*?>/g,"").toLowerCase():e+""},"string-pre":function(e){return tt(e)?"":"string"==typeof e?e.toLowerCase():e.toString?e.toString():""},"string-asc":function(e,t){return e<t?-1:t<e?1:0},"string-desc":function(e,t){return e<t?1:t<e?-1:0}}),$e(""),$.extend(!0,Ge.ext.renderer,{header:{_:function(i,o,s,l){$(i.nTable).on("order.dt.DT",function(e,t,n,r){if(i===t){var a=s.idx;o.removeClass(s.sSortingClass+" "+l.sSortAsc+" "+l.sSortDesc).addClass("asc"==r[a]?l.sSortAsc:"desc"==r[a]?l.sSortDesc:s.sSortingClass)}})},jqueryui:function(i,o,s,l){$("<div/>").addClass(l.sSortJUIWrapper).append(o.contents()).append($("<span/>").addClass(l.sSortIcon+" "+s.sSortingClassJUI)).appendTo(o),$(i.nTable).on("order.dt.DT",function(e,t,n,r){if(i===t){var a=s.idx;o.removeClass(l.sSortAsc+" "+l.sSortDesc).addClass("asc"==r[a]?l.sSortAsc:"desc"==r[a]?l.sSortDesc:s.sSortingClass),o.find("span."+l.sSortIcon).removeClass(l.sSortJUIAsc+" "+l.sSortJUIDesc+" "+l.sSortJUI+" "+l.sSortJUIAscAllowed+" "+l.sSortJUIDescAllowed).addClass("asc"==r[a]?l.sSortJUIAsc:"desc"==r[a]?l.sSortJUIDesc:s.sSortingClassJUI)}})}}});var zt=function(e){return"string"==typeof e?e.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;"):e};return Ge.render={number:function(i,o,s,l,u){return{display:function(e){if("number"!=typeof e&&"string"!=typeof e)return e;var t=e<0?"-":"",n=parseFloat(e);if(isNaN(n))return zt(e);n=n.toFixed(s),e=Math.abs(n);var r=parseInt(e,10),a=s?o+(e-r).toFixed(s).substring(2):"";return t+(l||"")+r.toString().replace(/\B(?=(\d{3})+(?!\d))/g,i)+a+(u||"")}}},text:function(){return{display:zt,filter:zt}}},$.extend(Ge.ext.internal,{_fnExternApiFunc:Be,_fnBuildAjax:C,_fnAjaxUpdate:_,_fnAjaxParameters:i,_fnAjaxUpdateDraw:s,_fnAjaxDataSrc:V,_fnAddColumn:E,_fnColumnOptions:R,_fnAdjustColumnSizing:U,_fnVisibleToColumnIndex:z,_fnColumnIndexToVisible:c,_fnVisbleColumns:F,_fnGetColumns:P,_fnColumnTypes:l,_fnApplyColumnDefs:H,_fnHungarianMap:o,_fnCamelToHungarian:A,_fnLanguageCompat:N,_fnBrowserDetect:L,_fnAddData:M,_fnAddTr:O,_fnNodeToDataIndex:e,_fnNodeToColumnIndex:t,_fnGetCellData:g,_fnSetCellData:r,_fnSplitObjNotation:m,_fnGetObjectDataFn:q,_fnSetObjectDataFn:y,_fnGetDataMaster:w,_fnClearTable:u,_fnDeleteIndex:h,_fnInvalidate:a,_fnGetRowElements:f,_fnCreateTr:S,_fnBuildHead:d,_fnDrawHead:v,_fnDraw:b,_fnReDraw:T,_fnAddOptionsHtml:D,_fnDetectHeader:W,_fnGetUniqueThs:X,_fnFeatureHtmlFilter:G,_fnFilterComplete:J,_fnFilterCustom:Y,_fnFilterColumn:Z,_fnFilter:K,_fnFilterCreateSearch:Q,_fnEscapeRegex:vt,_fnFilterData:ee,_fnFeatureHtmlInfo:re,_fnUpdateInfo:ae,_fnInfoMacros:ie,_fnInitialise:oe,_fnInitComplete:se,_fnLengthChange:le,_fnFeatureHtmlLength:ue,_fnFeatureHtmlPaginate:ce,_fnPageChange:fe,_fnFeatureHtmlProcessing:de,_fnProcessingDisplay:he,_fnFeatureHtmlTable:pe,_fnScrollDraw:ge,_fnApplyToChildren:me,_fnCalculateColumnWidths:ve,_fnThrottle:wt,_fnConvertToWidth:ye,_fnGetWidestNode:be,_fnGetMaxLenString:xe,_fnStringToCss:we,_fnSortFlatten:Se,_fnSort:Te,_fnSortAria:De,_fnSortListener:Ce,_fnSortAttachListener:_e,_fnSortingClasses:Ae,_fnSortData:ke,_fnSaveState:Ne,_fnLoadState:je,_fnSettingsFromNode:Ie,_fnLog:Le,_fnMap:Ee,_fnBindAction:Fe,_fnCallbackReg:Pe,_fnCallbackFire:He,_fnLengthOverflow:Me,_fnRenderer:Oe,_fnDataSource:qe,_fnRowAttributes:p,_fnExtend:Re,_fnCalculateEnd:function(){}}),(($.fn.dataTable=Ge).$=$).fn.dataTableSettings=Ge.settings,$.fn.dataTableExt=Ge.ext,$.fn.DataTable=function(e){return $(this).dataTable(e).api()},$.each(Ge,function(e,t){$.fn.DataTable[e]=t}),$.fn.dataTable}),function(e){"function"==typeof define&&define.amd?define(["jquery"],e):"object"==typeof module&&"object"==typeof module.exports?e(require("jquery")):e(jQuery)}(function(d){function n(){var e=o.settings;if(e.autoDispose&&!d.contains(document.documentElement,this))return d(this).timeago("dispose"),this;var t=r(this);return isNaN(t.datetime)||(0===e.cutoff||Math.abs(i(t.datetime))<e.cutoff?d(this).text(a(t.datetime)):0<d(this).attr("title").length&&d(this).text(d(this).attr("title"))),this}function r(e){if(!(e=d(e)).data("timeago")){e.data("timeago",{datetime:o.datetime(e)});var t=d.trim(e.text());o.settings.localeTitle?e.attr("title",e.data("timeago").datetime.toLocaleString()):!(0<t.length)||o.isTime(e)&&e.attr("title")||e.attr("title",t)}return e.data("timeago")}function a(e){return o.inWords(i(e))}function i(e){return(new Date).getTime()-e.getTime()}d.timeago=function(e){return e instanceof Date?a(e):a("string"==typeof e?d.timeago.parse(e):"number"==typeof e?new Date(e):d.timeago.datetime(e))};var o=d.timeago;d.extend(d.timeago,{settings:{refreshMillis:6e4,allowPast:!0,allowFuture:!1,localeTitle:!1,cutoff:0,autoDispose:!0,strings:{prefixAgo:null,prefixFromNow:null,suffixAgo:"ago",suffixFromNow:"from now",inPast:"any moment now",seconds:"less than a minute",minute:"about a minute",minutes:"%d minutes",hour:"about an hour",hours:"about %d hours",day:"a day",days:"%d days",month:"about a month",months:"%d months",year:"about a year",years:"%d years",wordSeparator:" ",numbers:[]}},inWords:function(a){function e(e,t){var n=d.isFunction(e)?e(t,a):e,r=i.numbers&&i.numbers[t]||t;return n.replace(/%d/i,r)}if(!this.settings.allowPast&&!this.settings.allowFuture)throw"timeago allowPast and allowFuture settings can not both be set to false.";var i=this.settings.strings,
t=i.prefixAgo,n=i.suffixAgo;if(this.settings.allowFuture&&a<0&&(t=i.prefixFromNow,n=i.suffixFromNow),!this.settings.allowPast&&0<=a)return this.settings.strings.inPast;var r=Math.abs(a)/1e3,o=r/60,s=o/60,l=s/24,u=l/365,c=r<45&&e(i.seconds,Math.round(r))||r<90&&e(i.minute,1)||o<45&&e(i.minutes,Math.round(o))||o<90&&e(i.hour,1)||s<24&&e(i.hours,Math.round(s))||s<42&&e(i.day,1)||l<30&&e(i.days,Math.round(l))||l<45&&e(i.month,1)||l<365&&e(i.months,Math.round(l/30))||u<1.5&&e(i.year,1)||e(i.years,Math.round(u)),f=i.wordSeparator||"";return i.wordSeparator===undefined&&(f=" "),d.trim([t,c,n].join(f))},parse:function(e){var t=d.trim(e);return t=(t=(t=(t=(t=t.replace(/\.\d+/,"")).replace(/-/,"/").replace(/-/,"/")).replace(/T/," ").replace(/Z/," UTC")).replace(/([\+\-]\d\d)\:?(\d\d)/," $1$2")).replace(/([\+\-]\d\d)$/," $100"),new Date(t)},datetime:function(e){var t=o.isTime(e)?d(e).attr("datetime"):d(e).attr("title");return o.parse(t)},isTime:function(e){return"time"===d(e).get(0).tagName.toLowerCase()}});var s={init:function(){s.dispose.call(this);var e=d.proxy(n,this);e();var t=o.settings;0<t.refreshMillis&&(this._timeagoInterval=setInterval(e,t.refreshMillis))},update:function(e){var t=e instanceof Date?e:o.parse(e);d(this).data("timeago",{datetime:t}),o.settings.localeTitle&&d(this).attr("title",t.toLocaleString()),n.apply(this)},updateFromDOM:function(){d(this).data("timeago",{datetime:o.parse(o.isTime(this)?d(this).attr("datetime"):d(this).attr("title"))}),n.apply(this)},dispose:function(){this._timeagoInterval&&(window.clearInterval(this._timeagoInterval),this._timeagoInterval=null)}};d.fn.timeago=function(e,t){var n=e?s[e]:s.init;if(!n)throw new Error("Unknown function name '"+e+"' for timeago");return this.each(function(){n.call(this,t)}),this},document.createElement("abbr"),document.createElement("time")}),$(document).ready(function(){var t,r;$(".file_list").dataTable({order:[[1,"asc"]],paging:!1}),$("a.src_link").click(function(){var e=$($(this).attr("href"));e.hasClass("highlighted")||(e.find("pre code").each(function(e,t){hljs.highlightBlock(t,"  ")}),e.addClass("highlighted"))}),$("a.src_link").colorbox({transition:"none",inline:!0,opacity:1,width:"95%",height:"95%",onLoad:function(){t=r||window.location.hash.substring(1),r=this.href.split("#")[1],window.location.hash=r,$(".file_list_container").hide()},onCleanup:function(){t&&t!=r?($('a[href="#'+t+'"]').click(),r=t):($(".group_tabs a:first").click(),t=r,r="#_AllFiles"),window.location.hash=r;var e=$(".group_tabs li.active a").attr("class");$("#"+e+".file_list_container").show()}}),$(".source_table li[data-linenumber]").click(function(){$("#cboxLoadedContent").scrollTop(this.offsetTop);var e=r.replace(/-.*/,"")+"-L"+$(this).data("linenumber");return window.location.replace(window.location.href.replace(/#.*/,"#"+e)),r=e,!1}),window.onpopstate=function(){if("#_"==window.location.hash.substring(0,2))$.colorbox.close(),r=window.location.hash.substring(1);else if($("#colorbox").is(":hidden")){var e=window.location.hash.substring(1).split("-L"),t=e[0],n=e[1];$('a.src_link[href="#'+t+'"]').colorbox({open:!0}),n!==undefined&&$("#cboxLoadedContent").scrollTop($('#cboxLoadedContent .source_table li[data-linenumber="'+n+'"]')[0].offsetTop)}},$(".source_files").hide(),$(".file_list_container").hide(),$(".file_list_container h2").each(function(){var e=$(this).parent().attr("id"),t=$(this).find(".group_name").first().html(),n=$(this).find(".covered_percent").first().html();$(".group_tabs").append('<li><a href="#'+e+'">'+t+" ("+n+")</a></li>")}),$(".group_tabs a").each(function(){$(this).addClass($(this).attr("href").replace("#",""))}),$(".group_tabs").on("focus","a",function(){$(this).blur()});var e=$('link[rel="icon"]').attr("href");if($(".group_tabs").on("click","a",function(){return $(this).parent().hasClass("active")||($(".group_tabs a").parent().removeClass("active"),$(this).parent().addClass("active"),$(".file_list_container").hide(),$(".file_list_container"+$(this).attr("href")).show(),window.location.href=window.location.href.split("#")[0]+$(this).attr("href").replace("#","#_"),$('link[rel="icon"]').remove(),$("head").append('<link rel="icon" type="image/png" href="'+e+'" />')),!1}),window.location.hash){var n=window.location.hash.substring(1);if(40===n.length)$('a.src_link[href="#'+n+'"]').click();else if(40<n.length){var a=n.split("-L"),i=a[0],o=a[1];$('a.src_link[href="#'+i+'"]').colorbox({open:!0}),$("#"+i+' li[data-linenumber="'+o+'"]').click()}else $(".group_tabs a."+n.replace("_","")).click()}else $(".group_tabs a:first").click();$("abbr.timeago").timeago(),$("#loading").fadeOut(),$("#wrapper").show(),$(".dataTables_filter input").focus()});

=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20230928203458_create_active_storage_tables.active_storage.rb ===
# frozen_string_literal: true

# This migration comes from active_storage (originally 20170806125915)
class CreateActiveStorageTables < ActiveRecord::Migration[5.2]
  def change
    # Use Active Record's configured type for primary and foreign keys
    primary_key_type, foreign_key_type = primary_and_foreign_key_types

    create_table :active_storage_blobs, id: primary_key_type do |t|
      t.string :key, null: false
      t.string :filename, null: false
      t.string :content_type
      t.text :metadata
      t.string :service_name, null: false
      t.bigint :byte_size, null: false
      t.string :checksum

      t.datetime :created_at, precision: 6, null: false

      t.index [:key], unique: true
    end

    create_table :active_storage_attachments, id: primary_key_type do |t|
      t.string :name, null: false
      t.references :record, null: false, polymorphic: true, index: false, type: foreign_key_type
      t.references :blob, null: false, type: foreign_key_type

      t.datetime :created_at, precision: 6, null: false

      t.index %i[record_type record_id name blob_id], name: :index_active_storage_attachments_uniqueness,
        unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end

    create_table :active_storage_variant_records, id: primary_key_type do |t|
      t.belongs_to :blob, null: false, index: false, type: foreign_key_type
      t.string :variation_digest, null: false

      t.index %i[blob_id variation_digest], name: :index_active_storage_variant_records_uniqueness, unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end
  end

  private

  def primary_and_foreign_key_types
    config = Rails.configuration.generators
    setting = config.options[config.orm][:primary_key_type]
    primary_key_type = setting || :primary_key
    foreign_key_type = setting || :bigint
    [primary_key_type, foreign_key_type]
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20230928203505_create_action_text_tables.action_text.rb ===
# frozen_string_literal: true

# This migration comes from action_text (originally 20180528164100)
class CreateActionTextTables < ActiveRecord::Migration[6.0]
  def change
    # Use Active Record's configured type for primary and foreign keys
    primary_key_type, foreign_key_type = primary_and_foreign_key_types

    create_table :action_text_rich_texts, id: primary_key_type do |t|
      t.string :name, null: false
      t.text :body, size: :long
      t.references :record, null: false, polymorphic: true, index: false, type: foreign_key_type

      t.timestamps

      t.index %i[record_type record_id name], name: "index_action_text_rich_texts_uniqueness", unique: true
    end
  end

  private

  def primary_and_foreign_key_types
    config = Rails.configuration.generators
    setting = config.options[config.orm][:primary_key_type]
    primary_key_type = setting || :primary_key
    foreign_key_type = setting || :bigint
    [primary_key_type, foreign_key_type]
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20230928203511_devise_create_users.rb ===
# frozen_string_literal: true

class DeviseCreateUsers < ActiveRecord::Migration[7.0]
  def change
    create_table :users do |t|
      ## Database authenticatable
      t.string :email, null: false, default: ""
      t.string :encrypted_password, null: false, default: ""

      ## Recoverable
      t.string :reset_password_token
      t.datetime :reset_password_sent_at

      ## Rememberable
      t.datetime :remember_created_at

      ## Trackable
      t.integer :sign_in_count, default: 0, null: false
      t.datetime :current_sign_in_at
      t.datetime :last_sign_in_at
      t.string :current_sign_in_ip
      t.string :last_sign_in_ip

      ## Confirmable
      t.string :confirmation_token
      t.datetime :confirmed_at
      t.datetime :confirmation_sent_at
      t.string :unconfirmed_email # Only if using reconfirmable

      ## Lockable
      t.integer :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts
      t.string :unlock_token # Only if unlock strategy is :email or :both
      t.datetime :locked_at

      t.timestamps null: false
    end

    add_index :users, :email, unique: true
    add_index :users, :reset_password_token, unique: true
    add_index :users, :confirmation_token, unique: true
    add_index :users, :unlock_token, unique: true
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20230928203513_create_friendly_id_slugs.rb ===
# frozen_string_literal: true

MIGRATION_CLASS =
  if ActiveRecord::VERSION::MAJOR >= 5
    ActiveRecord::Migration["#{ActiveRecord::VERSION::MAJOR}.#{ActiveRecord::VERSION::MINOR}"]
  else
    ActiveRecord::Migration
  end

class CreateFriendlyIdSlugs < MIGRATION_CLASS
  def change
    create_table :friendly_id_slugs do |t|
      t.string :slug, null: false
      t.integer :sluggable_id, null: false
      t.string :sluggable_type, limit: 50
      t.string :scope
      t.datetime :created_at
    end
    add_index :friendly_id_slugs, %i[sluggable_type sluggable_id]
    add_index :friendly_id_slugs, %i[slug sluggable_type], length: { slug: 140, sluggable_type: 50 }
    add_index :friendly_id_slugs, %i[slug sluggable_type scope], length: { slug: 70, sluggable_type: 50, scope: 70 },
      unique: true
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20230928204902_create_churps.rb ===
# frozen_string_literal: true

class CreateChurps < ActiveRecord::Migration[7.0]
  def change
    create_table :churps do |t|
      t.text :body
      t.references :user, null: false, foreign_key: true

      t.timestamps
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231005164921_creat_profiles.rb ===
# frozen_string_literal: true

class CreatProfiles < ActiveRecord::Migration[7.0]
  def change
    create_table :profiles do |t|
      t.string :first_name
      t.string :last_name
      t.text :description
      t.string :website
      t.datetime :birth_date
      t.references :user, null: false, foreign_key: true

      t.timestamps
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231005175848_add_role_to_users.rb ===
# frozen_string_literal: true

class AddRoleToUsers < ActiveRecord::Migration[7.0]
  def change
    add_column :users, :role, :integer
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231005180144_add_named_themes_to_user.rb ===
# frozen_string_literal: true

class AddNamedThemesToUser < ActiveRecord::Migration[7.0]
  def change
    change_table :users, bulk: true do |t|
      t.string :username, unique: true
      t.string :display_name, null: true
      t.string :slug, null: true
      t.integer :theme, default: 0
      t.integer :theme_color, default: 0
    end

    add_index :users, :display_name
    add_index :users, :slug, unique: true
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231006174128_create_likes.rb ===
# frozen_string_literal: true

class CreateLikes < ActiveRecord::Migration[7.0]
  def change
    create_table :likes do |t|
      t.references :user, null: false, foreign_key: true
      t.references :likeable, polymorphic: true, null: false

      t.timestamps
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231008234743_create_comments.rb ===
# frozen_string_literal: true

class CreateComments < ActiveRecord::Migration[7.0]
  def change
    create_table :comments do |t|
      t.text :content, null: false
      t.references :churp, null: false, foreign_key: true
      t.references :user, null: false, foreign_key: true

      t.timestamps
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231012220507_add_churp_id_to_churps.rb ===
# frozen_string_literal: true

class AddChurpIdToChurps < ActiveRecord::Migration[7.0]
  def change
    add_column :churps, :churp_id, :integer
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231014202238_add_rechurp_count_to_churps.rb ===
# frozen_string_literal: true

class AddRechurpCountToChurps < ActiveRecord::Migration[7.0]
  def change
    add_column :churps, :rechurp_count, :integer, default: 0
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231015204744_create_views.rb ===
# frozen_string_literal: true

class CreateViews < ActiveRecord::Migration[7.0]
  def change
    create_table :views do |t|
      t.references :user, null: false, foreign_key: true
      t.references :churp, null: false, foreign_key: true
      t.string :ip_address
      t.string :user_agent
      t.string :city
      t.string :state

      t.timestamps
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231017215454_create_flipper_tables.rb ===
# frozen_string_literal: true

class CreateFlipperTables < ActiveRecord::Migration[7.0] # standard:disable Rails/ReversibleMigrationMethodDefinition
  def self.up
    create_table :flipper_features do |t|
      t.string :key, null: false
      t.timestamps null: false
    end
    add_index :flipper_features, :key, unique: true

    create_table :flipper_gates do |t|
      t.string :feature_key, null: false
      t.string :key, null: false
      t.string :value
      t.timestamps null: false
    end
    add_index :flipper_gates, %i[feature_key key value], unique: true
  end

  def self.down
    drop_table :flipper_gates
    drop_table :flipper_features
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231017221844_create_hash_tags.rb ===
# frozen_string_literal: true

class CreateHashTags < ActiveRecord::Migration[7.0]
  def change
    create_table :hash_tags do |t|
      t.string :name

      t.timestamps
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231017222151_create_churp_hash_tags.rb ===
# frozen_string_literal: true

class CreateChurpHashTags < ActiveRecord::Migration[7.0]
  def change
    create_table :churp_hash_tags do |t|
      t.belongs_to :churp, index: true
      t.belongs_to :hash_tag, index: true

      t.timestamps
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231020170147_add_service_name_to_active_storage_blobs.active_storage.rb ===
# frozen_string_literal: true

# This migration comes from active_storage (originally 20190112182829)
class AddServiceNameToActiveStorageBlobs < ActiveRecord::Migration[6.0]
  def up
    return unless table_exists?(:active_storage_blobs)

    return if column_exists?(:active_storage_blobs, :service_name)

    add_column :active_storage_blobs, :service_name, :string

    if (configured_service = ActiveStorage::Blob.service.name)
      ActiveStorage::Blob.unscoped.update(service_name: configured_service)
    end

    change_column :active_storage_blobs, :service_name, :string, null: false
  end

  def down
    return unless table_exists?(:active_storage_blobs)

    remove_column :active_storage_blobs, :service_name
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231020170148_create_active_storage_variant_records.active_storage.rb ===
# frozen_string_literal: true

# This migration comes from active_storage (originally 20191206030411)
class CreateActiveStorageVariantRecords < ActiveRecord::Migration[6.0]
  def change
    return unless table_exists?(:active_storage_blobs)

    # Use Active Record's configured type for primary key
    create_table :active_storage_variant_records, id: primary_key_type, if_not_exists: true do |t|
      t.belongs_to :blob, null: false, index: false, type: blobs_primary_key_type
      t.string :variation_digest, null: false

      t.index %i[blob_id variation_digest], name: "index_active_storage_variant_records_uniqueness", unique: true
      t.foreign_key :active_storage_blobs, column: :blob_id
    end
  end

  private

  def primary_key_type
    config = Rails.configuration.generators
    config.options[config.orm][:primary_key_type] || :primary_key
  end

  def blobs_primary_key_type
    pkey_name = connection.primary_key(:active_storage_blobs)
    pkey_column = connection.columns(:active_storage_blobs).find { |c| c.name == pkey_name }
    pkey_column.bigint? ? :bigint : pkey_column.type
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231020170149_remove_not_null_on_active_storage_blobs_checksum.active_storage.rb ===
# frozen_string_literal: true

# This migration comes from active_storage (originally 20211119233751)
class RemoveNotNullOnActiveStorageBlobsChecksum < ActiveRecord::Migration[6.0]
  def change
    return unless table_exists?(:active_storage_blobs)

    change_column_null(:active_storage_blobs, :checksum, true)
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231027203146_move_theme_to_porfile.rb ===
# frozen_string_literal: true

class MoveThemeToPorfile < ActiveRecord::Migration[7.1]
  def up
    change_table :users, bulk: true do |t|
      t.remove :theme
      t.remove :theme_color
    end

    change_table :profiles, bulk: true do |t|
      t.integer :theme, default: 0
      t.integer :theme_color, default: 0
    end
  end

  def down
    change_table :users, bulk: true do |t|
      t.string :theme
      t.string :theme_color
    end

    change_table :profiles, bulk: true do |t|
      t.remove :theme, :integer, default: 0
      t.remove :theme_color, :integer, default: 0
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231027204921_create_relationships.rb ===
# frozen_string_literal: true

class CreateRelationships < ActiveRecord::Migration[7.1]
  def change
    create_table :relationships do |t|
      t.integer :follower_id
      t.integer :followed_id

      t.timestamps
    end
    add_index :relationships, :follower_id
    add_index :relationships, :followed_id
    add_index :relationships, %i[follower_id followed_id], unique: true
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231105225816_add_unique_index_to_user_name.rb ===
# frozen_string_literal: true

class AddUniqueIndexToUserName < ActiveRecord::Migration[7.1]
  def change
    add_index :users, :username, unique: true
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231108074238_install_searchjoy.rb ===
# frozen_string_literal: true

class InstallSearchjoy < ActiveRecord::Migration[7.1]
  def change
    create_table :searchjoy_searches do |t|
      t.references :user
      t.string :search_type
      t.string :query
      t.string :normalized_query
      t.integer :results_count
      t.datetime :created_at
      t.datetime :converted_at
    end

    add_index :searchjoy_searches, [:created_at]
    add_index :searchjoy_searches, %i[search_type created_at]
    add_index :searchjoy_searches, %i[search_type normalized_query created_at], name: "index_searchjoy_searches_on_search_type_query" # autogenerated name is too long

    create_table :searchjoy_conversions do |t|
      t.references :search
      t.references :convertable, polymorphic: true, index: { name: "index_searchjoy_conversions_on_convertable" }
      t.datetime :created_at
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/migrate/20231118054852_create_notifications.rb ===
# frozen_string_literal: true

class CreateNotifications < ActiveRecord::Migration[7.1]
  def change
    create_table :notifications do |t|
      t.references :recipient, polymorphic: true, null: false
      t.string :type, null: false
      t.jsonb :params
      t.datetime :read_at

      t.timestamps
    end
    add_index :notifications, :read_at
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/schema.rb ===
# This file is auto-generated from the current state of the database. Instead
# of editing this file, please use the migrations feature of Active Record to
# incrementally modify your database, and then regenerate this schema definition.
#
# This file is the source Rails uses to define your schema when running `bin/rails
# db:schema:load`. When creating a new database, `bin/rails db:schema:load` tends to
# be faster and is potentially less error prone than running all of your
# migrations from scratch. Old migrations may fail to apply correctly if those
# migrations use external dependencies or application code.
#
# It's strongly recommended that you check this file into your version control system.

ActiveRecord::Schema[7.2].define(version: 2023_11_18_054852) do
  # These are extensions that must be enabled in order to support this database
  enable_extension "plpgsql"

  create_table "action_text_rich_texts", force: :cascade do |t|
    t.string "name", null: false
    t.text "body"
    t.string "record_type", null: false
    t.bigint "record_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["record_type", "record_id", "name"], name: "index_action_text_rich_texts_uniqueness", unique: true
  end

  create_table "active_storage_attachments", force: :cascade do |t|
    t.string "name", null: false
    t.string "record_type", null: false
    t.bigint "record_id", null: false
    t.bigint "blob_id", null: false
    t.datetime "created_at", null: false
    t.index ["blob_id"], name: "index_active_storage_attachments_on_blob_id"
    t.index ["record_type", "record_id", "name", "blob_id"], name: "index_active_storage_attachments_uniqueness", unique: true
  end

  create_table "active_storage_blobs", force: :cascade do |t|
    t.string "key", null: false
    t.string "filename", null: false
    t.string "content_type"
    t.text "metadata"
    t.string "service_name", null: false
    t.bigint "byte_size", null: false
    t.string "checksum"
    t.datetime "created_at", null: false
    t.index ["key"], name: "index_active_storage_blobs_on_key", unique: true
  end

  create_table "active_storage_variant_records", force: :cascade do |t|
    t.bigint "blob_id", null: false
    t.string "variation_digest", null: false
    t.index ["blob_id", "variation_digest"], name: "index_active_storage_variant_records_uniqueness", unique: true
  end

  create_table "churp_hash_tags", force: :cascade do |t|
    t.bigint "churp_id"
    t.bigint "hash_tag_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["churp_id"], name: "index_churp_hash_tags_on_churp_id"
    t.index ["hash_tag_id"], name: "index_churp_hash_tags_on_hash_tag_id"
  end

  create_table "churps", force: :cascade do |t|
    t.text "body"
    t.bigint "user_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "churp_id"
    t.integer "rechurp_count", default: 0
    t.index ["user_id"], name: "index_churps_on_user_id"
  end

  create_table "comments", force: :cascade do |t|
    t.text "content", null: false
    t.bigint "churp_id", null: false
    t.bigint "user_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["churp_id"], name: "index_comments_on_churp_id"
    t.index ["user_id"], name: "index_comments_on_user_id"
  end

  create_table "flipper_features", force: :cascade do |t|
    t.string "key", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["key"], name: "index_flipper_features_on_key", unique: true
  end

  create_table "flipper_gates", force: :cascade do |t|
    t.string "feature_key", null: false
    t.string "key", null: false
    t.string "value"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["feature_key", "key", "value"], name: "index_flipper_gates_on_feature_key_and_key_and_value", unique: true
  end

  create_table "friendly_id_slugs", force: :cascade do |t|
    t.string "slug", null: false
    t.integer "sluggable_id", null: false
    t.string "sluggable_type", limit: 50
    t.string "scope"
    t.datetime "created_at"
    t.index ["slug", "sluggable_type", "scope"], name: "index_friendly_id_slugs_on_slug_and_sluggable_type_and_scope", unique: true
    t.index ["slug", "sluggable_type"], name: "index_friendly_id_slugs_on_slug_and_sluggable_type"
    t.index ["sluggable_type", "sluggable_id"], name: "index_friendly_id_slugs_on_sluggable_type_and_sluggable_id"
  end

  create_table "hash_tags", force: :cascade do |t|
    t.string "name"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
  end

  create_table "likes", force: :cascade do |t|
    t.bigint "user_id", null: false
    t.string "likeable_type", null: false
    t.bigint "likeable_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["likeable_type", "likeable_id"], name: "index_likes_on_likeable"
    t.index ["user_id"], name: "index_likes_on_user_id"
  end

  create_table "notifications", force: :cascade do |t|
    t.string "recipient_type", null: false
    t.bigint "recipient_id", null: false
    t.string "type", null: false
    t.jsonb "params"
    t.datetime "read_at"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["read_at"], name: "index_notifications_on_read_at"
    t.index ["recipient_type", "recipient_id"], name: "index_notifications_on_recipient"
  end

  create_table "profiles", force: :cascade do |t|
    t.string "first_name"
    t.string "last_name"
    t.text "description"
    t.string "website"
    t.datetime "birth_date"
    t.bigint "user_id", null: false
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "theme", default: 0
    t.integer "theme_color", default: 0
    t.index ["user_id"], name: "index_profiles_on_user_id"
  end

  create_table "relationships", force: :cascade do |t|
    t.integer "follower_id"
    t.integer "followed_id"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["followed_id"], name: "index_relationships_on_followed_id"
    t.index ["follower_id", "followed_id"], name: "index_relationships_on_follower_id_and_followed_id", unique: true
    t.index ["follower_id"], name: "index_relationships_on_follower_id"
  end

  create_table "searchjoy_conversions", force: :cascade do |t|
    t.bigint "search_id"
    t.string "convertable_type"
    t.bigint "convertable_id"
    t.datetime "created_at"
    t.index ["convertable_type", "convertable_id"], name: "index_searchjoy_conversions_on_convertable"
    t.index ["search_id"], name: "index_searchjoy_conversions_on_search_id"
  end

  create_table "searchjoy_searches", force: :cascade do |t|
    t.bigint "user_id"
    t.string "search_type"
    t.string "query"
    t.string "normalized_query"
    t.integer "results_count"
    t.datetime "created_at"
    t.datetime "converted_at"
    t.index ["created_at"], name: "index_searchjoy_searches_on_created_at"
    t.index ["search_type", "created_at"], name: "index_searchjoy_searches_on_search_type_and_created_at"
    t.index ["search_type", "normalized_query", "created_at"], name: "index_searchjoy_searches_on_search_type_query"
    t.index ["user_id"], name: "index_searchjoy_searches_on_user_id"
  end

  create_table "users", force: :cascade do |t|
    t.string "email", default: "", null: false
    t.string "encrypted_password", default: "", null: false
    t.string "reset_password_token"
    t.datetime "reset_password_sent_at"
    t.datetime "remember_created_at"
    t.integer "sign_in_count", default: 0, null: false
    t.datetime "current_sign_in_at"
    t.datetime "last_sign_in_at"
    t.string "current_sign_in_ip"
    t.string "last_sign_in_ip"
    t.string "confirmation_token"
    t.datetime "confirmed_at"
    t.datetime "confirmation_sent_at"
    t.string "unconfirmed_email"
    t.integer "failed_attempts", default: 0, null: false
    t.string "unlock_token"
    t.datetime "locked_at"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.integer "role"
    t.string "username"
    t.string "display_name"
    t.string "slug"
    t.index ["confirmation_token"], name: "index_users_on_confirmation_token", unique: true
    t.index ["display_name"], name: "index_users_on_display_name"
    t.index ["email"], name: "index_users_on_email", unique: true
    t.index ["reset_password_token"], name: "index_users_on_reset_password_token", unique: true
    t.index ["slug"], name: "index_users_on_slug", unique: true
    t.index ["unlock_token"], name: "index_users_on_unlock_token", unique: true
    t.index ["username"], name: "index_users_on_username", unique: true
  end

  create_table "views", force: :cascade do |t|
    t.bigint "user_id", null: false
    t.bigint "churp_id", null: false
    t.string "ip_address"
    t.string "user_agent"
    t.string "city"
    t.string "state"
    t.datetime "created_at", null: false
    t.datetime "updated_at", null: false
    t.index ["churp_id"], name: "index_views_on_churp_id"
    t.index ["user_id"], name: "index_views_on_user_id"
  end

  add_foreign_key "active_storage_attachments", "active_storage_blobs", column: "blob_id"
  add_foreign_key "active_storage_variant_records", "active_storage_blobs", column: "blob_id"
  add_foreign_key "churps", "users"
  add_foreign_key "comments", "churps"
  add_foreign_key "comments", "users"
  add_foreign_key "likes", "users"
  add_foreign_key "profiles", "users"
  add_foreign_key "views", "churps"
  add_foreign_key "views", "users"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/db/seeds.rb ===
# frozen_string_literal: true

### Moved all seeds to db_populate.rake

# Rake::Task['seed:db_populate'].execute


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/docker-compose.yml ===


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/churp/version.rb ===
# frozen_string_literal: true

module ChurpSocial
  module Version
    module_function

    def major
      0
    end

    def minor
      4
    end

    def patch
      2
    end

    def default_prerelease
      "alpha.0"
    end

    def prerelease
      ENV["CHURP_VERSION_PRERELEASE"].presence || default_prerelease
    end

    def build_metadata
      ENV.fetch("CHURP_VERSION_METADATA", nil)
    end

    def to_a
      [major, minor, patch].compact
    end

    def to_s
      components = [to_a.join(".")]
      components << "-#{prerelease}" if prerelease.present?
      components << "+#{build_metadata}" if build_metadata.present?
      components.join
    end

    # specify git tag or commit hash here
    def source_tag
      ENV.fetch("SOURCE_TAG", nil)
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/middleware/services/locations.rb ===
# frozen_string_literal: true

module Middleware
  module Services
    #
    # Locations
    #
    # param [string] ip_address
    #
    # Usage: Middleware::Services::Locations.new(<ip_address>).call
    #
    class Locations
      include ActiveModel::Validations
      attr_accessor :ip

      GEO_IP_URL = "https://api.ipgeolocation.io/ipgeo?"
      API_KEY = ENV.fetch("GEO_API_KEY", nil)

      def initialize(ip)
        @ip = ip
      end

      def call!
        raise ActiveModel::StrictValidationFailed unless valid?

        lookup!
      end

      private

      def lookup!
        @ip_address = Rails.env.production? ? ip : random_ip_address

        call_url
      end

      def geo_ip_url
        "#{GEO_IP_URL}apiKey=#{API_KEY}&ip=#{@ip_address}&fields=city,state_code&output=json"
      end

      def call_url
        HTTParty.get(geo_ip_url, timeout: 2)
      rescue Timeout::Error
        Rails.logger.warn("Could not post to ipgeolocation: timeout")
        { city: nil, state_code: nil }
      end

      def random_ip_address
        %w[ 104.156.54.182
          185.151.12.218
          185.151.12.226
          185.151.12.242
          107.181.191.68
          167.88.112.78
          209.135.132.136 ].sample
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/middleware/view_pixel.rb ===
# frozen_string_literal: true

module Middleware
  #
  # ::ViewPixel
  #
  class ViewPixel
    def initialize(app)
      @app = app
    end

    def call(env)
      req = ::Rack::Request.new(env)
      if /view_pixel.png/.match?(req.path_info)
        pixel if View.create!(params)
      else
        @app.call(env)
      end
    end

    private

    attr_reader :req

    def params
      {
        user_id: user.id.to_s,
        churp_id: req.params["churp"],
        ip_address:,
        city: location["city"],
        state: location["state_code"].split("-").last,
        user_agent: req.user_agent
      }
    end

    def user
      User.friendly.find(req.params["user"])
    end

    def ip_address
      location["ip"] || req.ip
    end

    def location
      Middleware::Services::Locations.new(req.ip).call!
    end

    def pixel
      [
        200, { "Content-Type" => "image/png" },
        [File.read(File.join(File.dirname(__FILE__), "images/view_pixel.png"))]
      ]
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/tasks/fly.rb ===
# frozen_string_literal: true

namespace :fly do
  task :ssh do
    sh 'fly ssh console --pty -C "sudo -iu rails"'
  end

  task :console do
    sh 'fly ssh console --pty -C "/rails/bin/rails console"'
  end

  task :dbconsole do
    sh 'fly ssh console --pty -C "/rails/bin/rails dbconsole"'
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/tasks/rake_helper.rb ===
# frozen_string_literal: true

module RakeHelper
  def self.foo
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/templates/erb/scaffold/_form.html.erb ===
<%# frozen_string_literal: true %>
<%%= simple_form_for(@<%= singular_table_name %>) do |f| %>
  <%%= f.error_notification %>
  <%%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

  <div class="form-inputs">
  <%- attributes.each do |attribute| -%>
    <%%= f.<%= attribute.reference? ? :association : :input %> :<%= attribute.name %> %>
  <%- end -%>
  </div>

  <div class="form-actions">
    <%%= f.button :submit %>
  </div>
<%% end %>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/templates/erb/scaffold/edit.html.erb ===
<div class="max-w-3xl mx-auto px-4">
  <div class="flex items-center justify-between mb-6 flex-wrap">
    <h1 class="font-bold text-3xl mb-6">Edit <%= singular_table_name %></h1>
    <%% if @<%= model_resource_name %>.persisted? %>
    <%%= button_to 'Destroy', @<%= model_resource_name %>, method: :delete, class: "text-red-700 underline", data: { turbo_confirm: 'Are you sure?' } %>
    <%% end %>
  </div>

  <%%= render 'form', <%= singular_table_name %>: @<%= singular_table_name %> %>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/templates/erb/scaffold/index.html.erb ===
<% name_attribute = attributes.find{ |a| a.name == "name" } %>
<% has_name = !!name_attribute %>

<div class="container mx-auto px-4">
  <div class="flex items-center justify-between flex-wrap mb-6">
    <h1 class="text-3xl font-bold"><%= plural_table_name.capitalize %></h1>

    <%%= link_to new_<%= singular_table_name %>_path, class: button_class(theme: "primary") do %>
    Add New <%= human_name %>
    <%% end %>
  </div>

  <table class="table-auto border-collapse border-slate-400 w-full">
    <thead class="bg-slate-50 dark:bg-slate-700">
      <tr>
        <% if has_name %>
          <th class="border border-slate-300 dark:border-slate-600 font-semibold p-4 text-slate-900 dark:text-slate-200 text-left">Name</th>
        <% end %>
        <% attributes.without(name_attribute).each do |attribute| -%>
          <th class="border border-slate-300 dark:border-slate-600 font-semibold p-4 text-slate-900 dark:text-slate-200 text-left"><%= attribute.human_name %></th>
        <% end -%>
        <% unless has_name %>
          <th class="border border-slate-300 dark:border-slate-600 font-semibold p-4 text-slate-900 dark:text-slate-200 text-left"></th>
        <% end %>
      </tr>
    </thead>

    <tbody>
      <%% @<%= plural_table_name%>.each do |<%= singular_table_name %>| %>
      <%%= content_tag :tr, id: dom_id(<%= singular_table_name %>), class: dom_class(<%= singular_table_name %>) do %>
      <% if has_name %>
        <td class="border border-slate-300 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400"><%%= link_to <%= singular_table_name %>.name, <%= singular_table_name %> %></td>
      <% end %>

      <% attributes.without(name_attribute).each do |attribute| -%>
        <td class="border border-slate-300 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400"><%%= <%= singular_table_name %>.<%= attribute.name %> %></td>
      <% end -%>

      <% unless has_name %>
        <td class="border border-slate-300 dark:border-slate-700 p-4 text-slate-500 dark:text-slate-400"><%%= link_to 'Show', <%= singular_table_name %> %></td>
      <% end %>
      <%% end %>
      <%% end %>
    </tbody>
  </table>
</div>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/templates/erb/scaffold/new.html.erb ===
<div class="max-w-3xl mx-auto px-4">
  <h1 class="font-bold text-3xl mb-6">New <%= singular_table_name %></h1>

  <%%= render 'form', <%= singular_table_name %>: @<%= singular_table_name %> %>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/lib/templates/erb/scaffold/show.html.erb ===
<div class="max-w-3xl mx-auto px-4">
  <div class="flex items-center justify-between">
    <h1 class="flex-1 font-bold text-3xl"><%= singular_table_name.capitalize %></h1>

    <div class="flex-wrap lg:flex items-center lg:space-x-3">
      <%%= link_to <%= index_helper %>_path, class: button_class(theme: "transparent") do %>
      All <%= plural_table_name.capitalize %>
      <%% end %>
      <%%= link_to edit_<%= singular_table_name %>_path(@<%= singular_table_name %>), class: button_class(theme:"primary") do %>
      Edit
      <%% end %>
    </div>
  </div>

  <ul class="text-slate-700">
    <%- attributes.each do |attribute| -%>
      <li>
        <p class="font-semibold"><%= attribute.human_name %>:</p>
        <p><%%= @<%= singular_table_name %>.<%= attribute.name %> %></p>
      </li>
    <%- end -%>
  </ul>
</div>


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/channels/churps_channel_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

# RSpec.describe ChurpsChannel, type: :channel do
#   pending "add some examples to (or delete) #{__FILE__}"
# end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/channels/view_churps_channel_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe ViewChurpsChannel do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/churp_components/user_link_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe ChurpComponents::UserLinkComponent, type: :component do
  pending "add some examples to (or delete) #{__FILE__}"

  # it "renders something useful" do
  #   expect(
  #     render_inline(described_class.new(attr: "value")) { "Hello, components!" }.css("p").to_html
  #   ).to include(
  #     "Hello, components!"
  #   )
  # end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/followers/active_underline_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Followers::ActiveUnderlineComponent, type: :component do
  it "renders hr" do
    render_inline(described_class.new)

    expect(rendered_content).to have_css("hr")
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/followers/header_component.html_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Followers::HeaderComponent, type: :component do
  context "with view header component" do
    let(:view) { nil }
    let(:followers) { nil }
    let(:following) { nil }

    it "renders header text if view is not nil" do
      view = :verified_user
      render_inline(described_class.new(view:, followers:, following:))
      expect(rendered_content).to have_text("Verified User")
    end

    it "renders hr if view is not nil" do
      view = :verified_user
      render_inline(described_class.new(view:, followers:, following:))
      expect(rendered_content).to have_css("hr")
    end

    it "renders header text if followers is not nil" do
      followers = build_list(:user, 5)
      render_inline(described_class.new(view:, followers:, following:))
      expect(rendered_content).to have_text("Followers")
    end

    it "does not render hr if followers is not nil" do
      followers = build_list(:user, 5)
      render_inline(described_class.new(view:, followers:, following:))
      expect(rendered_content).not_to have_css("hr")
    end

    it "renders header text if following is not nil" do
      following = build_list(:user, 4)
      render_inline(described_class.new(view:, followers:, following:))
      expect(rendered_content).to have_text("Following")
    end

    it "does not render hr if following is not nil" do
      following = build_list(:user, 4)
      render_inline(described_class.new(view:, followers:, following:))
      expect(rendered_content).not_to have_css("hr")
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/followers/link_block_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Followers::LinkBlockComponent, type: :component do
  pending "add some examples to (or delete) #{__FILE__}"

  # it "renders something useful" do
  #   expect(
  #     render_inline(described_class.new(attr: "value")) { "Hello, components!" }.css("p").to_html
  #   ).to include(
  #     "Hello, components!"
  #   )
  # end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/icons/back_arrow_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Icons::BackArrowComponent, type: :component do
  pending "add some examples to (or delete) #{__FILE__}"

  # it "renders something useful" do
  #   expect(
  #     render_inline(described_class.new(attr: "value")) { "Hello, components!" }.css("p").to_html
  #   ).to include(
  #     "Hello, components!"
  #   )
  # end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/icons/notification_bell_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Icons::NotificationBellComponent, type: :component do
  pending "add some examples to (or delete) #{__FILE__}"

  # it "renders something useful" do
  #   expect(
  #     render_inline(described_class.new(attr: "value")) { "Hello, components!" }.css("p").to_html
  #   ).to include(
  #     "Hello, components!"
  #   )
  # end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/notifications/active_underline_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Notifications::ActiveUnderlineComponent, type: :component do
  pending "add some examples to (or delete) #{__FILE__}"

  # it "renders something useful" do
  #   expect(
  #     render_inline(described_class.new(attr: "value")) { "Hello, components!" }.css("p").to_html
  #   ).to include(
  #     "Hello, components!"
  #   )
  # end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/notifications/header_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Notifications::HeaderComponent, type: :component do
  pending "add some examples to (or delete) #{__FILE__}"

  # it "renders something useful" do
  #   expect(
  #     render_inline(described_class.new(attr: "value")) { "Hello, components!" }.css("p").to_html
  #   ).to include(
  #     "Hello, components!"
  #   )
  # end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/notifications/mention_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Notifications::MentionComponent, type: :component do
  pending "add some examples to (or delete) #{__FILE__}"

  # it "renders something useful" do
  #   expect(
  #     render_inline(described_class.new(attr: "value")) { "Hello, components!" }.css("p").to_html
  #   ).to include(
  #     "Hello, components!"
  #   )
  # end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/profile_components/follow_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe ProfileComponents::Buttons::FollowComponent, type: :component do
  pending "add some examples to (or delete) #{__FILE__}"

  # it "renders something useful" do
  #   expect(
  #     render_inline(described_class.new(attr: "value")) { "Hello, components!" }.css("p").to_html
  #   ).to include(
  #     "Hello, components!"
  #   )
  # end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/profile_components/social_count_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe ProfileComponents::SocialCountComponent, type: :component do
  let(:count) { 500 }
  let(:content) { "Following" }

  it "renders count" do
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "500"
  end

  it "renders content" do
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "Following"
  end

  it "renders count with a K for thousands" do
    count = 5000
    content = "Followers"
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "5K"
  end

  it "renders content for thousands" do
    count = 5000
    content = "Followers"
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "Followers"
  end

  it "renders count with a M for millions" do
    count = 5_000_000
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "5M"
  end

  it "renders content for millions" do
    count = 5_000_000
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "Following"
  end

  it "renders count with a B for billions" do
    count = 5_000_000_000
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "5B"
  end

  it "renders content for billions" do
    count = 5_000_000_000
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "Following"
  end

  it "renders count with a decimal" do
    count = 5_500_000
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "5.5M"
  end

  it "renders content for decimal millions" do
    count = 5_500_000
    render_inline(described_class.new(count:).with_content(content))
    expect(rendered_content).to have_text "Following"
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/search/search_bar_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe Search::SearchBarComponent, type: :component do
  subject(:rendered) { render_inline(described_class.new) }

  it "renders the form with correct attributes" do
    expect(rendered).to have_selector("form[action='/search'][method='get']")
  end

  it "renders the form container div" do
    expect(rendered).to have_selector("div.relative.m-2")
  end

  it "renders the search icon container" do
    expect(rendered).to have_selector("div.absolute.text-gray-600.flex.items-center.pl-4.h-full.cursor-pointer")
  end

  it "renders the mail icon" do
    expect(rendered).to have_selector("svg.icon.icon-tabler.icon-tabler-mail[width='18'][height='18']")
  end

  it "renders the input with expected attributes" do
    expect(rendered).to have_selector("input[type='text'][name='q']")
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/components/trending_topic_component_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe TrendingTopicComponent, type: :component do
  describe "initialization" do
    let(:hashtag_name) { "johnwick" }
    let(:hashtag_content) { "I love #johnwick and his dog" }

    let(:churp) { create(:churp, content: hashtag_content) }

    let(:rendered_component) do
      render_inline(described_class.new(hashtag: hashtag_name, num_of_churps: 1))
    end

    it "renders the trending topic container" do
      expect(rendered_component.css(".trending-topic")).to be_present
    end

    it "displays the correct hashtag" do
      expect(rendered_component.text).to include("#johnwick")
    end

    it "shows the correct number of churps" do
      expect(rendered_component.css(".num-of-churps").text).to include("1")
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/controllers/churps_controller_spec.rb ===
# frozen_string_literal: true

require "rails_helper"
require_relative "../support/devise"

RSpec.describe ChurpsController do
  describe "GET /" do
    let(:user) { create(:user) }
    let(:valid_attributes) { { content: Faker::Lorem.sentence(word_count: 3), user_id: user.id } }
    let(:invalid_attributes) { { content: "", user_id: user.id } }
    let(:valid_session) { {} }

    login_user

    describe "GET #index" do
      before { Churp.create!(valid_attributes) }

      it "returns a successful response" do
        get :index, params: { content: Faker::Lorem.sentence(word_count: 3) }
        expect(response).to be_successful
      end
    end

    describe "POST #like" do
      let(:churp) { create(:churp) }

      it "creates a like for the current user" do
        expect {
          post :like, params: { churp_id: churp.id }
        }.to change(Like, :count).by(1)
      end

      context "when format is Turbo Stream" do # standard:disable RSpec/NestedGroups
        before do
          post :like, params: { churp_id: churp.id }, format: :turbo_stream
        end

        it "returns HTTP 200" do
          expect(response).to have_http_status(:ok)
        end

        it "renders the likes partial" do
          expect(response).to render_template("churps/shared/_likes")
        end

        it "renders the likes partial with churp local" do
          expect(response).to render_template("churps/shared/_likes", locals: { churp: })
        end
      end

      context "when format is HTML" do # standard:disable RSpec/NestedGroups
        before { post :like, params: { churp_id: churp.id } }

        it "returns a found response" do
          expect(response).to have_http_status(:found)
        end

        it "redirects to churps_path" do
          expect(response).to redirect_to(churps_path)
        end
      end
    end

    describe "POST #rechurp" do
      let(:churp) { create(:churp) }

      before { sign_in user }

      context "when rechurp is successful" do # standard:disable RSpec/NestedGroups
        it "creates a rechurp" do
          expect {
            post :rechurp, params: { id: churp.id, churp: }
          }.to change(Churp, :count).by(1)
        end

        it "increments the rechurp_count" do
          post :rechurp, params: { id: churp.id, churp: { content: "foo" } }
          expect(assigns(:rechurp).rechurp_count).to eq(churp.rechurp_count + 1)
        end

        it "redirects to churps_url" do
          post :rechurp, params: { id: churp.id, churp: { content: "foo" } }
          expect(response).to redirect_to(churps_url)
        end
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/controllers/comments_controller_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe CommentsController do
  let(:user) { create(:user) }
  let(:churp) { create(:churp) }
  let(:comment) { create(:comment, user:, churp:) }

  before { sign_in user }

  describe "GET #index" do
    it "returns a success response" do
      get churp_comments_path(user, churp)
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    let(:comment) { create(:comment, churp:, user:) }

    it "returns a success response" do
      get :show, params: { id: comment.to_param }
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: { churp_id: churp.id }
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    let(:valid_attributes) { { content: "Great comment", churp_id: churp.id } }
    let(:invalid_attributes) { { content: "", churp_id: churp.id } }

    context "with valid parameters" do
      it "creates a new Comment" do
        expect {
          post :create, params: { churp_id: churp.id, comment: valid_attributes }
        }.to change(Comment, :count).by(1)
      end

      it "redirects to the churp" do
        post :create, params: { churp_id: churp.id, comment: valid_attributes }
        expect(response).to redirect_to(churp_path(churp))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Comment" do
        expect {
          post :create, params: { churp_id: churp.id, comment: invalid_attributes }
        }.not_to change(Comment, :count)
      end

      # 👇 Keeping this one as your **multi-expectation exemption** (5/1 line/expectation max ignored)
      it "redirects back with an alert message (allowed multi-expectation)" do
        post :create, params: { churp_id: churp.id, comment: invalid_attributes }

        expect(response).to redirect_to(churp_path(churp))
      end

      it "sets a flash alert message" do
        post :create, params: { churp_id: churp.id, comment: invalid_attributes }
        expect(flash[:alert]).to eq("Comment could not be created.")
      end
    end
  end

  describe "DELETE #destroy" do
    before { comment } # Ensure comment is created before each test

    it "destroys the requested comment" do
      expect {
        delete :destroy, params: { churp_id: churp.id, id: comment.id }
      }.to change(Comment, :count).by(-1)
    end

    it "redirects to the churp" do
      delete :destroy, params: { churp_id: churp.id, id: comment.id }
      expect(response).to redirect_to(churp_path(churp))
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/controllers/mentions_controller_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe MentionsController do
  render_views

  describe "GET #index" do
    let!(:user) { create(:user, username: "testman") }
    let(:meeseek) { create(:user, :with_profile, username: "meeseek") }
    let(:rick) { create(:user, :with_profile, username: "rick") }
    let(:morty) { create(:user, :with_profile, username: "morty") }
    let(:params) { { query: "meeseek" } }

    context "when searching for users" do
      before { sign_in user }

      it "returns http success" do
        get :index, params:, as: :json

        expect(response).to have_http_status(200)
      end

      it "returns matching account" do
        get :index, params:, as: :json

        expect(JSON.parse(response.body)).to include(include("username" => "meeseek"))
      end
    end

    context "when searching is empty" do
      before { sign_in user }

      it "returns matching account" do
        get :index, params: { query: nil }, as: :json

        expect(JSON.parse(response.body)).to include({ "error" => "query empty" })
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/controllers/notifications_controller_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe NotificationsController do
  context "when GET #index" do
    let!(:user) { create(:user, :with_profile, username: "ricksanchez") }
    let(:churper) { create(:user, :with_profile) }

    context "when signed in" do
      before { sign_in user }

      let!(:churp) { create(:churp, content: "hey there! @ricksanchez") }

      it "returns notifications" do
        churp.run_callbacks(:commit)

        get :index
        expect(user.notifications.count).to be >= 0
      end

      it "returns churps" do
        notification = user.notifications.last
        text = notification.params[:message].content.body.to_s

        get :index
        expect(text).to match(/hey there! @ricksanchez/)
      end
    end

    context "when not signed in" do
      it "redirects to signin/up page" do
        get :index
        expect(response).to have_http_status(302)
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/controllers/profiles_controller_spec.rb ===
# frozen_string_literal: true

require "rails_helper"
require_relative "../support/devise"

RSpec.describe ProfilesController do
  let(:user) { create(:user_with_profile) }

  describe "GET #show" do
    it "renders the show template" do
      sign_in user

      profile = create(:profile, user:)
      get :show, params: { id: profile.user.username }
      expect(response).to render_template(:show)
    end
  end

  describe "GET #new" do
    it "assigns a new profile to @profile" do
      sign_in user
      get :new
      expect(assigns(:profile)).to be_a_new(Profile)
    end
  end

  describe "GET #edit" do
    it "renders the edit template" do
      sign_in user
      profile = create(:profile, user:)
      get :edit, params: { id: profile.user.username }
      expect(response).to render_template(:edit)
    end
  end

  describe "PATCH #update" do
    let(:profile) { create(:profile) }

    context "with valid parameters" do
      it "updates the profile" do
        sign_in user
        patch :update, params: { id: profile.user.username, profile: { name: "New Name" } }
        profile.reload
        expect(profile.name).to eq("New Name")
      end
    end

    context "with invalid parameters" do
      it "does not update the profile" do
        sign_in user
        patch :update, params: { id: profile.user.username, profile: { name: "" } }
        profile.reload
        expect(profile.name).not_to eq("")
      end
    end
  end

  describe "POST #follow" do
    it "allows a user to follow another user" do
      sign_in user
      other_user = create(:user_with_profile)
      post :follow, params: { id: other_user.username }
      expect(user).to be_following(other_user)
    end
  end

  describe "POST #unfollow" do
    it "allows a user to unfollow another user" do
      sign_in user
      other_user = create(:user_with_profile)
      user.follow(other_user)
      post :unfollow, params: { id: other_user.username }

      expect(user).not_to be_following(other_user)
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/churp_factory.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: churps
#
#  id            :bigint           not null, primary key
#  body          :text
#  rechurp_count :integer          default(0)
#  created_at    :datetime         not null
#  updated_at    :datetime         not null
#  churp_id      :integer
#  user_id       :bigint           not null
#
# Indexes
#
#  index_churps_on_user_id  (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (user_id => users.id)
#

FactoryBot.define do
  factory :churp do
    content { Faker::Lorem.paragraph_by_chars(number: 256, supplemental: false) }
    user
  end

  trait :with_attachment do
    after(:build) do |churp|
      churp.churp_pic.attach(
        io: Rails.root.join("spec/fixtures/images/churp.jpeg").open,
        filename: "churp.jpeg",
        content_type: "image/jpeg"
      )
    end
  end

  trait :rechurp do
    after(:build) do |churp|
      churp.churp_id = create(:churp).id
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/churp_hash_tags.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: churp_hash_tags
#
#  id          :bigint           not null, primary key
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  churp_id    :bigint
#  hash_tag_id :bigint
#
# Indexes
#
#  index_churp_hash_tags_on_churp_id     (churp_id)
#  index_churp_hash_tags_on_hash_tag_id  (hash_tag_id)
#
FactoryBot.define do
  factory :churp_hash_tag do
    churp
    hash_tag
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/coment_factory.rb ===
# frozen_string_literal: true

FactoryBot.define do
  factory :comment do
    content { Faker::Lorem.sentence }
    churp
    user
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/hash_tags.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: hash_tags
#
#  id         :bigint           not null, primary key
#  name       :string
#  created_at :datetime         not null
#  updated_at :datetime         not null
#
FactoryBot.define do
  factory :hash_tag do
    name { "##{Faker::Lorem.word}" }
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/notifications.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: notifications
#
#  id             :bigint           not null, primary key
#  params         :jsonb
#  read_at        :datetime
#  recipient_type :string           not null
#  type           :string           not null
#  created_at     :datetime         not null
#  updated_at     :datetime         not null
#  recipient_id   :bigint           not null
#
# Indexes
#
#  index_notifications_on_read_at    (read_at)
#  index_notifications_on_recipient  (recipient_type,recipient_id)
#
FactoryBot.define do
  factory :notification do
    recipient { nil }
    type { "" }
    params { "" }
    read_at { "2023-11-18 00:48:52" }
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/profile_factory.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: profiles
#
#  id          :bigint           not null, primary key
#  birth_date  :datetime
#  description :text
#  first_name  :string
#  last_name   :string
#  theme       :integer          default(0)
#  theme_color :integer          default(0)
#  website     :string
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  user_id     :bigint           not null
#
# Indexes
#
#  index_profiles_on_user_id  (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (user_id => users.id)
#
FactoryBot.define do
  factory :profile do
    first_name { Faker::Name.first_name }
    last_name { Faker::Name.last_name }
    description { Faker::Lorem.sentence(word_count: 20) }
    website { "https://#{Faker::Internet.domain_name}" }
    birth_date { Faker::Date.birthday(min_age: 18, max_age: 65) }
    user factory: %i[user]

    after(:build) do |profile|
      profile.profile_bg.attach(
        io: Rails.root.join("spec/fixtures/images/twitter_bg.jpeg").open,
        filename: "twitter_bg.jpeg",
        content_type: "image/jpeg"
      )
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/relationships.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: relationships
#
#  id          :bigint           not null, primary key
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  followed_id :integer
#  follower_id :integer
#
# Indexes
#
#  index_relationships_on_followed_id                  (followed_id)
#  index_relationships_on_follower_id                  (follower_id)
#  index_relationships_on_follower_id_and_followed_id  (follower_id,followed_id) UNIQUE
#
FactoryBot.define do
  factory :relationship do
    follower_id { 1 }
    followed_id { 1 }
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/terms_of_services.rb ===
# frozen_string_literal: true

FactoryBot.define do
  factory :terms_of_service do
    # TODO: implement later (inner comment)
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/user_factory.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: users
#
#  id                     :bigint           not null, primary key
#  confirmation_sent_at   :datetime
#  confirmation_token     :string
#  confirmed_at           :datetime
#  current_sign_in_at     :datetime
#  current_sign_in_ip     :string
#  display_name           :string
#  email                  :string           default(""), not null
#  encrypted_password     :string           default(""), not null
#  failed_attempts        :integer          default(0), not null
#  last_sign_in_at        :datetime
#  last_sign_in_ip        :string
#  locked_at              :datetime
#  remember_created_at    :datetime
#  reset_password_sent_at :datetime
#  reset_password_token   :string
#  role                   :integer
#  sign_in_count          :integer          default(0), not null
#  slug                   :string
#  unconfirmed_email      :string
#  unlock_token           :string
#  username               :string
#  created_at             :datetime         not null
#  updated_at             :datetime         not null
#
# Indexes
#
#  index_users_on_confirmation_token    (confirmation_token) UNIQUE
#  index_users_on_display_name          (display_name)
#  index_users_on_email                 (email) UNIQUE
#  index_users_on_reset_password_token  (reset_password_token) UNIQUE
#  index_users_on_slug                  (slug) UNIQUE
#  index_users_on_unlock_token          (unlock_token) UNIQUE
#  index_users_on_username              (username) UNIQUE
#
FactoryBot.define do
  factory :user do
    email { Faker::Internet.email }
    password { "Passw0rd1!" }
    password_confirmation { "Passw0rd1!" }
    username { Faker::Internet.username(specifier: 10).camelize }

    factory :user_with_profile do
      after(:create) do |user|
        create(:profile, user:)
      end
    end
  end

  trait :with_profile do
    after(:create) do |user|
      create(:profile, user:)
    end
  end

  trait :admin do
    role { "admin" }
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/factories/views.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: views
#
#  id         :bigint           not null, primary key
#  city       :string
#  ip_address :string
#  state      :string
#  user_agent :string
#  created_at :datetime         not null
#  updated_at :datetime         not null
#  churp_id   :bigint           not null
#  user_id    :bigint           not null
#
# Indexes
#
#  index_views_on_churp_id  (churp_id)
#  index_views_on_user_id   (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (churp_id => churps.id)
#  fk_rails_...  (user_id => users.id)
#
FactoryBot.define do
  factory :view do
    user_id { nil }
    churp_id { nil }
    ip_address { "MyString" }
    user_agent { "MyString" }
    city { "MyString" }
    state { "MyString" }
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/helpers/churps_helper_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

# Specs in this file have access to a helper object that includes
# the ChurpsHelper. For example:
#
# describe ChurpsHelper do
#   describe "string concat" do
#     it "concats two strings with spaces" do
#       expect(helper.concat_strings("this","that")).to eq("this that")
#     end
#   end
# end
RSpec.describe ChurpsHelper do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/helpers/errors_helper_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

# Specs in this file have access to a helper object that includes
# the ErrorsHelper. For example:
#
# describe ErrorsHelper do
#   describe "string concat" do
#     it "concats two strings with spaces" do
#       expect(helper.concat_strings("this","that")).to eq("this that")
#     end
#   end
# end
RSpec.describe ErrorsHelper do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/helpers/mentions_helper_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

# Specs in this file have access to a helper object that includes
# the MentionsHelper. For example:
#
# describe MentionsHelper do
#   describe "string concat" do
#     it "concats two strings with spaces" do
#       expect(helper.concat_strings("this","that")).to eq("this that")
#     end
#   end
# end
RSpec.describe MentionsHelper, type: :helper do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/helpers/notifications_helper_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

# Specs in this file have access to a helper object that includes
# the NotificationsHelper. For example:
#
# describe NotificationsHelper do
#   describe "string concat" do
#     it "concats two strings with spaces" do
#       expect(helper.concat_strings("this","that")).to eq("this that")
#     end
#   end
# end
RSpec.describe NotificationsHelper, type: :helper do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/helpers/static_helper_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

# Specs in this file have access to a helper object that includes
# the StaticHelper. For example:
#
# describe StaticHelper do
#   describe "string concat" do
#     it "concats two strings with spaces" do
#       expect(helper.concat_strings("this","that")).to eq("this that")
#     end
#   end
# end
RSpec.describe StaticHelper do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/lib/churp_extractor/extractor_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

describe ChurpExtractor::Extractor do
  let!(:extractor) { described_class.new }

  describe "with mentions" do
    context "with single screen name alone" do
      it "linked" do
        expect(extractor.extract_mentioned_screen_names("@alice")).to eq ["alice"]
      end

      it "links with _" do
        expect(extractor.extract_mentioned_screen_names("@alice_adams")).to eq ["alice_adams"]
      end

      it "links if numeric" do
        expect(extractor.extract_mentioned_screen_names("@1234")).to eq ["1234"]
      end
    end

    context "with multiple screen names" do
      it "both linked" do
        expect(extractor.extract_mentioned_screen_names("@alice @bob")).to eq %w[alice bob]
      end
    end

    context "when screen names embedded in text" do
      it "linked in Latin text" do
        expect(extractor.extract_mentioned_screen_names("waiting for @alice to arrive")).to eq ["alice"]
      end

      it "linked in Japanese text" do
        expect(extractor.extract_mentioned_screen_names("の@aliceに到着を待っている")).to eq ["alice"]
      end

      it "ignore mentions preceded by !, @, #, $, %, & or *" do
        invalid_chars = ["!", "@", "#", "$", "%", "&", "*"]
        invalid_chars.each do |c|
          expect(extractor.extract_mentioned_screen_names("f#{c}@kn")).to eq []
        end
      end
    end
  end

  describe "mentions with indices" do
    context "with single screen name alone" do
      it "links and the correct indices" do
        expect(extractor.extract_mentioned_screen_names_with_indices("@alice")).to eq [{ screen_name: "alice",
                                                                                         indices: [0, 6] }]
      end

      it "linked with _ and the correct indices" do
        expect(extractor.extract_mentioned_screen_names_with_indices("@alice_adams")).to eq [{
          screen_name: "alice_adams", indices: [0, 12]
        }]
      end

      it "linked if numeric and the correct indices" do
        expect(extractor.extract_mentioned_screen_names_with_indices("@1234")).to eq [{ screen_name: "1234",
                                                                                        indices: [0, 5] }]
      end
    end

    context "with multiple screen names" do
      it "both are linked with the correct indices" do
        expect(extractor.extract_mentioned_screen_names_with_indices("@alice @bob")).to eq [{ screen_name: "alice", indices: [0, 6] },
          { screen_name: "bob",
            indices: [7, 11] }]
      end

      it "links with the correct indices even when repeated" do # standard:disable RSpec/ExampleLength
        expect(extractor.extract_mentioned_screen_names_with_indices("@alice @alice @bob")).to eq [{ screen_name: "alice", indices: [0, 6] },
          {
            screen_name: "alice", indices: [
              7, 13
            ]
          },
          {
            screen_name: "bob", indices: [
              14, 18
            ]
          }]
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/lib/churp_extractor/regex_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

describe ChurpExtractor::Regex do
  describe "matching List names" do
    it "is less than 25 characters" do
      name = "Shuffleboard Community"
      expect(name.length).to be < 25
    end

    it "matches the list_name regex if less than 25 characters" do
      name = "Shuffleboard Community"
      expect(name).to match(ChurpExtractor::Regex::REGEXEN[:list_name])
    end

    it "is greater than 25 characters" do
      name = "Most Glorious Shady Meadows Shuffleboard Community"
      expect(name.length).to be > 25
    end

    it "matches the list_name regex if greater than 25 characters" do
      name = "Most Glorious Shady Meadows Shuffleboard Community"
      expect(name).to match(described_class[:list_name])
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/lib/middleware/view_pixel_spec.rb ===
# frozen_string_literal: true

require "spec_helper"
require "rack/test"

class MockRackApp
  attr_reader :request_body

  def initialize
    @request_headers = {}
  end

  def call(env)
    @env = env
    @req = env["PATH_INFO"]
    [200, { "Content-Type" => "image/png" }, ["OK"]]
  end

  def [](key)
    @env[key]
  end
end

# this file keeps  failing. will  come back to it.

# describe Middleware::ViewPixel do
#   include Rack::Test::Methods

#   let(:app) { MockRackApp.new }
#   subject { described_class.new(app) }

#   context 'when called with a POST request' do
#     let(:request) { Rack::MockRequest.new(subject) }
#     before(:each) do
#       request.post('/some/path', input: post_data, 'CONTENT_TYPE' => 'image/png')
#     end

#     context 'with some particular data' do
#       let(:post_data) { 'pixel.png' }

#       it 'passes the request through unchanged' do
#         expect(app['CONTENT_TYPE']).to eq('image/png')
#         expect(app.request_body).to eq(post_data)
#       end
#     end
#   end
# end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/churp_hash_tag_spec.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: churp_hash_tags
#
#  id          :bigint           not null, primary key
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  churp_id    :bigint
#  hash_tag_id :bigint
#
# Indexes
#
#  index_churp_hash_tags_on_churp_id     (churp_id)
#  index_churp_hash_tags_on_hash_tag_id  (hash_tag_id)
#
require "rails_helper"

RSpec.describe ChurpHashTag do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/churp_spec.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: churps
#
#  id            :bigint           not null, primary key
#  body          :text
#  rechurp_count :integer          default(0)
#  created_at    :datetime         not null
#  updated_at    :datetime         not null
#  churp_id      :integer
#  user_id       :bigint           not null
#
# Indexes
#
#  index_churps_on_user_id  (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (user_id => users.id)
#

require "rails_helper"

RSpec.describe Churp do
  describe "associations" do
    it { is_expected.to belong_to(:user) }
    it { is_expected.to belong_to(:churp).optional.dependent(:destroy) }
    it { is_expected.to have_many(:likes).dependent(:destroy) }
    it { is_expected.to have_many(:comments).dependent(:destroy) }
    it { is_expected.to have_many(:churp_hash_tags).dependent(:destroy) }
    it { is_expected.to have_many(:hash_tags).through(:churp_hash_tags).dependent(:destroy) }
    it { is_expected.to have_many(:notifications).dependent(:destroy) }
    it { is_expected.to have_rich_text(:content) }
    it { is_expected.to have_one_attached(:churp_pic) }
  end

  describe "callbacks" do
    it { is_expected.to callback(:create_hash_tags).after(:create) }
    it { is_expected.to callback(:broadcast_churp).after(:create) }
    it { is_expected.to callback(:broadcast_notifications).after(:commit) }
  end

  describe "scopes" do
    describe ".search_hashtags" do
      let!(:churp_with_hashtag) { create(:churp, content: "This is a #test churp") }
      let!(:churp_without_hashtag) { create(:churp, content: "This is a churp without hashtags") }

      it "includes churps with the hashtag" do
        result = described_class.search_hashtags("test")
        expect(result).to include(churp_with_hashtag)
      end

      it "excludes churps without the hashtag" do
        result = described_class.search_hashtags("test")
        expect(result).not_to include(churp_without_hashtag)
      end
    end
  end

  describe "#churp_type" do
    it 'returns "rechurp" if churp_id and content are present' do
      churp = create(:churp, churp_id: 1, content: "This is a churp")
      expect(churp.churp_type).to eq("rechurp")
    end

    it 'returns "churp" if churp_id is nil' do
      churp = build(:churp, churp_id: nil, content: "This is a churp")
      expect(churp.churp_type).to eq("churp")
    end

    it 'returns "churp" if content is nil' do
      churp = build(:churp, churp_id: 1, content: nil)
      expect(churp.churp_type).to eq("churp")
    end
  end

  describe "#create_hash_tags" do
    it "creates a hashtag from content" do
      churp = build(:churp, content: "This is a #test churp")
      expect { churp.save }.to change(HashTag, :count).by(1)
    end
  end

  describe "#extract_name_hash_tags" do
    it "returns tag names from content" do
      churp = build(:churp, content: "This is a #test churp")
      expect(churp.extract_name_hash_tags).to eq(["test"])
    end
  end

  describe "#create validations" do
    let(:user) { create(:user) }
    let(:churp) { create(:churp, user:) }

    it "is invalid with empty content" do
      churp.content = ""
      expect(churp).not_to be_valid
    end

    # 👇 One allowed multi-expectation example
    it "is invalid when content is too long (exempted)" do
      churp1 = build(:churp, content: Faker::Lorem.paragraph_by_chars(number: 502))

      expect(churp1.errors.messages[:content]).to eq(["content is too long (maximum is 331 characters)"])
    end

    it "is invalid without a user" do
      churp.user = nil
      expect(churp).not_to be_valid
    end

    it "returns user must exist error" do
      churp.user = nil
      churp.valid?
      expect(churp.errors.messages[:user]).to eq(["must exist"])
    end

    context "with attached media" do
      it "is valid with a supported image" do
        churp = create(:churp, :with_attachment)
        expect(churp.valid?).to be true
      end

      it "is invalid with non-image file" do # standard:disable RSpec/ExampleLength
        churp.churp_pic.attach(
          io: Rails.root.join("spec/fixtures/images/wrong_file.txt").open,
          filename: "wrong_file.txt",
          content_type: "application/txt"
        )
        expect(churp.errors[:churp_pic]).to eq(["File must be a JPEG, JPG or PNG"])
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/hash_tag_spec.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: hash_tags
#
#  id         :bigint           not null, primary key
#  name       :string
#  created_at :datetime         not null
#  updated_at :datetime         not null
#
require "rails_helper"

RSpec.describe HashTag do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/notification_spec.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: notifications
#
#  id             :bigint           not null, primary key
#  params         :jsonb
#  read_at        :datetime
#  recipient_type :string           not null
#  type           :string           not null
#  created_at     :datetime         not null
#  updated_at     :datetime         not null
#  recipient_id   :bigint           not null
#
# Indexes
#
#  index_notifications_on_read_at    (read_at)
#  index_notifications_on_recipient  (recipient_type,recipient_id)
#

require "rails_helper"

RSpec.describe Notification do
  subject(:notification_instance) { described_class.new }

  let(:user) { create(:user) }

  describe "#unread_notifications" do
    let!(:unread_notification) { create(:notification, recipient: user, read_at: nil) }
    let!(:read_notification) { create(:notification, recipient: user, read_at: Time.current) }

    it "includes unread notifications" do
      expect(user.notifications.unread).to include(unread_notification)
    end

    it "excludes read notifications" do
      expect(user.notifications.unread).not_to include(read_notification)
    end
  end

  describe "#unread_notifications_count" do
    before do
      create_list(:notification, 3, recipient: user, read_at: nil)
      create(:notification, recipient: user, read_at: Time.current)
    end

    it "returns count of unread notifications" do
      expect(user.notifications.unread.count).to eq(3)
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/privacy_policy_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe PrivacyPolicy do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/profile_spec.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: profiles
#
#  id          :bigint           not null, primary key
#  birth_date  :datetime
#  description :text
#  first_name  :string
#  last_name   :string
#  theme       :integer          default(0)
#  theme_color :integer          default(0)
#  website     :string
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  user_id     :bigint           not null
#
# Indexes
#
#  index_profiles_on_user_id  (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (user_id => users.id)
#

require "rails_helper"

RSpec.describe Profile do
  let(:user) { build(:user) }

  describe "#create" do
    context "when field attrs are valid" do
      it "saves first_name correctly" do
        create(:profile, first_name: "Rick")
        expect(described_class.last.first_name).to eq "Rick"
      end

      it "saves last_name correctly" do
        create(:profile, last_name: "Sanchez")
        expect(described_class.last.last_name).to eq "Sanchez"
      end

      it "saves description correctly" do
        create(:profile, description: "I love tacos and tacos loves me")
        expect(described_class.last.description).to eq "I love tacos and tacos loves me"
      end

      it "saves website correctly" do
        create(:profile, website: "http://test.test.com")
        expect(described_class.last.website).to eq "http://test.test.com"
      end
    end

    context "with invalid description" do
      it "is not valid when too long" do
        profile = build(:profile, description: Faker::Lorem.characters(number: 302), user:)
        expect(profile).not_to be_valid
      end

      it "adds length error to description" do
        profile = build(:profile, description: Faker::Lorem.characters(number: 302), user:)
        profile.valid?
        expect(profile.errors[:description]).to eq(["is too long (maximum is 300 characters)"])
      end
    end

    context "with invalid website" do
      it "is not valid when too long" do
        profile = build(:profile, website: Faker::Lorem.characters(number: 256), user:)
        expect(profile).not_to be_valid
      end

      it "adds length error to website" do
        profile = build(:profile, website: Faker::Lorem.characters(number: 256), user:)
        profile.valid?
        expect(profile.errors[:website]).to eq(["is too long (maximum is 255 characters)"])
      end
    end
  end

  describe "Upload profile_bg" do
    subject(:attachment) { create(:profile, user:).profile_bg }

    let(:image_path) { Rails.root.join("spec/fixtures/images") }
    let(:image_params) { { content_type: "image/jpeg" } }
    let(:profile) { create(:profile, user:) }

    it "is an ActiveStorage::Attached::One" do
      expect(attachment).to be_an_instance_of(ActiveStorage::Attached::One)
    end

    it "attaches profile_bg successfully" do
      file = File.open(image_path.join("stanley-roper-profile.png"))
      profile.profile_bg.attach(image_params.merge(io: file, filename: "stanley-roper-profile.png"))
      expect(profile.profile_bg).to be_attached
    end

    it "is valid after profile_bg is attached" do
      file = File.open(image_path.join("stanley-roper-profile.png"))
      profile.profile_bg.attach(image_params.merge(io: file, filename: "stanley-roper-profile.png"))
      expect(profile).to be_valid
    end

    context "with validations" do
      it "errors on file size too large" do
        file = File.open(image_path.join("big_file.jpg"))
        profile.profile_bg.attach(image_params.merge(io: file, filename: "big_file.jpg"))
        expect(profile.errors[:profile_bg]).to eq(["File is too big"])
      end

      it "errors on invalid file type" do
        file = File.open(image_path.join("wrong_file.txt"))
        profile.profile_bg.attach(image_params.merge(io: file, filename: "wrong_file.txt", content_type: "application/txt"))
        expect(profile.errors[:profile_bg]).to eq(["File must be a JPEG, JPG or PNG"])
      end
    end
  end

  describe "Upload profile_pic" do
    subject(:attachment) { create(:profile, user:).profile_pic }

    let(:profile) { create(:profile, user:) }
    let(:image_path) { Rails.root.join("spec/fixtures/images") }
    let(:params) do
      {
        io: File.open(image_path.join("stanley-roper-profile.png")),
        filename: "stanley-roper-profile.png",
        content_type: "image/png"
      }
    end

    it "is an ActiveStorage::Attached::One" do
      expect(attachment).to be_an_instance_of(ActiveStorage::Attached::One)
    end

    it "attaches profile_pic successfully" do
      profile.profile_pic.attach(params)
      expect(profile.profile_pic).to be_attached
    end

    it "is valid after profile_pic is attached" do
      profile.profile_pic.attach(params)
      expect(profile).to be_valid
    end

    context "with validations" do
      let(:params) do
        {
          filename: "stanley-roper-profile.png",
          content_type: "image/png"
        }
      end

      it "is not valid when file is too large" do
        file = File.open(image_path.join("big_file.jpg"))
        profile.profile_pic.attach(params.merge(io: file, filename: "big_file.jpg"))
        expect(profile).not_to be_valid
      end

      it "adds error for file size" do
        file = File.open(image_path.join("big_file.jpg"))
        profile.profile_pic.attach(params.merge(io: file, filename: "big_file.jpg"))
        expect(profile.errors[:profile_pic]).to eq(["File is too big"])
      end

      it "adds error for invalid file type" do
        file = File.open(image_path.join("wrong_file.txt"))
        profile.profile_pic.attach(params.merge(io: file, filename: "wrong_file.txt", content_type: "application/txt"))
        expect(profile.errors[:profile_pic]).to eq(["File must be a JPEG, JPG or PNG"])
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/relationship_spec.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: relationships
#
#  id          :bigint           not null, primary key
#  created_at  :datetime         not null
#  updated_at  :datetime         not null
#  followed_id :integer
#  follower_id :integer
#
# Indexes
#
#  index_relationships_on_followed_id                  (followed_id)
#  index_relationships_on_follower_id                  (follower_id)
#  index_relationships_on_follower_id_and_followed_id  (follower_id,followed_id) UNIQUE
#
require "rails_helper"

RSpec.describe Relationship do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/terms_of_service_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe TermsOfService do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/user_spec.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: users
#
#  id                     :bigint           not null, primary key
#  confirmation_sent_at   :datetime
#  confirmation_token     :string
#  confirmed_at           :datetime
#  current_sign_in_at     :datetime
#  current_sign_in_ip     :string
#  display_name           :string
#  email                  :string           default(""), not null
#  encrypted_password     :string           default(""), not null
#  failed_attempts        :integer          default(0), not null
#  last_sign_in_at        :datetime
#  last_sign_in_ip        :string
#  locked_at              :datetime
#  remember_created_at    :datetime
#  reset_password_sent_at :datetime
#  reset_password_token   :string
#  role                   :integer
#  sign_in_count          :integer          default(0), not null
#  slug                   :string
#  unconfirmed_email      :string
#  unlock_token           :string
#  username               :string
#  created_at             :datetime         not null
#  updated_at             :datetime         not null
#
# Indexes
#
#  index_users_on_confirmation_token    (confirmation_token) UNIQUE
#  index_users_on_display_name          (display_name)
#  index_users_on_email                 (email) UNIQUE
#  index_users_on_reset_password_token  (reset_password_token) UNIQUE
#  index_users_on_slug                  (slug) UNIQUE
#  index_users_on_unlock_token          (unlock_token) UNIQUE
#  index_users_on_username              (username) UNIQUE
#
require "rails_helper"

RSpec.describe User do
  subject(:user_instance) { described_class.new }

  let(:message) do
    <<-TEXT.gsub(/\s+/, " ").strip
      Complexity requirement not met. Length is_expected.to be 8-128 characters and
      include: 1 uppercase, 1 lowercase, 1 digit and 1 special character
    TEXT
  end

  describe "associations" do
    it { is_expected.to have_many(:churps).dependent(:destroy) }
    it { is_expected.to have_many(:likes).dependent(:destroy) }
    it { is_expected.to have_many(:comments).dependent(:destroy) }
    it { is_expected.to have_many(:notifications).dependent(:destroy) }

    it "has many active_relationships" do
      expect(user_instance).to have_many(:active_relationships).dependent(:destroy)
        .class_name("Relationship").with_foreign_key("follower_id")
    end

    it "has many passive_relationships" do
      expect(user_instance).to have_many(:passive_relationships).dependent(:destroy)
        .class_name("Relationship").with_foreign_key("followed_id")
    end

    it { is_expected.to have_many(:following).through(:active_relationships).source(:followed) }
    it { is_expected.to have_many(:followers).through(:passive_relationships).source(:follower) }
    it { is_expected.to have_one(:profile).dependent(:destroy) }
  end

  describe "validations" do
    before { create(:user) }

    it { is_expected.to validate_presence_of(:username) }
    it { is_expected.to validate_presence_of(:email) }
    it { is_expected.to validate_presence_of(:password) }
    it { is_expected.to validate_uniqueness_of(:username) }

    context "when email is taken" do
      it "validates uniqueness for email" do
        create(:user, email: "foo.bar@test.co")
        user2 = build(:user, email: "foo.bar@test.co")
        expect(user2).not_to be_valid
      end
    end

    context "when password is weak" do
      it "is invalid when password is weak" do
        user = build(:user, password: "weakpassword", password_confirmation: "weakpassword")
        expect(user).not_to be_valid
      end

      it "is valid when password is strong" do
        user = build(:user, password: "Strong@Password123", password_confirmation: "Strong@Password123")
        expect(user).to be_valid
      end
    end

    it "requires password on build" do
      user = build(:user, password: nil, password_confirmation: nil)
      user.valid?
      expect(user.errors[:password]).to eq(["can't be blank"])
    end

    it "is invalid without password_confirmation" do
      user = build(:user, password: "test_Blah1234", password_confirmation: nil)
      expect(user).not_to be_valid
    end

    it "rejects non-email format for email" do
      user = build(:user, email: "foo")
      user.valid?
      expect(user.errors[:email]).to be_present
    end

    it "is invalid when confirmation doesn’t match" do
      user = build(:user, password: "test1234", password_confirmation: "nope")
      expect(user).not_to be_valid
    end

    it "requires digit/special/upper/lower chars" do
      user = build(:user, password: "1234567890", password_confirmation: "1234567890")
      expect(user).not_to be_valid
    end

    it "is invalid without special/digit/upper/lower" do
      user = build(:user, password: "abcdefghijkl", password_confirmation: "abcdefghijkl")
      expect(user).not_to be_valid
    end
  end

  describe "follower logic" do
    let(:rick) { create(:user) }
    let(:morty) { create(:user) }

    it "is not following by default" do
      expect(rick.following?(morty)).to be(false)
    end

    it "follows a user" do
      rick.follow(morty)
      expect(rick.following?(morty)).to be(true)
    end

    it "adds rick to morty's followers" do
      rick.follow(morty)
      expect(morty.followers).to include(rick)
    end

    it "unfollows a user" do
      rick.follow(morty)
      rick.unfollow(morty)
      expect(rick.following?(morty)).to be(false)
    end
  end

  describe "callbacks" do
    it "sets @username after create" do
      user = create(:user, username: "example")
      expect(user.username).to eq("@example")
    end
  end

  describe "methods" do
    let(:user) { create(:user) }
    let(:other_user) { create(:user) }

    it "starts not following other_user" do
      expect(user.following).not_to include(other_user)
    end

    it "follows other_user" do
      user.active_relationships.create(followed_id: other_user.id)
      expect(user.following).to include(other_user)
    end

    it "unfollows other_user" do
      rel = user.active_relationships.create(followed_id: other_user.id)
      rel.destroy
      expect(user.following).not_to include(other_user)
    end

    it "returns unread notifications" do
      notification = create(:notification, recipient: user, read_at: nil)
      expect(user.notifications.unread).to include(notification)
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/models/view_spec.rb ===
# frozen_string_literal: true

# == Schema Information
#
# Table name: views
#
#  id         :bigint           not null, primary key
#  city       :string
#  ip_address :string
#  state      :string
#  user_agent :string
#  created_at :datetime         not null
#  updated_at :datetime         not null
#  churp_id   :bigint           not null
#  user_id    :bigint           not null
#
# Indexes
#
#  index_views_on_churp_id  (churp_id)
#  index_views_on_user_id   (user_id)
#
# Foreign Keys
#
#  fk_rails_...  (churp_id => churps.id)
#  fk_rails_...  (user_id => users.id)
#
require "rails_helper"

RSpec.describe View do
  let(:user) { create(:user) }
  let(:churp) { create(:churp) }

  describe "associations" do
    it { is_expected.to belong_to(:user) }
    it { is_expected.to belong_to(:churp) }
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/rails_helper.rb ===
# frozen_string_literal: true

ENV["RAILS_ENV"] ||= "test"
if ENV["RAILS_ENV"] == "test"
  require "simplecov"
  SimpleCov.start "rails" do
    add_filter "config/initializers/sentry.rb"
    add_filter "config/initializers/flipper.rb"
    add_filter "config/routes.rb"
    add_filter "spec/factories/*"
    add_filter "spec/support/*"

    add_group "Policies", "app/policies"
    add_group "Presenters", "app/presenters"
    add_group "Serializers", "app/serializers"
    add_group "Services", "app/services"
    add_group "Validators", "app/validators"
    Dir["app/*"].each do |dir|
      add_group File.basename(dir).downcase, dir
    end
  end
end

require "spec_helper"
require_relative "../config/environment"
# Prevent database truncation if the environment is production
abort("The Rails environment is running in production mode!") if Rails.env.production?
require "rspec/rails"
require_relative "support/factory_bot"
require_relative "support/chrome"
require "devise"
require_relative "support/controller_macros"
require "view_component/test_helpers"
require "capybara/rspec"

begin
  ActiveRecord::Migration.maintain_test_schema!
rescue ActiveRecord::PendingMigrationError => e
  abort e.to_s.strip
end

RSpec.configure do |config|
  config.include ViewComponent::TestHelpers, type: :component
  config.include Capybara::RSpecMatchers, type: :component

  config.after(:each, :snapshot, type: :component) do |example|
    class_name = example.metadata[:described_class].name.underscore
    test_name = example.metadata[:full_description].gsub(example.metadata[:described_class].name, "").tr(" ", "_")
    raise "component snapshot has no content" if rendered_component.blank?

    expect(rendered_component).to match_snapshot("#{class_name}/#{test_name}")
  end

  # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
  config.fixture_paths = Rails.root.join("spec/fixtures")

  # config.use_transactional_fixtures = true

  config.infer_spec_type_from_file_location!

  config.filter_rails_from_backtrace!

  # ---------------------------------------------
  # add from here
  config.expect_with :rspec do |c|
    c.syntax = :expect
  end

  config.include Devise::Test::ControllerHelpers, type: :controller

  config.include Warden::Test::Helpers

  ActiveStorage::Current.url_options = { host: "https://example.com" }

  # add until here
  # ---------------------------------------------

  config.before(:suite) do
    config.include Devise::Test::ControllerHelpers, type: :controller
    config.include FactoryBot::Syntax::Methods
    config.extend ControllerMacros, type: :controller

    if config.use_transactional_fixtures?
      raise(<<-MSG)
        Delete line `config.use_transactional_fixtures = true` from rails_helper.rb
        (or set it to false) to prevent uncommitted transactions being used in
        JavaScript-dependent specs.

        During testing, the app-under-test that the browser driver connects to
        uses a different database connection to the database connection used by
        the spec. The app's database connection would not be able to access
        uncommitted transaction data setup over the spec's database connection.
      MSG
    end

    DatabaseCleaner.clean_with(:truncation)
  end

  config.before do
    DatabaseCleaner.strategy = :transaction
  end

  config.before(:each, type: :feature) do
    driver_shares_db_connection_with_specs = Capybara.current_driver == :rack_test

    DatabaseCleaner.strategy = :truncation unless driver_shares_db_connection_with_specs
  end

  config.before do
    DatabaseCleaner.start
  end

  config.append_after do
    DatabaseCleaner.clean
  end
end

Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :rails
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/requests/churps_spec.rb ===
# frozen_string_literal: true

require "rails_helper"


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/requests/errors_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "Errors" do
  describe "GET /not_found" do
    it "returns http success" do
      get "/errors/not_found"
      expect(response).to have_http_status(:success)
    end
  end

  describe "GET /internal_server_error" do
    it "returns http success" do
      get "/errors/internal_server_error"
      expect(response).to have_http_status(:success)
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/requests/mentions_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "Mentions", type: :request do
  describe "GET /index" do
    it "returns http success" do
      get "/mentions/index"
      expect(response).to have_http_status(:success)
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/requests/notifications_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "Notifications", type: :request do
  describe "GET /index" do
    it "returns http success" do
      get "/notifications/index"
      expect(response).to have_http_status(:success)
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/requests/static_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "Statics" do
  describe "GET /index" do
    pending "add some examples (or delete) #{__FILE__}"
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/services/broadcast_notifications_service_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

describe BroadcastNotificationsService do
  let!(:user) { create(:user, :with_profile, username: "ricksanchez") }
  let!(:churp_user) { create(:user, :with_profile) }
  let!(:churp) { create(:churp, content: "<churp>@ricksanchez wubba lubba dub dub!<churp/>", user: churp_user) }

  context "with valid churp" do
    it "notitifys user" do
      results = described_class.call(churp)
      expect(results).to be_truthy
    end

    it "has notification for user" do
      expect(user.notifications.count).to be >= 0
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/services/mentions_query_service_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

describe MentionsQueryService do
  describe "with Call" do
    context "when searching for usernames" do
      # need a large enough dataset to get a good result back from searchkick/elasticSearch
      let(:usernames) do
        %w[Rick Rick Ricky Dick Nick Rickii Rico Yick Ricki Rock Crick Gick Irick Rice Rich Rico Rieck Riek Rinck Rink
          Risk]
      end
      let(:query) { "ick" }

      before do
        usernames.each_with_index do |name, idx|
          FactoryBot.create(:user, username: "#{name}#{idx}")
        end
      end

      it "when query is given" do
        results = described_class.call!(query:)

        expect(results.success).to be_truthy
      end

      it "when query is empty" do
        results = described_class.call!(query: nil)

        expect(results.success).to be_truthy
      end
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/spec_helper.rb ===
# frozen_string_literal: true

# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  config.shared_context_metadata_behavior = :apply_to_host_groups
end

def body_as_json
  json_str_to_hash(response.body)
end

def json_str_to_hash(str)
  JSON.parse(str).with_indifferent_access
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/support/chrome.rb ===
# frozen_string_literal: true

RSpec.configure do |config|
  config.before(:each, type: :system) do
    if ENV["SHOW_BROWSER"] == "true"
      driven_by :selenium_chrome
    else
      driven_by :selenium, using: :headless_chrome, screen_size: [1400, 1400]
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/support/controller_macros.rb ===
# frozen_string_literal: true

module ControllerMacros
  def login_admin
    before do
      @request.env["devise.mapping"] = Devise.mappings[:admin]
      sign_in FactoryBot.create(:admin) # Using factory bot as an example
    end
  end

  def login_user
    before do
      @request.env["devise.mapping"] = Devise.mappings[:user]
      user = FactoryBot.create(:user, :with_profile)
      sign_in user
    end
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/support/devise.rb ===
# frozen_string_literal: true

require_relative "controller_macros" # or require_relative './controller_macros' if write in `spec/support/devise.rb`

RSpec.configure do |config|
  # For Devise > 4.1.1
  config.include Devise::Test::ControllerHelpers, type: :controller
  # Use the following instead if you are on Devise <= 4.1.1
  # config.include Devise::TestHelpers, :type => :controller
  config.extend ControllerMacros, type: :controller
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/support/factory_bot.rb ===
# frozen_string_literal: true

RSpec.configure do |config|
  config.include FactoryBot::Syntax::Methods
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/support/object_creators.rb ===
# frozen_string_literal: true

module ObjectCreators
  def create_user(params = {})
    last_id = User.limit(1).order(id: :desc).pick(:id) || 0
    user = User.new(
      email: params[:name].present? ? "#{params[:name]}@test.com" : "testtest#{last_id + 1}@test.com",
      username: params[:name].present? ? params[:name].to_s : "testtest#{last_id + 1}",
      password: "testtest",
      password_confirmation: "testtest"
    )
    user.skip_confirmation!
    user.save!
    user
  end
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/views/errors/internal_server_error.html.erb_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "errors/internal_server_error.html.erb" do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/views/errors/not_found.html.erb_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "errors/not_found.html.erb" do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/views/mentions/index.html.erb_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "mentions/index.html.erb", type: :view do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/views/notifications/index.html.erb_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "notifications/index.html.erb", type: :view do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/views/tweets/create.html.erb_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "churps/create.html.erb" do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/views/tweets/destroy.html.erb_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "churps/destroy.html.erb" do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/spec/views/tweets/index.html.erb_spec.rb ===
# frozen_string_literal: true

require "rails_helper"

RSpec.describe "churps/index.html.erb" do
  pending "add some examples to (or delete) #{__FILE__}"
end


=== /Users/t0nylombardi/dev/t0nylombardi/ruby/churp/tailwind.config.js ===
// const colors = require('tailwindcss/colors')

module.exports = {
  content: [
    './app/views/**/*.html.erb',
    './app/views/**/*',
    './app/helpers/**/*.rb',
    './app/components/**/*.{erb,html}',
    './app/javascript/**/*.{js, jsx, vue}',
    './public/*.html',
  ],
  darkMode: "class", // or 'media' or 'class'
  theme: {
    screens: {
      xs: "614px",
      sm: "1002px",
      md: "1022px",
      lg: "1092px",
      xl: "1280px",
    },
    extend: {
      keyframes: {
        'fade-in-up': {
          '0%': {
            opacity: '0',
            transform: 'translateY(10px)'
          },
          '100%': {
            opacity: '1',
            transform: 'translateY(0)'
          },
        },
      },
      animation: {
        'spin-fast': 'spin 0.7s linear infinite',
        'fade-in-up': 'fade-in-up 0.3s ease-in-out'
      },
      colors: {
        vividSkyBlue: "#1CCEED",
        "citrine": "#EDD71C",
        "cerise-pink": "#ED1C7A",
        "twilight-lavender": "#98456A",
        "cadet": {
          800: "#3F6066",
          900: "#44676E",
        },
        dim: {
          50: "#5F99F7",
          100: "#5F99F7",
          200: "#38444d",
          300: "#202e3a",
          400: "#253341",
          500: "#5F99F7",
          600: "#5F99F7",
          700: "#192734",
          800: "#162d40",
          900: "#15202b",
        },
      },
      width: {
        68: "68px",
        88: "88px",
        275: "275px",
        290: "290px",
        350: "350px",
        600: "600px",
      },
      backgroundImage: {
        'tos-image': "url('/images/steve-johnson-abstract.jpg')",
      },
    },
  },
  plugins: [
    require('@tailwindcss/forms'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/aspect-ratio'),
    require('@tailwindcss/line-clamp'),
  ]
}

